
p2_vibrationsensor_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08009c78  08009c78  0000ac78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e74  08009e74  0000b128  2**0
                  CONTENTS
  4 .ARM          00000008  08009e74  08009e74  0000ae74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e7c  08009e7c  0000b128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e7c  08009e7c  0000ae7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e80  08009e80  0000ae80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000128  20000000  08009e84  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d34  20000128  08009fac  0000b128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e5c  08009fac  0000be5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d246  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044d7  00000000  00000000  0002839e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  0002c878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001485  00000000  00000000  0002e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5e3  00000000  00000000  0002f7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e884  00000000  00000000  00049d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2f06  00000000  00000000  0006860c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b512  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000774c  00000000  00000000  0010b558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00112ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000128 	.word	0x20000128
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c60 	.word	0x08009c60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000012c 	.word	0x2000012c
 80001dc:	08009c60 	.word	0x08009c60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800057e:	f008 f9ed 	bl	800895c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	461a      	mov	r2, r3
 800058a:	2120      	movs	r1, #32
 800058c:	2032      	movs	r0, #50	@ 0x32
 800058e:	f008 fa3d 	bl	8008a0c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8000592:	2300      	movs	r3, #0
 8000594:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	461a      	mov	r2, r3
 800059a:	2123      	movs	r1, #35	@ 0x23
 800059c:	2032      	movs	r0, #50	@ 0x32
 800059e:	f008 fa35 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80005c2:	f008 f9cb 	bl	800895c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 80005c6:	210f      	movs	r1, #15
 80005c8:	2032      	movs	r0, #50	@ 0x32
 80005ca:	f008 fa32 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80005d2:	79fb      	ldrb	r3, [r7, #7]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80005e2:	2124      	movs	r1, #36	@ 0x24
 80005e4:	2032      	movs	r0, #50	@ 0x32
 80005e6:	f008 fa24 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005f4:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	461a      	mov	r2, r3
 80005fa:	2124      	movs	r1, #36	@ 0x24
 80005fc:	2032      	movs	r0, #50	@ 0x32
 80005fe:	f008 fa05 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b084      	sub	sp, #16
 800060e:	af00      	add	r7, sp, #0
 8000610:	4603      	mov	r3, r0
 8000612:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000614:	2121      	movs	r1, #33	@ 0x21
 8000616:	2032      	movs	r0, #50	@ 0x32
 8000618:	f008 fa0b 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 800061c:	4603      	mov	r3, r0
 800061e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	f003 030c 	and.w	r3, r3, #12
 8000626:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000628:	7bfa      	ldrb	r2, [r7, #15]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4313      	orrs	r3, r2
 800062e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	461a      	mov	r2, r3
 8000634:	2121      	movs	r1, #33	@ 0x21
 8000636:	2032      	movs	r0, #50	@ 0x32
 8000638:	f008 f9e8 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800064e:	2121      	movs	r1, #33	@ 0x21
 8000650:	2032      	movs	r0, #50	@ 0x32
 8000652:	f008 f9ee 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	f023 0308 	bic.w	r3, r3, #8
 8000660:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000662:	7bfa      	ldrb	r2, [r7, #15]
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4313      	orrs	r3, r2
 8000668:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	461a      	mov	r2, r3
 800066e:	2121      	movs	r1, #33	@ 0x21
 8000670:	2032      	movs	r0, #50	@ 0x32
 8000672:	f008 f9cb 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b088      	sub	sp, #32
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000686:	2300      	movs	r3, #0
 8000688:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 800068e:	2301      	movs	r3, #1
 8000690:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8000692:	2123      	movs	r1, #35	@ 0x23
 8000694:	2032      	movs	r0, #50	@ 0x32
 8000696:	f008 f9cc 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 800069a:	4603      	mov	r3, r0
 800069c:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800069e:	2124      	movs	r1, #36	@ 0x24
 80006a0:	2032      	movs	r0, #50	@ 0x32
 80006a2:	f008 f9c6 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 80006aa:	2128      	movs	r1, #40	@ 0x28
 80006ac:	2032      	movs	r0, #50	@ 0x32
 80006ae:	f008 f9c0 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 80006b8:	2129      	movs	r1, #41	@ 0x29
 80006ba:	2032      	movs	r0, #50	@ 0x32
 80006bc:	f008 f9b9 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 80006c6:	212a      	movs	r1, #42	@ 0x2a
 80006c8:	2032      	movs	r0, #50	@ 0x32
 80006ca:	f008 f9b2 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 80006d4:	212b      	movs	r1, #43	@ 0x2b
 80006d6:	2032      	movs	r0, #50	@ 0x32
 80006d8:	f008 f9ab 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 80006dc:	4603      	mov	r3, r0
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 80006e2:	212c      	movs	r1, #44	@ 0x2c
 80006e4:	2032      	movs	r0, #50	@ 0x32
 80006e6:	f008 f9a4 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 80006f0:	212d      	movs	r1, #45	@ 0x2d
 80006f2:	2032      	movs	r0, #50	@ 0x32
 80006f4:	f008 f99d 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 80006f8:	4603      	mov	r3, r0
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 80006fe:	7d3b      	ldrb	r3, [r7, #20]
 8000700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000704:	2b00      	cmp	r3, #0
 8000706:	d123      	bne.n	8000750 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	77fb      	strb	r3, [r7, #31]
 800070c:	e01c      	b.n	8000748 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800070e:	7ffb      	ldrb	r3, [r7, #31]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	3301      	adds	r3, #1
 8000714:	3320      	adds	r3, #32
 8000716:	443b      	add	r3, r7
 8000718:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800071c:	b29b      	uxth	r3, r3
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	b29a      	uxth	r2, r3
 8000722:	7ffb      	ldrb	r3, [r7, #31]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	3320      	adds	r3, #32
 8000728:	443b      	add	r3, r7
 800072a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800072e:	b29b      	uxth	r3, r3
 8000730:	4413      	add	r3, r2
 8000732:	b29a      	uxth	r2, r3
 8000734:	7ffb      	ldrb	r3, [r7, #31]
 8000736:	b212      	sxth	r2, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	3320      	adds	r3, #32
 800073c:	443b      	add	r3, r7
 800073e:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000742:	7ffb      	ldrb	r3, [r7, #31]
 8000744:	3301      	adds	r3, #1
 8000746:	77fb      	strb	r3, [r7, #31]
 8000748:	7ffb      	ldrb	r3, [r7, #31]
 800074a:	2b02      	cmp	r3, #2
 800074c:	d9df      	bls.n	800070e <LSM303AGR_AccReadXYZ+0x90>
 800074e:	e022      	b.n	8000796 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000750:	2300      	movs	r3, #0
 8000752:	77fb      	strb	r3, [r7, #31]
 8000754:	e01c      	b.n	8000790 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000756:	7ffb      	ldrb	r3, [r7, #31]
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	3320      	adds	r3, #32
 800075c:	443b      	add	r3, r7
 800075e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000762:	b29b      	uxth	r3, r3
 8000764:	021b      	lsls	r3, r3, #8
 8000766:	b29a      	uxth	r2, r3
 8000768:	7ffb      	ldrb	r3, [r7, #31]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	3301      	adds	r3, #1
 800076e:	3320      	adds	r3, #32
 8000770:	443b      	add	r3, r7
 8000772:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000776:	b29b      	uxth	r3, r3
 8000778:	4413      	add	r3, r2
 800077a:	b29a      	uxth	r2, r3
 800077c:	7ffb      	ldrb	r3, [r7, #31]
 800077e:	b212      	sxth	r2, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	3320      	adds	r3, #32
 8000784:	443b      	add	r3, r7
 8000786:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800078a:	7ffb      	ldrb	r3, [r7, #31]
 800078c:	3301      	adds	r3, #1
 800078e:	77fb      	strb	r3, [r7, #31]
 8000790:	7ffb      	ldrb	r3, [r7, #31]
 8000792:	2b02      	cmp	r3, #2
 8000794:	d9df      	bls.n	8000756 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8000796:	7d3b      	ldrb	r3, [r7, #20]
 8000798:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800079c:	2b30      	cmp	r3, #48	@ 0x30
 800079e:	d013      	beq.n	80007c8 <LSM303AGR_AccReadXYZ+0x14a>
 80007a0:	2b30      	cmp	r3, #48	@ 0x30
 80007a2:	dc14      	bgt.n	80007ce <LSM303AGR_AccReadXYZ+0x150>
 80007a4:	2b20      	cmp	r3, #32
 80007a6:	d00c      	beq.n	80007c2 <LSM303AGR_AccReadXYZ+0x144>
 80007a8:	2b20      	cmp	r3, #32
 80007aa:	dc10      	bgt.n	80007ce <LSM303AGR_AccReadXYZ+0x150>
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <LSM303AGR_AccReadXYZ+0x138>
 80007b0:	2b10      	cmp	r3, #16
 80007b2:	d003      	beq.n	80007bc <LSM303AGR_AccReadXYZ+0x13e>
 80007b4:	e00b      	b.n	80007ce <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80007b6:	2301      	movs	r3, #1
 80007b8:	77bb      	strb	r3, [r7, #30]
    break;
 80007ba:	e008      	b.n	80007ce <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 80007bc:	2302      	movs	r3, #2
 80007be:	77bb      	strb	r3, [r7, #30]
    break;
 80007c0:	e005      	b.n	80007ce <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 80007c2:	2304      	movs	r3, #4
 80007c4:	77bb      	strb	r3, [r7, #30]
    break;
 80007c6:	e002      	b.n	80007ce <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 80007c8:	230c      	movs	r3, #12
 80007ca:	77bb      	strb	r3, [r7, #30]
    break;
 80007cc:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	77fb      	strb	r3, [r7, #31]
 80007d2:	e014      	b.n	80007fe <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80007d4:	7ffb      	ldrb	r3, [r7, #31]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	3320      	adds	r3, #32
 80007da:	443b      	add	r3, r7
 80007dc:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	7fbb      	ldrb	r3, [r7, #30]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	fb12 f303 	smulbb	r3, r2, r3
 80007ea:	b299      	uxth	r1, r3
 80007ec:	7ffb      	ldrb	r3, [r7, #31]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4413      	add	r3, r2
 80007f4:	b20a      	sxth	r2, r1
 80007f6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80007f8:	7ffb      	ldrb	r3, [r7, #31]
 80007fa:	3301      	adds	r3, #1
 80007fc:	77fb      	strb	r3, [r7, #31]
 80007fe:	7ffb      	ldrb	r3, [r7, #31]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d9e7      	bls.n	80007d4 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000818:	2300      	movs	r3, #0
 800081a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800081c:	2121      	movs	r1, #33	@ 0x21
 800081e:	2032      	movs	r0, #50	@ 0x32
 8000820:	f008 f907 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000824:	4603      	mov	r3, r0
 8000826:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	f023 0304 	bic.w	r3, r3, #4
 800082e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000830:	7bfa      	ldrb	r2, [r7, #15]
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4313      	orrs	r3, r2
 8000836:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	2121      	movs	r1, #33	@ 0x21
 800083e:	2032      	movs	r0, #50	@ 0x32
 8000840:	f008 f8e4 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800085a:	2122      	movs	r1, #34	@ 0x22
 800085c:	2032      	movs	r0, #50	@ 0x32
 800085e:	f008 f8e8 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000862:	4603      	mov	r3, r0
 8000864:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8000866:	7bfa      	ldrb	r2, [r7, #15]
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4313      	orrs	r3, r2
 800086c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	461a      	mov	r2, r3
 8000872:	2122      	movs	r1, #34	@ 0x22
 8000874:	2032      	movs	r0, #50	@ 0x32
 8000876:	f008 f8c9 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8000882:	b580      	push	{r7, lr}
 8000884:	b084      	sub	sp, #16
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800088c:	2300      	movs	r3, #0
 800088e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8000890:	2138      	movs	r1, #56	@ 0x38
 8000892:	2032      	movs	r0, #50	@ 0x32
 8000894:	f008 f8cd 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000898:	4603      	mov	r3, r0
 800089a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800089c:	7bfa      	ldrb	r2, [r7, #15]
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	461a      	mov	r2, r3
 80008a8:	2138      	movs	r1, #56	@ 0x38
 80008aa:	2032      	movs	r0, #50	@ 0x32
 80008ac:	f008 f8ae 	bl	8008a0c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80008b0:	230a      	movs	r3, #10
 80008b2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	461a      	mov	r2, r3
 80008b8:	213a      	movs	r1, #58	@ 0x3a
 80008ba:	2032      	movs	r0, #50	@ 0x32
 80008bc:	f008 f8a6 	bl	8008a0c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80008c0:	2305      	movs	r3, #5
 80008c2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	461a      	mov	r2, r3
 80008c8:	213b      	movs	r1, #59	@ 0x3b
 80008ca:	2032      	movs	r0, #50	@ 0x32
 80008cc:	f008 f89e 	bl	8008a0c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	461a      	mov	r2, r3
 80008d4:	213c      	movs	r1, #60	@ 0x3c
 80008d6:	2032      	movs	r0, #50	@ 0x32
 80008d8:	f008 f898 	bl	8008a0c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80008dc:	2332      	movs	r3, #50	@ 0x32
 80008de:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	461a      	mov	r2, r3
 80008e4:	213d      	movs	r1, #61	@ 0x3d
 80008e6:	2032      	movs	r0, #50	@ 0x32
 80008e8:	f008 f890 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80008f8:	f008 f858 	bl	80089ac <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 80008fc:	2080      	movs	r0, #128	@ 0x80
 80008fe:	f7ff ffa5 	bl	800084c <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8000902:	2004      	movs	r0, #4
 8000904:	f7ff ff83 	bl	800080e <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8000908:	2010      	movs	r0, #16
 800090a:	f7ff ffba 	bl	8000882 <LSM303AGR_AccClickITEnable>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}

08000912 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000920:	f008 f81c 	bl	800895c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	461a      	mov	r2, r3
 800092c:	2120      	movs	r1, #32
 800092e:	2032      	movs	r0, #50	@ 0x32
 8000930:	f008 f86c 	bl	8008a0c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct >> 8);
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	0a1b      	lsrs	r3, r3, #8
 8000938:	b29b      	uxth	r3, r3
 800093a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	461a      	mov	r2, r3
 8000940:	2123      	movs	r1, #35	@ 0x23
 8000942:	2032      	movs	r0, #50	@ 0x32
 8000944:	f008 f862 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000964:	2300      	movs	r3, #0
 8000966:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000968:	f007 fff8 	bl	800895c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800096c:	210f      	movs	r1, #15
 800096e:	2032      	movs	r0, #50	@ 0x32
 8000970:	f008 f85f 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000974:	4603      	mov	r3, r0
 8000976:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000978:	79fb      	ldrb	r3, [r7, #7]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000988:	2124      	movs	r1, #36	@ 0x24
 800098a:	2032      	movs	r0, #50	@ 0x32
 800098c:	f008 f851 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000990:	4603      	mov	r3, r0
 8000992:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800099a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	461a      	mov	r2, r3
 80009a0:	2124      	movs	r1, #36	@ 0x24
 80009a2:	2032      	movs	r0, #50	@ 0x32
 80009a4:	f008 f832 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80009ba:	2121      	movs	r1, #33	@ 0x21
 80009bc:	2032      	movs	r0, #50	@ 0x32
 80009be:	f008 f838 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 80009c2:	4603      	mov	r3, r0
 80009c4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	f003 030c 	and.w	r3, r3, #12
 80009cc:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80009ce:	7bfa      	ldrb	r2, [r7, #15]
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	461a      	mov	r2, r3
 80009da:	2121      	movs	r1, #33	@ 0x21
 80009dc:	2032      	movs	r0, #50	@ 0x32
 80009de:	f008 f815 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80009f4:	2121      	movs	r1, #33	@ 0x21
 80009f6:	2032      	movs	r0, #50	@ 0x32
 80009f8:	f008 f81b 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 80009fc:	4603      	mov	r3, r0
 80009fe:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	f023 0308 	bic.w	r3, r3, #8
 8000a06:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000a08:	7bfa      	ldrb	r2, [r7, #15]
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	461a      	mov	r2, r3
 8000a14:	2121      	movs	r1, #33	@ 0x21
 8000a16:	2032      	movs	r0, #50	@ 0x32
 8000a18:	f007 fff8 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000a34:	2301      	movs	r3, #1
 8000a36:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000a38:	2123      	movs	r1, #35	@ 0x23
 8000a3a:	2032      	movs	r0, #50	@ 0x32
 8000a3c:	f007 fff9 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000a40:	4603      	mov	r3, r0
 8000a42:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000a44:	2124      	movs	r1, #36	@ 0x24
 8000a46:	2032      	movs	r0, #50	@ 0x32
 8000a48:	f007 fff3 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8000a50:	2128      	movs	r1, #40	@ 0x28
 8000a52:	2032      	movs	r0, #50	@ 0x32
 8000a54:	f007 ffed 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000a5e:	2129      	movs	r1, #41	@ 0x29
 8000a60:	2032      	movs	r0, #50	@ 0x32
 8000a62:	f007 ffe6 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000a6c:	212a      	movs	r1, #42	@ 0x2a
 8000a6e:	2032      	movs	r0, #50	@ 0x32
 8000a70:	f007 ffdf 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000a7a:	212b      	movs	r1, #43	@ 0x2b
 8000a7c:	2032      	movs	r0, #50	@ 0x32
 8000a7e:	f007 ffd8 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b25b      	sxtb	r3, r3
 8000a86:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000a88:	212c      	movs	r1, #44	@ 0x2c
 8000a8a:	2032      	movs	r0, #50	@ 0x32
 8000a8c:	f007 ffd1 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000a90:	4603      	mov	r3, r0
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000a96:	212d      	movs	r1, #45	@ 0x2d
 8000a98:	2032      	movs	r0, #50	@ 0x32
 8000a9a:	f007 ffca 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8000aa4:	7d3b      	ldrb	r3, [r7, #20]
 8000aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d123      	bne.n	8000af6 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	77fb      	strb	r3, [r7, #31]
 8000ab2:	e01c      	b.n	8000aee <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000ab4:	7ffb      	ldrb	r3, [r7, #31]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	3301      	adds	r3, #1
 8000aba:	3320      	adds	r3, #32
 8000abc:	443b      	add	r3, r7
 8000abe:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	7ffb      	ldrb	r3, [r7, #31]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	3320      	adds	r3, #32
 8000ace:	443b      	add	r3, r7
 8000ad0:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	7ffb      	ldrb	r3, [r7, #31]
 8000adc:	b212      	sxth	r2, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	3320      	adds	r3, #32
 8000ae2:	443b      	add	r3, r7
 8000ae4:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000ae8:	7ffb      	ldrb	r3, [r7, #31]
 8000aea:	3301      	adds	r3, #1
 8000aec:	77fb      	strb	r3, [r7, #31]
 8000aee:	7ffb      	ldrb	r3, [r7, #31]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d9df      	bls.n	8000ab4 <LSM303DLHC_AccReadXYZ+0x90>
 8000af4:	e022      	b.n	8000b3c <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	77fb      	strb	r3, [r7, #31]
 8000afa:	e01c      	b.n	8000b36 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000afc:	7ffb      	ldrb	r3, [r7, #31]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	3320      	adds	r3, #32
 8000b02:	443b      	add	r3, r7
 8000b04:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	7ffb      	ldrb	r3, [r7, #31]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	3301      	adds	r3, #1
 8000b14:	3320      	adds	r3, #32
 8000b16:	443b      	add	r3, r7
 8000b18:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	4413      	add	r3, r2
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	7ffb      	ldrb	r3, [r7, #31]
 8000b24:	b212      	sxth	r2, r2
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	3320      	adds	r3, #32
 8000b2a:	443b      	add	r3, r7
 8000b2c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000b30:	7ffb      	ldrb	r3, [r7, #31]
 8000b32:	3301      	adds	r3, #1
 8000b34:	77fb      	strb	r3, [r7, #31]
 8000b36:	7ffb      	ldrb	r3, [r7, #31]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d9df      	bls.n	8000afc <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000b3c:	7d3b      	ldrb	r3, [r7, #20]
 8000b3e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000b42:	2b30      	cmp	r3, #48	@ 0x30
 8000b44:	d013      	beq.n	8000b6e <LSM303DLHC_AccReadXYZ+0x14a>
 8000b46:	2b30      	cmp	r3, #48	@ 0x30
 8000b48:	dc14      	bgt.n	8000b74 <LSM303DLHC_AccReadXYZ+0x150>
 8000b4a:	2b20      	cmp	r3, #32
 8000b4c:	d00c      	beq.n	8000b68 <LSM303DLHC_AccReadXYZ+0x144>
 8000b4e:	2b20      	cmp	r3, #32
 8000b50:	dc10      	bgt.n	8000b74 <LSM303DLHC_AccReadXYZ+0x150>
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <LSM303DLHC_AccReadXYZ+0x138>
 8000b56:	2b10      	cmp	r3, #16
 8000b58:	d003      	beq.n	8000b62 <LSM303DLHC_AccReadXYZ+0x13e>
 8000b5a:	e00b      	b.n	8000b74 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	77bb      	strb	r3, [r7, #30]
    break;
 8000b60:	e008      	b.n	8000b74 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8000b62:	2302      	movs	r3, #2
 8000b64:	77bb      	strb	r3, [r7, #30]
    break;
 8000b66:	e005      	b.n	8000b74 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	77bb      	strb	r3, [r7, #30]
    break;
 8000b6c:	e002      	b.n	8000b74 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8000b6e:	230c      	movs	r3, #12
 8000b70:	77bb      	strb	r3, [r7, #30]
    break;
 8000b72:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	77fb      	strb	r3, [r7, #31]
 8000b78:	e014      	b.n	8000ba4 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000b7a:	7ffb      	ldrb	r3, [r7, #31]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	3320      	adds	r3, #32
 8000b80:	443b      	add	r3, r7
 8000b82:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	7fbb      	ldrb	r3, [r7, #30]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	fb12 f303 	smulbb	r3, r2, r3
 8000b90:	b299      	uxth	r1, r3
 8000b92:	7ffb      	ldrb	r3, [r7, #31]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	b20a      	sxth	r2, r1
 8000b9c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000b9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	77fb      	strb	r3, [r7, #31]
 8000ba4:	7ffb      	ldrb	r3, [r7, #31]
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d9e7      	bls.n	8000b7a <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000bc2:	2121      	movs	r1, #33	@ 0x21
 8000bc4:	2032      	movs	r0, #50	@ 0x32
 8000bc6:	f007 ff34 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	f023 0304 	bic.w	r3, r3, #4
 8000bd4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000bd6:	7bfa      	ldrb	r2, [r7, #15]
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	461a      	mov	r2, r3
 8000be2:	2121      	movs	r1, #33	@ 0x21
 8000be4:	2032      	movs	r0, #50	@ 0x32
 8000be6:	f007 ff11 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b084      	sub	sp, #16
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8000c00:	2122      	movs	r1, #34	@ 0x22
 8000c02:	2032      	movs	r0, #50	@ 0x32
 8000c04:	f007 ff15 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	461a      	mov	r2, r3
 8000c18:	2122      	movs	r1, #34	@ 0x22
 8000c1a:	2032      	movs	r0, #50	@ 0x32
 8000c1c:	f007 fef6 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8000c36:	2138      	movs	r1, #56	@ 0x38
 8000c38:	2032      	movs	r0, #50	@ 0x32
 8000c3a:	f007 fefa 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000c42:	7bfa      	ldrb	r2, [r7, #15]
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	2138      	movs	r1, #56	@ 0x38
 8000c50:	2032      	movs	r0, #50	@ 0x32
 8000c52:	f007 fedb 	bl	8008a0c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000c56:	230a      	movs	r3, #10
 8000c58:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	213a      	movs	r1, #58	@ 0x3a
 8000c60:	2032      	movs	r0, #50	@ 0x32
 8000c62:	f007 fed3 	bl	8008a0c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000c66:	2305      	movs	r3, #5
 8000c68:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	213b      	movs	r1, #59	@ 0x3b
 8000c70:	2032      	movs	r0, #50	@ 0x32
 8000c72:	f007 fecb 	bl	8008a0c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	213c      	movs	r1, #60	@ 0x3c
 8000c7c:	2032      	movs	r0, #50	@ 0x32
 8000c7e:	f007 fec5 	bl	8008a0c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000c82:	2332      	movs	r3, #50	@ 0x32
 8000c84:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	213d      	movs	r1, #61	@ 0x3d
 8000c8c:	2032      	movs	r0, #50	@ 0x32
 8000c8e:	f007 febd 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000c9e:	f007 fe85 	bl	80089ac <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8000ca2:	2080      	movs	r0, #128	@ 0x80
 8000ca4:	f7ff ffa5 	bl	8000bf2 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8000ca8:	2004      	movs	r0, #4
 8000caa:	f7ff ff83 	bl	8000bb4 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8000cae:	2010      	movs	r0, #16
 8000cb0:	f7ff ffba 	bl	8000c28 <LSM303DLHC_AccClickITEnable>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	CoreDebug -> DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <configureTimerForRunTimeStats+0x2c>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <configureTimerForRunTimeStats+0x2c>)
 8000cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cc6:	60d3      	str	r3, [r2, #12]
	DWT -> CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <configureTimerForRunTimeStats+0x30>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a06      	ldr	r2, [pc, #24]	@ (8000ce8 <configureTimerForRunTimeStats+0x30>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6013      	str	r3, [r2, #0]
	DWT -> CYCCNT = 0; //Reloj de depuración, cuenta ciclos de reloj, empieza en 0;
 8000cd4:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <configureTimerForRunTimeStats+0x30>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]

}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000edf0 	.word	0xe000edf0
 8000ce8:	e0001000 	.word	0xe0001000

08000cec <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
return DWT -> CYCCNT;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <getRunTimeCounterValue+0x14>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e0001000 	.word	0xe0001000

08000d04 <fsm_new>:
#include <stdlib.h>
#include "fsm.h"

fsm_t*
fsm_new (fsm_trans_t* tt)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 8000d0c:	2008      	movs	r0, #8
 8000d0e:	f007 ffe9 	bl	8008ce4 <malloc>
 8000d12:	4603      	mov	r3, r0
 8000d14:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f000 f805 	bl	8000d28 <fsm_init>
  return this;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <fsm_init>:

void
fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	605a      	str	r2, [r3, #4]
  this->current_state = tt[0].orig_state;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	601a      	str	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d54:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d013      	beq.n	8000d8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d64:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000d6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d00b      	beq.n	8000d8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d74:	e000      	b.n	8000d78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f9      	beq.n	8000d76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d82:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <encender>:
	ACTIVO,
	INACTIVO,
};


static int encender(fsm_t* this){
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	return encendido;
 8000da4:	4b03      	ldr	r3, [pc, #12]	@ (8000db4 <encender+0x18>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	20000258 	.word	0x20000258

08000db8 <apagar>:

static int apagar(fsm_t* this){
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	return !encendido; //Si pongo a 0 la variable encendido en estado activo, paso a inactivo
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <apagar+0x24>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bf0c      	ite	eq
 8000dc8:	2301      	moveq	r3, #1
 8000dca:	2300      	movne	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000258 	.word	0x20000258

08000de0 <func_LED_Activo>:

void func_LED_Activo(fsm_t* this){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 8000de8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dec:	4803      	ldr	r0, [pc, #12]	@ (8000dfc <func_LED_Activo+0x1c>)
 8000dee:	f001 fb80 	bl	80024f2 <HAL_GPIO_TogglePin>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40020c00 	.word	0x40020c00

08000e00 <func_LED_Inactivo>:

void func_LED_Inactivo(fsm_t* this){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e0e:	4803      	ldr	r0, [pc, #12]	@ (8000e1c <func_LED_Inactivo+0x1c>)
 8000e10:	f001 fb56 	bl	80024c0 <HAL_GPIO_WritePin>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40020c00 	.word	0x40020c00

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e24:	f000 ffc0 	bl	8001da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e28:	f000 f89a 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2c:	f000 f9e6 	bl	80011fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e30:	f000 f900 	bl	8001034 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e34:	f000 f92c 	bl	8001090 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000e38:	f000 f960 	bl	80010fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8000e3c:	f007 fe0c 	bl	8008a58 <BSP_ACCELERO_Init>
  LSM303AGR_MagInit();
 8000e40:	f007 fef8 	bl	8008c34 <LSM303AGR_MagInit>
  TIM4 -> CCR1 = 0; //Registro CCR para el canal 1: led verde
 8000e44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <main+0xd4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM4 -> CCR3 = 0; //Registro CCR para el canal 3: led rojo
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <main+0xd4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e50:	2100      	movs	r1, #0
 8000e52:	4829      	ldr	r0, [pc, #164]	@ (8000ef8 <main+0xd8>)
 8000e54:	f003 fa40 	bl	80042d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000e58:	2108      	movs	r1, #8
 8000e5a:	4827      	ldr	r0, [pc, #156]	@ (8000ef8 <main+0xd8>)
 8000e5c:	f003 fa3c 	bl	80042d8 <HAL_TIM_PWM_Start>

  LEDazul = fsm_new(ledfsm);
 8000e60:	4826      	ldr	r0, [pc, #152]	@ (8000efc <main+0xdc>)
 8000e62:	f7ff ff4f 	bl	8000d04 <fsm_new>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a25      	ldr	r2, [pc, #148]	@ (8000f00 <main+0xe0>)
 8000e6a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e6c:	f004 f924 	bl	80050b8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutexi2c1 */
  mutexi2c1Handle = osMutexNew(&mutexi2c1_attributes);
 8000e70:	4824      	ldr	r0, [pc, #144]	@ (8000f04 <main+0xe4>)
 8000e72:	f004 fa18 	bl	80052a6 <osMutexNew>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4a23      	ldr	r2, [pc, #140]	@ (8000f08 <main+0xe8>)
 8000e7a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of exti_sem */
  exti_semHandle = osSemaphoreNew(1, 1, &exti_sem_attributes);
 8000e7c:	4a23      	ldr	r2, [pc, #140]	@ (8000f0c <main+0xec>)
 8000e7e:	2101      	movs	r1, #1
 8000e80:	2001      	movs	r0, #1
 8000e82:	f004 fb1e 	bl	80054c2 <osSemaphoreNew>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a21      	ldr	r2, [pc, #132]	@ (8000f10 <main+0xf0>)
 8000e8a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e8c:	4a21      	ldr	r2, [pc, #132]	@ (8000f14 <main+0xf4>)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4821      	ldr	r0, [pc, #132]	@ (8000f18 <main+0xf8>)
 8000e92:	f004 f95b 	bl	800514c <osThreadNew>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a20      	ldr	r2, [pc, #128]	@ (8000f1c <main+0xfc>)
 8000e9a:	6013      	str	r3, [r2, #0]

  /* creation of task_BlinkBlue */
  task_BlinkBlueHandle = osThreadNew(tk_BlinkBlue, NULL, &task_BlinkBlue_attributes);
 8000e9c:	4a20      	ldr	r2, [pc, #128]	@ (8000f20 <main+0x100>)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4820      	ldr	r0, [pc, #128]	@ (8000f24 <main+0x104>)
 8000ea2:	f004 f953 	bl	800514c <osThreadNew>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <main+0x108>)
 8000eaa:	6013      	str	r3, [r2, #0]

  /* creation of task_ReadAccel */
  task_ReadAccelHandle = osThreadNew(tk_ReadAccel, NULL, &task_ReadAccel_attributes);
 8000eac:	4a1f      	ldr	r2, [pc, #124]	@ (8000f2c <main+0x10c>)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	481f      	ldr	r0, [pc, #124]	@ (8000f30 <main+0x110>)
 8000eb2:	f004 f94b 	bl	800514c <osThreadNew>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f34 <main+0x114>)
 8000eba:	6013      	str	r3, [r2, #0]

  /* creation of task_WriteGreen */
  task_WriteGreenHandle = osThreadNew(tk_WriteLED, (void*) &data_green, &task_WriteGreen_attributes);
 8000ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8000f38 <main+0x118>)
 8000ebe:	491f      	ldr	r1, [pc, #124]	@ (8000f3c <main+0x11c>)
 8000ec0:	481f      	ldr	r0, [pc, #124]	@ (8000f40 <main+0x120>)
 8000ec2:	f004 f943 	bl	800514c <osThreadNew>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f44 <main+0x124>)
 8000eca:	6013      	str	r3, [r2, #0]

  /* creation of task_ReadMagnet */
  task_ReadMagnetHandle = osThreadNew(tk_ReadMagnet, NULL, &task_ReadMagnet_attributes);
 8000ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8000f48 <main+0x128>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	481e      	ldr	r0, [pc, #120]	@ (8000f4c <main+0x12c>)
 8000ed2:	f004 f93b 	bl	800514c <osThreadNew>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f50 <main+0x130>)
 8000eda:	6013      	str	r3, [r2, #0]

  /* creation of task_WriteRed */
  task_WriteRedHandle = osThreadNew(tk_WriteLED, (void*) &data_red, &task_WriteRed_attributes);
 8000edc:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <main+0x134>)
 8000ede:	491e      	ldr	r1, [pc, #120]	@ (8000f58 <main+0x138>)
 8000ee0:	4817      	ldr	r0, [pc, #92]	@ (8000f40 <main+0x120>)
 8000ee2:	f004 f933 	bl	800514c <osThreadNew>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f5c <main+0x13c>)
 8000eea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000eec:	f004 f908 	bl	8005100 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <main+0xd0>
 8000ef4:	40000800 	.word	0x40000800
 8000ef8:	200001f0 	.word	0x200001f0
 8000efc:	20000088 	.word	0x20000088
 8000f00:	2000025c 	.word	0x2000025c
 8000f04:	08009e08 	.word	0x08009e08
 8000f08:	20000250 	.word	0x20000250
 8000f0c:	08009e18 	.word	0x08009e18
 8000f10:	20000254 	.word	0x20000254
 8000f14:	08009d30 	.word	0x08009d30
 8000f18:	08001329 	.word	0x08001329
 8000f1c:	20000238 	.word	0x20000238
 8000f20:	08009d54 	.word	0x08009d54
 8000f24:	080018f5 	.word	0x080018f5
 8000f28:	2000023c 	.word	0x2000023c
 8000f2c:	08009d78 	.word	0x08009d78
 8000f30:	08001931 	.word	0x08001931
 8000f34:	20000240 	.word	0x20000240
 8000f38:	08009d9c 	.word	0x08009d9c
 8000f3c:	20000068 	.word	0x20000068
 8000f40:	08001ab1 	.word	0x08001ab1
 8000f44:	20000244 	.word	0x20000244
 8000f48:	08009dc0 	.word	0x08009dc0
 8000f4c:	080019f1 	.word	0x080019f1
 8000f50:	20000248 	.word	0x20000248
 8000f54:	08009de4 	.word	0x08009de4
 8000f58:	20000078 	.word	0x20000078
 8000f5c:	2000024c 	.word	0x2000024c

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	@ 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2230      	movs	r2, #48	@ 0x30
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f008 f885 	bl	800907e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	4b28      	ldr	r3, [pc, #160]	@ (800102c <SystemClock_Config+0xcc>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a27      	ldr	r2, [pc, #156]	@ (800102c <SystemClock_Config+0xcc>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b25      	ldr	r3, [pc, #148]	@ (800102c <SystemClock_Config+0xcc>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <SystemClock_Config+0xd0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a21      	ldr	r2, [pc, #132]	@ (8001030 <SystemClock_Config+0xd0>)
 8000faa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <SystemClock_Config+0xd0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fd4:	23c0      	movs	r3, #192	@ 0xc0
 8000fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 fb19 	bl	800361c <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff0:	f000 f9d4 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001000:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001004:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001006:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2103      	movs	r1, #3
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fd7a 	bl	8003b0c <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800101e:	f000 f9bd 	bl	800139c <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	@ 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <MX_I2C1_Init+0x50>)
 800103a:	4a13      	ldr	r2, [pc, #76]	@ (8001088 <MX_I2C1_Init+0x54>)
 800103c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001040:	4a12      	ldr	r2, [pc, #72]	@ (800108c <MX_I2C1_Init+0x58>)
 8001042:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001044:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <MX_I2C1_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001052:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001056:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <MX_I2C1_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_I2C1_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001072:	f001 fa71 	bl	8002558 <HAL_I2C_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800107c:	f000 f98e 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000144 	.word	0x20000144
 8001088:	40005400 	.word	0x40005400
 800108c:	000186a0 	.word	0x000186a0

08001090 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_SPI1_Init+0x64>)
 8001096:	4a18      	ldr	r2, [pc, #96]	@ (80010f8 <MX_SPI1_Init+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_SPI1_Init+0x64>)
 800109c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010dc:	220a      	movs	r2, #10
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010e2:	f002 ff65 	bl	8003fb0 <HAL_SPI_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010ec:	f000 f956 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000198 	.word	0x20000198
 80010f8:	40013000 	.word	0x40013000

080010fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	@ 0x38
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	615a      	str	r2, [r3, #20]
 800112a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800112c:	4b31      	ldr	r3, [pc, #196]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 800112e:	4a32      	ldr	r2, [pc, #200]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 8001130:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 8001132:	4b30      	ldr	r3, [pc, #192]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 8001134:	222f      	movs	r2, #47	@ 0x2f
 8001136:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b2e      	ldr	r3, [pc, #184]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800113e:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 8001140:	2263      	movs	r2, #99	@ 0x63
 8001142:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001144:	4b2b      	ldr	r3, [pc, #172]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b2a      	ldr	r3, [pc, #168]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001150:	4828      	ldr	r0, [pc, #160]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 8001152:	f002 ffb6 	bl	80040c2 <HAL_TIM_Base_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800115c:	f000 f91e 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001166:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800116a:	4619      	mov	r1, r3
 800116c:	4821      	ldr	r0, [pc, #132]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 800116e:	f003 fb15 	bl	800479c <HAL_TIM_ConfigClockSource>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001178:	f000 f910 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800117c:	481d      	ldr	r0, [pc, #116]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 800117e:	f003 f851 	bl	8004224 <HAL_TIM_PWM_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001188:	f000 f908 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4619      	mov	r1, r3
 800119a:	4816      	ldr	r0, [pc, #88]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 800119c:	f003 fec6 	bl	8004f2c <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80011a6:	f000 f8f9 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011aa:	2360      	movs	r3, #96	@ 0x60
 80011ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 80011c2:	f003 fa29 	bl	8004618 <HAL_TIM_PWM_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80011cc:	f000 f8e6 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2208      	movs	r2, #8
 80011d4:	4619      	mov	r1, r3
 80011d6:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 80011d8:	f003 fa1e 	bl	8004618 <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80011e2:	f000 f8db 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011e6:	4803      	ldr	r0, [pc, #12]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 80011e8:	f000 f9de 	bl	80015a8 <HAL_TIM_MspPostInit>

}
 80011ec:	bf00      	nop
 80011ee:	3738      	adds	r7, #56	@ 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001f0 	.word	0x200001f0
 80011f8:	40000800 	.word	0x40000800

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <MX_GPIO_Init+0xe4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a31      	ldr	r2, [pc, #196]	@ (80012e0 <MX_GPIO_Init+0xe4>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b2f      	ldr	r3, [pc, #188]	@ (80012e0 <MX_GPIO_Init+0xe4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b2b      	ldr	r3, [pc, #172]	@ (80012e0 <MX_GPIO_Init+0xe4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a2a      	ldr	r2, [pc, #168]	@ (80012e0 <MX_GPIO_Init+0xe4>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b28      	ldr	r3, [pc, #160]	@ (80012e0 <MX_GPIO_Init+0xe4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <MX_GPIO_Init+0xe4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a23      	ldr	r2, [pc, #140]	@ (80012e0 <MX_GPIO_Init+0xe4>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <MX_GPIO_Init+0xe4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <MX_GPIO_Init+0xe4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a1c      	ldr	r2, [pc, #112]	@ (80012e0 <MX_GPIO_Init+0xe4>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <MX_GPIO_Init+0xe4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001288:	4816      	ldr	r0, [pc, #88]	@ (80012e4 <MX_GPIO_Init+0xe8>)
 800128a:	f001 f919 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UserBTN_Pin */
  GPIO_InitStruct.Pin = UserBTN_Pin;
 800128e:	2301      	movs	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001292:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserBTN_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4811      	ldr	r0, [pc, #68]	@ (80012e8 <MX_GPIO_Init+0xec>)
 80012a4:	f000 fea4 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_LED_Pin */
  GPIO_InitStruct.Pin = Blue_LED_Pin;
 80012a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Blue_LED_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4808      	ldr	r0, [pc, #32]	@ (80012e4 <MX_GPIO_Init+0xe8>)
 80012c2:	f000 fe95 	bl	8001ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2105      	movs	r1, #5
 80012ca:	2006      	movs	r0, #6
 80012cc:	f000 fe66 	bl	8001f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012d0:	2006      	movs	r0, #6
 80012d2:	f000 fe7f 	bl	8001fd4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	@ 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40020000 	.word	0x40020000

080012ec <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	return ITM_SendChar(ch);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fd28 	bl	8000d4c <ITM_SendChar>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
	osSemaphoreRelease(exti_semHandle);
 8001312:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f004 f9ae 	bl	8005678 <osSemaphoreRelease>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000254 	.word	0x20000254

08001328 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreAcquire(exti_semHandle, osWaitForever) == osOK){ //Si lo puede adquirir (se ha pulsado el botón)
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <StartDefaultTask+0x48>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	4618      	mov	r0, r3
 800133a:	f004 f94b 	bl	80055d4 <osSemaphoreAcquire>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f5      	bne.n	8001330 <StartDefaultTask+0x8>
		encendido = !encendido;
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <StartDefaultTask+0x4c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	bf0c      	ite	eq
 800134c:	2301      	moveq	r3, #1
 800134e:	2300      	movne	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <StartDefaultTask+0x4c>)
 8001356:	601a      	str	r2, [r3, #0]
		//printf("%d", encendido);
		osDelay(500);
 8001358:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800135c:	f003 ff88 	bl	8005270 <osDelay>
		osSemaphoreAcquire(exti_semHandle, 0); //Adquiere el token, no se liberará hasta que se pulse el botón
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <StartDefaultTask+0x48>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f004 f934 	bl	80055d4 <osSemaphoreAcquire>
	if(osSemaphoreAcquire(exti_semHandle, osWaitForever) == osOK){ //Si lo puede adquirir (se ha pulsado el botón)
 800136c:	e7e0      	b.n	8001330 <StartDefaultTask+0x8>
 800136e:	bf00      	nop
 8001370:	20000254 	.word	0x20000254
 8001374:	20000258 	.word	0x20000258

08001378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800138a:	f000 fd2f 	bl	8001dec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40014400 	.word	0x40014400

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <Error_Handler+0x8>

080013a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <HAL_MspInit+0x54>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	4a11      	ldr	r2, [pc, #68]	@ (80013fc <HAL_MspInit+0x54>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <HAL_MspInit+0x54>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <HAL_MspInit+0x54>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <HAL_MspInit+0x54>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <HAL_MspInit+0x54>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	210f      	movs	r1, #15
 80013ea:	f06f 0001 	mvn.w	r0, #1
 80013ee:	f000 fdd5 	bl	8001f9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a19      	ldr	r2, [pc, #100]	@ (8001484 <HAL_I2C_MspInit+0x84>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d12c      	bne.n	800147c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <HAL_I2C_MspInit+0x88>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a17      	ldr	r2, [pc, #92]	@ (8001488 <HAL_I2C_MspInit+0x88>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_I2C_MspInit+0x88>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800143e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001444:	2312      	movs	r3, #18
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001450:	2304      	movs	r3, #4
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	480c      	ldr	r0, [pc, #48]	@ (800148c <HAL_I2C_MspInit+0x8c>)
 800145c:	f000 fdc8 	bl	8001ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <HAL_I2C_MspInit+0x88>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	4a07      	ldr	r2, [pc, #28]	@ (8001488 <HAL_I2C_MspInit+0x88>)
 800146a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800146e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_I2C_MspInit+0x88>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800147c:	bf00      	nop
 800147e:	3728      	adds	r7, #40	@ 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40005400 	.word	0x40005400
 8001488:	40023800 	.word	0x40023800
 800148c:	40020400 	.word	0x40020400

08001490 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <HAL_I2C_MspDeInit+0x38>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d10e      	bne.n	80014c0 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_I2C_MspDeInit+0x3c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	4a09      	ldr	r2, [pc, #36]	@ (80014cc <HAL_I2C_MspDeInit+0x3c>)
 80014a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014ac:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80014ae:	2140      	movs	r1, #64	@ 0x40
 80014b0:	4807      	ldr	r0, [pc, #28]	@ (80014d0 <HAL_I2C_MspDeInit+0x40>)
 80014b2:	f000 ff21 	bl	80022f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80014b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <HAL_I2C_MspDeInit+0x40>)
 80014bc:	f000 ff1c 	bl	80022f8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40005400 	.word	0x40005400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400

080014d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a19      	ldr	r2, [pc, #100]	@ (8001558 <HAL_SPI_MspInit+0x84>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d12b      	bne.n	800154e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <HAL_SPI_MspInit+0x88>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	4a17      	ldr	r2, [pc, #92]	@ (800155c <HAL_SPI_MspInit+0x88>)
 8001500:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001504:	6453      	str	r3, [r2, #68]	@ 0x44
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_SPI_MspInit+0x88>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_SPI_MspInit+0x88>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a10      	ldr	r2, [pc, #64]	@ (800155c <HAL_SPI_MspInit+0x88>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <HAL_SPI_MspInit+0x88>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800152e:	23e0      	movs	r3, #224	@ 0xe0
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800153e:	2305      	movs	r3, #5
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	@ (8001560 <HAL_SPI_MspInit+0x8c>)
 800154a:	f000 fd51 	bl	8001ff0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	@ 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40013000 	.word	0x40013000
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000

08001564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0b      	ldr	r2, [pc, #44]	@ (80015a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d10d      	bne.n	8001592 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <HAL_TIM_Base_MspInit+0x40>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	4a09      	ldr	r2, [pc, #36]	@ (80015a4 <HAL_TIM_Base_MspInit+0x40>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6413      	str	r3, [r2, #64]	@ 0x40
 8001586:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <HAL_TIM_Base_MspInit+0x40>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40000800 	.word	0x40000800
 80015a4:	40023800 	.word	0x40023800

080015a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a12      	ldr	r2, [pc, #72]	@ (8001610 <HAL_TIM_MspPostInit+0x68>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d11e      	bne.n	8001608 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <HAL_TIM_MspPostInit+0x6c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a10      	ldr	r2, [pc, #64]	@ (8001614 <HAL_TIM_MspPostInit+0x6c>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <HAL_TIM_MspPostInit+0x6c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 80015e6:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80015ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	4619      	mov	r1, r3
 8001602:	4805      	ldr	r0, [pc, #20]	@ (8001618 <HAL_TIM_MspPostInit+0x70>)
 8001604:	f000 fcf4 	bl	8001ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40000800 	.word	0x40000800
 8001614:	40023800 	.word	0x40023800
 8001618:	40020c00 	.word	0x40020c00

0800161c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	@ 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	4b2f      	ldr	r3, [pc, #188]	@ (80016f0 <HAL_InitTick+0xd4>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001634:	4a2e      	ldr	r2, [pc, #184]	@ (80016f0 <HAL_InitTick+0xd4>)
 8001636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800163a:	6453      	str	r3, [r2, #68]	@ 0x44
 800163c:	4b2c      	ldr	r3, [pc, #176]	@ (80016f0 <HAL_InitTick+0xd4>)
 800163e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001648:	f107 020c 	add.w	r2, r7, #12
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fc7a 	bl	8003f4c <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001658:	f002 fc64 	bl	8003f24 <HAL_RCC_GetPCLK2Freq>
 800165c:	4603      	mov	r3, r0
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001664:	4a23      	ldr	r2, [pc, #140]	@ (80016f4 <HAL_InitTick+0xd8>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0c9b      	lsrs	r3, r3, #18
 800166c:	3b01      	subs	r3, #1
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001670:	4b21      	ldr	r3, [pc, #132]	@ (80016f8 <HAL_InitTick+0xdc>)
 8001672:	4a22      	ldr	r2, [pc, #136]	@ (80016fc <HAL_InitTick+0xe0>)
 8001674:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001676:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <HAL_InitTick+0xdc>)
 8001678:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800167c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800167e:	4a1e      	ldr	r2, [pc, #120]	@ (80016f8 <HAL_InitTick+0xdc>)
 8001680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001682:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001684:	4b1c      	ldr	r3, [pc, #112]	@ (80016f8 <HAL_InitTick+0xdc>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b1b      	ldr	r3, [pc, #108]	@ (80016f8 <HAL_InitTick+0xdc>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <HAL_InitTick+0xdc>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001696:	4818      	ldr	r0, [pc, #96]	@ (80016f8 <HAL_InitTick+0xdc>)
 8001698:	f002 fd13 	bl	80040c2 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80016a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d11b      	bne.n	80016e2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80016aa:	4813      	ldr	r0, [pc, #76]	@ (80016f8 <HAL_InitTick+0xdc>)
 80016ac:	f002 fd58 	bl	8004160 <HAL_TIM_Base_Start_IT>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80016b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d111      	bne.n	80016e2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016be:	2019      	movs	r0, #25
 80016c0:	f000 fc88 	bl	8001fd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b0f      	cmp	r3, #15
 80016c8:	d808      	bhi.n	80016dc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80016ca:	2200      	movs	r2, #0
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	2019      	movs	r0, #25
 80016d0:	f000 fc64 	bl	8001f9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <HAL_InitTick+0xe4>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e002      	b.n	80016e2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3730      	adds	r7, #48	@ 0x30
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	431bde83 	.word	0x431bde83
 80016f8:	20000260 	.word	0x20000260
 80016fc:	40014400 	.word	0x40014400
 8001700:	200000bc 	.word	0x200000bc

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <NMI_Handler+0x4>

0800170c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <MemManage_Handler+0x4>

0800171c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <UsageFault_Handler+0x4>

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserBTN_Pin);
 800173e:	2001      	movs	r0, #1
 8001740:	f000 fef2 	bl	8002528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800174e:	f002 fe73 	bl	8004438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000260 	.word	0x20000260

0800175c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e00a      	b.n	8001784 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800176e:	f3af 8000 	nop.w
 8001772:	4601      	mov	r1, r0
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60ba      	str	r2, [r7, #8]
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	dbf0      	blt.n	800176e <_read+0x12>
  }

  return len;
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e009      	b.n	80017bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fd9b 	bl	80012ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbf1      	blt.n	80017a8 <_write+0x12>
  }
  return len;
 80017c4:	687b      	ldr	r3, [r7, #4]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_close>:

int _close(int file)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017f6:	605a      	str	r2, [r3, #4]
  return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_isatty>:

int _isatty(int file)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	@ (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f007 fcbe 	bl	80091e8 <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	220c      	movs	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	@ (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20020000 	.word	0x20020000
 8001898:	00000400 	.word	0x00000400
 800189c:	200002a8 	.word	0x200002a8
 80018a0:	20004e60 	.word	0x20004e60

080018a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <SystemInit+0x20>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <SystemInit+0x20>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <absolute>:

int16_t accxyz[3], magxyz[3], cumxyz[3], magcumxyz[3];

//extern fsm_t* LEDazul;

int absolute(int16_t value){
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
	if (value >= 0) return value;
 80018d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db02      	blt.n	80018e0 <absolute+0x18>
 80018da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018de:	e002      	b.n	80018e6 <absolute+0x1e>
	else return -value;
 80018e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e4:	425b      	negs	r3, r3
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <tk_BlinkBlue>:


//Tareas

void tk_BlinkBlue(void *argument){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	for (;;) {
		//printf("Fire!");
		//fsm_fire(LEDazul);
		if (encendido){
 80018fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <tk_BlinkBlue+0x34>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <tk_BlinkBlue+0x1c>
			HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 8001904:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001908:	4808      	ldr	r0, [pc, #32]	@ (800192c <tk_BlinkBlue+0x38>)
 800190a:	f000 fdf2 	bl	80024f2 <HAL_GPIO_TogglePin>
 800190e:	e005      	b.n	800191c <tk_BlinkBlue+0x28>
		}
		else
			HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001916:	4805      	ldr	r0, [pc, #20]	@ (800192c <tk_BlinkBlue+0x38>)
 8001918:	f000 fdd2 	bl	80024c0 <HAL_GPIO_WritePin>
		osDelay(1000);
 800191c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001920:	f003 fca6 	bl	8005270 <osDelay>
		if (encendido){
 8001924:	e7ea      	b.n	80018fc <tk_BlinkBlue+0x8>
 8001926:	bf00      	nop
 8001928:	20000258 	.word	0x20000258
 800192c:	40020c00 	.word	0x40020c00

08001930 <tk_ReadAccel>:
	}
}

void tk_ReadAccel(void *argument){
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

	for(;;) {
		if (encendido){
 8001938:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <tk_ReadAccel+0xb0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d042      	beq.n	80019c6 <tk_ReadAccel+0x96>
			osMutexAcquire(mutexi2c1Handle, osWaitForever); //Pongo a esperar hasta que el token esté available
 8001940:	4b28      	ldr	r3, [pc, #160]	@ (80019e4 <tk_ReadAccel+0xb4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	4618      	mov	r0, r3
 800194a:	f003 fd32 	bl	80053b2 <osMutexAcquire>
			BSP_ACCELERO_GetXYZ(accxyz);
 800194e:	4826      	ldr	r0, [pc, #152]	@ (80019e8 <tk_ReadAccel+0xb8>)
 8001950:	f007 f944 	bl	8008bdc <BSP_ACCELERO_GetXYZ>
			osMutexRelease(mutexi2c1Handle); //Pongo el token available
 8001954:	4b23      	ldr	r3, [pc, #140]	@ (80019e4 <tk_ReadAccel+0xb4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f003 fd75 	bl	8005448 <osMutexRelease>
	//	printf("Acc: %d, %d, %d\n", accxyz[0], accxyz[1], accxyz[2]);
			cumxyz[0] += absolute(accxyz[0]);
 800195e:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <tk_ReadAccel+0xb8>)
 8001960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ffaf 	bl	80018c8 <absolute>
 800196a:	4601      	mov	r1, r0
 800196c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <tk_ReadAccel+0xbc>)
 800196e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001972:	b29a      	uxth	r2, r3
 8001974:	b28b      	uxth	r3, r1
 8001976:	4413      	add	r3, r2
 8001978:	b29b      	uxth	r3, r3
 800197a:	b21a      	sxth	r2, r3
 800197c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <tk_ReadAccel+0xbc>)
 800197e:	801a      	strh	r2, [r3, #0]
			cumxyz[1] += absolute(accxyz[1]);
 8001980:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <tk_ReadAccel+0xb8>)
 8001982:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff9e 	bl	80018c8 <absolute>
 800198c:	4601      	mov	r1, r0
 800198e:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <tk_ReadAccel+0xbc>)
 8001990:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001994:	b29a      	uxth	r2, r3
 8001996:	b28b      	uxth	r3, r1
 8001998:	4413      	add	r3, r2
 800199a:	b29b      	uxth	r3, r3
 800199c:	b21a      	sxth	r2, r3
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <tk_ReadAccel+0xbc>)
 80019a0:	805a      	strh	r2, [r3, #2]
			cumxyz[2] += absolute(accxyz[2]);
 80019a2:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <tk_ReadAccel+0xb8>)
 80019a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff8d 	bl	80018c8 <absolute>
 80019ae:	4601      	mov	r1, r0
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <tk_ReadAccel+0xbc>)
 80019b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	b28b      	uxth	r3, r1
 80019ba:	4413      	add	r3, r2
 80019bc:	b29b      	uxth	r3, r3
 80019be:	b21a      	sxth	r2, r3
 80019c0:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <tk_ReadAccel+0xbc>)
 80019c2:	809a      	strh	r2, [r3, #4]
 80019c4:	e008      	b.n	80019d8 <tk_ReadAccel+0xa8>
		}
		else{
			cumxyz[0] = 0;
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <tk_ReadAccel+0xbc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	801a      	strh	r2, [r3, #0]
			cumxyz[1] = 0;
 80019cc:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <tk_ReadAccel+0xbc>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	805a      	strh	r2, [r3, #2]
			cumxyz[2] = 0;
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <tk_ReadAccel+0xbc>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	809a      	strh	r2, [r3, #4]
		}
	//	printf("Cumacc: %d, %d, %d\n", cumxyz[0], cumxyz[1], cumxyz[2]);

		osDelay(5);
 80019d8:	2005      	movs	r0, #5
 80019da:	f003 fc49 	bl	8005270 <osDelay>
		if (encendido){
 80019de:	e7ab      	b.n	8001938 <tk_ReadAccel+0x8>
 80019e0:	20000258 	.word	0x20000258
 80019e4:	20000250 	.word	0x20000250
 80019e8:	200002ac 	.word	0x200002ac
 80019ec:	200002bc 	.word	0x200002bc

080019f0 <tk_ReadMagnet>:
	}
}

void tk_ReadMagnet(void *argument){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	for(;;){
		if (encendido){
 80019f8:	4b29      	ldr	r3, [pc, #164]	@ (8001aa0 <tk_ReadMagnet+0xb0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d042      	beq.n	8001a86 <tk_ReadMagnet+0x96>
			osMutexAcquire(mutexi2c1Handle, osWaitForever); //Pongo a esperar hasta que el token esté available
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <tk_ReadMagnet+0xb4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f003 fcd2 	bl	80053b2 <osMutexAcquire>
			LSM303AGR_MagReadXYZ(magxyz);
 8001a0e:	4826      	ldr	r0, [pc, #152]	@ (8001aa8 <tk_ReadMagnet+0xb8>)
 8001a10:	f007 f91b 	bl	8008c4a <LSM303AGR_MagReadXYZ>
			osMutexRelease(mutexi2c1Handle); //Pongo el token en available
 8001a14:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <tk_ReadMagnet+0xb4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fd15 	bl	8005448 <osMutexRelease>
	//	printf("Mag: %d, %d, %d\n", magxyz[0], magxyz[1], magxyz[2]);
			magcumxyz[0] += absolute(magxyz[0]);
 8001a1e:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <tk_ReadMagnet+0xb8>)
 8001a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff4f 	bl	80018c8 <absolute>
 8001a2a:	4601      	mov	r1, r0
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aac <tk_ReadMagnet+0xbc>)
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	b28b      	uxth	r3, r1
 8001a36:	4413      	add	r3, r2
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <tk_ReadMagnet+0xbc>)
 8001a3e:	801a      	strh	r2, [r3, #0]
			magcumxyz[1] += absolute(magxyz[1]);
 8001a40:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <tk_ReadMagnet+0xb8>)
 8001a42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff3e 	bl	80018c8 <absolute>
 8001a4c:	4601      	mov	r1, r0
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <tk_ReadMagnet+0xbc>)
 8001a50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	b28b      	uxth	r3, r1
 8001a58:	4413      	add	r3, r2
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <tk_ReadMagnet+0xbc>)
 8001a60:	805a      	strh	r2, [r3, #2]
			magcumxyz[2] += absolute(magxyz[2]);
 8001a62:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <tk_ReadMagnet+0xb8>)
 8001a64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff2d 	bl	80018c8 <absolute>
 8001a6e:	4601      	mov	r1, r0
 8001a70:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <tk_ReadMagnet+0xbc>)
 8001a72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	b28b      	uxth	r3, r1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <tk_ReadMagnet+0xbc>)
 8001a82:	809a      	strh	r2, [r3, #4]
 8001a84:	e008      	b.n	8001a98 <tk_ReadMagnet+0xa8>

	//	printf("Cummag: %d, %d, %d\n", magcumxyz[0], magcumxyz[1], magcumxyz[2]);
		}
		else{
			magcumxyz[0] = 0;
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <tk_ReadMagnet+0xbc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	801a      	strh	r2, [r3, #0]
			magcumxyz[1] = 0;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	@ (8001aac <tk_ReadMagnet+0xbc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	805a      	strh	r2, [r3, #2]
			magcumxyz[2] = 0;
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <tk_ReadMagnet+0xbc>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	809a      	strh	r2, [r3, #4]
		}

		osDelay(10);
 8001a98:	200a      	movs	r0, #10
 8001a9a:	f003 fbe9 	bl	8005270 <osDelay>
		if (encendido){
 8001a9e:	e7ab      	b.n	80019f8 <tk_ReadMagnet+0x8>
 8001aa0:	20000258 	.word	0x20000258
 8001aa4:	20000250 	.word	0x20000250
 8001aa8:	200002b4 	.word	0x200002b4
 8001aac:	200002c4 	.word	0x200002c4

08001ab0 <tk_WriteLED>:
	}
}

void tk_WriteLED(void *argument){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	for(;;) {
	write_t* data = (write_t*)argument;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	61fb      	str	r3, [r7, #28]
	if (encendido){
 8001abc:	4ba0      	ldr	r3, [pc, #640]	@ (8001d40 <tk_WriteLED+0x290>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 8113 	beq.w	8001cec <tk_WriteLED+0x23c>

		float modulo;
		if (data->channel == TIM_CHANNEL_1){
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d145      	bne.n	8001b5a <tk_WriteLED+0xaa>
			arm_sqrt_f32(cumxyz[0]*cumxyz[0] + cumxyz[1]*cumxyz[1] + cumxyz[2]*cumxyz[2], &modulo);
 8001ace:	4b9d      	ldr	r3, [pc, #628]	@ (8001d44 <tk_WriteLED+0x294>)
 8001ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b9b      	ldr	r3, [pc, #620]	@ (8001d44 <tk_WriteLED+0x294>)
 8001ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001adc:	fb03 f202 	mul.w	r2, r3, r2
 8001ae0:	4b98      	ldr	r3, [pc, #608]	@ (8001d44 <tk_WriteLED+0x294>)
 8001ae2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4b96      	ldr	r3, [pc, #600]	@ (8001d44 <tk_WriteLED+0x294>)
 8001aea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	441a      	add	r2, r3
 8001af4:	4b93      	ldr	r3, [pc, #588]	@ (8001d44 <tk_WriteLED+0x294>)
 8001af6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001afa:	4619      	mov	r1, r3
 8001afc:	4b91      	ldr	r3, [pc, #580]	@ (8001d44 <tk_WriteLED+0x294>)
 8001afe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b10:	edc7 7a06 	vstr	s15, [r7, #24]
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001b1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	db09      	blt.n	8001b3c <tk_WriteLED+0x8c>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001b28:	ed97 0a06 	vldr	s0, [r7, #24]
 8001b2c:	f008 f876 	bl	8009c1c <sqrtf>
 8001b30:	eef0 7a40 	vmov.f32	s15, s0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001b3a:	e004      	b.n	8001b46 <tk_WriteLED+0x96>
    }
    else
    {
      *pOut = 0.0f;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001b44:	bf00      	nop
	//		printf("A: %d\n", (int)modulo);
			cumxyz[0] = 0; //Reseteo los valores del acumulado recién leído.
 8001b46:	4b7f      	ldr	r3, [pc, #508]	@ (8001d44 <tk_WriteLED+0x294>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	801a      	strh	r2, [r3, #0]
			cumxyz[1] = 0;
 8001b4c:	4b7d      	ldr	r3, [pc, #500]	@ (8001d44 <tk_WriteLED+0x294>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	805a      	strh	r2, [r3, #2]
			cumxyz[2] = 0;
 8001b52:	4b7c      	ldr	r3, [pc, #496]	@ (8001d44 <tk_WriteLED+0x294>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	809a      	strh	r2, [r3, #4]
 8001b58:	e048      	b.n	8001bec <tk_WriteLED+0x13c>

	//		printf("ResetAcc\n");
		}
		else if (data->channel == TIM_CHANNEL_3){
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d144      	bne.n	8001bec <tk_WriteLED+0x13c>
			arm_sqrt_f32(magcumxyz[0]*magcumxyz[0] + magcumxyz[1]*magcumxyz[1] + magcumxyz[2]*magcumxyz[2], &modulo);
 8001b62:	4b79      	ldr	r3, [pc, #484]	@ (8001d48 <tk_WriteLED+0x298>)
 8001b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b77      	ldr	r3, [pc, #476]	@ (8001d48 <tk_WriteLED+0x298>)
 8001b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b70:	fb03 f202 	mul.w	r2, r3, r2
 8001b74:	4b74      	ldr	r3, [pc, #464]	@ (8001d48 <tk_WriteLED+0x298>)
 8001b76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4b72      	ldr	r3, [pc, #456]	@ (8001d48 <tk_WriteLED+0x298>)
 8001b7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	441a      	add	r2, r3
 8001b88:	4b6f      	ldr	r3, [pc, #444]	@ (8001d48 <tk_WriteLED+0x298>)
 8001b8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4b6d      	ldr	r3, [pc, #436]	@ (8001d48 <tk_WriteLED+0x298>)
 8001b92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba4:	edc7 7a04 	vstr	s15, [r7, #16]
 8001ba8:	f107 0308 	add.w	r3, r7, #8
 8001bac:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 8001bae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	db09      	blt.n	8001bd0 <tk_WriteLED+0x120>
      *pOut = sqrtf(in);
 8001bbc:	ed97 0a04 	vldr	s0, [r7, #16]
 8001bc0:	f008 f82c 	bl	8009c1c <sqrtf>
 8001bc4:	eef0 7a40 	vmov.f32	s15, s0
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001bce:	e004      	b.n	8001bda <tk_WriteLED+0x12a>
      *pOut = 0.0f;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001bd8:	bf00      	nop
	//		printf("M: %d\n", (int)modulo);
			magcumxyz[0] = 0;
 8001bda:	4b5b      	ldr	r3, [pc, #364]	@ (8001d48 <tk_WriteLED+0x298>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	801a      	strh	r2, [r3, #0]
			magcumxyz[1] = 0;
 8001be0:	4b59      	ldr	r3, [pc, #356]	@ (8001d48 <tk_WriteLED+0x298>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	805a      	strh	r2, [r3, #2]
			magcumxyz[2] = 0;
 8001be6:	4b58      	ldr	r3, [pc, #352]	@ (8001d48 <tk_WriteLED+0x298>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	809a      	strh	r2, [r3, #4]

	//		printf("ResetMag\n");
		}
		modulo /= 200; //Divido por 200 para promediar
 8001bec:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bf0:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8001d4c <tk_WriteLED+0x29c>
 8001bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf8:	edc7 7a02 	vstr	s15, [r7, #8]
		printf("%d\n", (int)modulo);
 8001bfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c04:	ee17 1a90 	vmov	r1, s15
 8001c08:	4851      	ldr	r0, [pc, #324]	@ (8001d50 <tk_WriteLED+0x2a0>)
 8001c0a:	f007 f9e3 	bl	8008fd4 <iprintf>
		if (modulo >= data->warning && modulo < data->danger){
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	899b      	ldrh	r3, [r3, #12]
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	d830      	bhi.n	8001c8a <tk_WriteLED+0x1da>
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	89db      	ldrh	r3, [r3, #14]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c34:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c40:	dd23      	ble.n	8001c8a <tk_WriteLED+0x1da>
			__HAL_TIM_SET_COMPARE(data->htim, data->channel, 50);
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <tk_WriteLED+0x1a6>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2232      	movs	r2, #50	@ 0x32
 8001c52:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c54:	e06d      	b.n	8001d32 <tk_WriteLED+0x282>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d105      	bne.n	8001c6a <tk_WriteLED+0x1ba>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2332      	movs	r3, #50	@ 0x32
 8001c66:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c68:	e063      	b.n	8001d32 <tk_WriteLED+0x282>
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d105      	bne.n	8001c7e <tk_WriteLED+0x1ce>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2332      	movs	r3, #50	@ 0x32
 8001c7a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c7c:	e059      	b.n	8001d32 <tk_WriteLED+0x282>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2332      	movs	r3, #50	@ 0x32
 8001c86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c88:	e053      	b.n	8001d32 <tk_WriteLED+0x282>
		}
		else if (modulo >= data->danger){
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	89db      	ldrh	r3, [r3, #14]
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	d846      	bhi.n	8001d32 <tk_WriteLED+0x282>
			__HAL_TIM_SET_COMPARE(data->htim, data->channel, 90);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <tk_WriteLED+0x208>
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	225a      	movs	r2, #90	@ 0x5a
 8001cb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cb6:	e03c      	b.n	8001d32 <tk_WriteLED+0x282>
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d105      	bne.n	8001ccc <tk_WriteLED+0x21c>
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	235a      	movs	r3, #90	@ 0x5a
 8001cc8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001cca:	e032      	b.n	8001d32 <tk_WriteLED+0x282>
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d105      	bne.n	8001ce0 <tk_WriteLED+0x230>
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	235a      	movs	r3, #90	@ 0x5a
 8001cdc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001cde:	e028      	b.n	8001d32 <tk_WriteLED+0x282>
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	235a      	movs	r3, #90	@ 0x5a
 8001ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cea:	e022      	b.n	8001d32 <tk_WriteLED+0x282>
		}
	}
	else{
		__HAL_TIM_SET_COMPARE(data->htim, data->channel, 0);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d105      	bne.n	8001d00 <tk_WriteLED+0x250>
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cfe:	e018      	b.n	8001d32 <tk_WriteLED+0x282>
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d105      	bne.n	8001d14 <tk_WriteLED+0x264>
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d12:	e00e      	b.n	8001d32 <tk_WriteLED+0x282>
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d105      	bne.n	8001d28 <tk_WriteLED+0x278>
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d26:	e004      	b.n	8001d32 <tk_WriteLED+0x282>
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	6413      	str	r3, [r2, #64]	@ 0x40
	}

	osDelay(data->timeout);
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 fa9a 	bl	8005270 <osDelay>
	for(;;) {
 8001d3c:	e6bc      	b.n	8001ab8 <tk_WriteLED+0x8>
 8001d3e:	bf00      	nop
 8001d40:	20000258 	.word	0x20000258
 8001d44:	200002bc 	.word	0x200002bc
 8001d48:	200002c4 	.word	0x200002c4
 8001d4c:	43480000 	.word	0x43480000
 8001d50:	08009cec 	.word	0x08009cec

08001d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d58:	f7ff fda4 	bl	80018a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d5c:	480c      	ldr	r0, [pc, #48]	@ (8001d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d5e:	490d      	ldr	r1, [pc, #52]	@ (8001d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d60:	4a0d      	ldr	r2, [pc, #52]	@ (8001d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d64:	e002      	b.n	8001d6c <LoopCopyDataInit>

08001d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6a:	3304      	adds	r3, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d70:	d3f9      	bcc.n	8001d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d72:	4a0a      	ldr	r2, [pc, #40]	@ (8001d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d74:	4c0a      	ldr	r4, [pc, #40]	@ (8001da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d78:	e001      	b.n	8001d7e <LoopFillZerobss>

08001d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d7c:	3204      	adds	r2, #4

08001d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d80:	d3fb      	bcc.n	8001d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d82:	f007 fa37 	bl	80091f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d86:	f7ff f84b 	bl	8000e20 <main>
  bx  lr    
 8001d8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d94:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001d98:	08009e84 	.word	0x08009e84
  ldr r2, =_sbss
 8001d9c:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001da0:	20004e5c 	.word	0x20004e5c

08001da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da4:	e7fe      	b.n	8001da4 <ADC_IRQHandler>
	...

08001da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dac:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <HAL_Init+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0d      	ldr	r2, [pc, #52]	@ (8001de8 <HAL_Init+0x40>)
 8001db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <HAL_Init+0x40>)
 8001dbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	@ (8001de8 <HAL_Init+0x40>)
 8001dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 f8d8 	bl	8001f86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd6:	200f      	movs	r0, #15
 8001dd8:	f7ff fc20 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ddc:	f7ff fae4 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023c00 	.word	0x40023c00

08001dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <HAL_IncTick+0x20>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_IncTick+0x24>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <HAL_IncTick+0x24>)
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	200000c0 	.word	0x200000c0
 8001e10:	200002cc 	.word	0x200002cc

08001e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <HAL_GetTick+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	200002cc 	.word	0x200002cc

08001e2c <__NVIC_SetPriorityGrouping>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5e:	4a04      	ldr	r2, [pc, #16]	@ (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	60d3      	str	r3, [r2, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_GetPriorityGrouping>:
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e78:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <__NVIC_GetPriorityGrouping+0x18>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	f003 0307 	and.w	r3, r3, #7
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_EnableIRQ>:
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db0b      	blt.n	8001eba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	f003 021f 	and.w	r2, r3, #31
 8001ea8:	4907      	ldr	r1, [pc, #28]	@ (8001ec8 <__NVIC_EnableIRQ+0x38>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <__NVIC_SetPriority>:
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db0a      	blt.n	8001ef6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	490c      	ldr	r1, [pc, #48]	@ (8001f18 <__NVIC_SetPriority+0x4c>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ef4:	e00a      	b.n	8001f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4908      	ldr	r1, [pc, #32]	@ (8001f1c <__NVIC_SetPriority+0x50>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3b04      	subs	r3, #4
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000e100 	.word	0xe000e100
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <NVIC_EncodePriority>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	@ 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f1c3 0307 	rsb	r3, r3, #7
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	bf28      	it	cs
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d902      	bls.n	8001f50 <NVIC_EncodePriority+0x30>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	e000      	b.n	8001f52 <NVIC_EncodePriority+0x32>
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	4313      	orrs	r3, r2
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	@ 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ff4c 	bl	8001e2c <__NVIC_SetPriorityGrouping>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fae:	f7ff ff61 	bl	8001e74 <__NVIC_GetPriorityGrouping>
 8001fb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	6978      	ldr	r0, [r7, #20]
 8001fba:	f7ff ffb1 	bl	8001f20 <NVIC_EncodePriority>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff80 	bl	8001ecc <__NVIC_SetPriority>
}
 8001fcc:	bf00      	nop
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff54 	bl	8001e90 <__NVIC_EnableIRQ>
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	@ 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	e159      	b.n	80022c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800200c:	2201      	movs	r2, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	429a      	cmp	r2, r3
 8002026:	f040 8148 	bne.w	80022ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d005      	beq.n	8002042 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203e:	2b02      	cmp	r3, #2
 8002040:	d130      	bne.n	80020a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	2203      	movs	r2, #3
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002078:	2201      	movs	r2, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 0201 	and.w	r2, r3, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d017      	beq.n	80020e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d123      	bne.n	8002134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	220f      	movs	r2, #15
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	08da      	lsrs	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3208      	adds	r2, #8
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0203 	and.w	r2, r3, #3
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a2 	beq.w	80022ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b57      	ldr	r3, [pc, #348]	@ (80022d8 <HAL_GPIO_Init+0x2e8>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	4a56      	ldr	r2, [pc, #344]	@ (80022d8 <HAL_GPIO_Init+0x2e8>)
 8002180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002184:	6453      	str	r3, [r2, #68]	@ 0x44
 8002186:	4b54      	ldr	r3, [pc, #336]	@ (80022d8 <HAL_GPIO_Init+0x2e8>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002192:	4a52      	ldr	r2, [pc, #328]	@ (80022dc <HAL_GPIO_Init+0x2ec>)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	3302      	adds	r3, #2
 800219a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	220f      	movs	r2, #15
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a49      	ldr	r2, [pc, #292]	@ (80022e0 <HAL_GPIO_Init+0x2f0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d019      	beq.n	80021f2 <HAL_GPIO_Init+0x202>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a48      	ldr	r2, [pc, #288]	@ (80022e4 <HAL_GPIO_Init+0x2f4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_GPIO_Init+0x1fe>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a47      	ldr	r2, [pc, #284]	@ (80022e8 <HAL_GPIO_Init+0x2f8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00d      	beq.n	80021ea <HAL_GPIO_Init+0x1fa>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a46      	ldr	r2, [pc, #280]	@ (80022ec <HAL_GPIO_Init+0x2fc>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <HAL_GPIO_Init+0x1f6>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a45      	ldr	r2, [pc, #276]	@ (80022f0 <HAL_GPIO_Init+0x300>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d101      	bne.n	80021e2 <HAL_GPIO_Init+0x1f2>
 80021de:	2304      	movs	r3, #4
 80021e0:	e008      	b.n	80021f4 <HAL_GPIO_Init+0x204>
 80021e2:	2307      	movs	r3, #7
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x204>
 80021e6:	2303      	movs	r3, #3
 80021e8:	e004      	b.n	80021f4 <HAL_GPIO_Init+0x204>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e002      	b.n	80021f4 <HAL_GPIO_Init+0x204>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_GPIO_Init+0x204>
 80021f2:	2300      	movs	r3, #0
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	f002 0203 	and.w	r2, r2, #3
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	4093      	lsls	r3, r2
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002204:	4935      	ldr	r1, [pc, #212]	@ (80022dc <HAL_GPIO_Init+0x2ec>)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	3302      	adds	r3, #2
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002212:	4b38      	ldr	r3, [pc, #224]	@ (80022f4 <HAL_GPIO_Init+0x304>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002236:	4a2f      	ldr	r2, [pc, #188]	@ (80022f4 <HAL_GPIO_Init+0x304>)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800223c:	4b2d      	ldr	r3, [pc, #180]	@ (80022f4 <HAL_GPIO_Init+0x304>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002260:	4a24      	ldr	r2, [pc, #144]	@ (80022f4 <HAL_GPIO_Init+0x304>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002266:	4b23      	ldr	r3, [pc, #140]	@ (80022f4 <HAL_GPIO_Init+0x304>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800228a:	4a1a      	ldr	r2, [pc, #104]	@ (80022f4 <HAL_GPIO_Init+0x304>)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002290:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <HAL_GPIO_Init+0x304>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b4:	4a0f      	ldr	r2, [pc, #60]	@ (80022f4 <HAL_GPIO_Init+0x304>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3301      	adds	r3, #1
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b0f      	cmp	r3, #15
 80022c4:	f67f aea2 	bls.w	800200c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3724      	adds	r7, #36	@ 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40013800 	.word	0x40013800
 80022e0:	40020000 	.word	0x40020000
 80022e4:	40020400 	.word	0x40020400
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40020c00 	.word	0x40020c00
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40013c00 	.word	0x40013c00

080022f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e0bb      	b.n	800248c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002314:	2201      	movs	r2, #1
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	429a      	cmp	r2, r3
 800232c:	f040 80ab 	bne.w	8002486 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002330:	4a5c      	ldr	r2, [pc, #368]	@ (80024a4 <HAL_GPIO_DeInit+0x1ac>)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	3302      	adds	r3, #2
 8002338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	4013      	ands	r3, r2
 8002350:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a54      	ldr	r2, [pc, #336]	@ (80024a8 <HAL_GPIO_DeInit+0x1b0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d019      	beq.n	800238e <HAL_GPIO_DeInit+0x96>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a53      	ldr	r2, [pc, #332]	@ (80024ac <HAL_GPIO_DeInit+0x1b4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_DeInit+0x92>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a52      	ldr	r2, [pc, #328]	@ (80024b0 <HAL_GPIO_DeInit+0x1b8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_GPIO_DeInit+0x8e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a51      	ldr	r2, [pc, #324]	@ (80024b4 <HAL_GPIO_DeInit+0x1bc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <HAL_GPIO_DeInit+0x8a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a50      	ldr	r2, [pc, #320]	@ (80024b8 <HAL_GPIO_DeInit+0x1c0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_GPIO_DeInit+0x86>
 800237a:	2304      	movs	r3, #4
 800237c:	e008      	b.n	8002390 <HAL_GPIO_DeInit+0x98>
 800237e:	2307      	movs	r3, #7
 8002380:	e006      	b.n	8002390 <HAL_GPIO_DeInit+0x98>
 8002382:	2303      	movs	r3, #3
 8002384:	e004      	b.n	8002390 <HAL_GPIO_DeInit+0x98>
 8002386:	2302      	movs	r3, #2
 8002388:	e002      	b.n	8002390 <HAL_GPIO_DeInit+0x98>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_GPIO_DeInit+0x98>
 800238e:	2300      	movs	r3, #0
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	f002 0203 	and.w	r2, r2, #3
 8002396:	0092      	lsls	r2, r2, #2
 8002398:	4093      	lsls	r3, r2
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	429a      	cmp	r2, r3
 800239e:	d132      	bne.n	8002406 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80023a0:	4b46      	ldr	r3, [pc, #280]	@ (80024bc <HAL_GPIO_DeInit+0x1c4>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	4944      	ldr	r1, [pc, #272]	@ (80024bc <HAL_GPIO_DeInit+0x1c4>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80023ae:	4b43      	ldr	r3, [pc, #268]	@ (80024bc <HAL_GPIO_DeInit+0x1c4>)
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	4941      	ldr	r1, [pc, #260]	@ (80024bc <HAL_GPIO_DeInit+0x1c4>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80023bc:	4b3f      	ldr	r3, [pc, #252]	@ (80024bc <HAL_GPIO_DeInit+0x1c4>)
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	493d      	ldr	r1, [pc, #244]	@ (80024bc <HAL_GPIO_DeInit+0x1c4>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80023ca:	4b3c      	ldr	r3, [pc, #240]	@ (80024bc <HAL_GPIO_DeInit+0x1c4>)
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	493a      	ldr	r1, [pc, #232]	@ (80024bc <HAL_GPIO_DeInit+0x1c4>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80023e8:	4a2e      	ldr	r2, [pc, #184]	@ (80024a4 <HAL_GPIO_DeInit+0x1ac>)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	43da      	mvns	r2, r3
 80023f8:	482a      	ldr	r0, [pc, #168]	@ (80024a4 <HAL_GPIO_DeInit+0x1ac>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	400a      	ands	r2, r1
 8002400:	3302      	adds	r3, #2
 8002402:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2103      	movs	r1, #3
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	401a      	ands	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	08da      	lsrs	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3208      	adds	r2, #8
 8002424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	220f      	movs	r2, #15
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	08d2      	lsrs	r2, r2, #3
 800243c:	4019      	ands	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3208      	adds	r2, #8
 8002442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2103      	movs	r1, #3
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	401a      	ands	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	2101      	movs	r1, #1
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2103      	movs	r1, #3
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	401a      	ands	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3301      	adds	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b0f      	cmp	r3, #15
 8002490:	f67f af40 	bls.w	8002314 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40013c00 	.word	0x40013c00

080024c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d0:	787b      	ldrb	r3, [r7, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024dc:	e003      	b.n	80024e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	041a      	lsls	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	619a      	str	r2, [r3, #24]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002504:	887a      	ldrh	r2, [r7, #2]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4013      	ands	r3, r2
 800250a:	041a      	lsls	r2, r3, #16
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43d9      	mvns	r1, r3
 8002510:	887b      	ldrh	r3, [r7, #2]
 8002512:	400b      	ands	r3, r1
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	619a      	str	r2, [r3, #24]
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002532:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800253e:	4a05      	ldr	r2, [pc, #20]	@ (8002554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe fede 	bl	8001308 <HAL_GPIO_EXTI_Callback>
  }
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40013c00 	.word	0x40013c00

08002558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e12b      	b.n	80027c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe ff3e 	bl	8001400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2224      	movs	r2, #36	@ 0x24
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025bc:	f001 fc9e 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 80025c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4a81      	ldr	r2, [pc, #516]	@ (80027cc <HAL_I2C_Init+0x274>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d807      	bhi.n	80025dc <HAL_I2C_Init+0x84>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a80      	ldr	r2, [pc, #512]	@ (80027d0 <HAL_I2C_Init+0x278>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	bf94      	ite	ls
 80025d4:	2301      	movls	r3, #1
 80025d6:	2300      	movhi	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e006      	b.n	80025ea <HAL_I2C_Init+0x92>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4a7d      	ldr	r2, [pc, #500]	@ (80027d4 <HAL_I2C_Init+0x27c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	bf94      	ite	ls
 80025e4:	2301      	movls	r3, #1
 80025e6:	2300      	movhi	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0e7      	b.n	80027c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4a78      	ldr	r2, [pc, #480]	@ (80027d8 <HAL_I2C_Init+0x280>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	0c9b      	lsrs	r3, r3, #18
 80025fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a6a      	ldr	r2, [pc, #424]	@ (80027cc <HAL_I2C_Init+0x274>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d802      	bhi.n	800262c <HAL_I2C_Init+0xd4>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3301      	adds	r3, #1
 800262a:	e009      	b.n	8002640 <HAL_I2C_Init+0xe8>
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	4a69      	ldr	r2, [pc, #420]	@ (80027dc <HAL_I2C_Init+0x284>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	099b      	lsrs	r3, r3, #6
 800263e:	3301      	adds	r3, #1
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	430b      	orrs	r3, r1
 8002646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002652:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	495c      	ldr	r1, [pc, #368]	@ (80027cc <HAL_I2C_Init+0x274>)
 800265c:	428b      	cmp	r3, r1
 800265e:	d819      	bhi.n	8002694 <HAL_I2C_Init+0x13c>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e59      	subs	r1, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	fbb1 f3f3 	udiv	r3, r1, r3
 800266e:	1c59      	adds	r1, r3, #1
 8002670:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002674:	400b      	ands	r3, r1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_I2C_Init+0x138>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1e59      	subs	r1, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fbb1 f3f3 	udiv	r3, r1, r3
 8002688:	3301      	adds	r3, #1
 800268a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268e:	e051      	b.n	8002734 <HAL_I2C_Init+0x1dc>
 8002690:	2304      	movs	r3, #4
 8002692:	e04f      	b.n	8002734 <HAL_I2C_Init+0x1dc>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d111      	bne.n	80026c0 <HAL_I2C_Init+0x168>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1e58      	subs	r0, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	440b      	add	r3, r1
 80026aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ae:	3301      	adds	r3, #1
 80026b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf0c      	ite	eq
 80026b8:	2301      	moveq	r3, #1
 80026ba:	2300      	movne	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	e012      	b.n	80026e6 <HAL_I2C_Init+0x18e>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1e58      	subs	r0, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	0099      	lsls	r1, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Init+0x196>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e022      	b.n	8002734 <HAL_I2C_Init+0x1dc>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10e      	bne.n	8002714 <HAL_I2C_Init+0x1bc>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1e58      	subs	r0, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6859      	ldr	r1, [r3, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	440b      	add	r3, r1
 8002704:	fbb0 f3f3 	udiv	r3, r0, r3
 8002708:	3301      	adds	r3, #1
 800270a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002712:	e00f      	b.n	8002734 <HAL_I2C_Init+0x1dc>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1e58      	subs	r0, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	0099      	lsls	r1, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	fbb0 f3f3 	udiv	r3, r0, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002730:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	6809      	ldr	r1, [r1, #0]
 8002738:	4313      	orrs	r3, r2
 800273a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69da      	ldr	r2, [r3, #28]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002762:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6911      	ldr	r1, [r2, #16]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68d2      	ldr	r2, [r2, #12]
 800276e:	4311      	orrs	r1, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	430b      	orrs	r3, r1
 8002776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	000186a0 	.word	0x000186a0
 80027d0:	001e847f 	.word	0x001e847f
 80027d4:	003d08ff 	.word	0x003d08ff
 80027d8:	431bde83 	.word	0x431bde83
 80027dc:	10624dd3 	.word	0x10624dd3

080027e0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e021      	b.n	8002836 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2224      	movs	r2, #36	@ 0x24
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe fe40 	bl	8001490 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	461a      	mov	r2, r3
 800284e:	4603      	mov	r3, r0
 8002850:	817b      	strh	r3, [r7, #10]
 8002852:	460b      	mov	r3, r1
 8002854:	813b      	strh	r3, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800285a:	f7ff fadb 	bl	8001e14 <HAL_GetTick>
 800285e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b20      	cmp	r3, #32
 800286a:	f040 80d9 	bne.w	8002a20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2319      	movs	r3, #25
 8002874:	2201      	movs	r2, #1
 8002876:	496d      	ldr	r1, [pc, #436]	@ (8002a2c <HAL_I2C_Mem_Write+0x1ec>)
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 fc99 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
 8002886:	e0cc      	b.n	8002a22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_I2C_Mem_Write+0x56>
 8002892:	2302      	movs	r3, #2
 8002894:	e0c5      	b.n	8002a22 <HAL_I2C_Mem_Write+0x1e2>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d007      	beq.n	80028bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2221      	movs	r2, #33	@ 0x21
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2240      	movs	r2, #64	@ 0x40
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a3a      	ldr	r2, [r7, #32]
 80028e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4a4d      	ldr	r2, [pc, #308]	@ (8002a30 <HAL_I2C_Mem_Write+0x1f0>)
 80028fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028fe:	88f8      	ldrh	r0, [r7, #6]
 8002900:	893a      	ldrh	r2, [r7, #8]
 8002902:	8979      	ldrh	r1, [r7, #10]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	4603      	mov	r3, r0
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fad0 	bl	8002eb4 <I2C_RequestMemoryWrite>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d052      	beq.n	80029c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e081      	b.n	8002a22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fd5e 	bl	80033e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00d      	beq.n	800294a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	2b04      	cmp	r3, #4
 8002934:	d107      	bne.n	8002946 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002944:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e06b      	b.n	8002a22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d11b      	bne.n	80029c0 <HAL_I2C_Mem_Write+0x180>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d017      	beq.n	80029c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1aa      	bne.n	800291e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 fd51 	bl	8003474 <I2C_WaitOnBTFFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00d      	beq.n	80029f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d107      	bne.n	80029f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e016      	b.n	8002a22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e000      	b.n	8002a22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
  }
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	00100002 	.word	0x00100002
 8002a30:	ffff0000 	.word	0xffff0000

08002a34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	@ 0x30
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	4608      	mov	r0, r1
 8002a3e:	4611      	mov	r1, r2
 8002a40:	461a      	mov	r2, r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	817b      	strh	r3, [r7, #10]
 8002a46:	460b      	mov	r3, r1
 8002a48:	813b      	strh	r3, [r7, #8]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a4e:	f7ff f9e1 	bl	8001e14 <HAL_GetTick>
 8002a52:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	f040 8214 	bne.w	8002e8a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2319      	movs	r3, #25
 8002a68:	2201      	movs	r2, #1
 8002a6a:	497b      	ldr	r1, [pc, #492]	@ (8002c58 <HAL_I2C_Mem_Read+0x224>)
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fb9f 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e207      	b.n	8002e8c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_I2C_Mem_Read+0x56>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e200      	b.n	8002e8c <HAL_I2C_Mem_Read+0x458>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d007      	beq.n	8002ab0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002abe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2222      	movs	r2, #34	@ 0x22
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2240      	movs	r2, #64	@ 0x40
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ada:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a5b      	ldr	r2, [pc, #364]	@ (8002c5c <HAL_I2C_Mem_Read+0x228>)
 8002af0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002af2:	88f8      	ldrh	r0, [r7, #6]
 8002af4:	893a      	ldrh	r2, [r7, #8]
 8002af6:	8979      	ldrh	r1, [r7, #10]
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	4603      	mov	r3, r0
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fa6c 	bl	8002fe0 <I2C_RequestMemoryRead>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e1bc      	b.n	8002e8c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d113      	bne.n	8002b42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	623b      	str	r3, [r7, #32]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	623b      	str	r3, [r7, #32]
 8002b2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e190      	b.n	8002e64 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d11b      	bne.n	8002b82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e170      	b.n	8002e64 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d11b      	bne.n	8002bc2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002baa:	2300      	movs	r3, #0
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	e150      	b.n	8002e64 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bd8:	e144      	b.n	8002e64 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	f200 80f1 	bhi.w	8002dc6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d123      	bne.n	8002c34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fc87 	bl	8003504 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e145      	b.n	8002e8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c32:	e117      	b.n	8002e64 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d14e      	bne.n	8002cda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c42:	2200      	movs	r2, #0
 8002c44:	4906      	ldr	r1, [pc, #24]	@ (8002c60 <HAL_I2C_Mem_Read+0x22c>)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fab2 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e11a      	b.n	8002e8c <HAL_I2C_Mem_Read+0x458>
 8002c56:	bf00      	nop
 8002c58:	00100002 	.word	0x00100002
 8002c5c:	ffff0000 	.word	0xffff0000
 8002c60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cd8:	e0c4      	b.n	8002e64 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	496c      	ldr	r1, [pc, #432]	@ (8002e94 <HAL_I2C_Mem_Read+0x460>)
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fa63 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0cb      	b.n	8002e8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	4955      	ldr	r1, [pc, #340]	@ (8002e94 <HAL_I2C_Mem_Read+0x460>)
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fa35 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e09d      	b.n	8002e8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dc4:	e04e      	b.n	8002e64 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fb9a 	bl	8003504 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e058      	b.n	8002e8c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d124      	bne.n	8002e64 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d107      	bne.n	8002e32 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e30:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f47f aeb6 	bne.w	8002bda <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e000      	b.n	8002e8c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e8a:	2302      	movs	r3, #2
  }
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3728      	adds	r7, #40	@ 0x28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	00010004 	.word	0x00010004

08002e98 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea6:	b2db      	uxtb	r3, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	817b      	strh	r3, [r7, #10]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	813b      	strh	r3, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002edc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f960 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f04:	d103      	bne.n	8002f0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e05f      	b.n	8002fd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f12:	897b      	ldrh	r3, [r7, #10]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	6a3a      	ldr	r2, [r7, #32]
 8002f26:	492d      	ldr	r1, [pc, #180]	@ (8002fdc <I2C_RequestMemoryWrite+0x128>)
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f9bb 	bl	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e04c      	b.n	8002fd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f50:	6a39      	ldr	r1, [r7, #32]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fa46 	bl	80033e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00d      	beq.n	8002f7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d107      	bne.n	8002f76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e02b      	b.n	8002fd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d105      	bne.n	8002f8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f80:	893b      	ldrh	r3, [r7, #8]
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	611a      	str	r2, [r3, #16]
 8002f8a:	e021      	b.n	8002fd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f8c:	893b      	ldrh	r3, [r7, #8]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f9c:	6a39      	ldr	r1, [r7, #32]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 fa20 	bl	80033e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00d      	beq.n	8002fc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d107      	bne.n	8002fc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e005      	b.n	8002fd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fc6:	893b      	ldrh	r3, [r7, #8]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	00010002 	.word	0x00010002

08002fe0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	4608      	mov	r0, r1
 8002fea:	4611      	mov	r1, r2
 8002fec:	461a      	mov	r2, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	817b      	strh	r3, [r7, #10]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	813b      	strh	r3, [r7, #8]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003008:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003018:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	2200      	movs	r2, #0
 8003022:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f8c2 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00d      	beq.n	800304e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003040:	d103      	bne.n	800304a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003048:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0aa      	b.n	80031a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800304e:	897b      	ldrh	r3, [r7, #10]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800305c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	6a3a      	ldr	r2, [r7, #32]
 8003062:	4952      	ldr	r1, [pc, #328]	@ (80031ac <I2C_RequestMemoryRead+0x1cc>)
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f91d 	bl	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e097      	b.n	80031a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308c:	6a39      	ldr	r1, [r7, #32]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f9a8 	bl	80033e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00d      	beq.n	80030b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d107      	bne.n	80030b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e076      	b.n	80031a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030bc:	893b      	ldrh	r3, [r7, #8]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]
 80030c6:	e021      	b.n	800310c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030c8:	893b      	ldrh	r3, [r7, #8]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d8:	6a39      	ldr	r1, [r7, #32]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f982 	bl	80033e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00d      	beq.n	8003102 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d107      	bne.n	80030fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e050      	b.n	80031a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003102:	893b      	ldrh	r3, [r7, #8]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800310c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310e:	6a39      	ldr	r1, [r7, #32]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f967 	bl	80033e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00d      	beq.n	8003138 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	2b04      	cmp	r3, #4
 8003122:	d107      	bne.n	8003134 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003132:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e035      	b.n	80031a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003146:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	2200      	movs	r2, #0
 8003150:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f82b 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00d      	beq.n	800317c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800316e:	d103      	bne.n	8003178 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e013      	b.n	80031a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800317c:	897b      	ldrh	r3, [r7, #10]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318e:	6a3a      	ldr	r2, [r7, #32]
 8003190:	4906      	ldr	r1, [pc, #24]	@ (80031ac <I2C_RequestMemoryRead+0x1cc>)
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f886 	bl	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	00010002 	.word	0x00010002

080031b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c0:	e048      	b.n	8003254 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d044      	beq.n	8003254 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ca:	f7fe fe23 	bl	8001e14 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d139      	bne.n	8003254 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	0c1b      	lsrs	r3, r3, #16
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d10d      	bne.n	8003206 <I2C_WaitOnFlagUntilTimeout+0x56>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	43da      	mvns	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	e00c      	b.n	8003220 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	43da      	mvns	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4013      	ands	r3, r2
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	429a      	cmp	r2, r3
 8003224:	d116      	bne.n	8003254 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e023      	b.n	800329c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	0c1b      	lsrs	r3, r3, #16
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d10d      	bne.n	800327a <I2C_WaitOnFlagUntilTimeout+0xca>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	43da      	mvns	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4013      	ands	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	e00c      	b.n	8003294 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	43da      	mvns	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4013      	ands	r3, r2
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	429a      	cmp	r2, r3
 8003298:	d093      	beq.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032b2:	e071      	b.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c2:	d123      	bne.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	f043 0204 	orr.w	r2, r3, #4
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e067      	b.n	80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d041      	beq.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003314:	f7fe fd7e 	bl	8001e14 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d302      	bcc.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d136      	bne.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10c      	bne.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	43da      	mvns	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	e00b      	b.n	8003366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	43da      	mvns	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4013      	ands	r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e021      	b.n	80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	0c1b      	lsrs	r3, r3, #16
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d10c      	bne.n	80033bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	43da      	mvns	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4013      	ands	r3, r2
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e00b      	b.n	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	43da      	mvns	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4013      	ands	r3, r2
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bf14      	ite	ne
 80033ce:	2301      	movne	r3, #1
 80033d0:	2300      	moveq	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f47f af6d 	bne.w	80032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f0:	e034      	b.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f8e3 	bl	80035be <I2C_IsAcknowledgeFailed>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e034      	b.n	800346c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d028      	beq.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fe fd03 	bl	8001e14 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d11d      	bne.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342a:	2b80      	cmp	r3, #128	@ 0x80
 800342c:	d016      	beq.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e007      	b.n	800346c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003466:	2b80      	cmp	r3, #128	@ 0x80
 8003468:	d1c3      	bne.n	80033f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003480:	e034      	b.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f89b 	bl	80035be <I2C_IsAcknowledgeFailed>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e034      	b.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d028      	beq.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7fe fcbb 	bl	8001e14 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d11d      	bne.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d016      	beq.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e007      	b.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d1c3      	bne.n	8003482 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003510:	e049      	b.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b10      	cmp	r3, #16
 800351e:	d119      	bne.n	8003554 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0210 	mvn.w	r2, #16
 8003528:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e030      	b.n	80035b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003554:	f7fe fc5e 	bl	8001e14 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	429a      	cmp	r2, r3
 8003562:	d302      	bcc.n	800356a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d11d      	bne.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003574:	2b40      	cmp	r3, #64	@ 0x40
 8003576:	d016      	beq.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	f043 0220 	orr.w	r2, r3, #32
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b0:	2b40      	cmp	r3, #64	@ 0x40
 80035b2:	d1ae      	bne.n	8003512 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035d4:	d11b      	bne.n	800360e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f043 0204 	orr.w	r2, r3, #4
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e267      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d075      	beq.n	8003726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800363a:	4b88      	ldr	r3, [pc, #544]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b04      	cmp	r3, #4
 8003644:	d00c      	beq.n	8003660 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003646:	4b85      	ldr	r3, [pc, #532]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800364e:	2b08      	cmp	r3, #8
 8003650:	d112      	bne.n	8003678 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003652:	4b82      	ldr	r3, [pc, #520]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800365a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800365e:	d10b      	bne.n	8003678 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003660:	4b7e      	ldr	r3, [pc, #504]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05b      	beq.n	8003724 <HAL_RCC_OscConfig+0x108>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d157      	bne.n	8003724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e242      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003680:	d106      	bne.n	8003690 <HAL_RCC_OscConfig+0x74>
 8003682:	4b76      	ldr	r3, [pc, #472]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a75      	ldr	r2, [pc, #468]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e01d      	b.n	80036cc <HAL_RCC_OscConfig+0xb0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x98>
 800369a:	4b70      	ldr	r3, [pc, #448]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a6f      	ldr	r2, [pc, #444]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b6d      	ldr	r3, [pc, #436]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a6c      	ldr	r2, [pc, #432]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0xb0>
 80036b4:	4b69      	ldr	r3, [pc, #420]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a68      	ldr	r2, [pc, #416]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b66      	ldr	r3, [pc, #408]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a65      	ldr	r2, [pc, #404]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fe fb9e 	bl	8001e14 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036dc:	f7fe fb9a 	bl	8001e14 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	@ 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e207      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	4b5b      	ldr	r3, [pc, #364]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0xc0>
 80036fa:	e014      	b.n	8003726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fe fb8a 	bl	8001e14 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003704:	f7fe fb86 	bl	8001e14 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	@ 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e1f3      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	4b51      	ldr	r3, [pc, #324]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0xe8>
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d063      	beq.n	80037fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003732:	4b4a      	ldr	r3, [pc, #296]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373e:	4b47      	ldr	r3, [pc, #284]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003746:	2b08      	cmp	r3, #8
 8003748:	d11c      	bne.n	8003784 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374a:	4b44      	ldr	r3, [pc, #272]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d116      	bne.n	8003784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003756:	4b41      	ldr	r3, [pc, #260]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_RCC_OscConfig+0x152>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d001      	beq.n	800376e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e1c7      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376e:	4b3b      	ldr	r3, [pc, #236]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4937      	ldr	r1, [pc, #220]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	e03a      	b.n	80037fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800378c:	4b34      	ldr	r3, [pc, #208]	@ (8003860 <HAL_RCC_OscConfig+0x244>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7fe fb3f 	bl	8001e14 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379a:	f7fe fb3b 	bl	8001e14 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e1a8      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ac:	4b2b      	ldr	r3, [pc, #172]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b8:	4b28      	ldr	r3, [pc, #160]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4925      	ldr	r1, [pc, #148]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]
 80037cc:	e015      	b.n	80037fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ce:	4b24      	ldr	r3, [pc, #144]	@ (8003860 <HAL_RCC_OscConfig+0x244>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe fb1e 	bl	8001e14 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037dc:	f7fe fb1a 	bl	8001e14 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e187      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ee:	4b1b      	ldr	r3, [pc, #108]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d036      	beq.n	8003874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d016      	beq.n	800383c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800380e:	4b15      	ldr	r3, [pc, #84]	@ (8003864 <HAL_RCC_OscConfig+0x248>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003814:	f7fe fafe 	bl	8001e14 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381c:	f7fe fafa 	bl	8001e14 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e167      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382e:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x200>
 800383a:	e01b      	b.n	8003874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383c:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <HAL_RCC_OscConfig+0x248>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003842:	f7fe fae7 	bl	8001e14 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003848:	e00e      	b.n	8003868 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384a:	f7fe fae3 	bl	8001e14 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d907      	bls.n	8003868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e150      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
 800385c:	40023800 	.word	0x40023800
 8003860:	42470000 	.word	0x42470000
 8003864:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003868:	4b88      	ldr	r3, [pc, #544]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800386a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ea      	bne.n	800384a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8097 	beq.w	80039b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003882:	2300      	movs	r3, #0
 8003884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003886:	4b81      	ldr	r3, [pc, #516]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10f      	bne.n	80038b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	4b7d      	ldr	r3, [pc, #500]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800389c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a2:	4b7a      	ldr	r3, [pc, #488]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b2:	4b77      	ldr	r3, [pc, #476]	@ (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d118      	bne.n	80038f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038be:	4b74      	ldr	r3, [pc, #464]	@ (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a73      	ldr	r2, [pc, #460]	@ (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ca:	f7fe faa3 	bl	8001e14 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d2:	f7fe fa9f 	bl	8001e14 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e10c      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d106      	bne.n	8003906 <HAL_RCC_OscConfig+0x2ea>
 80038f8:	4b64      	ldr	r3, [pc, #400]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fc:	4a63      	ldr	r2, [pc, #396]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6713      	str	r3, [r2, #112]	@ 0x70
 8003904:	e01c      	b.n	8003940 <HAL_RCC_OscConfig+0x324>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b05      	cmp	r3, #5
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x30c>
 800390e:	4b5f      	ldr	r3, [pc, #380]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003912:	4a5e      	ldr	r2, [pc, #376]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	6713      	str	r3, [r2, #112]	@ 0x70
 800391a:	4b5c      	ldr	r3, [pc, #368]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391e:	4a5b      	ldr	r2, [pc, #364]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6713      	str	r3, [r2, #112]	@ 0x70
 8003926:	e00b      	b.n	8003940 <HAL_RCC_OscConfig+0x324>
 8003928:	4b58      	ldr	r3, [pc, #352]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392c:	4a57      	ldr	r2, [pc, #348]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	6713      	str	r3, [r2, #112]	@ 0x70
 8003934:	4b55      	ldr	r3, [pc, #340]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003938:	4a54      	ldr	r2, [pc, #336]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800393a:	f023 0304 	bic.w	r3, r3, #4
 800393e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d015      	beq.n	8003974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7fe fa64 	bl	8001e14 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394e:	e00a      	b.n	8003966 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7fe fa60 	bl	8001e14 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e0cb      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003966:	4b49      	ldr	r3, [pc, #292]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0ee      	beq.n	8003950 <HAL_RCC_OscConfig+0x334>
 8003972:	e014      	b.n	800399e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003974:	f7fe fa4e 	bl	8001e14 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397a:	e00a      	b.n	8003992 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397c:	f7fe fa4a 	bl	8001e14 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0b5      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003992:	4b3e      	ldr	r3, [pc, #248]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1ee      	bne.n	800397c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d105      	bne.n	80039b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a4:	4b39      	ldr	r3, [pc, #228]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	4a38      	ldr	r2, [pc, #224]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80a1 	beq.w	8003afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ba:	4b34      	ldr	r3, [pc, #208]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d05c      	beq.n	8003a80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d141      	bne.n	8003a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	4b31      	ldr	r3, [pc, #196]	@ (8003a94 <HAL_RCC_OscConfig+0x478>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe fa1e 	bl	8001e14 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fe fa1a 	bl	8001e14 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e087      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	4b27      	ldr	r3, [pc, #156]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	019b      	lsls	r3, r3, #6
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	3b01      	subs	r3, #1
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	491b      	ldr	r1, [pc, #108]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a24:	4b1b      	ldr	r3, [pc, #108]	@ (8003a94 <HAL_RCC_OscConfig+0x478>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fe f9f3 	bl	8001e14 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fe f9ef 	bl	8001e14 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e05c      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a44:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x416>
 8003a50:	e054      	b.n	8003afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a52:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <HAL_RCC_OscConfig+0x478>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fe f9dc 	bl	8001e14 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fe f9d8 	bl	8001e14 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e045      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x444>
 8003a7e:	e03d      	b.n	8003afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e038      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40007000 	.word	0x40007000
 8003a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	@ (8003b08 <HAL_RCC_OscConfig+0x4ec>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d028      	beq.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d121      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d11a      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ac8:	4013      	ands	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d111      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800

08003b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0cc      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b20:	4b68      	ldr	r3, [pc, #416]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d90c      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b65      	ldr	r3, [pc, #404]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a58      	ldr	r2, [pc, #352]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d044      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d119      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d003      	beq.n	8003bca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	4b3f      	ldr	r3, [pc, #252]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e06f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bda:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e067      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bea:	4b37      	ldr	r3, [pc, #220]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4934      	ldr	r1, [pc, #208]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bfc:	f7fe f90a 	bl	8001e14 <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c04:	f7fe f906 	bl	8001e14 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e04f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 020c 	and.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1eb      	bne.n	8003c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c2c:	4b25      	ldr	r3, [pc, #148]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d20c      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	4b22      	ldr	r3, [pc, #136]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f821 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490a      	ldr	r1, [pc, #40]	@ (8003ccc <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd fcb2 	bl	800161c <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023c00 	.word	0x40023c00
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	08009e28 	.word	0x08009e28
 8003cd0:	200000b8 	.word	0x200000b8
 8003cd4:	200000bc 	.word	0x200000bc

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cdc:	b094      	sub	sp, #80	@ 0x50
 8003cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf0:	4b79      	ldr	r3, [pc, #484]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d00d      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x40>
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	f200 80e1 	bhi.w	8003ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x34>
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d003      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d0a:	e0db      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d0c:	4b73      	ldr	r3, [pc, #460]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x204>)
 8003d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d10:	e0db      	b.n	8003eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d12:	4b73      	ldr	r3, [pc, #460]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d16:	e0d8      	b.n	8003eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d18:	4b6f      	ldr	r3, [pc, #444]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d20:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d22:	4b6d      	ldr	r3, [pc, #436]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d063      	beq.n	8003df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	2200      	movs	r2, #0
 8003d36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d42:	2300      	movs	r3, #0
 8003d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d4a:	4622      	mov	r2, r4
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	f04f 0000 	mov.w	r0, #0
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	0159      	lsls	r1, r3, #5
 8003d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5c:	0150      	lsls	r0, r2, #5
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4621      	mov	r1, r4
 8003d64:	1a51      	subs	r1, r2, r1
 8003d66:	6139      	str	r1, [r7, #16]
 8003d68:	4629      	mov	r1, r5
 8003d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d7c:	4659      	mov	r1, fp
 8003d7e:	018b      	lsls	r3, r1, #6
 8003d80:	4651      	mov	r1, sl
 8003d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d86:	4651      	mov	r1, sl
 8003d88:	018a      	lsls	r2, r1, #6
 8003d8a:	4651      	mov	r1, sl
 8003d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d90:	4659      	mov	r1, fp
 8003d92:	eb63 0901 	sbc.w	r9, r3, r1
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003daa:	4690      	mov	r8, r2
 8003dac:	4699      	mov	r9, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	eb18 0303 	adds.w	r3, r8, r3
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	462b      	mov	r3, r5
 8003db8:	eb49 0303 	adc.w	r3, r9, r3
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dca:	4629      	mov	r1, r5
 8003dcc:	024b      	lsls	r3, r1, #9
 8003dce:	4621      	mov	r1, r4
 8003dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	024a      	lsls	r2, r1, #9
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dde:	2200      	movs	r2, #0
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003de2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003de8:	f7fc fa4a 	bl	8000280 <__aeabi_uldivmod>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4613      	mov	r3, r2
 8003df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003df4:	e058      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df6:	4b38      	ldr	r3, [pc, #224]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	099b      	lsrs	r3, r3, #6
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	4611      	mov	r1, r2
 8003e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e06:	623b      	str	r3, [r7, #32]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e10:	4642      	mov	r2, r8
 8003e12:	464b      	mov	r3, r9
 8003e14:	f04f 0000 	mov.w	r0, #0
 8003e18:	f04f 0100 	mov.w	r1, #0
 8003e1c:	0159      	lsls	r1, r3, #5
 8003e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e22:	0150      	lsls	r0, r2, #5
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4641      	mov	r1, r8
 8003e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e2e:	4649      	mov	r1, r9
 8003e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e48:	ebb2 040a 	subs.w	r4, r2, sl
 8003e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	00eb      	lsls	r3, r5, #3
 8003e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e5e:	00e2      	lsls	r2, r4, #3
 8003e60:	4614      	mov	r4, r2
 8003e62:	461d      	mov	r5, r3
 8003e64:	4643      	mov	r3, r8
 8003e66:	18e3      	adds	r3, r4, r3
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	eb45 0303 	adc.w	r3, r5, r3
 8003e70:	607b      	str	r3, [r7, #4]
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e7e:	4629      	mov	r1, r5
 8003e80:	028b      	lsls	r3, r1, #10
 8003e82:	4621      	mov	r1, r4
 8003e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e88:	4621      	mov	r1, r4
 8003e8a:	028a      	lsls	r2, r1, #10
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e92:	2200      	movs	r2, #0
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	61fa      	str	r2, [r7, #28]
 8003e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e9c:	f7fc f9f0 	bl	8000280 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	0c1b      	lsrs	r3, r3, #16
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003eb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ec2:	e002      	b.n	8003eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ec4:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3750      	adds	r7, #80	@ 0x50
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	00f42400 	.word	0x00f42400
 8003ee0:	007a1200 	.word	0x007a1200

08003ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	@ (8003ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eea:	681b      	ldr	r3, [r3, #0]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	200000b8 	.word	0x200000b8

08003efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f00:	f7ff fff0 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b05      	ldr	r3, [pc, #20]	@ (8003f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	0a9b      	lsrs	r3, r3, #10
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	4903      	ldr	r1, [pc, #12]	@ (8003f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	08009e38 	.word	0x08009e38

08003f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f28:	f7ff ffdc 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	0b5b      	lsrs	r3, r3, #13
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4903      	ldr	r1, [pc, #12]	@ (8003f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40023800 	.word	0x40023800
 8003f48:	08009e38 	.word	0x08009e38

08003f4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	220f      	movs	r2, #15
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f5c:	4b12      	ldr	r3, [pc, #72]	@ (8003fa8 <HAL_RCC_GetClockConfig+0x5c>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 0203 	and.w	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f68:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa8 <HAL_RCC_GetClockConfig+0x5c>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <HAL_RCC_GetClockConfig+0x5c>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f80:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <HAL_RCC_GetClockConfig+0x5c>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	08db      	lsrs	r3, r3, #3
 8003f86:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f8e:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <HAL_RCC_GetClockConfig+0x60>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0207 	and.w	r2, r3, #7
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	601a      	str	r2, [r3, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40023c00 	.word	0x40023c00

08003fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e07b      	b.n	80040ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d108      	bne.n	8003fdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fd2:	d009      	beq.n	8003fe8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	61da      	str	r2, [r3, #28]
 8003fda:	e005      	b.n	8003fe8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fd fa66 	bl	80014d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800401e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406c:	ea42 0103 	orr.w	r1, r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	f003 0104 	and.w	r1, r3, #4
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	f003 0210 	and.w	r2, r3, #16
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e041      	b.n	8004158 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fd fa3b 	bl	8001564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3304      	adds	r3, #4
 80040fe:	4619      	mov	r1, r3
 8004100:	4610      	mov	r0, r2
 8004102:	f000 fc3b 	bl	800497c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d001      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e044      	b.n	8004202 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1e      	ldr	r2, [pc, #120]	@ (8004210 <HAL_TIM_Base_Start_IT+0xb0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d018      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x6c>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a2:	d013      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x6c>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004214 <HAL_TIM_Base_Start_IT+0xb4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00e      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x6c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a19      	ldr	r2, [pc, #100]	@ (8004218 <HAL_TIM_Base_Start_IT+0xb8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d009      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x6c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a17      	ldr	r2, [pc, #92]	@ (800421c <HAL_TIM_Base_Start_IT+0xbc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0x6c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a16      	ldr	r2, [pc, #88]	@ (8004220 <HAL_TIM_Base_Start_IT+0xc0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d111      	bne.n	80041f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b06      	cmp	r3, #6
 80041dc:	d010      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ee:	e007      	b.n	8004200 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40010000 	.word	0x40010000
 8004214:	40000400 	.word	0x40000400
 8004218:	40000800 	.word	0x40000800
 800421c:	40000c00 	.word	0x40000c00
 8004220:	40014000 	.word	0x40014000

08004224 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e041      	b.n	80042ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f839 	bl	80042c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f000 fb8a 	bl	800497c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_TIM_PWM_Start+0x24>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e022      	b.n	8004342 <HAL_TIM_PWM_Start+0x6a>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d109      	bne.n	8004316 <HAL_TIM_PWM_Start+0x3e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	e015      	b.n	8004342 <HAL_TIM_PWM_Start+0x6a>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d109      	bne.n	8004330 <HAL_TIM_PWM_Start+0x58>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	e008      	b.n	8004342 <HAL_TIM_PWM_Start+0x6a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e068      	b.n	800441c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <HAL_TIM_PWM_Start+0x82>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004358:	e013      	b.n	8004382 <HAL_TIM_PWM_Start+0xaa>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b04      	cmp	r3, #4
 800435e:	d104      	bne.n	800436a <HAL_TIM_PWM_Start+0x92>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004368:	e00b      	b.n	8004382 <HAL_TIM_PWM_Start+0xaa>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b08      	cmp	r3, #8
 800436e:	d104      	bne.n	800437a <HAL_TIM_PWM_Start+0xa2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004378:	e003      	b.n	8004382 <HAL_TIM_PWM_Start+0xaa>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2202      	movs	r2, #2
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2201      	movs	r2, #1
 8004388:	6839      	ldr	r1, [r7, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fda8 	bl	8004ee0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a23      	ldr	r2, [pc, #140]	@ (8004424 <HAL_TIM_PWM_Start+0x14c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d107      	bne.n	80043aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004424 <HAL_TIM_PWM_Start+0x14c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d018      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x10e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043bc:	d013      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x10e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a19      	ldr	r2, [pc, #100]	@ (8004428 <HAL_TIM_PWM_Start+0x150>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x10e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a17      	ldr	r2, [pc, #92]	@ (800442c <HAL_TIM_PWM_Start+0x154>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x10e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a16      	ldr	r2, [pc, #88]	@ (8004430 <HAL_TIM_PWM_Start+0x158>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x10e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a14      	ldr	r2, [pc, #80]	@ (8004434 <HAL_TIM_PWM_Start+0x15c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d111      	bne.n	800440a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d010      	beq.n	800441a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004408:	e007      	b.n	800441a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0201 	orr.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40010000 	.word	0x40010000
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800
 8004430:	40000c00 	.word	0x40000c00
 8004434:	40014000 	.word	0x40014000

08004438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d020      	beq.n	800449c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01b      	beq.n	800449c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0202 	mvn.w	r2, #2
 800446c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fa5b 	bl	800493e <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa4d 	bl	800492a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fa5e 	bl	8004952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d020      	beq.n	80044e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01b      	beq.n	80044e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0204 	mvn.w	r2, #4
 80044b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fa35 	bl	800493e <HAL_TIM_IC_CaptureCallback>
 80044d4:	e005      	b.n	80044e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fa27 	bl	800492a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fa38 	bl	8004952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d020      	beq.n	8004534 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01b      	beq.n	8004534 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0208 	mvn.w	r2, #8
 8004504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2204      	movs	r2, #4
 800450a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa0f 	bl	800493e <HAL_TIM_IC_CaptureCallback>
 8004520:	e005      	b.n	800452e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa01 	bl	800492a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fa12 	bl	8004952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b00      	cmp	r3, #0
 800453c:	d020      	beq.n	8004580 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01b      	beq.n	8004580 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0210 	mvn.w	r2, #16
 8004550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2208      	movs	r2, #8
 8004556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f9e9 	bl	800493e <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f9db 	bl	800492a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f9ec 	bl	8004952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00c      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0201 	mvn.w	r2, #1
 800459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fc feea 	bl	8001378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00c      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fd2a 	bl	800501c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f9bd 	bl	8004966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00c      	beq.n	8004610 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0220 	mvn.w	r2, #32
 8004608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fcfc 	bl	8005008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004632:	2302      	movs	r3, #2
 8004634:	e0ae      	b.n	8004794 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b0c      	cmp	r3, #12
 8004642:	f200 809f 	bhi.w	8004784 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004646:	a201      	add	r2, pc, #4	@ (adr r2, 800464c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464c:	08004681 	.word	0x08004681
 8004650:	08004785 	.word	0x08004785
 8004654:	08004785 	.word	0x08004785
 8004658:	08004785 	.word	0x08004785
 800465c:	080046c1 	.word	0x080046c1
 8004660:	08004785 	.word	0x08004785
 8004664:	08004785 	.word	0x08004785
 8004668:	08004785 	.word	0x08004785
 800466c:	08004703 	.word	0x08004703
 8004670:	08004785 	.word	0x08004785
 8004674:	08004785 	.word	0x08004785
 8004678:	08004785 	.word	0x08004785
 800467c:	08004743 	.word	0x08004743
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fa04 	bl	8004a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0208 	orr.w	r2, r2, #8
 800469a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0204 	bic.w	r2, r2, #4
 80046aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6999      	ldr	r1, [r3, #24]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	619a      	str	r2, [r3, #24]
      break;
 80046be:	e064      	b.n	800478a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fa4a 	bl	8004b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6999      	ldr	r1, [r3, #24]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	021a      	lsls	r2, r3, #8
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	619a      	str	r2, [r3, #24]
      break;
 8004700:	e043      	b.n	800478a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fa95 	bl	8004c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0208 	orr.w	r2, r2, #8
 800471c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69da      	ldr	r2, [r3, #28]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0204 	bic.w	r2, r2, #4
 800472c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69d9      	ldr	r1, [r3, #28]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	61da      	str	r2, [r3, #28]
      break;
 8004740:	e023      	b.n	800478a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fadf 	bl	8004d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800475c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800476c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69d9      	ldr	r1, [r3, #28]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	021a      	lsls	r2, r3, #8
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	61da      	str	r2, [r3, #28]
      break;
 8004782:	e002      	b.n	800478a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	75fb      	strb	r3, [r7, #23]
      break;
 8004788:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004792:	7dfb      	ldrb	r3, [r7, #23]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_TIM_ConfigClockSource+0x1c>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e0b4      	b.n	8004922 <HAL_TIM_ConfigClockSource+0x186>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047f0:	d03e      	beq.n	8004870 <HAL_TIM_ConfigClockSource+0xd4>
 80047f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047f6:	f200 8087 	bhi.w	8004908 <HAL_TIM_ConfigClockSource+0x16c>
 80047fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047fe:	f000 8086 	beq.w	800490e <HAL_TIM_ConfigClockSource+0x172>
 8004802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004806:	d87f      	bhi.n	8004908 <HAL_TIM_ConfigClockSource+0x16c>
 8004808:	2b70      	cmp	r3, #112	@ 0x70
 800480a:	d01a      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0xa6>
 800480c:	2b70      	cmp	r3, #112	@ 0x70
 800480e:	d87b      	bhi.n	8004908 <HAL_TIM_ConfigClockSource+0x16c>
 8004810:	2b60      	cmp	r3, #96	@ 0x60
 8004812:	d050      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x11a>
 8004814:	2b60      	cmp	r3, #96	@ 0x60
 8004816:	d877      	bhi.n	8004908 <HAL_TIM_ConfigClockSource+0x16c>
 8004818:	2b50      	cmp	r3, #80	@ 0x50
 800481a:	d03c      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0xfa>
 800481c:	2b50      	cmp	r3, #80	@ 0x50
 800481e:	d873      	bhi.n	8004908 <HAL_TIM_ConfigClockSource+0x16c>
 8004820:	2b40      	cmp	r3, #64	@ 0x40
 8004822:	d058      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x13a>
 8004824:	2b40      	cmp	r3, #64	@ 0x40
 8004826:	d86f      	bhi.n	8004908 <HAL_TIM_ConfigClockSource+0x16c>
 8004828:	2b30      	cmp	r3, #48	@ 0x30
 800482a:	d064      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0x15a>
 800482c:	2b30      	cmp	r3, #48	@ 0x30
 800482e:	d86b      	bhi.n	8004908 <HAL_TIM_ConfigClockSource+0x16c>
 8004830:	2b20      	cmp	r3, #32
 8004832:	d060      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004834:	2b20      	cmp	r3, #32
 8004836:	d867      	bhi.n	8004908 <HAL_TIM_ConfigClockSource+0x16c>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d05c      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0x15a>
 800483c:	2b10      	cmp	r3, #16
 800483e:	d05a      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004840:	e062      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004852:	f000 fb25 	bl	8004ea0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004864:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	609a      	str	r2, [r3, #8]
      break;
 800486e:	e04f      	b.n	8004910 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004880:	f000 fb0e 	bl	8004ea0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004892:	609a      	str	r2, [r3, #8]
      break;
 8004894:	e03c      	b.n	8004910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a2:	461a      	mov	r2, r3
 80048a4:	f000 fa82 	bl	8004dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2150      	movs	r1, #80	@ 0x50
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fadb 	bl	8004e6a <TIM_ITRx_SetConfig>
      break;
 80048b4:	e02c      	b.n	8004910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048c2:	461a      	mov	r2, r3
 80048c4:	f000 faa1 	bl	8004e0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2160      	movs	r1, #96	@ 0x60
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 facb 	bl	8004e6a <TIM_ITRx_SetConfig>
      break;
 80048d4:	e01c      	b.n	8004910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e2:	461a      	mov	r2, r3
 80048e4:	f000 fa62 	bl	8004dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2140      	movs	r1, #64	@ 0x40
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fabb 	bl	8004e6a <TIM_ITRx_SetConfig>
      break;
 80048f4:	e00c      	b.n	8004910 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f000 fab2 	bl	8004e6a <TIM_ITRx_SetConfig>
      break;
 8004906:	e003      	b.n	8004910 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
      break;
 800490c:	e000      	b.n	8004910 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800490e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
	...

0800497c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3a      	ldr	r2, [pc, #232]	@ (8004a78 <TIM_Base_SetConfig+0xfc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00f      	beq.n	80049b4 <TIM_Base_SetConfig+0x38>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499a:	d00b      	beq.n	80049b4 <TIM_Base_SetConfig+0x38>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a37      	ldr	r2, [pc, #220]	@ (8004a7c <TIM_Base_SetConfig+0x100>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <TIM_Base_SetConfig+0x38>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a36      	ldr	r2, [pc, #216]	@ (8004a80 <TIM_Base_SetConfig+0x104>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_Base_SetConfig+0x38>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a35      	ldr	r2, [pc, #212]	@ (8004a84 <TIM_Base_SetConfig+0x108>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d108      	bne.n	80049c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a78 <TIM_Base_SetConfig+0xfc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01b      	beq.n	8004a06 <TIM_Base_SetConfig+0x8a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d4:	d017      	beq.n	8004a06 <TIM_Base_SetConfig+0x8a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a28      	ldr	r2, [pc, #160]	@ (8004a7c <TIM_Base_SetConfig+0x100>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d013      	beq.n	8004a06 <TIM_Base_SetConfig+0x8a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a27      	ldr	r2, [pc, #156]	@ (8004a80 <TIM_Base_SetConfig+0x104>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00f      	beq.n	8004a06 <TIM_Base_SetConfig+0x8a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a26      	ldr	r2, [pc, #152]	@ (8004a84 <TIM_Base_SetConfig+0x108>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00b      	beq.n	8004a06 <TIM_Base_SetConfig+0x8a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a25      	ldr	r2, [pc, #148]	@ (8004a88 <TIM_Base_SetConfig+0x10c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <TIM_Base_SetConfig+0x8a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a24      	ldr	r2, [pc, #144]	@ (8004a8c <TIM_Base_SetConfig+0x110>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_Base_SetConfig+0x8a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a23      	ldr	r2, [pc, #140]	@ (8004a90 <TIM_Base_SetConfig+0x114>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d108      	bne.n	8004a18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004a78 <TIM_Base_SetConfig+0xfc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d103      	bne.n	8004a4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d105      	bne.n	8004a6a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f023 0201 	bic.w	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	611a      	str	r2, [r3, #16]
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40000800 	.word	0x40000800
 8004a84:	40000c00 	.word	0x40000c00
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800

08004a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f023 0201 	bic.w	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0303 	bic.w	r3, r3, #3
 8004aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f023 0302 	bic.w	r3, r3, #2
 8004adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a1c      	ldr	r2, [pc, #112]	@ (8004b5c <TIM_OC1_SetConfig+0xc8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10c      	bne.n	8004b0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0308 	bic.w	r3, r3, #8
 8004af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f023 0304 	bic.w	r3, r3, #4
 8004b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a13      	ldr	r2, [pc, #76]	@ (8004b5c <TIM_OC1_SetConfig+0xc8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d111      	bne.n	8004b36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	621a      	str	r2, [r3, #32]
}
 8004b50:	bf00      	nop
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	40010000 	.word	0x40010000

08004b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f023 0210 	bic.w	r2, r3, #16
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f023 0320 	bic.w	r3, r3, #32
 8004baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a1e      	ldr	r2, [pc, #120]	@ (8004c34 <TIM_OC2_SetConfig+0xd4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d10d      	bne.n	8004bdc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a15      	ldr	r2, [pc, #84]	@ (8004c34 <TIM_OC2_SetConfig+0xd4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d113      	bne.n	8004c0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40010000 	.word	0x40010000

08004c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0303 	bic.w	r3, r3, #3
 8004c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a1d      	ldr	r2, [pc, #116]	@ (8004d08 <TIM_OC3_SetConfig+0xd0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10d      	bne.n	8004cb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a14      	ldr	r2, [pc, #80]	@ (8004d08 <TIM_OC3_SetConfig+0xd0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d113      	bne.n	8004ce2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	621a      	str	r2, [r3, #32]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40010000 	.word	0x40010000

08004d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	031b      	lsls	r3, r3, #12
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a10      	ldr	r2, [pc, #64]	@ (8004da8 <TIM_OC4_SetConfig+0x9c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d109      	bne.n	8004d80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	019b      	lsls	r3, r3, #6
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40010000 	.word	0x40010000

08004dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	f023 0201 	bic.w	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f023 030a 	bic.w	r3, r3, #10
 8004de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	621a      	str	r2, [r3, #32]
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b087      	sub	sp, #28
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	f023 0210 	bic.w	r2, r3, #16
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	031b      	lsls	r3, r3, #12
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	621a      	str	r2, [r3, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f043 0307 	orr.w	r3, r3, #7
 8004e8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	609a      	str	r2, [r3, #8]
}
 8004e94:	bf00      	nop
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	021a      	lsls	r2, r3, #8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	609a      	str	r2, [r3, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1a      	ldr	r2, [r3, #32]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	43db      	mvns	r3, r3
 8004f02:	401a      	ands	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a1a      	ldr	r2, [r3, #32]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 031f 	and.w	r3, r3, #31
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	fa01 f303 	lsl.w	r3, r1, r3
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	621a      	str	r2, [r3, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
	...

08004f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e050      	b.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d018      	beq.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f90:	d013      	beq.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a18      	ldr	r2, [pc, #96]	@ (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a16      	ldr	r2, [pc, #88]	@ (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a15      	ldr	r2, [pc, #84]	@ (8005000 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a13      	ldr	r2, [pc, #76]	@ (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800
 8005000:	40000c00 	.word	0x40000c00
 8005004:	40014000 	.word	0x40014000

08005008 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <__NVIC_SetPriority>:
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	6039      	str	r1, [r7, #0]
 800503a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800503c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005040:	2b00      	cmp	r3, #0
 8005042:	db0a      	blt.n	800505a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	490c      	ldr	r1, [pc, #48]	@ (800507c <__NVIC_SetPriority+0x4c>)
 800504a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504e:	0112      	lsls	r2, r2, #4
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	440b      	add	r3, r1
 8005054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005058:	e00a      	b.n	8005070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	b2da      	uxtb	r2, r3
 800505e:	4908      	ldr	r1, [pc, #32]	@ (8005080 <__NVIC_SetPriority+0x50>)
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	3b04      	subs	r3, #4
 8005068:	0112      	lsls	r2, r2, #4
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	440b      	add	r3, r1
 800506e:	761a      	strb	r2, [r3, #24]
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	e000e100 	.word	0xe000e100
 8005080:	e000ed00 	.word	0xe000ed00

08005084 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005088:	4b05      	ldr	r3, [pc, #20]	@ (80050a0 <SysTick_Handler+0x1c>)
 800508a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800508c:	f002 fb8e 	bl	80077ac <xTaskGetSchedulerState>
 8005090:	4603      	mov	r3, r0
 8005092:	2b01      	cmp	r3, #1
 8005094:	d001      	beq.n	800509a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005096:	f003 fa87 	bl	80085a8 <xPortSysTickHandler>
  }
}
 800509a:	bf00      	nop
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	e000e010 	.word	0xe000e010

080050a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050a8:	2100      	movs	r1, #0
 80050aa:	f06f 0004 	mvn.w	r0, #4
 80050ae:	f7ff ffbf 	bl	8005030 <__NVIC_SetPriority>
#endif
}
 80050b2:	bf00      	nop
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050be:	f3ef 8305 	mrs	r3, IPSR
 80050c2:	603b      	str	r3, [r7, #0]
  return(result);
 80050c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050ca:	f06f 0305 	mvn.w	r3, #5
 80050ce:	607b      	str	r3, [r7, #4]
 80050d0:	e00c      	b.n	80050ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050d2:	4b0a      	ldr	r3, [pc, #40]	@ (80050fc <osKernelInitialize+0x44>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80050da:	4b08      	ldr	r3, [pc, #32]	@ (80050fc <osKernelInitialize+0x44>)
 80050dc:	2201      	movs	r2, #1
 80050de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	607b      	str	r3, [r7, #4]
 80050e4:	e002      	b.n	80050ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80050e6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050ec:	687b      	ldr	r3, [r7, #4]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	200002d0 	.word	0x200002d0

08005100 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005106:	f3ef 8305 	mrs	r3, IPSR
 800510a:	603b      	str	r3, [r7, #0]
  return(result);
 800510c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005112:	f06f 0305 	mvn.w	r3, #5
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	e010      	b.n	800513c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800511a:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <osKernelStart+0x48>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d109      	bne.n	8005136 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005122:	f7ff ffbf 	bl	80050a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005126:	4b08      	ldr	r3, [pc, #32]	@ (8005148 <osKernelStart+0x48>)
 8005128:	2202      	movs	r2, #2
 800512a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800512c:	f001 feae 	bl	8006e8c <vTaskStartScheduler>
      stat = osOK;
 8005130:	2300      	movs	r3, #0
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	e002      	b.n	800513c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005136:	f04f 33ff 	mov.w	r3, #4294967295
 800513a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800513c:	687b      	ldr	r3, [r7, #4]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200002d0 	.word	0x200002d0

0800514c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b08e      	sub	sp, #56	@ 0x38
 8005150:	af04      	add	r7, sp, #16
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005158:	2300      	movs	r3, #0
 800515a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800515c:	f3ef 8305 	mrs	r3, IPSR
 8005160:	617b      	str	r3, [r7, #20]
  return(result);
 8005162:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005164:	2b00      	cmp	r3, #0
 8005166:	d17e      	bne.n	8005266 <osThreadNew+0x11a>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d07b      	beq.n	8005266 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800516e:	2380      	movs	r3, #128	@ 0x80
 8005170:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005172:	2318      	movs	r3, #24
 8005174:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295
 800517e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d045      	beq.n	8005212 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <osThreadNew+0x48>
        name = attr->name;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <osThreadNew+0x6e>
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b38      	cmp	r3, #56	@ 0x38
 80051ac:	d805      	bhi.n	80051ba <osThreadNew+0x6e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <osThreadNew+0x72>
        return (NULL);
 80051ba:	2300      	movs	r3, #0
 80051bc:	e054      	b.n	8005268 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	089b      	lsrs	r3, r3, #2
 80051cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00e      	beq.n	80051f4 <osThreadNew+0xa8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2baf      	cmp	r3, #175	@ 0xaf
 80051dc:	d90a      	bls.n	80051f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d006      	beq.n	80051f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <osThreadNew+0xa8>
        mem = 1;
 80051ee:	2301      	movs	r3, #1
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	e010      	b.n	8005216 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10c      	bne.n	8005216 <osThreadNew+0xca>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d108      	bne.n	8005216 <osThreadNew+0xca>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <osThreadNew+0xca>
          mem = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	e001      	b.n	8005216 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d110      	bne.n	800523e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005224:	9202      	str	r2, [sp, #8]
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6a3a      	ldr	r2, [r7, #32]
 8005230:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f001 fc30 	bl	8006a98 <xTaskCreateStatic>
 8005238:	4603      	mov	r3, r0
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	e013      	b.n	8005266 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d110      	bne.n	8005266 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	b29a      	uxth	r2, r3
 8005248:	f107 0310 	add.w	r3, r7, #16
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f001 fc7e 	bl	8006b58 <xTaskCreate>
 800525c:	4603      	mov	r3, r0
 800525e:	2b01      	cmp	r3, #1
 8005260:	d001      	beq.n	8005266 <osThreadNew+0x11a>
            hTask = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005266:	693b      	ldr	r3, [r7, #16]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3728      	adds	r7, #40	@ 0x28
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005278:	f3ef 8305 	mrs	r3, IPSR
 800527c:	60bb      	str	r3, [r7, #8]
  return(result);
 800527e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <osDelay+0x1c>
    stat = osErrorISR;
 8005284:	f06f 0305 	mvn.w	r3, #5
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e007      	b.n	800529c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f001 fdc2 	bl	8006e20 <vTaskDelay>
    }
  }

  return (stat);
 800529c:	68fb      	ldr	r3, [r7, #12]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b088      	sub	sp, #32
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052b2:	f3ef 8305 	mrs	r3, IPSR
 80052b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80052b8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d174      	bne.n	80053a8 <osMutexNew+0x102>
    if (attr != NULL) {
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <osMutexNew+0x26>
      type = attr->attr_bits;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	e001      	b.n	80052d0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <osMutexNew+0x3a>
      rmtx = 1U;
 80052da:	2301      	movs	r3, #1
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	e001      	b.n	80052e4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d15c      	bne.n	80053a8 <osMutexNew+0x102>
      mem = -1;
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295
 80052f2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d015      	beq.n	8005326 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d006      	beq.n	8005310 <osMutexNew+0x6a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b4f      	cmp	r3, #79	@ 0x4f
 8005308:	d902      	bls.n	8005310 <osMutexNew+0x6a>
          mem = 1;
 800530a:	2301      	movs	r3, #1
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	e00c      	b.n	800532a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d108      	bne.n	800532a <osMutexNew+0x84>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d104      	bne.n	800532a <osMutexNew+0x84>
            mem = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	e001      	b.n	800532a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d112      	bne.n	8005356 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	4619      	mov	r1, r3
 800533c:	2004      	movs	r0, #4
 800533e:	f000 fc3e 	bl	8005bbe <xQueueCreateMutexStatic>
 8005342:	61f8      	str	r0, [r7, #28]
 8005344:	e016      	b.n	8005374 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	4619      	mov	r1, r3
 800534c:	2001      	movs	r0, #1
 800534e:	f000 fc36 	bl	8005bbe <xQueueCreateMutexStatic>
 8005352:	61f8      	str	r0, [r7, #28]
 8005354:	e00e      	b.n	8005374 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10b      	bne.n	8005374 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005362:	2004      	movs	r0, #4
 8005364:	f000 fc13 	bl	8005b8e <xQueueCreateMutex>
 8005368:	61f8      	str	r0, [r7, #28]
 800536a:	e003      	b.n	8005374 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800536c:	2001      	movs	r0, #1
 800536e:	f000 fc0e 	bl	8005b8e <xQueueCreateMutex>
 8005372:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00c      	beq.n	8005394 <osMutexNew+0xee>
        if (attr != NULL) {
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <osMutexNew+0xe2>
          name = attr->name;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	e001      	b.n	800538c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800538c:	68f9      	ldr	r1, [r7, #12]
 800538e:	69f8      	ldr	r0, [r7, #28]
 8005390:	f001 fafa 	bl	8006988 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d006      	beq.n	80053a8 <osMutexNew+0x102>
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80053a8:	69fb      	ldr	r3, [r7, #28]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b086      	sub	sp, #24
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f023 0301 	bic.w	r3, r3, #1
 80053c2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053d0:	f3ef 8305 	mrs	r3, IPSR
 80053d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80053d6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80053dc:	f06f 0305 	mvn.w	r3, #5
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e02c      	b.n	800543e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d103      	bne.n	80053f2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80053ea:	f06f 0303 	mvn.w	r3, #3
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e025      	b.n	800543e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d011      	beq.n	800541c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	6938      	ldr	r0, [r7, #16]
 80053fc:	f000 fc2f 	bl	8005c5e <xQueueTakeMutexRecursive>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	d01b      	beq.n	800543e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800540c:	f06f 0301 	mvn.w	r3, #1
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e014      	b.n	800543e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005414:	f06f 0302 	mvn.w	r3, #2
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e010      	b.n	800543e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	6938      	ldr	r0, [r7, #16]
 8005420:	f000 ffd4 	bl	80063cc <xQueueSemaphoreTake>
 8005424:	4603      	mov	r3, r0
 8005426:	2b01      	cmp	r3, #1
 8005428:	d009      	beq.n	800543e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005430:	f06f 0301 	mvn.w	r3, #1
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	e002      	b.n	800543e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005438:	f06f 0302 	mvn.w	r3, #2
 800543c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800543e:	697b      	ldr	r3, [r7, #20]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f023 0301 	bic.w	r3, r3, #1
 8005456:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005464:	f3ef 8305 	mrs	r3, IPSR
 8005468:	60bb      	str	r3, [r7, #8]
  return(result);
 800546a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005470:	f06f 0305 	mvn.w	r3, #5
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	e01f      	b.n	80054b8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800547e:	f06f 0303 	mvn.w	r3, #3
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e018      	b.n	80054b8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800548c:	6938      	ldr	r0, [r7, #16]
 800548e:	f000 fbb1 	bl	8005bf4 <xQueueGiveMutexRecursive>
 8005492:	4603      	mov	r3, r0
 8005494:	2b01      	cmp	r3, #1
 8005496:	d00f      	beq.n	80054b8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005498:	f06f 0302 	mvn.w	r3, #2
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e00b      	b.n	80054b8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80054a0:	2300      	movs	r3, #0
 80054a2:	2200      	movs	r2, #0
 80054a4:	2100      	movs	r1, #0
 80054a6:	6938      	ldr	r0, [r7, #16]
 80054a8:	f000 fc7e 	bl	8005da8 <xQueueGenericSend>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d002      	beq.n	80054b8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80054b2:	f06f 0302 	mvn.w	r3, #2
 80054b6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80054b8:	697b      	ldr	r3, [r7, #20]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b08a      	sub	sp, #40	@ 0x28
 80054c6:	af02      	add	r7, sp, #8
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054d2:	f3ef 8305 	mrs	r3, IPSR
 80054d6:	613b      	str	r3, [r7, #16]
  return(result);
 80054d8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d175      	bne.n	80055ca <osSemaphoreNew+0x108>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d072      	beq.n	80055ca <osSemaphoreNew+0x108>
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d86e      	bhi.n	80055ca <osSemaphoreNew+0x108>
    mem = -1;
 80054ec:	f04f 33ff 	mov.w	r3, #4294967295
 80054f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d015      	beq.n	8005524 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d006      	beq.n	800550e <osSemaphoreNew+0x4c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	2b4f      	cmp	r3, #79	@ 0x4f
 8005506:	d902      	bls.n	800550e <osSemaphoreNew+0x4c>
        mem = 1;
 8005508:	2301      	movs	r3, #1
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	e00c      	b.n	8005528 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d108      	bne.n	8005528 <osSemaphoreNew+0x66>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <osSemaphoreNew+0x66>
          mem = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e001      	b.n	8005528 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552e:	d04c      	beq.n	80055ca <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d128      	bne.n	8005588 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d10a      	bne.n	8005552 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2203      	movs	r2, #3
 8005542:	9200      	str	r2, [sp, #0]
 8005544:	2200      	movs	r2, #0
 8005546:	2100      	movs	r1, #0
 8005548:	2001      	movs	r0, #1
 800554a:	f000 fa2b 	bl	80059a4 <xQueueGenericCreateStatic>
 800554e:	61f8      	str	r0, [r7, #28]
 8005550:	e005      	b.n	800555e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005552:	2203      	movs	r2, #3
 8005554:	2100      	movs	r1, #0
 8005556:	2001      	movs	r0, #1
 8005558:	f000 faa1 	bl	8005a9e <xQueueGenericCreate>
 800555c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d022      	beq.n	80055aa <osSemaphoreNew+0xe8>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01f      	beq.n	80055aa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800556a:	2300      	movs	r3, #0
 800556c:	2200      	movs	r2, #0
 800556e:	2100      	movs	r1, #0
 8005570:	69f8      	ldr	r0, [r7, #28]
 8005572:	f000 fc19 	bl	8005da8 <xQueueGenericSend>
 8005576:	4603      	mov	r3, r0
 8005578:	2b01      	cmp	r3, #1
 800557a:	d016      	beq.n	80055aa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800557c:	69f8      	ldr	r0, [r7, #28]
 800557e:	f001 f8b7 	bl	80066f0 <vQueueDelete>
            hSemaphore = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	e010      	b.n	80055aa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d108      	bne.n	80055a0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	461a      	mov	r2, r3
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 fb98 	bl	8005ccc <xQueueCreateCountingSemaphoreStatic>
 800559c:	61f8      	str	r0, [r7, #28]
 800559e:	e004      	b.n	80055aa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 fbcb 	bl	8005d3e <xQueueCreateCountingSemaphore>
 80055a8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00c      	beq.n	80055ca <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <osSemaphoreNew+0xfc>
          name = attr->name;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	e001      	b.n	80055c2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80055c2:	6979      	ldr	r1, [r7, #20]
 80055c4:	69f8      	ldr	r0, [r7, #28]
 80055c6:	f001 f9df 	bl	8006988 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80055ca:	69fb      	ldr	r3, [r7, #28]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80055ec:	f06f 0303 	mvn.w	r3, #3
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	e039      	b.n	8005668 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f4:	f3ef 8305 	mrs	r3, IPSR
 80055f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80055fa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d022      	beq.n	8005646 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005606:	f06f 0303 	mvn.w	r3, #3
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e02c      	b.n	8005668 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005612:	f107 0308 	add.w	r3, r7, #8
 8005616:	461a      	mov	r2, r3
 8005618:	2100      	movs	r1, #0
 800561a:	6938      	ldr	r0, [r7, #16]
 800561c:	f000 ffe6 	bl	80065ec <xQueueReceiveFromISR>
 8005620:	4603      	mov	r3, r0
 8005622:	2b01      	cmp	r3, #1
 8005624:	d003      	beq.n	800562e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005626:	f06f 0302 	mvn.w	r3, #2
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	e01c      	b.n	8005668 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d019      	beq.n	8005668 <osSemaphoreAcquire+0x94>
 8005634:	4b0f      	ldr	r3, [pc, #60]	@ (8005674 <osSemaphoreAcquire+0xa0>)
 8005636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	e010      	b.n	8005668 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	6938      	ldr	r0, [r7, #16]
 800564a:	f000 febf 	bl	80063cc <xQueueSemaphoreTake>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d009      	beq.n	8005668 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800565a:	f06f 0301 	mvn.w	r3, #1
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	e002      	b.n	8005668 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005662:	f06f 0302 	mvn.w	r3, #2
 8005666:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005668:	697b      	ldr	r3, [r7, #20]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800568e:	f06f 0303 	mvn.w	r3, #3
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	e02c      	b.n	80056f0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005696:	f3ef 8305 	mrs	r3, IPSR
 800569a:	60fb      	str	r3, [r7, #12]
  return(result);
 800569c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01a      	beq.n	80056d8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80056a6:	f107 0308 	add.w	r3, r7, #8
 80056aa:	4619      	mov	r1, r3
 80056ac:	6938      	ldr	r0, [r7, #16]
 80056ae:	f000 fd1b 	bl	80060e8 <xQueueGiveFromISR>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d003      	beq.n	80056c0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80056b8:	f06f 0302 	mvn.w	r3, #2
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	e017      	b.n	80056f0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d014      	beq.n	80056f0 <osSemaphoreRelease+0x78>
 80056c6:	4b0d      	ldr	r3, [pc, #52]	@ (80056fc <osSemaphoreRelease+0x84>)
 80056c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	e00b      	b.n	80056f0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80056d8:	2300      	movs	r3, #0
 80056da:	2200      	movs	r2, #0
 80056dc:	2100      	movs	r1, #0
 80056de:	6938      	ldr	r0, [r7, #16]
 80056e0:	f000 fb62 	bl	8005da8 <xQueueGenericSend>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d002      	beq.n	80056f0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80056ea:	f06f 0302 	mvn.w	r3, #2
 80056ee:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80056f0:	697b      	ldr	r3, [r7, #20]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4a07      	ldr	r2, [pc, #28]	@ (800572c <vApplicationGetIdleTaskMemory+0x2c>)
 8005710:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4a06      	ldr	r2, [pc, #24]	@ (8005730 <vApplicationGetIdleTaskMemory+0x30>)
 8005716:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2280      	movs	r2, #128	@ 0x80
 800571c:	601a      	str	r2, [r3, #0]
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	200002d4 	.word	0x200002d4
 8005730:	20000384 	.word	0x20000384

08005734 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a07      	ldr	r2, [pc, #28]	@ (8005760 <vApplicationGetTimerTaskMemory+0x2c>)
 8005744:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4a06      	ldr	r2, [pc, #24]	@ (8005764 <vApplicationGetTimerTaskMemory+0x30>)
 800574a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005752:	601a      	str	r2, [r3, #0]
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000584 	.word	0x20000584
 8005764:	20000634 	.word	0x20000634

08005768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f103 0208 	add.w	r2, r3, #8
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f04f 32ff 	mov.w	r2, #4294967295
 8005780:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f103 0208 	add.w	r2, r3, #8
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f103 0208 	add.w	r2, r3, #8
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057c2:	b480      	push	{r7}
 80057c4:	b085      	sub	sp, #20
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d103      	bne.n	800582a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e00c      	b.n	8005844 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3308      	adds	r3, #8
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	e002      	b.n	8005838 <vListInsert+0x2e>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	429a      	cmp	r2, r3
 8005842:	d2f6      	bcs.n	8005832 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	601a      	str	r2, [r3, #0]
}
 8005870:	bf00      	nop
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6892      	ldr	r2, [r2, #8]
 8005892:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6852      	ldr	r2, [r2, #4]
 800589c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d103      	bne.n	80058b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	1e5a      	subs	r2, r3, #1
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10b      	bne.n	80058fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058fc:	f002 fdc4 	bl	8008488 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005908:	68f9      	ldr	r1, [r7, #12]
 800590a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800590c:	fb01 f303 	mul.w	r3, r1, r3
 8005910:	441a      	add	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592c:	3b01      	subs	r3, #1
 800592e:	68f9      	ldr	r1, [r7, #12]
 8005930:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005932:	fb01 f303 	mul.w	r3, r1, r3
 8005936:	441a      	add	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	22ff      	movs	r2, #255	@ 0xff
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	22ff      	movs	r2, #255	@ 0xff
 8005948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d114      	bne.n	800597c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d01a      	beq.n	8005990 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3310      	adds	r3, #16
 800595e:	4618      	mov	r0, r3
 8005960:	f001 fd4e 	bl	8007400 <xTaskRemoveFromEventList>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d012      	beq.n	8005990 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800596a:	4b0d      	ldr	r3, [pc, #52]	@ (80059a0 <xQueueGenericReset+0xd0>)
 800596c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	e009      	b.n	8005990 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3310      	adds	r3, #16
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff fef1 	bl	8005768 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3324      	adds	r3, #36	@ 0x24
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff feec 	bl	8005768 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005990:	f002 fdac 	bl	80084ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005994:	2301      	movs	r3, #1
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08e      	sub	sp, #56	@ 0x38
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10b      	bne.n	80059d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059ca:	bf00      	nop
 80059cc:	bf00      	nop
 80059ce:	e7fd      	b.n	80059cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10b      	bne.n	80059ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059e8:	bf00      	nop
 80059ea:	bf00      	nop
 80059ec:	e7fd      	b.n	80059ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <xQueueGenericCreateStatic+0x56>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <xQueueGenericCreateStatic+0x5a>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <xQueueGenericCreateStatic+0x5c>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10b      	bne.n	8005a1c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	623b      	str	r3, [r7, #32]
}
 8005a16:	bf00      	nop
 8005a18:	bf00      	nop
 8005a1a:	e7fd      	b.n	8005a18 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d102      	bne.n	8005a28 <xQueueGenericCreateStatic+0x84>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <xQueueGenericCreateStatic+0x88>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <xQueueGenericCreateStatic+0x8a>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10b      	bne.n	8005a4a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	61fb      	str	r3, [r7, #28]
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	e7fd      	b.n	8005a46 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a4a:	2350      	movs	r3, #80	@ 0x50
 8005a4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b50      	cmp	r3, #80	@ 0x50
 8005a52:	d00b      	beq.n	8005a6c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	61bb      	str	r3, [r7, #24]
}
 8005a66:	bf00      	nop
 8005a68:	bf00      	nop
 8005a6a:	e7fd      	b.n	8005a68 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00d      	beq.n	8005a94 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f840 	bl	8005b14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3730      	adds	r7, #48	@ 0x30
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b08a      	sub	sp, #40	@ 0x28
 8005aa2:	af02      	add	r7, sp, #8
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10b      	bne.n	8005aca <xQueueGenericCreate+0x2c>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	613b      	str	r3, [r7, #16]
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	e7fd      	b.n	8005ac6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	3350      	adds	r3, #80	@ 0x50
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f002 fdf7 	bl	80086cc <pvPortMalloc>
 8005ade:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d011      	beq.n	8005b0a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	3350      	adds	r3, #80	@ 0x50
 8005aee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005af8:	79fa      	ldrb	r2, [r7, #7]
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	4613      	mov	r3, r2
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f805 	bl	8005b14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
	}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	e002      	b.n	8005b36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b42:	2101      	movs	r1, #1
 8005b44:	69b8      	ldr	r0, [r7, #24]
 8005b46:	f7ff fec3 	bl	80058d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	78fa      	ldrb	r2, [r7, #3]
 8005b4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b082      	sub	sp, #8
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00e      	beq.n	8005b86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2100      	movs	r1, #0
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f911 	bl	8005da8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005b86:	bf00      	nop
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b086      	sub	sp, #24
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	4603      	mov	r3, r0
 8005b96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	6939      	ldr	r1, [r7, #16]
 8005ba6:	6978      	ldr	r0, [r7, #20]
 8005ba8:	f7ff ff79 	bl	8005a9e <xQueueGenericCreate>
 8005bac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff ffd3 	bl	8005b5a <prvInitialiseMutex>

		return xNewQueue;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
	}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b088      	sub	sp, #32
 8005bc2:	af02      	add	r7, sp, #8
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	6039      	str	r1, [r7, #0]
 8005bc8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	6939      	ldr	r1, [r7, #16]
 8005bdc:	6978      	ldr	r0, [r7, #20]
 8005bde:	f7ff fee1 	bl	80059a4 <xQueueGenericCreateStatic>
 8005be2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f7ff ffb8 	bl	8005b5a <prvInitialiseMutex>

		return xNewQueue;
 8005bea:	68fb      	ldr	r3, [r7, #12]
	}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005bf4:	b590      	push	{r4, r7, lr}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10b      	bne.n	8005c1e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	60fb      	str	r3, [r7, #12]
}
 8005c18:	bf00      	nop
 8005c1a:	bf00      	nop
 8005c1c:	e7fd      	b.n	8005c1a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	689c      	ldr	r4, [r3, #8]
 8005c22:	f001 fdb3 	bl	800778c <xTaskGetCurrentTaskHandle>
 8005c26:	4603      	mov	r3, r0
 8005c28:	429c      	cmp	r4, r3
 8005c2a:	d111      	bne.n	8005c50 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	1e5a      	subs	r2, r3, #1
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d105      	bne.n	8005c4a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005c3e:	2300      	movs	r3, #0
 8005c40:	2200      	movs	r2, #0
 8005c42:	2100      	movs	r1, #0
 8005c44:	6938      	ldr	r0, [r7, #16]
 8005c46:	f000 f8af 	bl	8005da8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	617b      	str	r3, [r7, #20]
 8005c4e:	e001      	b.n	8005c54 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005c54:	697b      	ldr	r3, [r7, #20]
	}
 8005c56:	4618      	mov	r0, r3
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd90      	pop	{r4, r7, pc}

08005c5e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005c5e:	b590      	push	{r4, r7, lr}
 8005c60:	b087      	sub	sp, #28
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10b      	bne.n	8005c8a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60fb      	str	r3, [r7, #12]
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop
 8005c88:	e7fd      	b.n	8005c86 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	689c      	ldr	r4, [r3, #8]
 8005c8e:	f001 fd7d 	bl	800778c <xTaskGetCurrentTaskHandle>
 8005c92:	4603      	mov	r3, r0
 8005c94:	429c      	cmp	r4, r3
 8005c96:	d107      	bne.n	8005ca8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e00c      	b.n	8005cc2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	6938      	ldr	r0, [r7, #16]
 8005cac:	f000 fb8e 	bl	80063cc <xQueueSemaphoreTake>
 8005cb0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d004      	beq.n	8005cc2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005cc2:	697b      	ldr	r3, [r7, #20]
	}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd90      	pop	{r4, r7, pc}

08005ccc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	@ 0x28
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	61bb      	str	r3, [r7, #24]
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	e7fd      	b.n	8005cf2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d90b      	bls.n	8005d16 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	617b      	str	r3, [r7, #20]
}
 8005d10:	bf00      	nop
 8005d12:	bf00      	nop
 8005d14:	e7fd      	b.n	8005d12 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005d16:	2302      	movs	r3, #2
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2100      	movs	r1, #0
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f7ff fe3f 	bl	80059a4 <xQueueGenericCreateStatic>
 8005d26:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d34:	69fb      	ldr	r3, [r7, #28]
	}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3720      	adds	r7, #32
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b086      	sub	sp, #24
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	613b      	str	r3, [r7, #16]
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	e7fd      	b.n	8005d62 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d90b      	bls.n	8005d86 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	60fb      	str	r3, [r7, #12]
}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	e7fd      	b.n	8005d82 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005d86:	2202      	movs	r2, #2
 8005d88:	2100      	movs	r1, #0
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff fe87 	bl	8005a9e <xQueueGenericCreate>
 8005d90:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d9e:	697b      	ldr	r3, [r7, #20]
	}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08e      	sub	sp, #56	@ 0x38
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005db6:	2300      	movs	r3, #0
 8005db8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10b      	bne.n	8005ddc <xQueueGenericSend+0x34>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	e7fd      	b.n	8005dd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d103      	bne.n	8005dea <xQueueGenericSend+0x42>
 8005de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <xQueueGenericSend+0x46>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <xQueueGenericSend+0x48>
 8005dee:	2300      	movs	r3, #0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10b      	bne.n	8005e0c <xQueueGenericSend+0x64>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e06:	bf00      	nop
 8005e08:	bf00      	nop
 8005e0a:	e7fd      	b.n	8005e08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d103      	bne.n	8005e1a <xQueueGenericSend+0x72>
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <xQueueGenericSend+0x76>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <xQueueGenericSend+0x78>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10b      	bne.n	8005e3c <xQueueGenericSend+0x94>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	623b      	str	r3, [r7, #32]
}
 8005e36:	bf00      	nop
 8005e38:	bf00      	nop
 8005e3a:	e7fd      	b.n	8005e38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e3c:	f001 fcb6 	bl	80077ac <xTaskGetSchedulerState>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d102      	bne.n	8005e4c <xQueueGenericSend+0xa4>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <xQueueGenericSend+0xa8>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <xQueueGenericSend+0xaa>
 8005e50:	2300      	movs	r3, #0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10b      	bne.n	8005e6e <xQueueGenericSend+0xc6>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	61fb      	str	r3, [r7, #28]
}
 8005e68:	bf00      	nop
 8005e6a:	bf00      	nop
 8005e6c:	e7fd      	b.n	8005e6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e6e:	f002 fb0b 	bl	8008488 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d302      	bcc.n	8005e84 <xQueueGenericSend+0xdc>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d129      	bne.n	8005ed8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e8a:	f000 fc6d 	bl	8006768 <prvCopyDataToQueue>
 8005e8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d010      	beq.n	8005eba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9a:	3324      	adds	r3, #36	@ 0x24
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 faaf 	bl	8007400 <xTaskRemoveFromEventList>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d013      	beq.n	8005ed0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8005fa8 <xQueueGenericSend+0x200>)
 8005eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	e00a      	b.n	8005ed0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ec0:	4b39      	ldr	r3, [pc, #228]	@ (8005fa8 <xQueueGenericSend+0x200>)
 8005ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ed0:	f002 fb0c 	bl	80084ec <vPortExitCritical>
				return pdPASS;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e063      	b.n	8005fa0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ede:	f002 fb05 	bl	80084ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e05c      	b.n	8005fa0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005eec:	f107 0314 	add.w	r3, r7, #20
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 fae9 	bl	80074c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005efa:	f002 faf7 	bl	80084ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005efe:	f001 f837 	bl	8006f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f02:	f002 fac1 	bl	8008488 <vPortEnterCritical>
 8005f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f0c:	b25b      	sxtb	r3, r3
 8005f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f12:	d103      	bne.n	8005f1c <xQueueGenericSend+0x174>
 8005f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f22:	b25b      	sxtb	r3, r3
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d103      	bne.n	8005f32 <xQueueGenericSend+0x18a>
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f32:	f002 fadb 	bl	80084ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f36:	1d3a      	adds	r2, r7, #4
 8005f38:	f107 0314 	add.w	r3, r7, #20
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 fad8 	bl	80074f4 <xTaskCheckForTimeOut>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d124      	bne.n	8005f94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f4c:	f000 fd04 	bl	8006958 <prvIsQueueFull>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d018      	beq.n	8005f88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f58:	3310      	adds	r3, #16
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 f9fc 	bl	800735c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f66:	f000 fc8f 	bl	8006888 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f6a:	f001 f80f 	bl	8006f8c <xTaskResumeAll>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f47f af7c 	bne.w	8005e6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005f76:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa8 <xQueueGenericSend+0x200>)
 8005f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	e772      	b.n	8005e6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f8a:	f000 fc7d 	bl	8006888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f8e:	f000 fffd 	bl	8006f8c <xTaskResumeAll>
 8005f92:	e76c      	b.n	8005e6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f96:	f000 fc77 	bl	8006888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f9a:	f000 fff7 	bl	8006f8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3738      	adds	r7, #56	@ 0x38
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b090      	sub	sp, #64	@ 0x40
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10b      	bne.n	8005fdc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fd6:	bf00      	nop
 8005fd8:	bf00      	nop
 8005fda:	e7fd      	b.n	8005fd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d103      	bne.n	8005fea <xQueueGenericSendFromISR+0x3e>
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <xQueueGenericSendFromISR+0x42>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <xQueueGenericSendFromISR+0x44>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10b      	bne.n	800600c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006006:	bf00      	nop
 8006008:	bf00      	nop
 800600a:	e7fd      	b.n	8006008 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d103      	bne.n	800601a <xQueueGenericSendFromISR+0x6e>
 8006012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <xQueueGenericSendFromISR+0x72>
 800601a:	2301      	movs	r3, #1
 800601c:	e000      	b.n	8006020 <xQueueGenericSendFromISR+0x74>
 800601e:	2300      	movs	r3, #0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10b      	bne.n	800603c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	623b      	str	r3, [r7, #32]
}
 8006036:	bf00      	nop
 8006038:	bf00      	nop
 800603a:	e7fd      	b.n	8006038 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800603c:	f002 fb04 	bl	8008648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006040:	f3ef 8211 	mrs	r2, BASEPRI
 8006044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	61fa      	str	r2, [r7, #28]
 8006056:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006058:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800605a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800605c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006064:	429a      	cmp	r2, r3
 8006066:	d302      	bcc.n	800606e <xQueueGenericSendFromISR+0xc2>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d12f      	bne.n	80060ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800606e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006070:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006074:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	68b9      	ldr	r1, [r7, #8]
 8006082:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006084:	f000 fb70 	bl	8006768 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006088:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d112      	bne.n	80060b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006096:	2b00      	cmp	r3, #0
 8006098:	d016      	beq.n	80060c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800609a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609c:	3324      	adds	r3, #36	@ 0x24
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 f9ae 	bl	8007400 <xTaskRemoveFromEventList>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00e      	beq.n	80060c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00b      	beq.n	80060c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e007      	b.n	80060c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80060bc:	3301      	adds	r3, #1
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	b25a      	sxtb	r2, r3
 80060c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80060c8:	2301      	movs	r3, #1
 80060ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80060cc:	e001      	b.n	80060d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3740      	adds	r7, #64	@ 0x40
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08e      	sub	sp, #56	@ 0x38
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10b      	bne.n	8006114 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	623b      	str	r3, [r7, #32]
}
 800610e:	bf00      	nop
 8006110:	bf00      	nop
 8006112:	e7fd      	b.n	8006110 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00b      	beq.n	8006134 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	61fb      	str	r3, [r7, #28]
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	e7fd      	b.n	8006130 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d103      	bne.n	8006144 <xQueueGiveFromISR+0x5c>
 800613c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <xQueueGiveFromISR+0x60>
 8006144:	2301      	movs	r3, #1
 8006146:	e000      	b.n	800614a <xQueueGiveFromISR+0x62>
 8006148:	2300      	movs	r3, #0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10b      	bne.n	8006166 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	61bb      	str	r3, [r7, #24]
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	e7fd      	b.n	8006162 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006166:	f002 fa6f 	bl	8008648 <vPortValidateInterruptPriority>
	__asm volatile
 800616a:	f3ef 8211 	mrs	r2, BASEPRI
 800616e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	617a      	str	r2, [r7, #20]
 8006180:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006182:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006184:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800618c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006192:	429a      	cmp	r2, r3
 8006194:	d22b      	bcs.n	80061ee <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800619c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d112      	bne.n	80061d8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d016      	beq.n	80061e8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	3324      	adds	r3, #36	@ 0x24
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 f91e 	bl	8007400 <xTaskRemoveFromEventList>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00e      	beq.n	80061e8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2201      	movs	r2, #1
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	e007      	b.n	80061e8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061dc:	3301      	adds	r3, #1
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	b25a      	sxtb	r2, r3
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80061e8:	2301      	movs	r3, #1
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ec:	e001      	b.n	80061f2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f383 8811 	msr	BASEPRI, r3
}
 80061fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006200:	4618      	mov	r0, r3
 8006202:	3738      	adds	r7, #56	@ 0x38
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08c      	sub	sp, #48	@ 0x30
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006214:	2300      	movs	r3, #0
 8006216:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800621c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10b      	bne.n	800623a <xQueueReceive+0x32>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	623b      	str	r3, [r7, #32]
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	e7fd      	b.n	8006236 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <xQueueReceive+0x40>
 8006240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <xQueueReceive+0x44>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <xQueueReceive+0x46>
 800624c:	2300      	movs	r3, #0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <xQueueReceive+0x62>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	61fb      	str	r3, [r7, #28]
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	e7fd      	b.n	8006266 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800626a:	f001 fa9f 	bl	80077ac <xTaskGetSchedulerState>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d102      	bne.n	800627a <xQueueReceive+0x72>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <xQueueReceive+0x76>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <xQueueReceive+0x78>
 800627e:	2300      	movs	r3, #0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10b      	bne.n	800629c <xQueueReceive+0x94>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	61bb      	str	r3, [r7, #24]
}
 8006296:	bf00      	nop
 8006298:	bf00      	nop
 800629a:	e7fd      	b.n	8006298 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800629c:	f002 f8f4 	bl	8008488 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01f      	beq.n	80062ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062ac:	68b9      	ldr	r1, [r7, #8]
 80062ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062b0:	f000 fac4 	bl	800683c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	1e5a      	subs	r2, r3, #1
 80062b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00f      	beq.n	80062e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c6:	3310      	adds	r3, #16
 80062c8:	4618      	mov	r0, r3
 80062ca:	f001 f899 	bl	8007400 <xTaskRemoveFromEventList>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d007      	beq.n	80062e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062d4:	4b3c      	ldr	r3, [pc, #240]	@ (80063c8 <xQueueReceive+0x1c0>)
 80062d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062e4:	f002 f902 	bl	80084ec <vPortExitCritical>
				return pdPASS;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e069      	b.n	80063c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d103      	bne.n	80062fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062f2:	f002 f8fb 	bl	80084ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e062      	b.n	80063c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d106      	bne.n	800630e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006300:	f107 0310 	add.w	r3, r7, #16
 8006304:	4618      	mov	r0, r3
 8006306:	f001 f8df 	bl	80074c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800630a:	2301      	movs	r3, #1
 800630c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800630e:	f002 f8ed 	bl	80084ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006312:	f000 fe2d 	bl	8006f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006316:	f002 f8b7 	bl	8008488 <vPortEnterCritical>
 800631a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006320:	b25b      	sxtb	r3, r3
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006326:	d103      	bne.n	8006330 <xQueueReceive+0x128>
 8006328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006332:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006336:	b25b      	sxtb	r3, r3
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d103      	bne.n	8006346 <xQueueReceive+0x13e>
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006346:	f002 f8d1 	bl	80084ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800634a:	1d3a      	adds	r2, r7, #4
 800634c:	f107 0310 	add.w	r3, r7, #16
 8006350:	4611      	mov	r1, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f001 f8ce 	bl	80074f4 <xTaskCheckForTimeOut>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d123      	bne.n	80063a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800635e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006360:	f000 fae4 	bl	800692c <prvIsQueueEmpty>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d017      	beq.n	800639a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	3324      	adds	r3, #36	@ 0x24
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4611      	mov	r1, r2
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fff2 	bl	800735c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800637a:	f000 fa85 	bl	8006888 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800637e:	f000 fe05 	bl	8006f8c <xTaskResumeAll>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d189      	bne.n	800629c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006388:	4b0f      	ldr	r3, [pc, #60]	@ (80063c8 <xQueueReceive+0x1c0>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	e780      	b.n	800629c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800639a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800639c:	f000 fa74 	bl	8006888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063a0:	f000 fdf4 	bl	8006f8c <xTaskResumeAll>
 80063a4:	e77a      	b.n	800629c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063a8:	f000 fa6e 	bl	8006888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ac:	f000 fdee 	bl	8006f8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063b2:	f000 fabb 	bl	800692c <prvIsQueueEmpty>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f43f af6f 	beq.w	800629c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3730      	adds	r7, #48	@ 0x30
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08e      	sub	sp, #56	@ 0x38
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80063d6:	2300      	movs	r3, #0
 80063d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80063de:	2300      	movs	r3, #0
 80063e0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10b      	bne.n	8006400 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80063e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	623b      	str	r3, [r7, #32]
}
 80063fa:	bf00      	nop
 80063fc:	bf00      	nop
 80063fe:	e7fd      	b.n	80063fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00b      	beq.n	8006420 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	61fb      	str	r3, [r7, #28]
}
 800641a:	bf00      	nop
 800641c:	bf00      	nop
 800641e:	e7fd      	b.n	800641c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006420:	f001 f9c4 	bl	80077ac <xTaskGetSchedulerState>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <xQueueSemaphoreTake+0x64>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <xQueueSemaphoreTake+0x68>
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <xQueueSemaphoreTake+0x6a>
 8006434:	2300      	movs	r3, #0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10b      	bne.n	8006452 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	61bb      	str	r3, [r7, #24]
}
 800644c:	bf00      	nop
 800644e:	bf00      	nop
 8006450:	e7fd      	b.n	800644e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006452:	f002 f819 	bl	8008488 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800645c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645e:	2b00      	cmp	r3, #0
 8006460:	d024      	beq.n	80064ac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006464:	1e5a      	subs	r2, r3, #1
 8006466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006468:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800646a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d104      	bne.n	800647c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006472:	f001 fb15 	bl	8007aa0 <pvTaskIncrementMutexHeldCount>
 8006476:	4602      	mov	r2, r0
 8006478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800647c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00f      	beq.n	80064a4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006486:	3310      	adds	r3, #16
 8006488:	4618      	mov	r0, r3
 800648a:	f000 ffb9 	bl	8007400 <xTaskRemoveFromEventList>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006494:	4b54      	ldr	r3, [pc, #336]	@ (80065e8 <xQueueSemaphoreTake+0x21c>)
 8006496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064a4:	f002 f822 	bl	80084ec <vPortExitCritical>
				return pdPASS;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e098      	b.n	80065de <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d112      	bne.n	80064d8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80064b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00b      	beq.n	80064d0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	617b      	str	r3, [r7, #20]
}
 80064ca:	bf00      	nop
 80064cc:	bf00      	nop
 80064ce:	e7fd      	b.n	80064cc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80064d0:	f002 f80c 	bl	80084ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064d4:	2300      	movs	r3, #0
 80064d6:	e082      	b.n	80065de <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064de:	f107 030c 	add.w	r3, r7, #12
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fff0 	bl	80074c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064ec:	f001 fffe 	bl	80084ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064f0:	f000 fd3e 	bl	8006f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064f4:	f001 ffc8 	bl	8008488 <vPortEnterCritical>
 80064f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064fe:	b25b      	sxtb	r3, r3
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	d103      	bne.n	800650e <xQueueSemaphoreTake+0x142>
 8006506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800650e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006510:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006514:	b25b      	sxtb	r3, r3
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651a:	d103      	bne.n	8006524 <xQueueSemaphoreTake+0x158>
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006524:	f001 ffe2 	bl	80084ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006528:	463a      	mov	r2, r7
 800652a:	f107 030c 	add.w	r3, r7, #12
 800652e:	4611      	mov	r1, r2
 8006530:	4618      	mov	r0, r3
 8006532:	f000 ffdf 	bl	80074f4 <xTaskCheckForTimeOut>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d132      	bne.n	80065a2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800653c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800653e:	f000 f9f5 	bl	800692c <prvIsQueueEmpty>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d026      	beq.n	8006596 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006550:	f001 ff9a 	bl	8008488 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4618      	mov	r0, r3
 800655a:	f001 f945 	bl	80077e8 <xTaskPriorityInherit>
 800655e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006560:	f001 ffc4 	bl	80084ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006566:	3324      	adds	r3, #36	@ 0x24
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	4611      	mov	r1, r2
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fef5 	bl	800735c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006572:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006574:	f000 f988 	bl	8006888 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006578:	f000 fd08 	bl	8006f8c <xTaskResumeAll>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	f47f af67 	bne.w	8006452 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006584:	4b18      	ldr	r3, [pc, #96]	@ (80065e8 <xQueueSemaphoreTake+0x21c>)
 8006586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	e75d      	b.n	8006452 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006596:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006598:	f000 f976 	bl	8006888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800659c:	f000 fcf6 	bl	8006f8c <xTaskResumeAll>
 80065a0:	e757      	b.n	8006452 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80065a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065a4:	f000 f970 	bl	8006888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065a8:	f000 fcf0 	bl	8006f8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065ae:	f000 f9bd 	bl	800692c <prvIsQueueEmpty>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f43f af4c 	beq.w	8006452 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80065ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00d      	beq.n	80065dc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80065c0:	f001 ff62 	bl	8008488 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80065c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065c6:	f000 f8b7 	bl	8006738 <prvGetDisinheritPriorityAfterTimeout>
 80065ca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80065cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065d2:	4618      	mov	r0, r3
 80065d4:	f001 f9e0 	bl	8007998 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80065d8:	f001 ff88 	bl	80084ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3738      	adds	r7, #56	@ 0x38
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08e      	sub	sp, #56	@ 0x38
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	623b      	str	r3, [r7, #32]
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	e7fd      	b.n	8006616 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d103      	bne.n	8006628 <xQueueReceiveFromISR+0x3c>
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <xQueueReceiveFromISR+0x40>
 8006628:	2301      	movs	r3, #1
 800662a:	e000      	b.n	800662e <xQueueReceiveFromISR+0x42>
 800662c:	2300      	movs	r3, #0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10b      	bne.n	800664a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	61fb      	str	r3, [r7, #28]
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop
 8006648:	e7fd      	b.n	8006646 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800664a:	f001 fffd 	bl	8008648 <vPortValidateInterruptPriority>
	__asm volatile
 800664e:	f3ef 8211 	mrs	r2, BASEPRI
 8006652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	61ba      	str	r2, [r7, #24]
 8006664:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006666:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006668:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800666a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006672:	2b00      	cmp	r3, #0
 8006674:	d02f      	beq.n	80066d6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800667c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006684:	f000 f8da 	bl	800683c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	1e5a      	subs	r2, r3, #1
 800668c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006690:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006698:	d112      	bne.n	80066c0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800669a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d016      	beq.n	80066d0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	3310      	adds	r3, #16
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 feaa 	bl	8007400 <xTaskRemoveFromEventList>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00e      	beq.n	80066d0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00b      	beq.n	80066d0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	e007      	b.n	80066d0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80066c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066c4:	3301      	adds	r3, #1
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	b25a      	sxtb	r2, r3
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80066d0:	2301      	movs	r3, #1
 80066d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d4:	e001      	b.n	80066da <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f383 8811 	msr	BASEPRI, r3
}
 80066e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3738      	adds	r7, #56	@ 0x38
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10b      	bne.n	800671a <vQueueDelete+0x2a>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	60bb      	str	r3, [r7, #8]
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop
 8006718:	e7fd      	b.n	8006716 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f95e 	bl	80069dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006726:	2b00      	cmp	r3, #0
 8006728:	d102      	bne.n	8006730 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f002 f814 	bl	8008758 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006730:	bf00      	nop
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	d006      	beq.n	8006756 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	e001      	b.n	800675a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800675a:	68fb      	ldr	r3, [r7, #12]
	}
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10d      	bne.n	80067a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d14d      	bne.n	800682a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	4618      	mov	r0, r3
 8006794:	f001 f890 	bl	80078b8 <xTaskPriorityDisinherit>
 8006798:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	609a      	str	r2, [r3, #8]
 80067a0:	e043      	b.n	800682a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d119      	bne.n	80067dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6858      	ldr	r0, [r3, #4]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b0:	461a      	mov	r2, r3
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	f002 fd45 	bl	8009242 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c0:	441a      	add	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d32b      	bcc.n	800682a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	e026      	b.n	800682a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	68d8      	ldr	r0, [r3, #12]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e4:	461a      	mov	r2, r3
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	f002 fd2b 	bl	8009242 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f4:	425b      	negs	r3, r3
 80067f6:	441a      	add	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d207      	bcs.n	8006818 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006810:	425b      	negs	r3, r3
 8006812:	441a      	add	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d105      	bne.n	800682a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	3b01      	subs	r3, #1
 8006828:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006832:	697b      	ldr	r3, [r7, #20]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684a:	2b00      	cmp	r3, #0
 800684c:	d018      	beq.n	8006880 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006856:	441a      	add	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68da      	ldr	r2, [r3, #12]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	429a      	cmp	r2, r3
 8006866:	d303      	bcc.n	8006870 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68d9      	ldr	r1, [r3, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006878:	461a      	mov	r2, r3
 800687a:	6838      	ldr	r0, [r7, #0]
 800687c:	f002 fce1 	bl	8009242 <memcpy>
	}
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006890:	f001 fdfa 	bl	8008488 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800689a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800689c:	e011      	b.n	80068c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d012      	beq.n	80068cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3324      	adds	r3, #36	@ 0x24
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fda8 	bl	8007400 <xTaskRemoveFromEventList>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068b6:	f000 fe81 	bl	80075bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	3b01      	subs	r3, #1
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dce9      	bgt.n	800689e <prvUnlockQueue+0x16>
 80068ca:	e000      	b.n	80068ce <prvUnlockQueue+0x46>
					break;
 80068cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	22ff      	movs	r2, #255	@ 0xff
 80068d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80068d6:	f001 fe09 	bl	80084ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068da:	f001 fdd5 	bl	8008488 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068e6:	e011      	b.n	800690c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d012      	beq.n	8006916 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3310      	adds	r3, #16
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fd83 	bl	8007400 <xTaskRemoveFromEventList>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006900:	f000 fe5c 	bl	80075bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006904:	7bbb      	ldrb	r3, [r7, #14]
 8006906:	3b01      	subs	r3, #1
 8006908:	b2db      	uxtb	r3, r3
 800690a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800690c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006910:	2b00      	cmp	r3, #0
 8006912:	dce9      	bgt.n	80068e8 <prvUnlockQueue+0x60>
 8006914:	e000      	b.n	8006918 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006916:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	22ff      	movs	r2, #255	@ 0xff
 800691c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006920:	f001 fde4 	bl	80084ec <vPortExitCritical>
}
 8006924:	bf00      	nop
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006934:	f001 fda8 	bl	8008488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	d102      	bne.n	8006946 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006940:	2301      	movs	r3, #1
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e001      	b.n	800694a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800694a:	f001 fdcf 	bl	80084ec <vPortExitCritical>

	return xReturn;
 800694e:	68fb      	ldr	r3, [r7, #12]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006960:	f001 fd92 	bl	8008488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800696c:	429a      	cmp	r2, r3
 800696e:	d102      	bne.n	8006976 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006970:	2301      	movs	r3, #1
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e001      	b.n	800697a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800697a:	f001 fdb7 	bl	80084ec <vPortExitCritical>

	return xReturn;
 800697e:	68fb      	ldr	r3, [r7, #12]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	e014      	b.n	80069c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006998:	4a0f      	ldr	r2, [pc, #60]	@ (80069d8 <vQueueAddToRegistry+0x50>)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10b      	bne.n	80069bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80069a4:	490c      	ldr	r1, [pc, #48]	@ (80069d8 <vQueueAddToRegistry+0x50>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80069ae:	4a0a      	ldr	r2, [pc, #40]	@ (80069d8 <vQueueAddToRegistry+0x50>)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	4413      	add	r3, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80069ba:	e006      	b.n	80069ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3301      	adds	r3, #1
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b07      	cmp	r3, #7
 80069c6:	d9e7      	bls.n	8006998 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069c8:	bf00      	nop
 80069ca:	bf00      	nop
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	20000a34 	.word	0x20000a34

080069dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	e016      	b.n	8006a18 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80069ea:	4a10      	ldr	r2, [pc, #64]	@ (8006a2c <vQueueUnregisterQueue+0x50>)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	4413      	add	r3, r2
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d10b      	bne.n	8006a12 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80069fa:	4a0c      	ldr	r2, [pc, #48]	@ (8006a2c <vQueueUnregisterQueue+0x50>)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2100      	movs	r1, #0
 8006a00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006a04:	4a09      	ldr	r2, [pc, #36]	@ (8006a2c <vQueueUnregisterQueue+0x50>)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	605a      	str	r2, [r3, #4]
				break;
 8006a10:	e006      	b.n	8006a20 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3301      	adds	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b07      	cmp	r3, #7
 8006a1c:	d9e5      	bls.n	80069ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006a1e:	bf00      	nop
 8006a20:	bf00      	nop
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	20000a34 	.word	0x20000a34

08006a30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a40:	f001 fd22 	bl	8008488 <vPortEnterCritical>
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a4a:	b25b      	sxtb	r3, r3
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a50:	d103      	bne.n	8006a5a <vQueueWaitForMessageRestricted+0x2a>
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a60:	b25b      	sxtb	r3, r3
 8006a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a66:	d103      	bne.n	8006a70 <vQueueWaitForMessageRestricted+0x40>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a70:	f001 fd3c 	bl	80084ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d106      	bne.n	8006a8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	3324      	adds	r3, #36	@ 0x24
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 fc8f 	bl	80073a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a8a:	6978      	ldr	r0, [r7, #20]
 8006a8c:	f7ff fefc 	bl	8006888 <prvUnlockQueue>
	}
 8006a90:	bf00      	nop
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08e      	sub	sp, #56	@ 0x38
 8006a9c:	af04      	add	r7, sp, #16
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10b      	bne.n	8006ac4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	623b      	str	r3, [r7, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	bf00      	nop
 8006ac2:	e7fd      	b.n	8006ac0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10b      	bne.n	8006ae2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	61fb      	str	r3, [r7, #28]
}
 8006adc:	bf00      	nop
 8006ade:	bf00      	nop
 8006ae0:	e7fd      	b.n	8006ade <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ae2:	23b0      	movs	r3, #176	@ 0xb0
 8006ae4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	2bb0      	cmp	r3, #176	@ 0xb0
 8006aea:	d00b      	beq.n	8006b04 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	61bb      	str	r3, [r7, #24]
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	e7fd      	b.n	8006b00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01e      	beq.n	8006b4a <xTaskCreateStatic+0xb2>
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d01b      	beq.n	8006b4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b24:	2300      	movs	r3, #0
 8006b26:	9303      	str	r3, [sp, #12]
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	9302      	str	r3, [sp, #8]
 8006b2c:	f107 0314 	add.w	r3, r7, #20
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	68b9      	ldr	r1, [r7, #8]
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 f851 	bl	8006be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b44:	f000 f8fc 	bl	8006d40 <prvAddNewTaskToReadyList>
 8006b48:	e001      	b.n	8006b4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b4e:	697b      	ldr	r3, [r7, #20]
	}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3728      	adds	r7, #40	@ 0x28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08c      	sub	sp, #48	@ 0x30
 8006b5c:	af04      	add	r7, sp, #16
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	4613      	mov	r3, r2
 8006b66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f001 fdad 	bl	80086cc <pvPortMalloc>
 8006b72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00e      	beq.n	8006b98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b7a:	20b0      	movs	r0, #176	@ 0xb0
 8006b7c:	f001 fda6 	bl	80086cc <pvPortMalloc>
 8006b80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b8e:	e005      	b.n	8006b9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b90:	6978      	ldr	r0, [r7, #20]
 8006b92:	f001 fde1 	bl	8008758 <vPortFree>
 8006b96:	e001      	b.n	8006b9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d017      	beq.n	8006bd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006baa:	88fa      	ldrh	r2, [r7, #6]
 8006bac:	2300      	movs	r3, #0
 8006bae:	9303      	str	r3, [sp, #12]
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	9302      	str	r3, [sp, #8]
 8006bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb6:	9301      	str	r3, [sp, #4]
 8006bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	68b9      	ldr	r1, [r7, #8]
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f80f 	bl	8006be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bc6:	69f8      	ldr	r0, [r7, #28]
 8006bc8:	f000 f8ba 	bl	8006d40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	61bb      	str	r3, [r7, #24]
 8006bd0:	e002      	b.n	8006bd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
	}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3720      	adds	r7, #32
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	21a5      	movs	r1, #165	@ 0xa5
 8006bfe:	f002 fa3e 	bl	800907e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	f023 0307 	bic.w	r3, r3, #7
 8006c1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00b      	beq.n	8006c3e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	617b      	str	r3, [r7, #20]
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	e7fd      	b.n	8006c3a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01f      	beq.n	8006c8a <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	e012      	b.n	8006c76 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	7819      	ldrb	r1, [r3, #0]
 8006c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	3334      	adds	r3, #52	@ 0x34
 8006c60:	460a      	mov	r2, r1
 8006c62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	4413      	add	r3, r2
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d006      	beq.n	8006c7e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	3301      	adds	r3, #1
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	2b0f      	cmp	r3, #15
 8006c7a:	d9e9      	bls.n	8006c50 <prvInitialiseNewTask+0x6c>
 8006c7c:	e000      	b.n	8006c80 <prvInitialiseNewTask+0x9c>
			{
				break;
 8006c7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c88:	e003      	b.n	8006c92 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c94:	2b37      	cmp	r3, #55	@ 0x37
 8006c96:	d901      	bls.n	8006c9c <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c98:	2337      	movs	r3, #55	@ 0x37
 8006c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ca6:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006caa:	2200      	movs	r2, #0
 8006cac:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe fd78 	bl	80057a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cba:	3318      	adds	r3, #24
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fe fd73 	bl	80057a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cd6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cda:	2200      	movs	r2, #0
 8006cdc:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	335c      	adds	r3, #92	@ 0x5c
 8006cf2:	224c      	movs	r2, #76	@ 0x4c
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f002 f9c1 	bl	800907e <memset>
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8006d34 <prvInitialiseNewTask+0x150>)
 8006d00:	661a      	str	r2, [r3, #96]	@ 0x60
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	4a0c      	ldr	r2, [pc, #48]	@ (8006d38 <prvInitialiseNewTask+0x154>)
 8006d06:	665a      	str	r2, [r3, #100]	@ 0x64
 8006d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8006d3c <prvInitialiseNewTask+0x158>)
 8006d0c:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	68f9      	ldr	r1, [r7, #12]
 8006d12:	69b8      	ldr	r0, [r7, #24]
 8006d14:	f001 fa86 	bl	8008224 <pxPortInitialiseStack>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d2a:	bf00      	nop
 8006d2c:	3720      	adds	r7, #32
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20004d18 	.word	0x20004d18
 8006d38:	20004d80 	.word	0x20004d80
 8006d3c:	20004de8 	.word	0x20004de8

08006d40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d48:	f001 fb9e 	bl	8008488 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8006e04 <prvAddNewTaskToReadyList+0xc4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3301      	adds	r3, #1
 8006d52:	4a2c      	ldr	r2, [pc, #176]	@ (8006e04 <prvAddNewTaskToReadyList+0xc4>)
 8006d54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d56:	4b2c      	ldr	r3, [pc, #176]	@ (8006e08 <prvAddNewTaskToReadyList+0xc8>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d109      	bne.n	8006d72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8006e08 <prvAddNewTaskToReadyList+0xc8>)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d64:	4b27      	ldr	r3, [pc, #156]	@ (8006e04 <prvAddNewTaskToReadyList+0xc4>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d110      	bne.n	8006d8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d6c:	f000 fc4a 	bl	8007604 <prvInitialiseTaskLists>
 8006d70:	e00d      	b.n	8006d8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d72:	4b26      	ldr	r3, [pc, #152]	@ (8006e0c <prvAddNewTaskToReadyList+0xcc>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d7a:	4b23      	ldr	r3, [pc, #140]	@ (8006e08 <prvAddNewTaskToReadyList+0xc8>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d802      	bhi.n	8006d8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d88:	4a1f      	ldr	r2, [pc, #124]	@ (8006e08 <prvAddNewTaskToReadyList+0xc8>)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d8e:	4b20      	ldr	r3, [pc, #128]	@ (8006e10 <prvAddNewTaskToReadyList+0xd0>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3301      	adds	r3, #1
 8006d94:	4a1e      	ldr	r2, [pc, #120]	@ (8006e10 <prvAddNewTaskToReadyList+0xd0>)
 8006d96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d98:	4b1d      	ldr	r3, [pc, #116]	@ (8006e10 <prvAddNewTaskToReadyList+0xd0>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da4:	4b1b      	ldr	r3, [pc, #108]	@ (8006e14 <prvAddNewTaskToReadyList+0xd4>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d903      	bls.n	8006db4 <prvAddNewTaskToReadyList+0x74>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db0:	4a18      	ldr	r2, [pc, #96]	@ (8006e14 <prvAddNewTaskToReadyList+0xd4>)
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4a15      	ldr	r2, [pc, #84]	@ (8006e18 <prvAddNewTaskToReadyList+0xd8>)
 8006dc2:	441a      	add	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4610      	mov	r0, r2
 8006dcc:	f7fe fcf9 	bl	80057c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006dd0:	f001 fb8c 	bl	80084ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8006e0c <prvAddNewTaskToReadyList+0xcc>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00e      	beq.n	8006dfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e08 <prvAddNewTaskToReadyList+0xc8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d207      	bcs.n	8006dfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006dea:	4b0c      	ldr	r3, [pc, #48]	@ (8006e1c <prvAddNewTaskToReadyList+0xdc>)
 8006dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dfa:	bf00      	nop
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20000f48 	.word	0x20000f48
 8006e08:	20000a74 	.word	0x20000a74
 8006e0c:	20000f54 	.word	0x20000f54
 8006e10:	20000f64 	.word	0x20000f64
 8006e14:	20000f50 	.word	0x20000f50
 8006e18:	20000a78 	.word	0x20000a78
 8006e1c:	e000ed04 	.word	0xe000ed04

08006e20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d018      	beq.n	8006e64 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e32:	4b14      	ldr	r3, [pc, #80]	@ (8006e84 <vTaskDelay+0x64>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <vTaskDelay+0x32>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	60bb      	str	r3, [r7, #8]
}
 8006e4c:	bf00      	nop
 8006e4e:	bf00      	nop
 8006e50:	e7fd      	b.n	8006e4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e52:	f000 f88d 	bl	8006f70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e56:	2100      	movs	r1, #0
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fe35 	bl	8007ac8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e5e:	f000 f895 	bl	8006f8c <xTaskResumeAll>
 8006e62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d107      	bne.n	8006e7a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006e6a:	4b07      	ldr	r3, [pc, #28]	@ (8006e88 <vTaskDelay+0x68>)
 8006e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20000f70 	.word	0x20000f70
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08a      	sub	sp, #40	@ 0x28
 8006e90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e9a:	463a      	mov	r2, r7
 8006e9c:	1d39      	adds	r1, r7, #4
 8006e9e:	f107 0308 	add.w	r3, r7, #8
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fe fc2c 	bl	8005700 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	9202      	str	r2, [sp, #8]
 8006eb0:	9301      	str	r3, [sp, #4]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	460a      	mov	r2, r1
 8006eba:	4925      	ldr	r1, [pc, #148]	@ (8006f50 <vTaskStartScheduler+0xc4>)
 8006ebc:	4825      	ldr	r0, [pc, #148]	@ (8006f54 <vTaskStartScheduler+0xc8>)
 8006ebe:	f7ff fdeb 	bl	8006a98 <xTaskCreateStatic>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4a24      	ldr	r2, [pc, #144]	@ (8006f58 <vTaskStartScheduler+0xcc>)
 8006ec6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ec8:	4b23      	ldr	r3, [pc, #140]	@ (8006f58 <vTaskStartScheduler+0xcc>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	e001      	b.n	8006eda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d102      	bne.n	8006ee6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ee0:	f000 fe46 	bl	8007b70 <xTimerCreateTimerTask>
 8006ee4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d11d      	bne.n	8006f28 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	613b      	str	r3, [r7, #16]
}
 8006efe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f00:	4b16      	ldr	r3, [pc, #88]	@ (8006f5c <vTaskStartScheduler+0xd0>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	335c      	adds	r3, #92	@ 0x5c
 8006f06:	4a16      	ldr	r2, [pc, #88]	@ (8006f60 <vTaskStartScheduler+0xd4>)
 8006f08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f0a:	4b16      	ldr	r3, [pc, #88]	@ (8006f64 <vTaskStartScheduler+0xd8>)
 8006f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f12:	4b15      	ldr	r3, [pc, #84]	@ (8006f68 <vTaskStartScheduler+0xdc>)
 8006f14:	2201      	movs	r2, #1
 8006f16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f18:	4b14      	ldr	r3, [pc, #80]	@ (8006f6c <vTaskStartScheduler+0xe0>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8006f1e:	f7f9 fecb 	bl	8000cb8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f22:	f001 fa0d 	bl	8008340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f26:	e00f      	b.n	8006f48 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2e:	d10b      	bne.n	8006f48 <vTaskStartScheduler+0xbc>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	60fb      	str	r3, [r7, #12]
}
 8006f42:	bf00      	nop
 8006f44:	bf00      	nop
 8006f46:	e7fd      	b.n	8006f44 <vTaskStartScheduler+0xb8>
}
 8006f48:	bf00      	nop
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	08009cf0 	.word	0x08009cf0
 8006f54:	080075d5 	.word	0x080075d5
 8006f58:	20000f6c 	.word	0x20000f6c
 8006f5c:	20000a74 	.word	0x20000a74
 8006f60:	200000d8 	.word	0x200000d8
 8006f64:	20000f68 	.word	0x20000f68
 8006f68:	20000f54 	.word	0x20000f54
 8006f6c:	20000f4c 	.word	0x20000f4c

08006f70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f74:	4b04      	ldr	r3, [pc, #16]	@ (8006f88 <vTaskSuspendAll+0x18>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	4a03      	ldr	r2, [pc, #12]	@ (8006f88 <vTaskSuspendAll+0x18>)
 8006f7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f7e:	bf00      	nop
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	20000f70 	.word	0x20000f70

08006f8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f9a:	4b42      	ldr	r3, [pc, #264]	@ (80070a4 <xTaskResumeAll+0x118>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10b      	bne.n	8006fba <xTaskResumeAll+0x2e>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	603b      	str	r3, [r7, #0]
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop
 8006fb8:	e7fd      	b.n	8006fb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fba:	f001 fa65 	bl	8008488 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fbe:	4b39      	ldr	r3, [pc, #228]	@ (80070a4 <xTaskResumeAll+0x118>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	4a37      	ldr	r2, [pc, #220]	@ (80070a4 <xTaskResumeAll+0x118>)
 8006fc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fc8:	4b36      	ldr	r3, [pc, #216]	@ (80070a4 <xTaskResumeAll+0x118>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d162      	bne.n	8007096 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fd0:	4b35      	ldr	r3, [pc, #212]	@ (80070a8 <xTaskResumeAll+0x11c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d05e      	beq.n	8007096 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fd8:	e02f      	b.n	800703a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fda:	4b34      	ldr	r3, [pc, #208]	@ (80070ac <xTaskResumeAll+0x120>)
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3318      	adds	r3, #24
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe fc48 	bl	800587c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fe fc43 	bl	800587c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80070b0 <xTaskResumeAll+0x124>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d903      	bls.n	800700a <xTaskResumeAll+0x7e>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	4a2a      	ldr	r2, [pc, #168]	@ (80070b0 <xTaskResumeAll+0x124>)
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4a27      	ldr	r2, [pc, #156]	@ (80070b4 <xTaskResumeAll+0x128>)
 8007018:	441a      	add	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3304      	adds	r3, #4
 800701e:	4619      	mov	r1, r3
 8007020:	4610      	mov	r0, r2
 8007022:	f7fe fbce 	bl	80057c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702a:	4b23      	ldr	r3, [pc, #140]	@ (80070b8 <xTaskResumeAll+0x12c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007030:	429a      	cmp	r2, r3
 8007032:	d302      	bcc.n	800703a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007034:	4b21      	ldr	r3, [pc, #132]	@ (80070bc <xTaskResumeAll+0x130>)
 8007036:	2201      	movs	r2, #1
 8007038:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800703a:	4b1c      	ldr	r3, [pc, #112]	@ (80070ac <xTaskResumeAll+0x120>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1cb      	bne.n	8006fda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007048:	f000 fb80 	bl	800774c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800704c:	4b1c      	ldr	r3, [pc, #112]	@ (80070c0 <xTaskResumeAll+0x134>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d010      	beq.n	800707a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007058:	f000 f846 	bl	80070e8 <xTaskIncrementTick>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007062:	4b16      	ldr	r3, [pc, #88]	@ (80070bc <xTaskResumeAll+0x130>)
 8007064:	2201      	movs	r2, #1
 8007066:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3b01      	subs	r3, #1
 800706c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1f1      	bne.n	8007058 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007074:	4b12      	ldr	r3, [pc, #72]	@ (80070c0 <xTaskResumeAll+0x134>)
 8007076:	2200      	movs	r2, #0
 8007078:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800707a:	4b10      	ldr	r3, [pc, #64]	@ (80070bc <xTaskResumeAll+0x130>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007082:	2301      	movs	r3, #1
 8007084:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007086:	4b0f      	ldr	r3, [pc, #60]	@ (80070c4 <xTaskResumeAll+0x138>)
 8007088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007096:	f001 fa29 	bl	80084ec <vPortExitCritical>

	return xAlreadyYielded;
 800709a:	68bb      	ldr	r3, [r7, #8]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20000f70 	.word	0x20000f70
 80070a8:	20000f48 	.word	0x20000f48
 80070ac:	20000f08 	.word	0x20000f08
 80070b0:	20000f50 	.word	0x20000f50
 80070b4:	20000a78 	.word	0x20000a78
 80070b8:	20000a74 	.word	0x20000a74
 80070bc:	20000f5c 	.word	0x20000f5c
 80070c0:	20000f58 	.word	0x20000f58
 80070c4:	e000ed04 	.word	0xe000ed04

080070c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070ce:	4b05      	ldr	r3, [pc, #20]	@ (80070e4 <xTaskGetTickCount+0x1c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070d4:	687b      	ldr	r3, [r7, #4]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	20000f4c 	.word	0x20000f4c

080070e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070f2:	4b4f      	ldr	r3, [pc, #316]	@ (8007230 <xTaskIncrementTick+0x148>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f040 8090 	bne.w	800721c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070fc:	4b4d      	ldr	r3, [pc, #308]	@ (8007234 <xTaskIncrementTick+0x14c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3301      	adds	r3, #1
 8007102:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007104:	4a4b      	ldr	r2, [pc, #300]	@ (8007234 <xTaskIncrementTick+0x14c>)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d121      	bne.n	8007154 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007110:	4b49      	ldr	r3, [pc, #292]	@ (8007238 <xTaskIncrementTick+0x150>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00b      	beq.n	8007132 <xTaskIncrementTick+0x4a>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	603b      	str	r3, [r7, #0]
}
 800712c:	bf00      	nop
 800712e:	bf00      	nop
 8007130:	e7fd      	b.n	800712e <xTaskIncrementTick+0x46>
 8007132:	4b41      	ldr	r3, [pc, #260]	@ (8007238 <xTaskIncrementTick+0x150>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	4b40      	ldr	r3, [pc, #256]	@ (800723c <xTaskIncrementTick+0x154>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a3e      	ldr	r2, [pc, #248]	@ (8007238 <xTaskIncrementTick+0x150>)
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	4a3e      	ldr	r2, [pc, #248]	@ (800723c <xTaskIncrementTick+0x154>)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	4b3e      	ldr	r3, [pc, #248]	@ (8007240 <xTaskIncrementTick+0x158>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3301      	adds	r3, #1
 800714c:	4a3c      	ldr	r2, [pc, #240]	@ (8007240 <xTaskIncrementTick+0x158>)
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	f000 fafc 	bl	800774c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007154:	4b3b      	ldr	r3, [pc, #236]	@ (8007244 <xTaskIncrementTick+0x15c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	429a      	cmp	r2, r3
 800715c:	d349      	bcc.n	80071f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800715e:	4b36      	ldr	r3, [pc, #216]	@ (8007238 <xTaskIncrementTick+0x150>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d104      	bne.n	8007172 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007168:	4b36      	ldr	r3, [pc, #216]	@ (8007244 <xTaskIncrementTick+0x15c>)
 800716a:	f04f 32ff 	mov.w	r2, #4294967295
 800716e:	601a      	str	r2, [r3, #0]
					break;
 8007170:	e03f      	b.n	80071f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007172:	4b31      	ldr	r3, [pc, #196]	@ (8007238 <xTaskIncrementTick+0x150>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	429a      	cmp	r2, r3
 8007188:	d203      	bcs.n	8007192 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800718a:	4a2e      	ldr	r2, [pc, #184]	@ (8007244 <xTaskIncrementTick+0x15c>)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007190:	e02f      	b.n	80071f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	3304      	adds	r3, #4
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fb70 	bl	800587c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d004      	beq.n	80071ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	3318      	adds	r3, #24
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fe fb67 	bl	800587c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b2:	4b25      	ldr	r3, [pc, #148]	@ (8007248 <xTaskIncrementTick+0x160>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d903      	bls.n	80071c2 <xTaskIncrementTick+0xda>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071be:	4a22      	ldr	r2, [pc, #136]	@ (8007248 <xTaskIncrementTick+0x160>)
 80071c0:	6013      	str	r3, [r2, #0]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4a1f      	ldr	r2, [pc, #124]	@ (800724c <xTaskIncrementTick+0x164>)
 80071d0:	441a      	add	r2, r3
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	3304      	adds	r3, #4
 80071d6:	4619      	mov	r1, r3
 80071d8:	4610      	mov	r0, r2
 80071da:	f7fe faf2 	bl	80057c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007250 <xTaskIncrementTick+0x168>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d3b8      	bcc.n	800715e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80071ec:	2301      	movs	r3, #1
 80071ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071f0:	e7b5      	b.n	800715e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071f2:	4b17      	ldr	r3, [pc, #92]	@ (8007250 <xTaskIncrementTick+0x168>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f8:	4914      	ldr	r1, [pc, #80]	@ (800724c <xTaskIncrementTick+0x164>)
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d901      	bls.n	800720e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800720a:	2301      	movs	r3, #1
 800720c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800720e:	4b11      	ldr	r3, [pc, #68]	@ (8007254 <xTaskIncrementTick+0x16c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d007      	beq.n	8007226 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007216:	2301      	movs	r3, #1
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	e004      	b.n	8007226 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800721c:	4b0e      	ldr	r3, [pc, #56]	@ (8007258 <xTaskIncrementTick+0x170>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	4a0d      	ldr	r2, [pc, #52]	@ (8007258 <xTaskIncrementTick+0x170>)
 8007224:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007226:	697b      	ldr	r3, [r7, #20]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000f70 	.word	0x20000f70
 8007234:	20000f4c 	.word	0x20000f4c
 8007238:	20000f00 	.word	0x20000f00
 800723c:	20000f04 	.word	0x20000f04
 8007240:	20000f60 	.word	0x20000f60
 8007244:	20000f68 	.word	0x20000f68
 8007248:	20000f50 	.word	0x20000f50
 800724c:	20000a78 	.word	0x20000a78
 8007250:	20000a74 	.word	0x20000a74
 8007254:	20000f5c 	.word	0x20000f5c
 8007258:	20000f58 	.word	0x20000f58

0800725c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007262:	4b36      	ldr	r3, [pc, #216]	@ (800733c <vTaskSwitchContext+0xe0>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800726a:	4b35      	ldr	r3, [pc, #212]	@ (8007340 <vTaskSwitchContext+0xe4>)
 800726c:	2201      	movs	r2, #1
 800726e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007270:	e060      	b.n	8007334 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8007272:	4b33      	ldr	r3, [pc, #204]	@ (8007340 <vTaskSwitchContext+0xe4>)
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007278:	f7f9 fd38 	bl	8000cec <getRunTimeCounterValue>
 800727c:	4603      	mov	r3, r0
 800727e:	4a31      	ldr	r2, [pc, #196]	@ (8007344 <vTaskSwitchContext+0xe8>)
 8007280:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007282:	4b30      	ldr	r3, [pc, #192]	@ (8007344 <vTaskSwitchContext+0xe8>)
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	4b30      	ldr	r3, [pc, #192]	@ (8007348 <vTaskSwitchContext+0xec>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	429a      	cmp	r2, r3
 800728c:	d909      	bls.n	80072a2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800728e:	4b2f      	ldr	r3, [pc, #188]	@ (800734c <vTaskSwitchContext+0xf0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8007294:	4a2b      	ldr	r2, [pc, #172]	@ (8007344 <vTaskSwitchContext+0xe8>)
 8007296:	6810      	ldr	r0, [r2, #0]
 8007298:	4a2b      	ldr	r2, [pc, #172]	@ (8007348 <vTaskSwitchContext+0xec>)
 800729a:	6812      	ldr	r2, [r2, #0]
 800729c:	1a82      	subs	r2, r0, r2
 800729e:	440a      	add	r2, r1
 80072a0:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 80072a2:	4b28      	ldr	r3, [pc, #160]	@ (8007344 <vTaskSwitchContext+0xe8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a28      	ldr	r2, [pc, #160]	@ (8007348 <vTaskSwitchContext+0xec>)
 80072a8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072aa:	4b29      	ldr	r3, [pc, #164]	@ (8007350 <vTaskSwitchContext+0xf4>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e011      	b.n	80072d6 <vTaskSwitchContext+0x7a>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10b      	bne.n	80072d0 <vTaskSwitchContext+0x74>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	607b      	str	r3, [r7, #4]
}
 80072ca:	bf00      	nop
 80072cc:	bf00      	nop
 80072ce:	e7fd      	b.n	80072cc <vTaskSwitchContext+0x70>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	491f      	ldr	r1, [pc, #124]	@ (8007354 <vTaskSwitchContext+0xf8>)
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	440b      	add	r3, r1
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0e3      	beq.n	80072b2 <vTaskSwitchContext+0x56>
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4a17      	ldr	r2, [pc, #92]	@ (8007354 <vTaskSwitchContext+0xf8>)
 80072f6:	4413      	add	r3, r2
 80072f8:	60bb      	str	r3, [r7, #8]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	605a      	str	r2, [r3, #4]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	3308      	adds	r3, #8
 800730c:	429a      	cmp	r2, r3
 800730e:	d104      	bne.n	800731a <vTaskSwitchContext+0xbe>
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	605a      	str	r2, [r3, #4]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	4a0a      	ldr	r2, [pc, #40]	@ (800734c <vTaskSwitchContext+0xf0>)
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	4a0a      	ldr	r2, [pc, #40]	@ (8007350 <vTaskSwitchContext+0xf4>)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800732a:	4b08      	ldr	r3, [pc, #32]	@ (800734c <vTaskSwitchContext+0xf0>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	335c      	adds	r3, #92	@ 0x5c
 8007330:	4a09      	ldr	r2, [pc, #36]	@ (8007358 <vTaskSwitchContext+0xfc>)
 8007332:	6013      	str	r3, [r2, #0]
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	20000f70 	.word	0x20000f70
 8007340:	20000f5c 	.word	0x20000f5c
 8007344:	20000f78 	.word	0x20000f78
 8007348:	20000f74 	.word	0x20000f74
 800734c:	20000a74 	.word	0x20000a74
 8007350:	20000f50 	.word	0x20000f50
 8007354:	20000a78 	.word	0x20000a78
 8007358:	200000d8 	.word	0x200000d8

0800735c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10b      	bne.n	8007384 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	60fb      	str	r3, [r7, #12]
}
 800737e:	bf00      	nop
 8007380:	bf00      	nop
 8007382:	e7fd      	b.n	8007380 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007384:	4b07      	ldr	r3, [pc, #28]	@ (80073a4 <vTaskPlaceOnEventList+0x48>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3318      	adds	r3, #24
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7fe fa3c 	bl	800580a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007392:	2101      	movs	r1, #1
 8007394:	6838      	ldr	r0, [r7, #0]
 8007396:	f000 fb97 	bl	8007ac8 <prvAddCurrentTaskToDelayedList>
}
 800739a:	bf00      	nop
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20000a74 	.word	0x20000a74

080073a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10b      	bne.n	80073d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	617b      	str	r3, [r7, #20]
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	e7fd      	b.n	80073ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073d2:	4b0a      	ldr	r3, [pc, #40]	@ (80073fc <vTaskPlaceOnEventListRestricted+0x54>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3318      	adds	r3, #24
 80073d8:	4619      	mov	r1, r3
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7fe f9f1 	bl	80057c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	68b8      	ldr	r0, [r7, #8]
 80073f0:	f000 fb6a 	bl	8007ac8 <prvAddCurrentTaskToDelayedList>
	}
 80073f4:	bf00      	nop
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20000a74 	.word	0x20000a74

08007400 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10b      	bne.n	800742e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	60fb      	str	r3, [r7, #12]
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	e7fd      	b.n	800742a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	3318      	adds	r3, #24
 8007432:	4618      	mov	r0, r3
 8007434:	f7fe fa22 	bl	800587c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007438:	4b1d      	ldr	r3, [pc, #116]	@ (80074b0 <xTaskRemoveFromEventList+0xb0>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d11d      	bne.n	800747c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	3304      	adds	r3, #4
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe fa19 	bl	800587c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800744e:	4b19      	ldr	r3, [pc, #100]	@ (80074b4 <xTaskRemoveFromEventList+0xb4>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d903      	bls.n	800745e <xTaskRemoveFromEventList+0x5e>
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745a:	4a16      	ldr	r2, [pc, #88]	@ (80074b4 <xTaskRemoveFromEventList+0xb4>)
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007462:	4613      	mov	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4a13      	ldr	r2, [pc, #76]	@ (80074b8 <xTaskRemoveFromEventList+0xb8>)
 800746c:	441a      	add	r2, r3
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	3304      	adds	r3, #4
 8007472:	4619      	mov	r1, r3
 8007474:	4610      	mov	r0, r2
 8007476:	f7fe f9a4 	bl	80057c2 <vListInsertEnd>
 800747a:	e005      	b.n	8007488 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	3318      	adds	r3, #24
 8007480:	4619      	mov	r1, r3
 8007482:	480e      	ldr	r0, [pc, #56]	@ (80074bc <xTaskRemoveFromEventList+0xbc>)
 8007484:	f7fe f99d 	bl	80057c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748c:	4b0c      	ldr	r3, [pc, #48]	@ (80074c0 <xTaskRemoveFromEventList+0xc0>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007492:	429a      	cmp	r2, r3
 8007494:	d905      	bls.n	80074a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007496:	2301      	movs	r3, #1
 8007498:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800749a:	4b0a      	ldr	r3, [pc, #40]	@ (80074c4 <xTaskRemoveFromEventList+0xc4>)
 800749c:	2201      	movs	r2, #1
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	e001      	b.n	80074a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074a6:	697b      	ldr	r3, [r7, #20]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20000f70 	.word	0x20000f70
 80074b4:	20000f50 	.word	0x20000f50
 80074b8:	20000a78 	.word	0x20000a78
 80074bc:	20000f08 	.word	0x20000f08
 80074c0:	20000a74 	.word	0x20000a74
 80074c4:	20000f5c 	.word	0x20000f5c

080074c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074d0:	4b06      	ldr	r3, [pc, #24]	@ (80074ec <vTaskInternalSetTimeOutState+0x24>)
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074d8:	4b05      	ldr	r3, [pc, #20]	@ (80074f0 <vTaskInternalSetTimeOutState+0x28>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	605a      	str	r2, [r3, #4]
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	20000f60 	.word	0x20000f60
 80074f0:	20000f4c 	.word	0x20000f4c

080074f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10b      	bne.n	800751c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	613b      	str	r3, [r7, #16]
}
 8007516:	bf00      	nop
 8007518:	bf00      	nop
 800751a:	e7fd      	b.n	8007518 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10b      	bne.n	800753a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	60fb      	str	r3, [r7, #12]
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800753a:	f000 ffa5 	bl	8008488 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800753e:	4b1d      	ldr	r3, [pc, #116]	@ (80075b4 <xTaskCheckForTimeOut+0xc0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007556:	d102      	bne.n	800755e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007558:	2300      	movs	r3, #0
 800755a:	61fb      	str	r3, [r7, #28]
 800755c:	e023      	b.n	80075a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	4b15      	ldr	r3, [pc, #84]	@ (80075b8 <xTaskCheckForTimeOut+0xc4>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	429a      	cmp	r2, r3
 8007568:	d007      	beq.n	800757a <xTaskCheckForTimeOut+0x86>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	429a      	cmp	r2, r3
 8007572:	d302      	bcc.n	800757a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007574:	2301      	movs	r3, #1
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	e015      	b.n	80075a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	429a      	cmp	r2, r3
 8007582:	d20b      	bcs.n	800759c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	1ad2      	subs	r2, r2, r3
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7ff ff99 	bl	80074c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007596:	2300      	movs	r3, #0
 8007598:	61fb      	str	r3, [r7, #28]
 800759a:	e004      	b.n	80075a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075a2:	2301      	movs	r3, #1
 80075a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075a6:	f000 ffa1 	bl	80084ec <vPortExitCritical>

	return xReturn;
 80075aa:	69fb      	ldr	r3, [r7, #28]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3720      	adds	r7, #32
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20000f4c 	.word	0x20000f4c
 80075b8:	20000f60 	.word	0x20000f60

080075bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075c0:	4b03      	ldr	r3, [pc, #12]	@ (80075d0 <vTaskMissedYield+0x14>)
 80075c2:	2201      	movs	r2, #1
 80075c4:	601a      	str	r2, [r3, #0]
}
 80075c6:	bf00      	nop
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	20000f5c 	.word	0x20000f5c

080075d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075dc:	f000 f852 	bl	8007684 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075e0:	4b06      	ldr	r3, [pc, #24]	@ (80075fc <prvIdleTask+0x28>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d9f9      	bls.n	80075dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80075e8:	4b05      	ldr	r3, [pc, #20]	@ (8007600 <prvIdleTask+0x2c>)
 80075ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075f8:	e7f0      	b.n	80075dc <prvIdleTask+0x8>
 80075fa:	bf00      	nop
 80075fc:	20000a78 	.word	0x20000a78
 8007600:	e000ed04 	.word	0xe000ed04

08007604 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800760a:	2300      	movs	r3, #0
 800760c:	607b      	str	r3, [r7, #4]
 800760e:	e00c      	b.n	800762a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4a12      	ldr	r2, [pc, #72]	@ (8007664 <prvInitialiseTaskLists+0x60>)
 800761c:	4413      	add	r3, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe f8a2 	bl	8005768 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3301      	adds	r3, #1
 8007628:	607b      	str	r3, [r7, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b37      	cmp	r3, #55	@ 0x37
 800762e:	d9ef      	bls.n	8007610 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007630:	480d      	ldr	r0, [pc, #52]	@ (8007668 <prvInitialiseTaskLists+0x64>)
 8007632:	f7fe f899 	bl	8005768 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007636:	480d      	ldr	r0, [pc, #52]	@ (800766c <prvInitialiseTaskLists+0x68>)
 8007638:	f7fe f896 	bl	8005768 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800763c:	480c      	ldr	r0, [pc, #48]	@ (8007670 <prvInitialiseTaskLists+0x6c>)
 800763e:	f7fe f893 	bl	8005768 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007642:	480c      	ldr	r0, [pc, #48]	@ (8007674 <prvInitialiseTaskLists+0x70>)
 8007644:	f7fe f890 	bl	8005768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007648:	480b      	ldr	r0, [pc, #44]	@ (8007678 <prvInitialiseTaskLists+0x74>)
 800764a:	f7fe f88d 	bl	8005768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800764e:	4b0b      	ldr	r3, [pc, #44]	@ (800767c <prvInitialiseTaskLists+0x78>)
 8007650:	4a05      	ldr	r2, [pc, #20]	@ (8007668 <prvInitialiseTaskLists+0x64>)
 8007652:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007654:	4b0a      	ldr	r3, [pc, #40]	@ (8007680 <prvInitialiseTaskLists+0x7c>)
 8007656:	4a05      	ldr	r2, [pc, #20]	@ (800766c <prvInitialiseTaskLists+0x68>)
 8007658:	601a      	str	r2, [r3, #0]
}
 800765a:	bf00      	nop
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000a78 	.word	0x20000a78
 8007668:	20000ed8 	.word	0x20000ed8
 800766c:	20000eec 	.word	0x20000eec
 8007670:	20000f08 	.word	0x20000f08
 8007674:	20000f1c 	.word	0x20000f1c
 8007678:	20000f34 	.word	0x20000f34
 800767c:	20000f00 	.word	0x20000f00
 8007680:	20000f04 	.word	0x20000f04

08007684 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800768a:	e019      	b.n	80076c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800768c:	f000 fefc 	bl	8008488 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007690:	4b10      	ldr	r3, [pc, #64]	@ (80076d4 <prvCheckTasksWaitingTermination+0x50>)
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3304      	adds	r3, #4
 800769c:	4618      	mov	r0, r3
 800769e:	f7fe f8ed 	bl	800587c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076a2:	4b0d      	ldr	r3, [pc, #52]	@ (80076d8 <prvCheckTasksWaitingTermination+0x54>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	4a0b      	ldr	r2, [pc, #44]	@ (80076d8 <prvCheckTasksWaitingTermination+0x54>)
 80076aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076ac:	4b0b      	ldr	r3, [pc, #44]	@ (80076dc <prvCheckTasksWaitingTermination+0x58>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	4a0a      	ldr	r2, [pc, #40]	@ (80076dc <prvCheckTasksWaitingTermination+0x58>)
 80076b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076b6:	f000 ff19 	bl	80084ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f810 	bl	80076e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076c0:	4b06      	ldr	r3, [pc, #24]	@ (80076dc <prvCheckTasksWaitingTermination+0x58>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e1      	bne.n	800768c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000f1c 	.word	0x20000f1c
 80076d8:	20000f48 	.word	0x20000f48
 80076dc:	20000f30 	.word	0x20000f30

080076e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	335c      	adds	r3, #92	@ 0x5c
 80076ec:	4618      	mov	r0, r3
 80076ee:	f001 fcdf 	bl	80090b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d108      	bne.n	800770e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007700:	4618      	mov	r0, r3
 8007702:	f001 f829 	bl	8008758 <vPortFree>
				vPortFree( pxTCB );
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f001 f826 	bl	8008758 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800770c:	e019      	b.n	8007742 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8007714:	2b01      	cmp	r3, #1
 8007716:	d103      	bne.n	8007720 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f001 f81d 	bl	8008758 <vPortFree>
	}
 800771e:	e010      	b.n	8007742 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8007726:	2b02      	cmp	r3, #2
 8007728:	d00b      	beq.n	8007742 <prvDeleteTCB+0x62>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	60fb      	str	r3, [r7, #12]
}
 800773c:	bf00      	nop
 800773e:	bf00      	nop
 8007740:	e7fd      	b.n	800773e <prvDeleteTCB+0x5e>
	}
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007752:	4b0c      	ldr	r3, [pc, #48]	@ (8007784 <prvResetNextTaskUnblockTime+0x38>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d104      	bne.n	8007766 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800775c:	4b0a      	ldr	r3, [pc, #40]	@ (8007788 <prvResetNextTaskUnblockTime+0x3c>)
 800775e:	f04f 32ff 	mov.w	r2, #4294967295
 8007762:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007764:	e008      	b.n	8007778 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007766:	4b07      	ldr	r3, [pc, #28]	@ (8007784 <prvResetNextTaskUnblockTime+0x38>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	4a04      	ldr	r2, [pc, #16]	@ (8007788 <prvResetNextTaskUnblockTime+0x3c>)
 8007776:	6013      	str	r3, [r2, #0]
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	20000f00 	.word	0x20000f00
 8007788:	20000f68 	.word	0x20000f68

0800778c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007792:	4b05      	ldr	r3, [pc, #20]	@ (80077a8 <xTaskGetCurrentTaskHandle+0x1c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007798:	687b      	ldr	r3, [r7, #4]
	}
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	20000a74 	.word	0x20000a74

080077ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077b2:	4b0b      	ldr	r3, [pc, #44]	@ (80077e0 <xTaskGetSchedulerState+0x34>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077ba:	2301      	movs	r3, #1
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	e008      	b.n	80077d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077c0:	4b08      	ldr	r3, [pc, #32]	@ (80077e4 <xTaskGetSchedulerState+0x38>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d102      	bne.n	80077ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077c8:	2302      	movs	r3, #2
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	e001      	b.n	80077d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077ce:	2300      	movs	r3, #0
 80077d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077d2:	687b      	ldr	r3, [r7, #4]
	}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	20000f54 	.word	0x20000f54
 80077e4:	20000f70 	.word	0x20000f70

080077e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d051      	beq.n	80078a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007802:	4b2a      	ldr	r3, [pc, #168]	@ (80078ac <xTaskPriorityInherit+0xc4>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007808:	429a      	cmp	r2, r3
 800780a:	d241      	bcs.n	8007890 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	db06      	blt.n	8007822 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007814:	4b25      	ldr	r3, [pc, #148]	@ (80078ac <xTaskPriorityInherit+0xc4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6959      	ldr	r1, [r3, #20]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4a1f      	ldr	r2, [pc, #124]	@ (80078b0 <xTaskPriorityInherit+0xc8>)
 8007834:	4413      	add	r3, r2
 8007836:	4299      	cmp	r1, r3
 8007838:	d122      	bne.n	8007880 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	3304      	adds	r3, #4
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe f81c 	bl	800587c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007844:	4b19      	ldr	r3, [pc, #100]	@ (80078ac <xTaskPriorityInherit+0xc4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007852:	4b18      	ldr	r3, [pc, #96]	@ (80078b4 <xTaskPriorityInherit+0xcc>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d903      	bls.n	8007862 <xTaskPriorityInherit+0x7a>
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785e:	4a15      	ldr	r2, [pc, #84]	@ (80078b4 <xTaskPriorityInherit+0xcc>)
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007866:	4613      	mov	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4a10      	ldr	r2, [pc, #64]	@ (80078b0 <xTaskPriorityInherit+0xc8>)
 8007870:	441a      	add	r2, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	3304      	adds	r3, #4
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f7fd ffa2 	bl	80057c2 <vListInsertEnd>
 800787e:	e004      	b.n	800788a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007880:	4b0a      	ldr	r3, [pc, #40]	@ (80078ac <xTaskPriorityInherit+0xc4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800788a:	2301      	movs	r3, #1
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	e008      	b.n	80078a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007894:	4b05      	ldr	r3, [pc, #20]	@ (80078ac <xTaskPriorityInherit+0xc4>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789a:	429a      	cmp	r2, r3
 800789c:	d201      	bcs.n	80078a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800789e:	2301      	movs	r3, #1
 80078a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078a2:	68fb      	ldr	r3, [r7, #12]
	}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	20000a74 	.word	0x20000a74
 80078b0:	20000a78 	.word	0x20000a78
 80078b4:	20000f50 	.word	0x20000f50

080078b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078c4:	2300      	movs	r3, #0
 80078c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d058      	beq.n	8007980 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078ce:	4b2f      	ldr	r3, [pc, #188]	@ (800798c <xTaskPriorityDisinherit+0xd4>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d00b      	beq.n	80078f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	60fb      	str	r3, [r7, #12]
}
 80078ea:	bf00      	nop
 80078ec:	bf00      	nop
 80078ee:	e7fd      	b.n	80078ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10b      	bne.n	8007910 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	60bb      	str	r3, [r7, #8]
}
 800790a:	bf00      	nop
 800790c:	bf00      	nop
 800790e:	e7fd      	b.n	800790c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007914:	1e5a      	subs	r2, r3, #1
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007922:	429a      	cmp	r2, r3
 8007924:	d02c      	beq.n	8007980 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792a:	2b00      	cmp	r3, #0
 800792c:	d128      	bne.n	8007980 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	3304      	adds	r3, #4
 8007932:	4618      	mov	r0, r3
 8007934:	f7fd ffa2 	bl	800587c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007944:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007950:	4b0f      	ldr	r3, [pc, #60]	@ (8007990 <xTaskPriorityDisinherit+0xd8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d903      	bls.n	8007960 <xTaskPriorityDisinherit+0xa8>
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795c:	4a0c      	ldr	r2, [pc, #48]	@ (8007990 <xTaskPriorityDisinherit+0xd8>)
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007964:	4613      	mov	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4a09      	ldr	r2, [pc, #36]	@ (8007994 <xTaskPriorityDisinherit+0xdc>)
 800796e:	441a      	add	r2, r3
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	3304      	adds	r3, #4
 8007974:	4619      	mov	r1, r3
 8007976:	4610      	mov	r0, r2
 8007978:	f7fd ff23 	bl	80057c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800797c:	2301      	movs	r3, #1
 800797e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007980:	697b      	ldr	r3, [r7, #20]
	}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000a74 	.word	0x20000a74
 8007990:	20000f50 	.word	0x20000f50
 8007994:	20000a78 	.word	0x20000a78

08007998 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80079a6:	2301      	movs	r3, #1
 80079a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d06c      	beq.n	8007a8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10b      	bne.n	80079d0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	60fb      	str	r3, [r7, #12]
}
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	e7fd      	b.n	80079cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d902      	bls.n	80079e0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	61fb      	str	r3, [r7, #28]
 80079de:	e002      	b.n	80079e6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d04c      	beq.n	8007a8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d147      	bne.n	8007a8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80079fa:	4b26      	ldr	r3, [pc, #152]	@ (8007a94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d10b      	bne.n	8007a1c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	60bb      	str	r3, [r7, #8]
}
 8007a16:	bf00      	nop
 8007a18:	bf00      	nop
 8007a1a:	e7fd      	b.n	8007a18 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	db04      	blt.n	8007a3a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	6959      	ldr	r1, [r3, #20]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	4613      	mov	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4a13      	ldr	r2, [pc, #76]	@ (8007a98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007a4a:	4413      	add	r3, r2
 8007a4c:	4299      	cmp	r1, r3
 8007a4e:	d11c      	bne.n	8007a8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	3304      	adds	r3, #4
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fd ff11 	bl	800587c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8007a9c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d903      	bls.n	8007a6e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a9c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a72:	4613      	mov	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4a07      	ldr	r2, [pc, #28]	@ (8007a98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007a7c:	441a      	add	r2, r3
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	3304      	adds	r3, #4
 8007a82:	4619      	mov	r1, r3
 8007a84:	4610      	mov	r0, r2
 8007a86:	f7fd fe9c 	bl	80057c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a8a:	bf00      	nop
 8007a8c:	3720      	adds	r7, #32
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20000a74 	.word	0x20000a74
 8007a98:	20000a78 	.word	0x20000a78
 8007a9c:	20000f50 	.word	0x20000f50

08007aa0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007aa4:	4b07      	ldr	r3, [pc, #28]	@ (8007ac4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d004      	beq.n	8007ab6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007aac:	4b05      	ldr	r3, [pc, #20]	@ (8007ac4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ab2:	3201      	adds	r2, #1
 8007ab4:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 8007ab6:	4b03      	ldr	r3, [pc, #12]	@ (8007ac4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
	}
 8007aba:	4618      	mov	r0, r3
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	20000a74 	.word	0x20000a74

08007ac8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ad2:	4b21      	ldr	r3, [pc, #132]	@ (8007b58 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ad8:	4b20      	ldr	r3, [pc, #128]	@ (8007b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3304      	adds	r3, #4
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fd fecc 	bl	800587c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aea:	d10a      	bne.n	8007b02 <prvAddCurrentTaskToDelayedList+0x3a>
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d007      	beq.n	8007b02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007af2:	4b1a      	ldr	r3, [pc, #104]	@ (8007b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3304      	adds	r3, #4
 8007af8:	4619      	mov	r1, r3
 8007afa:	4819      	ldr	r0, [pc, #100]	@ (8007b60 <prvAddCurrentTaskToDelayedList+0x98>)
 8007afc:	f7fd fe61 	bl	80057c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b00:	e026      	b.n	8007b50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4413      	add	r3, r2
 8007b08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b0a:	4b14      	ldr	r3, [pc, #80]	@ (8007b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d209      	bcs.n	8007b2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b1a:	4b12      	ldr	r3, [pc, #72]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8007b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3304      	adds	r3, #4
 8007b24:	4619      	mov	r1, r3
 8007b26:	4610      	mov	r0, r2
 8007b28:	f7fd fe6f 	bl	800580a <vListInsert>
}
 8007b2c:	e010      	b.n	8007b50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	4b0a      	ldr	r3, [pc, #40]	@ (8007b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3304      	adds	r3, #4
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f7fd fe65 	bl	800580a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b40:	4b0a      	ldr	r3, [pc, #40]	@ (8007b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d202      	bcs.n	8007b50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b4a:	4a08      	ldr	r2, [pc, #32]	@ (8007b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	6013      	str	r3, [r2, #0]
}
 8007b50:	bf00      	nop
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20000f4c 	.word	0x20000f4c
 8007b5c:	20000a74 	.word	0x20000a74
 8007b60:	20000f34 	.word	0x20000f34
 8007b64:	20000f04 	.word	0x20000f04
 8007b68:	20000f00 	.word	0x20000f00
 8007b6c:	20000f68 	.word	0x20000f68

08007b70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08a      	sub	sp, #40	@ 0x28
 8007b74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b7a:	f000 fb13 	bl	80081a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf4 <xTimerCreateTimerTask+0x84>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d021      	beq.n	8007bca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b8e:	1d3a      	adds	r2, r7, #4
 8007b90:	f107 0108 	add.w	r1, r7, #8
 8007b94:	f107 030c 	add.w	r3, r7, #12
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fd fdcb 	bl	8005734 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	9202      	str	r2, [sp, #8]
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	2302      	movs	r3, #2
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	2300      	movs	r3, #0
 8007bae:	460a      	mov	r2, r1
 8007bb0:	4911      	ldr	r1, [pc, #68]	@ (8007bf8 <xTimerCreateTimerTask+0x88>)
 8007bb2:	4812      	ldr	r0, [pc, #72]	@ (8007bfc <xTimerCreateTimerTask+0x8c>)
 8007bb4:	f7fe ff70 	bl	8006a98 <xTaskCreateStatic>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	4a11      	ldr	r2, [pc, #68]	@ (8007c00 <xTimerCreateTimerTask+0x90>)
 8007bbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007bbe:	4b10      	ldr	r3, [pc, #64]	@ (8007c00 <xTimerCreateTimerTask+0x90>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10b      	bne.n	8007be8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	613b      	str	r3, [r7, #16]
}
 8007be2:	bf00      	nop
 8007be4:	bf00      	nop
 8007be6:	e7fd      	b.n	8007be4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007be8:	697b      	ldr	r3, [r7, #20]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20000fac 	.word	0x20000fac
 8007bf8:	08009d20 	.word	0x08009d20
 8007bfc:	08007d3d 	.word	0x08007d3d
 8007c00:	20000fb0 	.word	0x20000fb0

08007c04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08a      	sub	sp, #40	@ 0x28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <xTimerGenericCommand+0x30>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	623b      	str	r3, [r7, #32]
}
 8007c2e:	bf00      	nop
 8007c30:	bf00      	nop
 8007c32:	e7fd      	b.n	8007c30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c34:	4b19      	ldr	r3, [pc, #100]	@ (8007c9c <xTimerGenericCommand+0x98>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d02a      	beq.n	8007c92 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2b05      	cmp	r3, #5
 8007c4c:	dc18      	bgt.n	8007c80 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c4e:	f7ff fdad 	bl	80077ac <xTaskGetSchedulerState>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d109      	bne.n	8007c6c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c58:	4b10      	ldr	r3, [pc, #64]	@ (8007c9c <xTimerGenericCommand+0x98>)
 8007c5a:	6818      	ldr	r0, [r3, #0]
 8007c5c:	f107 0110 	add.w	r1, r7, #16
 8007c60:	2300      	movs	r3, #0
 8007c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c64:	f7fe f8a0 	bl	8005da8 <xQueueGenericSend>
 8007c68:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c6a:	e012      	b.n	8007c92 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c9c <xTimerGenericCommand+0x98>)
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	f107 0110 	add.w	r1, r7, #16
 8007c74:	2300      	movs	r3, #0
 8007c76:	2200      	movs	r2, #0
 8007c78:	f7fe f896 	bl	8005da8 <xQueueGenericSend>
 8007c7c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c7e:	e008      	b.n	8007c92 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c80:	4b06      	ldr	r3, [pc, #24]	@ (8007c9c <xTimerGenericCommand+0x98>)
 8007c82:	6818      	ldr	r0, [r3, #0]
 8007c84:	f107 0110 	add.w	r1, r7, #16
 8007c88:	2300      	movs	r3, #0
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	f7fe f98e 	bl	8005fac <xQueueGenericSendFromISR>
 8007c90:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3728      	adds	r7, #40	@ 0x28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	20000fac 	.word	0x20000fac

08007ca0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007caa:	4b23      	ldr	r3, [pc, #140]	@ (8007d38 <prvProcessExpiredTimer+0x98>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fd fddf 	bl	800587c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cc4:	f003 0304 	and.w	r3, r3, #4
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d023      	beq.n	8007d14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	699a      	ldr	r2, [r3, #24]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	18d1      	adds	r1, r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	6978      	ldr	r0, [r7, #20]
 8007cda:	f000 f8d5 	bl	8007e88 <prvInsertTimerInActiveList>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d020      	beq.n	8007d26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	2100      	movs	r1, #0
 8007cee:	6978      	ldr	r0, [r7, #20]
 8007cf0:	f7ff ff88 	bl	8007c04 <xTimerGenericCommand>
 8007cf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d114      	bne.n	8007d26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60fb      	str	r3, [r7, #12]
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	e7fd      	b.n	8007d10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d1a:	f023 0301 	bic.w	r3, r3, #1
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	6978      	ldr	r0, [r7, #20]
 8007d2c:	4798      	blx	r3
}
 8007d2e:	bf00      	nop
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20000fa4 	.word	0x20000fa4

08007d3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d44:	f107 0308 	add.w	r3, r7, #8
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 f859 	bl	8007e00 <prvGetNextExpireTime>
 8007d4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4619      	mov	r1, r3
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f805 	bl	8007d64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d5a:	f000 f8d7 	bl	8007f0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d5e:	bf00      	nop
 8007d60:	e7f0      	b.n	8007d44 <prvTimerTask+0x8>
	...

08007d64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d6e:	f7ff f8ff 	bl	8006f70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d72:	f107 0308 	add.w	r3, r7, #8
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 f866 	bl	8007e48 <prvSampleTimeNow>
 8007d7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d130      	bne.n	8007de6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10a      	bne.n	8007da0 <prvProcessTimerOrBlockTask+0x3c>
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d806      	bhi.n	8007da0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d92:	f7ff f8fb 	bl	8006f8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d96:	68f9      	ldr	r1, [r7, #12]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff ff81 	bl	8007ca0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d9e:	e024      	b.n	8007dea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d008      	beq.n	8007db8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007da6:	4b13      	ldr	r3, [pc, #76]	@ (8007df4 <prvProcessTimerOrBlockTask+0x90>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <prvProcessTimerOrBlockTask+0x50>
 8007db0:	2301      	movs	r3, #1
 8007db2:	e000      	b.n	8007db6 <prvProcessTimerOrBlockTask+0x52>
 8007db4:	2300      	movs	r3, #0
 8007db6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007db8:	4b0f      	ldr	r3, [pc, #60]	@ (8007df8 <prvProcessTimerOrBlockTask+0x94>)
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f7fe fe33 	bl	8006a30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007dca:	f7ff f8df 	bl	8006f8c <xTaskResumeAll>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007dd4:	4b09      	ldr	r3, [pc, #36]	@ (8007dfc <prvProcessTimerOrBlockTask+0x98>)
 8007dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	f3bf 8f6f 	isb	sy
}
 8007de4:	e001      	b.n	8007dea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007de6:	f7ff f8d1 	bl	8006f8c <xTaskResumeAll>
}
 8007dea:	bf00      	nop
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20000fa8 	.word	0x20000fa8
 8007df8:	20000fac 	.word	0x20000fac
 8007dfc:	e000ed04 	.word	0xe000ed04

08007e00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e08:	4b0e      	ldr	r3, [pc, #56]	@ (8007e44 <prvGetNextExpireTime+0x44>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <prvGetNextExpireTime+0x16>
 8007e12:	2201      	movs	r2, #1
 8007e14:	e000      	b.n	8007e18 <prvGetNextExpireTime+0x18>
 8007e16:	2200      	movs	r2, #0
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d105      	bne.n	8007e30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e24:	4b07      	ldr	r3, [pc, #28]	@ (8007e44 <prvGetNextExpireTime+0x44>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	60fb      	str	r3, [r7, #12]
 8007e2e:	e001      	b.n	8007e34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e34:	68fb      	ldr	r3, [r7, #12]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	20000fa4 	.word	0x20000fa4

08007e48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e50:	f7ff f93a 	bl	80070c8 <xTaskGetTickCount>
 8007e54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e56:	4b0b      	ldr	r3, [pc, #44]	@ (8007e84 <prvSampleTimeNow+0x3c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d205      	bcs.n	8007e6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e60:	f000 f93a 	bl	80080d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	e002      	b.n	8007e72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e72:	4a04      	ldr	r2, [pc, #16]	@ (8007e84 <prvSampleTimeNow+0x3c>)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e78:	68fb      	ldr	r3, [r7, #12]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20000fb4 	.word	0x20000fb4

08007e88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e96:	2300      	movs	r3, #0
 8007e98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d812      	bhi.n	8007ed4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	1ad2      	subs	r2, r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d302      	bcc.n	8007ec2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	617b      	str	r3, [r7, #20]
 8007ec0:	e01b      	b.n	8007efa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ec2:	4b10      	ldr	r3, [pc, #64]	@ (8007f04 <prvInsertTimerInActiveList+0x7c>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	4619      	mov	r1, r3
 8007ecc:	4610      	mov	r0, r2
 8007ece:	f7fd fc9c 	bl	800580a <vListInsert>
 8007ed2:	e012      	b.n	8007efa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d206      	bcs.n	8007eea <prvInsertTimerInActiveList+0x62>
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d302      	bcc.n	8007eea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	e007      	b.n	8007efa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eea:	4b07      	ldr	r3, [pc, #28]	@ (8007f08 <prvInsertTimerInActiveList+0x80>)
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	f7fd fc88 	bl	800580a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007efa:	697b      	ldr	r3, [r7, #20]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	20000fa8 	.word	0x20000fa8
 8007f08:	20000fa4 	.word	0x20000fa4

08007f0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08e      	sub	sp, #56	@ 0x38
 8007f10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f12:	e0ce      	b.n	80080b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	da19      	bge.n	8007f4e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f1a:	1d3b      	adds	r3, r7, #4
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	61fb      	str	r3, [r7, #28]
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	e7fd      	b.n	8007f3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f44:	6850      	ldr	r0, [r2, #4]
 8007f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f48:	6892      	ldr	r2, [r2, #8]
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f2c0 80ae 	blt.w	80080b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d004      	beq.n	8007f6c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f64:	3304      	adds	r3, #4
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fd fc88 	bl	800587c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff ff6a 	bl	8007e48 <prvSampleTimeNow>
 8007f74:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b09      	cmp	r3, #9
 8007f7a:	f200 8097 	bhi.w	80080ac <prvProcessReceivedCommands+0x1a0>
 8007f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f84 <prvProcessReceivedCommands+0x78>)
 8007f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f84:	08007fad 	.word	0x08007fad
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	08007fad 	.word	0x08007fad
 8007f90:	08008023 	.word	0x08008023
 8007f94:	08008037 	.word	0x08008037
 8007f98:	08008083 	.word	0x08008083
 8007f9c:	08007fad 	.word	0x08007fad
 8007fa0:	08007fad 	.word	0x08007fad
 8007fa4:	08008023 	.word	0x08008023
 8007fa8:	08008037 	.word	0x08008037
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fb2:	f043 0301 	orr.w	r3, r3, #1
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	18d1      	adds	r1, r2, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fcc:	f7ff ff5c 	bl	8007e88 <prvInsertTimerInActiveList>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d06c      	beq.n	80080b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d061      	beq.n	80080b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	441a      	add	r2, r3
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ffe:	f7ff fe01 	bl	8007c04 <xTimerGenericCommand>
 8008002:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d152      	bne.n	80080b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800800a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	61bb      	str	r3, [r7, #24]
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	e7fd      	b.n	800801e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008028:	f023 0301 	bic.w	r3, r3, #1
 800802c:	b2da      	uxtb	r2, r3
 800802e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008030:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008034:	e03d      	b.n	80080b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	b2da      	uxtb	r2, r3
 8008042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008044:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800804e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10b      	bne.n	800806e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	617b      	str	r3, [r7, #20]
}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	e7fd      	b.n	800806a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800806e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008070:	699a      	ldr	r2, [r3, #24]
 8008072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008074:	18d1      	adds	r1, r2, r3
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800807a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800807c:	f7ff ff04 	bl	8007e88 <prvInsertTimerInActiveList>
					break;
 8008080:	e017      	b.n	80080b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008088:	f003 0302 	and.w	r3, r3, #2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d103      	bne.n	8008098 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008090:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008092:	f000 fb61 	bl	8008758 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008096:	e00c      	b.n	80080b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800809e:	f023 0301 	bic.w	r3, r3, #1
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80080aa:	e002      	b.n	80080b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80080ac:	bf00      	nop
 80080ae:	e000      	b.n	80080b2 <prvProcessReceivedCommands+0x1a6>
					break;
 80080b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080b2:	4b08      	ldr	r3, [pc, #32]	@ (80080d4 <prvProcessReceivedCommands+0x1c8>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	1d39      	adds	r1, r7, #4
 80080b8:	2200      	movs	r2, #0
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe f8a4 	bl	8006208 <xQueueReceive>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f47f af26 	bne.w	8007f14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	3730      	adds	r7, #48	@ 0x30
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20000fac 	.word	0x20000fac

080080d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b088      	sub	sp, #32
 80080dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080de:	e049      	b.n	8008174 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080e0:	4b2e      	ldr	r3, [pc, #184]	@ (800819c <prvSwitchTimerLists+0xc4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ea:	4b2c      	ldr	r3, [pc, #176]	@ (800819c <prvSwitchTimerLists+0xc4>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fd fbbf 	bl	800587c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d02f      	beq.n	8008174 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	4413      	add	r3, r2
 800811c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	429a      	cmp	r2, r3
 8008124:	d90e      	bls.n	8008144 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008132:	4b1a      	ldr	r3, [pc, #104]	@ (800819c <prvSwitchTimerLists+0xc4>)
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3304      	adds	r3, #4
 800813a:	4619      	mov	r1, r3
 800813c:	4610      	mov	r0, r2
 800813e:	f7fd fb64 	bl	800580a <vListInsert>
 8008142:	e017      	b.n	8008174 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008144:	2300      	movs	r3, #0
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	2300      	movs	r3, #0
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	2100      	movs	r1, #0
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff fd58 	bl	8007c04 <xTimerGenericCommand>
 8008154:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10b      	bne.n	8008174 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	603b      	str	r3, [r7, #0]
}
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	e7fd      	b.n	8008170 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008174:	4b09      	ldr	r3, [pc, #36]	@ (800819c <prvSwitchTimerLists+0xc4>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1b0      	bne.n	80080e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800817e:	4b07      	ldr	r3, [pc, #28]	@ (800819c <prvSwitchTimerLists+0xc4>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008184:	4b06      	ldr	r3, [pc, #24]	@ (80081a0 <prvSwitchTimerLists+0xc8>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a04      	ldr	r2, [pc, #16]	@ (800819c <prvSwitchTimerLists+0xc4>)
 800818a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800818c:	4a04      	ldr	r2, [pc, #16]	@ (80081a0 <prvSwitchTimerLists+0xc8>)
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	6013      	str	r3, [r2, #0]
}
 8008192:	bf00      	nop
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20000fa4 	.word	0x20000fa4
 80081a0:	20000fa8 	.word	0x20000fa8

080081a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80081aa:	f000 f96d 	bl	8008488 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80081ae:	4b15      	ldr	r3, [pc, #84]	@ (8008204 <prvCheckForValidListAndQueue+0x60>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d120      	bne.n	80081f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80081b6:	4814      	ldr	r0, [pc, #80]	@ (8008208 <prvCheckForValidListAndQueue+0x64>)
 80081b8:	f7fd fad6 	bl	8005768 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80081bc:	4813      	ldr	r0, [pc, #76]	@ (800820c <prvCheckForValidListAndQueue+0x68>)
 80081be:	f7fd fad3 	bl	8005768 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80081c2:	4b13      	ldr	r3, [pc, #76]	@ (8008210 <prvCheckForValidListAndQueue+0x6c>)
 80081c4:	4a10      	ldr	r2, [pc, #64]	@ (8008208 <prvCheckForValidListAndQueue+0x64>)
 80081c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80081c8:	4b12      	ldr	r3, [pc, #72]	@ (8008214 <prvCheckForValidListAndQueue+0x70>)
 80081ca:	4a10      	ldr	r2, [pc, #64]	@ (800820c <prvCheckForValidListAndQueue+0x68>)
 80081cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80081ce:	2300      	movs	r3, #0
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	4b11      	ldr	r3, [pc, #68]	@ (8008218 <prvCheckForValidListAndQueue+0x74>)
 80081d4:	4a11      	ldr	r2, [pc, #68]	@ (800821c <prvCheckForValidListAndQueue+0x78>)
 80081d6:	2110      	movs	r1, #16
 80081d8:	200a      	movs	r0, #10
 80081da:	f7fd fbe3 	bl	80059a4 <xQueueGenericCreateStatic>
 80081de:	4603      	mov	r3, r0
 80081e0:	4a08      	ldr	r2, [pc, #32]	@ (8008204 <prvCheckForValidListAndQueue+0x60>)
 80081e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80081e4:	4b07      	ldr	r3, [pc, #28]	@ (8008204 <prvCheckForValidListAndQueue+0x60>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d005      	beq.n	80081f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081ec:	4b05      	ldr	r3, [pc, #20]	@ (8008204 <prvCheckForValidListAndQueue+0x60>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	490b      	ldr	r1, [pc, #44]	@ (8008220 <prvCheckForValidListAndQueue+0x7c>)
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe fbc8 	bl	8006988 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081f8:	f000 f978 	bl	80084ec <vPortExitCritical>
}
 80081fc:	bf00      	nop
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20000fac 	.word	0x20000fac
 8008208:	20000f7c 	.word	0x20000f7c
 800820c:	20000f90 	.word	0x20000f90
 8008210:	20000fa4 	.word	0x20000fa4
 8008214:	20000fa8 	.word	0x20000fa8
 8008218:	20001058 	.word	0x20001058
 800821c:	20000fb8 	.word	0x20000fb8
 8008220:	08009d28 	.word	0x08009d28

08008224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3b04      	subs	r3, #4
 8008234:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800823c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3b04      	subs	r3, #4
 8008242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f023 0201 	bic.w	r2, r3, #1
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3b04      	subs	r3, #4
 8008252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008254:	4a0c      	ldr	r2, [pc, #48]	@ (8008288 <pxPortInitialiseStack+0x64>)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3b14      	subs	r3, #20
 800825e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3b04      	subs	r3, #4
 800826a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f06f 0202 	mvn.w	r2, #2
 8008272:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3b20      	subs	r3, #32
 8008278:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800827a:	68fb      	ldr	r3, [r7, #12]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	0800828d 	.word	0x0800828d

0800828c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008292:	2300      	movs	r3, #0
 8008294:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008296:	4b13      	ldr	r3, [pc, #76]	@ (80082e4 <prvTaskExitError+0x58>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829e:	d00b      	beq.n	80082b8 <prvTaskExitError+0x2c>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	60fb      	str	r3, [r7, #12]
}
 80082b2:	bf00      	nop
 80082b4:	bf00      	nop
 80082b6:	e7fd      	b.n	80082b4 <prvTaskExitError+0x28>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	60bb      	str	r3, [r7, #8]
}
 80082ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082cc:	bf00      	nop
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d0fc      	beq.n	80082ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	200000c4 	.word	0x200000c4
	...

080082f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082f0:	4b07      	ldr	r3, [pc, #28]	@ (8008310 <pxCurrentTCBConst2>)
 80082f2:	6819      	ldr	r1, [r3, #0]
 80082f4:	6808      	ldr	r0, [r1, #0]
 80082f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fa:	f380 8809 	msr	PSP, r0
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f04f 0000 	mov.w	r0, #0
 8008306:	f380 8811 	msr	BASEPRI, r0
 800830a:	4770      	bx	lr
 800830c:	f3af 8000 	nop.w

08008310 <pxCurrentTCBConst2>:
 8008310:	20000a74 	.word	0x20000a74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop

08008318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008318:	4808      	ldr	r0, [pc, #32]	@ (800833c <prvPortStartFirstTask+0x24>)
 800831a:	6800      	ldr	r0, [r0, #0]
 800831c:	6800      	ldr	r0, [r0, #0]
 800831e:	f380 8808 	msr	MSP, r0
 8008322:	f04f 0000 	mov.w	r0, #0
 8008326:	f380 8814 	msr	CONTROL, r0
 800832a:	b662      	cpsie	i
 800832c:	b661      	cpsie	f
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	df00      	svc	0
 8008338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800833a:	bf00      	nop
 800833c:	e000ed08 	.word	0xe000ed08

08008340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008346:	4b47      	ldr	r3, [pc, #284]	@ (8008464 <xPortStartScheduler+0x124>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a47      	ldr	r2, [pc, #284]	@ (8008468 <xPortStartScheduler+0x128>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d10b      	bne.n	8008368 <xPortStartScheduler+0x28>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	613b      	str	r3, [r7, #16]
}
 8008362:	bf00      	nop
 8008364:	bf00      	nop
 8008366:	e7fd      	b.n	8008364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008368:	4b3e      	ldr	r3, [pc, #248]	@ (8008464 <xPortStartScheduler+0x124>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a3f      	ldr	r2, [pc, #252]	@ (800846c <xPortStartScheduler+0x12c>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d10b      	bne.n	800838a <xPortStartScheduler+0x4a>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	60fb      	str	r3, [r7, #12]
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop
 8008388:	e7fd      	b.n	8008386 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800838a:	4b39      	ldr	r3, [pc, #228]	@ (8008470 <xPortStartScheduler+0x130>)
 800838c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	b2db      	uxtb	r3, r3
 8008394:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	22ff      	movs	r2, #255	@ 0xff
 800839a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	4b31      	ldr	r3, [pc, #196]	@ (8008474 <xPortStartScheduler+0x134>)
 80083b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083b2:	4b31      	ldr	r3, [pc, #196]	@ (8008478 <xPortStartScheduler+0x138>)
 80083b4:	2207      	movs	r2, #7
 80083b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083b8:	e009      	b.n	80083ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80083ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008478 <xPortStartScheduler+0x138>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3b01      	subs	r3, #1
 80083c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008478 <xPortStartScheduler+0x138>)
 80083c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083d6:	2b80      	cmp	r3, #128	@ 0x80
 80083d8:	d0ef      	beq.n	80083ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083da:	4b27      	ldr	r3, [pc, #156]	@ (8008478 <xPortStartScheduler+0x138>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f1c3 0307 	rsb	r3, r3, #7
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d00b      	beq.n	80083fe <xPortStartScheduler+0xbe>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	60bb      	str	r3, [r7, #8]
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	e7fd      	b.n	80083fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008478 <xPortStartScheduler+0x138>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	021b      	lsls	r3, r3, #8
 8008404:	4a1c      	ldr	r2, [pc, #112]	@ (8008478 <xPortStartScheduler+0x138>)
 8008406:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008408:	4b1b      	ldr	r3, [pc, #108]	@ (8008478 <xPortStartScheduler+0x138>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008410:	4a19      	ldr	r2, [pc, #100]	@ (8008478 <xPortStartScheduler+0x138>)
 8008412:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	b2da      	uxtb	r2, r3
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800841c:	4b17      	ldr	r3, [pc, #92]	@ (800847c <xPortStartScheduler+0x13c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a16      	ldr	r2, [pc, #88]	@ (800847c <xPortStartScheduler+0x13c>)
 8008422:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008426:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008428:	4b14      	ldr	r3, [pc, #80]	@ (800847c <xPortStartScheduler+0x13c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a13      	ldr	r2, [pc, #76]	@ (800847c <xPortStartScheduler+0x13c>)
 800842e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008432:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008434:	f000 f8da 	bl	80085ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008438:	4b11      	ldr	r3, [pc, #68]	@ (8008480 <xPortStartScheduler+0x140>)
 800843a:	2200      	movs	r2, #0
 800843c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800843e:	f000 f8f9 	bl	8008634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008442:	4b10      	ldr	r3, [pc, #64]	@ (8008484 <xPortStartScheduler+0x144>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a0f      	ldr	r2, [pc, #60]	@ (8008484 <xPortStartScheduler+0x144>)
 8008448:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800844c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800844e:	f7ff ff63 	bl	8008318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008452:	f7fe ff03 	bl	800725c <vTaskSwitchContext>
	prvTaskExitError();
 8008456:	f7ff ff19 	bl	800828c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	e000ed00 	.word	0xe000ed00
 8008468:	410fc271 	.word	0x410fc271
 800846c:	410fc270 	.word	0x410fc270
 8008470:	e000e400 	.word	0xe000e400
 8008474:	200010a8 	.word	0x200010a8
 8008478:	200010ac 	.word	0x200010ac
 800847c:	e000ed20 	.word	0xe000ed20
 8008480:	200000c4 	.word	0x200000c4
 8008484:	e000ef34 	.word	0xe000ef34

08008488 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	607b      	str	r3, [r7, #4]
}
 80084a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084a2:	4b10      	ldr	r3, [pc, #64]	@ (80084e4 <vPortEnterCritical+0x5c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3301      	adds	r3, #1
 80084a8:	4a0e      	ldr	r2, [pc, #56]	@ (80084e4 <vPortEnterCritical+0x5c>)
 80084aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084ac:	4b0d      	ldr	r3, [pc, #52]	@ (80084e4 <vPortEnterCritical+0x5c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d110      	bne.n	80084d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084b4:	4b0c      	ldr	r3, [pc, #48]	@ (80084e8 <vPortEnterCritical+0x60>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00b      	beq.n	80084d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	603b      	str	r3, [r7, #0]
}
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	e7fd      	b.n	80084d2 <vPortEnterCritical+0x4a>
	}
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	200000c4 	.word	0x200000c4
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80084f2:	4b12      	ldr	r3, [pc, #72]	@ (800853c <vPortExitCritical+0x50>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10b      	bne.n	8008512 <vPortExitCritical+0x26>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	607b      	str	r3, [r7, #4]
}
 800850c:	bf00      	nop
 800850e:	bf00      	nop
 8008510:	e7fd      	b.n	800850e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008512:	4b0a      	ldr	r3, [pc, #40]	@ (800853c <vPortExitCritical+0x50>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3b01      	subs	r3, #1
 8008518:	4a08      	ldr	r2, [pc, #32]	@ (800853c <vPortExitCritical+0x50>)
 800851a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800851c:	4b07      	ldr	r3, [pc, #28]	@ (800853c <vPortExitCritical+0x50>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d105      	bne.n	8008530 <vPortExitCritical+0x44>
 8008524:	2300      	movs	r3, #0
 8008526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	f383 8811 	msr	BASEPRI, r3
}
 800852e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	200000c4 	.word	0x200000c4

08008540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008540:	f3ef 8009 	mrs	r0, PSP
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	4b15      	ldr	r3, [pc, #84]	@ (80085a0 <pxCurrentTCBConst>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	f01e 0f10 	tst.w	lr, #16
 8008550:	bf08      	it	eq
 8008552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855a:	6010      	str	r0, [r2, #0]
 800855c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008564:	f380 8811 	msr	BASEPRI, r0
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f7fe fe74 	bl	800725c <vTaskSwitchContext>
 8008574:	f04f 0000 	mov.w	r0, #0
 8008578:	f380 8811 	msr	BASEPRI, r0
 800857c:	bc09      	pop	{r0, r3}
 800857e:	6819      	ldr	r1, [r3, #0]
 8008580:	6808      	ldr	r0, [r1, #0]
 8008582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008586:	f01e 0f10 	tst.w	lr, #16
 800858a:	bf08      	it	eq
 800858c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008590:	f380 8809 	msr	PSP, r0
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	f3af 8000 	nop.w

080085a0 <pxCurrentTCBConst>:
 80085a0:	20000a74 	.word	0x20000a74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop

080085a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	607b      	str	r3, [r7, #4]
}
 80085c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085c2:	f7fe fd91 	bl	80070e8 <xTaskIncrementTick>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085cc:	4b06      	ldr	r3, [pc, #24]	@ (80085e8 <xPortSysTickHandler+0x40>)
 80085ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	2300      	movs	r3, #0
 80085d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	f383 8811 	msr	BASEPRI, r3
}
 80085de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	e000ed04 	.word	0xe000ed04

080085ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008620 <vPortSetupTimerInterrupt+0x34>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008624 <vPortSetupTimerInterrupt+0x38>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008628 <vPortSetupTimerInterrupt+0x3c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a0a      	ldr	r2, [pc, #40]	@ (800862c <vPortSetupTimerInterrupt+0x40>)
 8008602:	fba2 2303 	umull	r2, r3, r2, r3
 8008606:	099b      	lsrs	r3, r3, #6
 8008608:	4a09      	ldr	r2, [pc, #36]	@ (8008630 <vPortSetupTimerInterrupt+0x44>)
 800860a:	3b01      	subs	r3, #1
 800860c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800860e:	4b04      	ldr	r3, [pc, #16]	@ (8008620 <vPortSetupTimerInterrupt+0x34>)
 8008610:	2207      	movs	r2, #7
 8008612:	601a      	str	r2, [r3, #0]
}
 8008614:	bf00      	nop
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	e000e010 	.word	0xe000e010
 8008624:	e000e018 	.word	0xe000e018
 8008628:	200000b8 	.word	0x200000b8
 800862c:	10624dd3 	.word	0x10624dd3
 8008630:	e000e014 	.word	0xe000e014

08008634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008644 <vPortEnableVFP+0x10>
 8008638:	6801      	ldr	r1, [r0, #0]
 800863a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800863e:	6001      	str	r1, [r0, #0]
 8008640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008642:	bf00      	nop
 8008644:	e000ed88 	.word	0xe000ed88

08008648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800864e:	f3ef 8305 	mrs	r3, IPSR
 8008652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2b0f      	cmp	r3, #15
 8008658:	d915      	bls.n	8008686 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800865a:	4a18      	ldr	r2, [pc, #96]	@ (80086bc <vPortValidateInterruptPriority+0x74>)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008664:	4b16      	ldr	r3, [pc, #88]	@ (80086c0 <vPortValidateInterruptPriority+0x78>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	7afa      	ldrb	r2, [r7, #11]
 800866a:	429a      	cmp	r2, r3
 800866c:	d20b      	bcs.n	8008686 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	607b      	str	r3, [r7, #4]
}
 8008680:	bf00      	nop
 8008682:	bf00      	nop
 8008684:	e7fd      	b.n	8008682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008686:	4b0f      	ldr	r3, [pc, #60]	@ (80086c4 <vPortValidateInterruptPriority+0x7c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800868e:	4b0e      	ldr	r3, [pc, #56]	@ (80086c8 <vPortValidateInterruptPriority+0x80>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d90b      	bls.n	80086ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	603b      	str	r3, [r7, #0]
}
 80086a8:	bf00      	nop
 80086aa:	bf00      	nop
 80086ac:	e7fd      	b.n	80086aa <vPortValidateInterruptPriority+0x62>
	}
 80086ae:	bf00      	nop
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	e000e3f0 	.word	0xe000e3f0
 80086c0:	200010a8 	.word	0x200010a8
 80086c4:	e000ed0c 	.word	0xe000ed0c
 80086c8:	200010ac 	.word	0x200010ac

080086cc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f003 0307 	and.w	r3, r3, #7
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d004      	beq.n	80086ec <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f023 0307 	bic.w	r3, r3, #7
 80086e8:	3308      	adds	r3, #8
 80086ea:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80086ec:	f7fe fc40 	bl	8006f70 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80086f0:	4b16      	ldr	r3, [pc, #88]	@ (800874c <pvPortMalloc+0x80>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d105      	bne.n	8008704 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80086f8:	4b15      	ldr	r3, [pc, #84]	@ (8008750 <pvPortMalloc+0x84>)
 80086fa:	f023 0307 	bic.w	r3, r3, #7
 80086fe:	461a      	mov	r2, r3
 8008700:	4b12      	ldr	r3, [pc, #72]	@ (800874c <pvPortMalloc+0x80>)
 8008702:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8008704:	4b13      	ldr	r3, [pc, #76]	@ (8008754 <pvPortMalloc+0x88>)
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4413      	add	r3, r2
 800870c:	f643 32f7 	movw	r2, #15351	@ 0x3bf7
 8008710:	4293      	cmp	r3, r2
 8008712:	d813      	bhi.n	800873c <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8008714:	4b0f      	ldr	r3, [pc, #60]	@ (8008754 <pvPortMalloc+0x88>)
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	441a      	add	r2, r3
 800871c:	4b0d      	ldr	r3, [pc, #52]	@ (8008754 <pvPortMalloc+0x88>)
 800871e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8008720:	429a      	cmp	r2, r3
 8008722:	d90b      	bls.n	800873c <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8008724:	4b09      	ldr	r3, [pc, #36]	@ (800874c <pvPortMalloc+0x80>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	4b0a      	ldr	r3, [pc, #40]	@ (8008754 <pvPortMalloc+0x88>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4413      	add	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8008730:	4b08      	ldr	r3, [pc, #32]	@ (8008754 <pvPortMalloc+0x88>)
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4413      	add	r3, r2
 8008738:	4a06      	ldr	r2, [pc, #24]	@ (8008754 <pvPortMalloc+0x88>)
 800873a:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800873c:	f7fe fc26 	bl	8006f8c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8008740:	68fb      	ldr	r3, [r7, #12]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	20004cb4 	.word	0x20004cb4
 8008750:	200010b8 	.word	0x200010b8
 8008754:	20004cb0 	.word	0x20004cb0

08008758 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00b      	beq.n	800877e <vPortFree+0x26>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	60fb      	str	r3, [r7, #12]
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	e7fd      	b.n	800877a <vPortFree+0x22>
}
 800877e:	bf00      	nop
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
	...

0800878c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8008790:	4814      	ldr	r0, [pc, #80]	@ (80087e4 <I2Cx_Init+0x58>)
 8008792:	f7fa fb81 	bl	8002e98 <HAL_I2C_GetState>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d121      	bne.n	80087e0 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800879c:	4b11      	ldr	r3, [pc, #68]	@ (80087e4 <I2Cx_Init+0x58>)
 800879e:	4a12      	ldr	r2, [pc, #72]	@ (80087e8 <I2Cx_Init+0x5c>)
 80087a0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80087a2:	4b10      	ldr	r3, [pc, #64]	@ (80087e4 <I2Cx_Init+0x58>)
 80087a4:	2243      	movs	r2, #67	@ 0x43
 80087a6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80087a8:	4b0e      	ldr	r3, [pc, #56]	@ (80087e4 <I2Cx_Init+0x58>)
 80087aa:	4a10      	ldr	r2, [pc, #64]	@ (80087ec <I2Cx_Init+0x60>)
 80087ac:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80087ae:	4b0d      	ldr	r3, [pc, #52]	@ (80087e4 <I2Cx_Init+0x58>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80087b4:	4b0b      	ldr	r3, [pc, #44]	@ (80087e4 <I2Cx_Init+0x58>)
 80087b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80087ba:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80087bc:	4b09      	ldr	r3, [pc, #36]	@ (80087e4 <I2Cx_Init+0x58>)
 80087be:	2200      	movs	r2, #0
 80087c0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80087c2:	4b08      	ldr	r3, [pc, #32]	@ (80087e4 <I2Cx_Init+0x58>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80087c8:	4b06      	ldr	r3, [pc, #24]	@ (80087e4 <I2Cx_Init+0x58>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 80087ce:	4b05      	ldr	r3, [pc, #20]	@ (80087e4 <I2Cx_Init+0x58>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80087d4:	4803      	ldr	r0, [pc, #12]	@ (80087e4 <I2Cx_Init+0x58>)
 80087d6:	f000 f86b 	bl	80088b0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80087da:	4802      	ldr	r0, [pc, #8]	@ (80087e4 <I2Cx_Init+0x58>)
 80087dc:	f7f9 febc 	bl	8002558 <HAL_I2C_Init>
  }
}
 80087e0:	bf00      	nop
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	20004cb8 	.word	0x20004cb8
 80087e8:	40005400 	.word	0x40005400
 80087ec:	000186a0 	.word	0x000186a0

080087f0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af04      	add	r7, sp, #16
 80087f6:	4603      	mov	r3, r0
 80087f8:	80fb      	strh	r3, [r7, #6]
 80087fa:	460b      	mov	r3, r1
 80087fc:	717b      	strb	r3, [r7, #5]
 80087fe:	4613      	mov	r3, r2
 8008800:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8008806:	797b      	ldrb	r3, [r7, #5]
 8008808:	b29a      	uxth	r2, r3
 800880a:	4b0b      	ldr	r3, [pc, #44]	@ (8008838 <I2Cx_WriteData+0x48>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	88f9      	ldrh	r1, [r7, #6]
 8008810:	9302      	str	r3, [sp, #8]
 8008812:	2301      	movs	r3, #1
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	1d3b      	adds	r3, r7, #4
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	2301      	movs	r3, #1
 800881c:	4807      	ldr	r0, [pc, #28]	@ (800883c <I2Cx_WriteData+0x4c>)
 800881e:	f7fa f80f 	bl	8002840 <HAL_I2C_Mem_Write>
 8008822:	4603      	mov	r3, r0
 8008824:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800882c:	f000 f834 	bl	8008898 <I2Cx_Error>
  }
}
 8008830:	bf00      	nop
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	200000c8 	.word	0x200000c8
 800883c:	20004cb8 	.word	0x20004cb8

08008840 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b088      	sub	sp, #32
 8008844:	af04      	add	r7, sp, #16
 8008846:	4603      	mov	r3, r0
 8008848:	460a      	mov	r2, r1
 800884a:	80fb      	strh	r3, [r7, #6]
 800884c:	4613      	mov	r3, r2
 800884e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8008854:	2300      	movs	r3, #0
 8008856:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8008858:	797b      	ldrb	r3, [r7, #5]
 800885a:	b29a      	uxth	r2, r3
 800885c:	4b0c      	ldr	r3, [pc, #48]	@ (8008890 <I2Cx_ReadData+0x50>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	88f9      	ldrh	r1, [r7, #6]
 8008862:	9302      	str	r3, [sp, #8]
 8008864:	2301      	movs	r3, #1
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	f107 030e 	add.w	r3, r7, #14
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	2301      	movs	r3, #1
 8008870:	4808      	ldr	r0, [pc, #32]	@ (8008894 <I2Cx_ReadData+0x54>)
 8008872:	f7fa f8df 	bl	8002a34 <HAL_I2C_Mem_Read>
 8008876:	4603      	mov	r3, r0
 8008878:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8008880:	f000 f80a 	bl	8008898 <I2Cx_Error>
  }
  return value;
 8008884:	7bbb      	ldrb	r3, [r7, #14]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	200000c8 	.word	0x200000c8
 8008894:	20004cb8 	.word	0x20004cb8

08008898 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 800889c:	4803      	ldr	r0, [pc, #12]	@ (80088ac <I2Cx_Error+0x14>)
 800889e:	f7f9 ff9f 	bl	80027e0 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C communication BUS */
  I2Cx_Init();
 80088a2:	f7ff ff73 	bl	800878c <I2Cx_Init>
}
 80088a6:	bf00      	nop
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20004cb8 	.word	0x20004cb8

080088b0 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08a      	sub	sp, #40	@ 0x28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 80088b8:	2300      	movs	r3, #0
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	4b25      	ldr	r3, [pc, #148]	@ (8008954 <I2Cx_MspInit+0xa4>)
 80088be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c0:	4a24      	ldr	r2, [pc, #144]	@ (8008954 <I2Cx_MspInit+0xa4>)
 80088c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80088c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80088c8:	4b22      	ldr	r3, [pc, #136]	@ (8008954 <I2Cx_MspInit+0xa4>)
 80088ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80088d0:	613b      	str	r3, [r7, #16]
 80088d2:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80088d4:	2300      	movs	r3, #0
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	4b1e      	ldr	r3, [pc, #120]	@ (8008954 <I2Cx_MspInit+0xa4>)
 80088da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008954 <I2Cx_MspInit+0xa4>)
 80088de:	f043 0302 	orr.w	r3, r3, #2
 80088e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80088e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008954 <I2Cx_MspInit+0xa4>)
 80088e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 80088f0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80088f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80088f6:	2312      	movs	r3, #18
 80088f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80088fe:	2302      	movs	r3, #2
 8008900:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8008902:	2304      	movs	r3, #4
 8008904:	627b      	str	r3, [r7, #36]	@ 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8008906:	f107 0314 	add.w	r3, r7, #20
 800890a:	4619      	mov	r1, r3
 800890c:	4812      	ldr	r0, [pc, #72]	@ (8008958 <I2Cx_MspInit+0xa8>)
 800890e:	f7f9 fb6f 	bl	8001ff0 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8008912:	4b10      	ldr	r3, [pc, #64]	@ (8008954 <I2Cx_MspInit+0xa4>)
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	4a0f      	ldr	r2, [pc, #60]	@ (8008954 <I2Cx_MspInit+0xa4>)
 8008918:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800891c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800891e:	4b0d      	ldr	r3, [pc, #52]	@ (8008954 <I2Cx_MspInit+0xa4>)
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	4a0c      	ldr	r2, [pc, #48]	@ (8008954 <I2Cx_MspInit+0xa4>)
 8008924:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008928:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800892a:	2200      	movs	r2, #0
 800892c:	210f      	movs	r1, #15
 800892e:	201f      	movs	r0, #31
 8008930:	f7f9 fb34 	bl	8001f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8008934:	201f      	movs	r0, #31
 8008936:	f7f9 fb4d 	bl	8001fd4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800893a:	2200      	movs	r2, #0
 800893c:	210f      	movs	r1, #15
 800893e:	2020      	movs	r0, #32
 8008940:	f7f9 fb2c 	bl	8001f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8008944:	2020      	movs	r0, #32
 8008946:	f7f9 fb45 	bl	8001fd4 <HAL_NVIC_EnableIRQ>
}
 800894a:	bf00      	nop
 800894c:	3728      	adds	r7, #40	@ 0x28
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	40023800 	.word	0x40023800
 8008958:	40020400 	.word	0x40020400

0800895c <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8008962:	2300      	movs	r3, #0
 8008964:	603b      	str	r3, [r7, #0]
 8008966:	4b0f      	ldr	r3, [pc, #60]	@ (80089a4 <COMPASSACCELERO_IO_Init+0x48>)
 8008968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800896a:	4a0e      	ldr	r2, [pc, #56]	@ (80089a4 <COMPASSACCELERO_IO_Init+0x48>)
 800896c:	f043 0310 	orr.w	r3, r3, #16
 8008970:	6313      	str	r3, [r2, #48]	@ 0x30
 8008972:	4b0c      	ldr	r3, [pc, #48]	@ (80089a4 <COMPASSACCELERO_IO_Init+0x48>)
 8008974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008976:	f003 0310 	and.w	r3, r3, #16
 800897a:	603b      	str	r3, [r7, #0]
 800897c:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800897e:	2304      	movs	r3, #4
 8008980:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8008982:	2300      	movs	r3, #0
 8008984:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8008986:	2300      	movs	r3, #0
 8008988:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800898a:	2302      	movs	r3, #2
 800898c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800898e:	1d3b      	adds	r3, r7, #4
 8008990:	4619      	mov	r1, r3
 8008992:	4805      	ldr	r0, [pc, #20]	@ (80089a8 <COMPASSACCELERO_IO_Init+0x4c>)
 8008994:	f7f9 fb2c 	bl	8001ff0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8008998:	f7ff fef8 	bl	800878c <I2Cx_Init>
}
 800899c:	bf00      	nop
 800899e:	3718      	adds	r7, #24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	40023800 	.word	0x40023800
 80089a8:	40021000 	.word	0x40021000

080089ac <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80089b2:	2300      	movs	r3, #0
 80089b4:	603b      	str	r3, [r7, #0]
 80089b6:	4b13      	ldr	r3, [pc, #76]	@ (8008a04 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80089b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ba:	4a12      	ldr	r2, [pc, #72]	@ (8008a04 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80089bc:	f043 0310 	orr.w	r3, r3, #16
 80089c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80089c2:	4b10      	ldr	r3, [pc, #64]	@ (8008a04 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80089c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089c6:	f003 0310 	and.w	r3, r3, #16
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80089ce:	2330      	movs	r3, #48	@ 0x30
 80089d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80089d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80089d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80089d8:	2302      	movs	r3, #2
 80089da:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80089e0:	1d3b      	adds	r3, r7, #4
 80089e2:	4619      	mov	r1, r3
 80089e4:	4808      	ldr	r0, [pc, #32]	@ (8008a08 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 80089e6:	f7f9 fb03 	bl	8001ff0 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80089ea:	2200      	movs	r2, #0
 80089ec:	210f      	movs	r1, #15
 80089ee:	200a      	movs	r0, #10
 80089f0:	f7f9 fad4 	bl	8001f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80089f4:	200a      	movs	r0, #10
 80089f6:	f7f9 faed 	bl	8001fd4 <HAL_NVIC_EnableIRQ>
}
 80089fa:	bf00      	nop
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40023800 	.word	0x40023800
 8008a08:	40021000 	.word	0x40021000

08008a0c <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	80fb      	strh	r3, [r7, #6]
 8008a16:	460b      	mov	r3, r1
 8008a18:	717b      	strb	r3, [r7, #5]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8008a1e:	793a      	ldrb	r2, [r7, #4]
 8008a20:	7979      	ldrb	r1, [r7, #5]
 8008a22:	88fb      	ldrh	r3, [r7, #6]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7ff fee3 	bl	80087f0 <I2Cx_WriteData>
}
 8008a2a:	bf00      	nop
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	4603      	mov	r3, r0
 8008a3a:	460a      	mov	r2, r1
 8008a3c:	80fb      	strh	r3, [r7, #6]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8008a42:	797a      	ldrb	r2, [r7, #5]
 8008a44:	88fb      	ldrh	r3, [r7, #6]
 8008a46:	4611      	mov	r1, r2
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7ff fef9 	bl	8008840 <I2Cx_ReadData>
 8008a4e:	4603      	mov	r3, r0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8008a62:	2300      	movs	r3, #0
 8008a64:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8008a66:	1d3b      	adds	r3, r7, #4
 8008a68:	2200      	movs	r2, #0
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8008a6e:	4b58      	ldr	r3, [pc, #352]	@ (8008bd0 <BSP_ACCELERO_Init+0x178>)
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	4798      	blx	r3
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b33      	cmp	r3, #51	@ 0x33
 8008a78:	d14f      	bne.n	8008b1a <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8008a7a:	4b56      	ldr	r3, [pc, #344]	@ (8008bd4 <BSP_ACCELERO_Init+0x17c>)
 8008a7c:	4a54      	ldr	r2, [pc, #336]	@ (8008bd0 <BSP_ACCELERO_Init+0x178>)
 8008a7e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8008a80:	2300      	movs	r3, #0
 8008a82:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_200_HZ;
 8008a84:	2360      	movs	r3, #96	@ 0x60
 8008a86:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8008a88:	2307      	movs	r3, #7
 8008a8a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8008a90:	2300      	movs	r3, #0
 8008a92:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8008a94:	2300      	movs	r3, #0
 8008a96:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8008a98:	2308      	movs	r3, #8
 8008a9a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8008a9c:	7b3a      	ldrb	r2, [r7, #12]
 8008a9e:	7b7b      	ldrb	r3, [r7, #13]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	461a      	mov	r2, r3
 8008aac:	8abb      	ldrh	r3, [r7, #20]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8008ab2:	7c3a      	ldrb	r2, [r7, #16]
 8008ab4:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	7cbb      	ldrb	r3, [r7, #18]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8008ac8:	b21a      	sxth	r2, r3
 8008aca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	b21b      	sxth	r3, r3
 8008ad2:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8008ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8008bd4 <BSP_ACCELERO_Init+0x17c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	8aba      	ldrh	r2, [r7, #20]
 8008adc:	4610      	mov	r0, r2
 8008ade:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8008ae0:	2380      	movs	r3, #128	@ 0x80
 8008ae2:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8008ae4:	2310      	movs	r3, #16
 8008ae6:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8008aec:	2300      	movs	r3, #0
 8008aee:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8008af0:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8008af2:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8008af4:	4313      	orrs	r3, r2
 8008af6:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8008af8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8008afa:	4313      	orrs	r3, r2
 8008afc:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8008afe:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8008b00:	4313      	orrs	r3, r2
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8008b06:	4b33      	ldr	r3, [pc, #204]	@ (8008bd4 <BSP_ACCELERO_Init+0x17c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b0c:	8aba      	ldrh	r2, [r7, #20]
 8008b0e:	b2d2      	uxtb	r2, r2
 8008b10:	4610      	mov	r0, r2
 8008b12:	4798      	blx	r3

    ret = ACCELERO_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	75fb      	strb	r3, [r7, #23]
 8008b18:	e054      	b.n	8008bc4 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8008b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8008bd8 <BSP_ACCELERO_Init+0x180>)
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	4798      	blx	r3
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b33      	cmp	r3, #51	@ 0x33
 8008b24:	d14e      	bne.n	8008bc4 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8008b26:	4b2b      	ldr	r3, [pc, #172]	@ (8008bd4 <BSP_ACCELERO_Init+0x17c>)
 8008b28:	4a2b      	ldr	r2, [pc, #172]	@ (8008bd8 <BSP_ACCELERO_Init+0x180>)
 8008b2a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_200_HZ;
 8008b30:	2360      	movs	r3, #96	@ 0x60
 8008b32:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8008b34:	2307      	movs	r3, #7
 8008b36:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8008b40:	2300      	movs	r3, #0
 8008b42:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8008b44:	2308      	movs	r3, #8
 8008b46:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8008b48:	7b3a      	ldrb	r2, [r7, #12]
 8008b4a:	7b7b      	ldrb	r3, [r7, #13]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8008b52:	4313      	orrs	r3, r2
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	461a      	mov	r2, r3
 8008b58:	8abb      	ldrh	r3, [r7, #20]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8008b5e:	7c3a      	ldrb	r2, [r7, #16]
 8008b60:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8008b62:	4313      	orrs	r3, r2
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	7cbb      	ldrb	r3, [r7, #18]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8008b74:	b21a      	sxth	r2, r3
 8008b76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	b21b      	sxth	r3, r3
 8008b7e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8008b80:	4b14      	ldr	r3, [pc, #80]	@ (8008bd4 <BSP_ACCELERO_Init+0x17c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	8aba      	ldrh	r2, [r7, #20]
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8008b8c:	2380      	movs	r3, #128	@ 0x80
 8008b8e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8008b90:	2310      	movs	r3, #16
 8008b92:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8008b94:	2300      	movs	r3, #0
 8008b96:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8008b9c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8008b9e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8008ba4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8008baa:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8008bac:	4313      	orrs	r3, r2
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8008bb2:	4b08      	ldr	r3, [pc, #32]	@ (8008bd4 <BSP_ACCELERO_Init+0x17c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb8:	8aba      	ldrh	r2, [r7, #20]
 8008bba:	b2d2      	uxtb	r2, r2
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4798      	blx	r3

    ret = ACCELERO_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000034 	.word	0x20000034
 8008bd4:	20004d0c 	.word	0x20004d0c
 8008bd8:	20000000 	.word	0x20000000

08008bdc <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8008be8:	4b10      	ldr	r3, [pc, #64]	@ (8008c2c <BSP_ACCELERO_GetXYZ+0x50>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d018      	beq.n	8008c24 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8008bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c2c <BSP_ACCELERO_GetXYZ+0x50>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8008bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8008c2c <BSP_ACCELERO_GetXYZ+0x50>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a0b      	ldr	r2, [pc, #44]	@ (8008c30 <BSP_ACCELERO_GetXYZ+0x54>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d10e      	bne.n	8008c24 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8008c16:	89fb      	ldrh	r3, [r7, #14]
 8008c18:	425b      	negs	r3, r3
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3302      	adds	r3, #2
 8008c20:	b212      	sxth	r2, r2
 8008c22:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8008c24:	bf00      	nop
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20004d0c 	.word	0x20004d0c
 8008c30:	20000034 	.word	0x20000034

08008c34 <LSM303AGR_MagInit>:

/**
 * @brief Initialize LSM303_AGR magnetic sensor in 100Hz continuous mode
 * @retval None
 */
void LSM303AGR_MagInit(void) {
 8008c34:	b580      	push	{r7, lr}
 8008c36:	af00      	add	r7, sp, #0
  COMPASSACCELERO_IO_Init();
 8008c38:	f7ff fe90 	bl	800895c <COMPASSACCELERO_IO_Init>

  COMPASSACCELERO_IO_Write(MAG_I2C_ADDRESS, LSM303AGR_CFG_REG_A_M, 0x0C); // 100Hz
 8008c3c:	220c      	movs	r2, #12
 8008c3e:	2160      	movs	r1, #96	@ 0x60
 8008c40:	203c      	movs	r0, #60	@ 0x3c
 8008c42:	f7ff fee3 	bl	8008a0c <COMPASSACCELERO_IO_Write>
}
 8008c46:	bf00      	nop
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <LSM303AGR_MagReadXYZ>:
/**
 * @brief Read X, Y & Z Magnetic values
 * @param pData: Data out pointer, storing raw values from sensor
 * @retval None
 */
void LSM303AGR_MagReadXYZ(int16_t *pData) {
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  uint16_t H = 0x00;
 8008c52:	2300      	movs	r3, #0
 8008c54:	81fb      	strh	r3, [r7, #14]
  uint16_t L = 0x00;
 8008c56:	2300      	movs	r3, #0
 8008c58:	81bb      	strh	r3, [r7, #12]

  /* Read registers */
  H = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTX_H_REG_M);
 8008c5a:	2169      	movs	r1, #105	@ 0x69
 8008c5c:	203c      	movs	r0, #60	@ 0x3c
 8008c5e:	f7ff fee8 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8008c62:	4603      	mov	r3, r0
 8008c64:	81fb      	strh	r3, [r7, #14]
  L = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTX_L_REG_M);
 8008c66:	2168      	movs	r1, #104	@ 0x68
 8008c68:	203c      	movs	r0, #60	@ 0x3c
 8008c6a:	f7ff fee2 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	81bb      	strh	r3, [r7, #12]

  pData[0] = (H << 8) | L;
 8008c72:	89fb      	ldrh	r3, [r7, #14]
 8008c74:	021b      	lsls	r3, r3, #8
 8008c76:	b21a      	sxth	r2, r3
 8008c78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	b21a      	sxth	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	801a      	strh	r2, [r3, #0]

  H = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTY_H_REG_M);
 8008c84:	216b      	movs	r1, #107	@ 0x6b
 8008c86:	203c      	movs	r0, #60	@ 0x3c
 8008c88:	f7ff fed3 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	81fb      	strh	r3, [r7, #14]
  L = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTY_L_REG_M);
 8008c90:	216a      	movs	r1, #106	@ 0x6a
 8008c92:	203c      	movs	r0, #60	@ 0x3c
 8008c94:	f7ff fecd 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	81bb      	strh	r3, [r7, #12]

  pData[1] = (H << 8) | L;
 8008c9c:	89fb      	ldrh	r3, [r7, #14]
 8008c9e:	021b      	lsls	r3, r3, #8
 8008ca0:	b219      	sxth	r1, r3
 8008ca2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3302      	adds	r3, #2
 8008caa:	430a      	orrs	r2, r1
 8008cac:	b212      	sxth	r2, r2
 8008cae:	801a      	strh	r2, [r3, #0]

  H = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTZ_H_REG_M);
 8008cb0:	216d      	movs	r1, #109	@ 0x6d
 8008cb2:	203c      	movs	r0, #60	@ 0x3c
 8008cb4:	f7ff febd 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	81fb      	strh	r3, [r7, #14]
  L = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTZ_L_REG_M);
 8008cbc:	216c      	movs	r1, #108	@ 0x6c
 8008cbe:	203c      	movs	r0, #60	@ 0x3c
 8008cc0:	f7ff feb7 	bl	8008a32 <COMPASSACCELERO_IO_Read>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	81bb      	strh	r3, [r7, #12]

  pData[2] = (H << 8) | L;
 8008cc8:	89fb      	ldrh	r3, [r7, #14]
 8008cca:	021b      	lsls	r3, r3, #8
 8008ccc:	b219      	sxth	r1, r3
 8008cce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	b212      	sxth	r2, r2
 8008cda:	801a      	strh	r2, [r3, #0]
}
 8008cdc:	bf00      	nop
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <malloc>:
 8008ce4:	4b02      	ldr	r3, [pc, #8]	@ (8008cf0 <malloc+0xc>)
 8008ce6:	4601      	mov	r1, r0
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	f000 b825 	b.w	8008d38 <_malloc_r>
 8008cee:	bf00      	nop
 8008cf0:	200000d8 	.word	0x200000d8

08008cf4 <sbrk_aligned>:
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	4e0f      	ldr	r6, [pc, #60]	@ (8008d34 <sbrk_aligned+0x40>)
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	6831      	ldr	r1, [r6, #0]
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	b911      	cbnz	r1, 8008d06 <sbrk_aligned+0x12>
 8008d00:	f000 fa50 	bl	80091a4 <_sbrk_r>
 8008d04:	6030      	str	r0, [r6, #0]
 8008d06:	4621      	mov	r1, r4
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f000 fa4b 	bl	80091a4 <_sbrk_r>
 8008d0e:	1c43      	adds	r3, r0, #1
 8008d10:	d103      	bne.n	8008d1a <sbrk_aligned+0x26>
 8008d12:	f04f 34ff 	mov.w	r4, #4294967295
 8008d16:	4620      	mov	r0, r4
 8008d18:	bd70      	pop	{r4, r5, r6, pc}
 8008d1a:	1cc4      	adds	r4, r0, #3
 8008d1c:	f024 0403 	bic.w	r4, r4, #3
 8008d20:	42a0      	cmp	r0, r4
 8008d22:	d0f8      	beq.n	8008d16 <sbrk_aligned+0x22>
 8008d24:	1a21      	subs	r1, r4, r0
 8008d26:	4628      	mov	r0, r5
 8008d28:	f000 fa3c 	bl	80091a4 <_sbrk_r>
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d1f2      	bne.n	8008d16 <sbrk_aligned+0x22>
 8008d30:	e7ef      	b.n	8008d12 <sbrk_aligned+0x1e>
 8008d32:	bf00      	nop
 8008d34:	20004d10 	.word	0x20004d10

08008d38 <_malloc_r>:
 8008d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d3c:	1ccd      	adds	r5, r1, #3
 8008d3e:	f025 0503 	bic.w	r5, r5, #3
 8008d42:	3508      	adds	r5, #8
 8008d44:	2d0c      	cmp	r5, #12
 8008d46:	bf38      	it	cc
 8008d48:	250c      	movcc	r5, #12
 8008d4a:	2d00      	cmp	r5, #0
 8008d4c:	4606      	mov	r6, r0
 8008d4e:	db01      	blt.n	8008d54 <_malloc_r+0x1c>
 8008d50:	42a9      	cmp	r1, r5
 8008d52:	d904      	bls.n	8008d5e <_malloc_r+0x26>
 8008d54:	230c      	movs	r3, #12
 8008d56:	6033      	str	r3, [r6, #0]
 8008d58:	2000      	movs	r0, #0
 8008d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e34 <_malloc_r+0xfc>
 8008d62:	f000 f869 	bl	8008e38 <__malloc_lock>
 8008d66:	f8d8 3000 	ldr.w	r3, [r8]
 8008d6a:	461c      	mov	r4, r3
 8008d6c:	bb44      	cbnz	r4, 8008dc0 <_malloc_r+0x88>
 8008d6e:	4629      	mov	r1, r5
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7ff ffbf 	bl	8008cf4 <sbrk_aligned>
 8008d76:	1c43      	adds	r3, r0, #1
 8008d78:	4604      	mov	r4, r0
 8008d7a:	d158      	bne.n	8008e2e <_malloc_r+0xf6>
 8008d7c:	f8d8 4000 	ldr.w	r4, [r8]
 8008d80:	4627      	mov	r7, r4
 8008d82:	2f00      	cmp	r7, #0
 8008d84:	d143      	bne.n	8008e0e <_malloc_r+0xd6>
 8008d86:	2c00      	cmp	r4, #0
 8008d88:	d04b      	beq.n	8008e22 <_malloc_r+0xea>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	4630      	mov	r0, r6
 8008d90:	eb04 0903 	add.w	r9, r4, r3
 8008d94:	f000 fa06 	bl	80091a4 <_sbrk_r>
 8008d98:	4581      	cmp	r9, r0
 8008d9a:	d142      	bne.n	8008e22 <_malloc_r+0xea>
 8008d9c:	6821      	ldr	r1, [r4, #0]
 8008d9e:	1a6d      	subs	r5, r5, r1
 8008da0:	4629      	mov	r1, r5
 8008da2:	4630      	mov	r0, r6
 8008da4:	f7ff ffa6 	bl	8008cf4 <sbrk_aligned>
 8008da8:	3001      	adds	r0, #1
 8008daa:	d03a      	beq.n	8008e22 <_malloc_r+0xea>
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	442b      	add	r3, r5
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	f8d8 3000 	ldr.w	r3, [r8]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	bb62      	cbnz	r2, 8008e14 <_malloc_r+0xdc>
 8008dba:	f8c8 7000 	str.w	r7, [r8]
 8008dbe:	e00f      	b.n	8008de0 <_malloc_r+0xa8>
 8008dc0:	6822      	ldr	r2, [r4, #0]
 8008dc2:	1b52      	subs	r2, r2, r5
 8008dc4:	d420      	bmi.n	8008e08 <_malloc_r+0xd0>
 8008dc6:	2a0b      	cmp	r2, #11
 8008dc8:	d917      	bls.n	8008dfa <_malloc_r+0xc2>
 8008dca:	1961      	adds	r1, r4, r5
 8008dcc:	42a3      	cmp	r3, r4
 8008dce:	6025      	str	r5, [r4, #0]
 8008dd0:	bf18      	it	ne
 8008dd2:	6059      	strne	r1, [r3, #4]
 8008dd4:	6863      	ldr	r3, [r4, #4]
 8008dd6:	bf08      	it	eq
 8008dd8:	f8c8 1000 	streq.w	r1, [r8]
 8008ddc:	5162      	str	r2, [r4, r5]
 8008dde:	604b      	str	r3, [r1, #4]
 8008de0:	4630      	mov	r0, r6
 8008de2:	f000 f82f 	bl	8008e44 <__malloc_unlock>
 8008de6:	f104 000b 	add.w	r0, r4, #11
 8008dea:	1d23      	adds	r3, r4, #4
 8008dec:	f020 0007 	bic.w	r0, r0, #7
 8008df0:	1ac2      	subs	r2, r0, r3
 8008df2:	bf1c      	itt	ne
 8008df4:	1a1b      	subne	r3, r3, r0
 8008df6:	50a3      	strne	r3, [r4, r2]
 8008df8:	e7af      	b.n	8008d5a <_malloc_r+0x22>
 8008dfa:	6862      	ldr	r2, [r4, #4]
 8008dfc:	42a3      	cmp	r3, r4
 8008dfe:	bf0c      	ite	eq
 8008e00:	f8c8 2000 	streq.w	r2, [r8]
 8008e04:	605a      	strne	r2, [r3, #4]
 8008e06:	e7eb      	b.n	8008de0 <_malloc_r+0xa8>
 8008e08:	4623      	mov	r3, r4
 8008e0a:	6864      	ldr	r4, [r4, #4]
 8008e0c:	e7ae      	b.n	8008d6c <_malloc_r+0x34>
 8008e0e:	463c      	mov	r4, r7
 8008e10:	687f      	ldr	r7, [r7, #4]
 8008e12:	e7b6      	b.n	8008d82 <_malloc_r+0x4a>
 8008e14:	461a      	mov	r2, r3
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	42a3      	cmp	r3, r4
 8008e1a:	d1fb      	bne.n	8008e14 <_malloc_r+0xdc>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	6053      	str	r3, [r2, #4]
 8008e20:	e7de      	b.n	8008de0 <_malloc_r+0xa8>
 8008e22:	230c      	movs	r3, #12
 8008e24:	6033      	str	r3, [r6, #0]
 8008e26:	4630      	mov	r0, r6
 8008e28:	f000 f80c 	bl	8008e44 <__malloc_unlock>
 8008e2c:	e794      	b.n	8008d58 <_malloc_r+0x20>
 8008e2e:	6005      	str	r5, [r0, #0]
 8008e30:	e7d6      	b.n	8008de0 <_malloc_r+0xa8>
 8008e32:	bf00      	nop
 8008e34:	20004d14 	.word	0x20004d14

08008e38 <__malloc_lock>:
 8008e38:	4801      	ldr	r0, [pc, #4]	@ (8008e40 <__malloc_lock+0x8>)
 8008e3a:	f000 ba00 	b.w	800923e <__retarget_lock_acquire_recursive>
 8008e3e:	bf00      	nop
 8008e40:	20004e58 	.word	0x20004e58

08008e44 <__malloc_unlock>:
 8008e44:	4801      	ldr	r0, [pc, #4]	@ (8008e4c <__malloc_unlock+0x8>)
 8008e46:	f000 b9fb 	b.w	8009240 <__retarget_lock_release_recursive>
 8008e4a:	bf00      	nop
 8008e4c:	20004e58 	.word	0x20004e58

08008e50 <std>:
 8008e50:	2300      	movs	r3, #0
 8008e52:	b510      	push	{r4, lr}
 8008e54:	4604      	mov	r4, r0
 8008e56:	e9c0 3300 	strd	r3, r3, [r0]
 8008e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e5e:	6083      	str	r3, [r0, #8]
 8008e60:	8181      	strh	r1, [r0, #12]
 8008e62:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e64:	81c2      	strh	r2, [r0, #14]
 8008e66:	6183      	str	r3, [r0, #24]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	2208      	movs	r2, #8
 8008e6c:	305c      	adds	r0, #92	@ 0x5c
 8008e6e:	f000 f906 	bl	800907e <memset>
 8008e72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ea8 <std+0x58>)
 8008e74:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e76:	4b0d      	ldr	r3, [pc, #52]	@ (8008eac <std+0x5c>)
 8008e78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb0 <std+0x60>)
 8008e7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb4 <std+0x64>)
 8008e80:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e82:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb8 <std+0x68>)
 8008e84:	6224      	str	r4, [r4, #32]
 8008e86:	429c      	cmp	r4, r3
 8008e88:	d006      	beq.n	8008e98 <std+0x48>
 8008e8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e8e:	4294      	cmp	r4, r2
 8008e90:	d002      	beq.n	8008e98 <std+0x48>
 8008e92:	33d0      	adds	r3, #208	@ 0xd0
 8008e94:	429c      	cmp	r4, r3
 8008e96:	d105      	bne.n	8008ea4 <std+0x54>
 8008e98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ea0:	f000 b9cc 	b.w	800923c <__retarget_lock_init_recursive>
 8008ea4:	bd10      	pop	{r4, pc}
 8008ea6:	bf00      	nop
 8008ea8:	08008ff9 	.word	0x08008ff9
 8008eac:	0800901b 	.word	0x0800901b
 8008eb0:	08009053 	.word	0x08009053
 8008eb4:	08009077 	.word	0x08009077
 8008eb8:	20004d18 	.word	0x20004d18

08008ebc <stdio_exit_handler>:
 8008ebc:	4a02      	ldr	r2, [pc, #8]	@ (8008ec8 <stdio_exit_handler+0xc>)
 8008ebe:	4903      	ldr	r1, [pc, #12]	@ (8008ecc <stdio_exit_handler+0x10>)
 8008ec0:	4803      	ldr	r0, [pc, #12]	@ (8008ed0 <stdio_exit_handler+0x14>)
 8008ec2:	f000 b869 	b.w	8008f98 <_fwalk_sglue>
 8008ec6:	bf00      	nop
 8008ec8:	200000cc 	.word	0x200000cc
 8008ecc:	0800999d 	.word	0x0800999d
 8008ed0:	200000dc 	.word	0x200000dc

08008ed4 <cleanup_stdio>:
 8008ed4:	6841      	ldr	r1, [r0, #4]
 8008ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8008f08 <cleanup_stdio+0x34>)
 8008ed8:	4299      	cmp	r1, r3
 8008eda:	b510      	push	{r4, lr}
 8008edc:	4604      	mov	r4, r0
 8008ede:	d001      	beq.n	8008ee4 <cleanup_stdio+0x10>
 8008ee0:	f000 fd5c 	bl	800999c <_fflush_r>
 8008ee4:	68a1      	ldr	r1, [r4, #8]
 8008ee6:	4b09      	ldr	r3, [pc, #36]	@ (8008f0c <cleanup_stdio+0x38>)
 8008ee8:	4299      	cmp	r1, r3
 8008eea:	d002      	beq.n	8008ef2 <cleanup_stdio+0x1e>
 8008eec:	4620      	mov	r0, r4
 8008eee:	f000 fd55 	bl	800999c <_fflush_r>
 8008ef2:	68e1      	ldr	r1, [r4, #12]
 8008ef4:	4b06      	ldr	r3, [pc, #24]	@ (8008f10 <cleanup_stdio+0x3c>)
 8008ef6:	4299      	cmp	r1, r3
 8008ef8:	d004      	beq.n	8008f04 <cleanup_stdio+0x30>
 8008efa:	4620      	mov	r0, r4
 8008efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f00:	f000 bd4c 	b.w	800999c <_fflush_r>
 8008f04:	bd10      	pop	{r4, pc}
 8008f06:	bf00      	nop
 8008f08:	20004d18 	.word	0x20004d18
 8008f0c:	20004d80 	.word	0x20004d80
 8008f10:	20004de8 	.word	0x20004de8

08008f14 <global_stdio_init.part.0>:
 8008f14:	b510      	push	{r4, lr}
 8008f16:	4b0b      	ldr	r3, [pc, #44]	@ (8008f44 <global_stdio_init.part.0+0x30>)
 8008f18:	4c0b      	ldr	r4, [pc, #44]	@ (8008f48 <global_stdio_init.part.0+0x34>)
 8008f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8008f4c <global_stdio_init.part.0+0x38>)
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	4620      	mov	r0, r4
 8008f20:	2200      	movs	r2, #0
 8008f22:	2104      	movs	r1, #4
 8008f24:	f7ff ff94 	bl	8008e50 <std>
 8008f28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	2109      	movs	r1, #9
 8008f30:	f7ff ff8e 	bl	8008e50 <std>
 8008f34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f38:	2202      	movs	r2, #2
 8008f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f3e:	2112      	movs	r1, #18
 8008f40:	f7ff bf86 	b.w	8008e50 <std>
 8008f44:	20004e50 	.word	0x20004e50
 8008f48:	20004d18 	.word	0x20004d18
 8008f4c:	08008ebd 	.word	0x08008ebd

08008f50 <__sfp_lock_acquire>:
 8008f50:	4801      	ldr	r0, [pc, #4]	@ (8008f58 <__sfp_lock_acquire+0x8>)
 8008f52:	f000 b974 	b.w	800923e <__retarget_lock_acquire_recursive>
 8008f56:	bf00      	nop
 8008f58:	20004e59 	.word	0x20004e59

08008f5c <__sfp_lock_release>:
 8008f5c:	4801      	ldr	r0, [pc, #4]	@ (8008f64 <__sfp_lock_release+0x8>)
 8008f5e:	f000 b96f 	b.w	8009240 <__retarget_lock_release_recursive>
 8008f62:	bf00      	nop
 8008f64:	20004e59 	.word	0x20004e59

08008f68 <__sinit>:
 8008f68:	b510      	push	{r4, lr}
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	f7ff fff0 	bl	8008f50 <__sfp_lock_acquire>
 8008f70:	6a23      	ldr	r3, [r4, #32]
 8008f72:	b11b      	cbz	r3, 8008f7c <__sinit+0x14>
 8008f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f78:	f7ff bff0 	b.w	8008f5c <__sfp_lock_release>
 8008f7c:	4b04      	ldr	r3, [pc, #16]	@ (8008f90 <__sinit+0x28>)
 8008f7e:	6223      	str	r3, [r4, #32]
 8008f80:	4b04      	ldr	r3, [pc, #16]	@ (8008f94 <__sinit+0x2c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1f5      	bne.n	8008f74 <__sinit+0xc>
 8008f88:	f7ff ffc4 	bl	8008f14 <global_stdio_init.part.0>
 8008f8c:	e7f2      	b.n	8008f74 <__sinit+0xc>
 8008f8e:	bf00      	nop
 8008f90:	08008ed5 	.word	0x08008ed5
 8008f94:	20004e50 	.word	0x20004e50

08008f98 <_fwalk_sglue>:
 8008f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	4688      	mov	r8, r1
 8008fa0:	4614      	mov	r4, r2
 8008fa2:	2600      	movs	r6, #0
 8008fa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fa8:	f1b9 0901 	subs.w	r9, r9, #1
 8008fac:	d505      	bpl.n	8008fba <_fwalk_sglue+0x22>
 8008fae:	6824      	ldr	r4, [r4, #0]
 8008fb0:	2c00      	cmp	r4, #0
 8008fb2:	d1f7      	bne.n	8008fa4 <_fwalk_sglue+0xc>
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fba:	89ab      	ldrh	r3, [r5, #12]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d907      	bls.n	8008fd0 <_fwalk_sglue+0x38>
 8008fc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	d003      	beq.n	8008fd0 <_fwalk_sglue+0x38>
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4638      	mov	r0, r7
 8008fcc:	47c0      	blx	r8
 8008fce:	4306      	orrs	r6, r0
 8008fd0:	3568      	adds	r5, #104	@ 0x68
 8008fd2:	e7e9      	b.n	8008fa8 <_fwalk_sglue+0x10>

08008fd4 <iprintf>:
 8008fd4:	b40f      	push	{r0, r1, r2, r3}
 8008fd6:	b507      	push	{r0, r1, r2, lr}
 8008fd8:	4906      	ldr	r1, [pc, #24]	@ (8008ff4 <iprintf+0x20>)
 8008fda:	ab04      	add	r3, sp, #16
 8008fdc:	6808      	ldr	r0, [r1, #0]
 8008fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fe2:	6881      	ldr	r1, [r0, #8]
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	f000 f9af 	bl	8009348 <_vfiprintf_r>
 8008fea:	b003      	add	sp, #12
 8008fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ff0:	b004      	add	sp, #16
 8008ff2:	4770      	bx	lr
 8008ff4:	200000d8 	.word	0x200000d8

08008ff8 <__sread>:
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009000:	f000 f8be 	bl	8009180 <_read_r>
 8009004:	2800      	cmp	r0, #0
 8009006:	bfab      	itete	ge
 8009008:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800900a:	89a3      	ldrhlt	r3, [r4, #12]
 800900c:	181b      	addge	r3, r3, r0
 800900e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009012:	bfac      	ite	ge
 8009014:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009016:	81a3      	strhlt	r3, [r4, #12]
 8009018:	bd10      	pop	{r4, pc}

0800901a <__swrite>:
 800901a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800901e:	461f      	mov	r7, r3
 8009020:	898b      	ldrh	r3, [r1, #12]
 8009022:	05db      	lsls	r3, r3, #23
 8009024:	4605      	mov	r5, r0
 8009026:	460c      	mov	r4, r1
 8009028:	4616      	mov	r6, r2
 800902a:	d505      	bpl.n	8009038 <__swrite+0x1e>
 800902c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009030:	2302      	movs	r3, #2
 8009032:	2200      	movs	r2, #0
 8009034:	f000 f892 	bl	800915c <_lseek_r>
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800903e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009042:	81a3      	strh	r3, [r4, #12]
 8009044:	4632      	mov	r2, r6
 8009046:	463b      	mov	r3, r7
 8009048:	4628      	mov	r0, r5
 800904a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800904e:	f000 b8b9 	b.w	80091c4 <_write_r>

08009052 <__sseek>:
 8009052:	b510      	push	{r4, lr}
 8009054:	460c      	mov	r4, r1
 8009056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800905a:	f000 f87f 	bl	800915c <_lseek_r>
 800905e:	1c43      	adds	r3, r0, #1
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	bf15      	itete	ne
 8009064:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009066:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800906a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800906e:	81a3      	strheq	r3, [r4, #12]
 8009070:	bf18      	it	ne
 8009072:	81a3      	strhne	r3, [r4, #12]
 8009074:	bd10      	pop	{r4, pc}

08009076 <__sclose>:
 8009076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800907a:	f000 b809 	b.w	8009090 <_close_r>

0800907e <memset>:
 800907e:	4402      	add	r2, r0
 8009080:	4603      	mov	r3, r0
 8009082:	4293      	cmp	r3, r2
 8009084:	d100      	bne.n	8009088 <memset+0xa>
 8009086:	4770      	bx	lr
 8009088:	f803 1b01 	strb.w	r1, [r3], #1
 800908c:	e7f9      	b.n	8009082 <memset+0x4>
	...

08009090 <_close_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4d06      	ldr	r5, [pc, #24]	@ (80090ac <_close_r+0x1c>)
 8009094:	2300      	movs	r3, #0
 8009096:	4604      	mov	r4, r0
 8009098:	4608      	mov	r0, r1
 800909a:	602b      	str	r3, [r5, #0]
 800909c:	f7f8 fb97 	bl	80017ce <_close>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d102      	bne.n	80090aa <_close_r+0x1a>
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	b103      	cbz	r3, 80090aa <_close_r+0x1a>
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	20004e54 	.word	0x20004e54

080090b0 <_reclaim_reent>:
 80090b0:	4b29      	ldr	r3, [pc, #164]	@ (8009158 <_reclaim_reent+0xa8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4283      	cmp	r3, r0
 80090b6:	b570      	push	{r4, r5, r6, lr}
 80090b8:	4604      	mov	r4, r0
 80090ba:	d04b      	beq.n	8009154 <_reclaim_reent+0xa4>
 80090bc:	69c3      	ldr	r3, [r0, #28]
 80090be:	b1ab      	cbz	r3, 80090ec <_reclaim_reent+0x3c>
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	b16b      	cbz	r3, 80090e0 <_reclaim_reent+0x30>
 80090c4:	2500      	movs	r5, #0
 80090c6:	69e3      	ldr	r3, [r4, #28]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	5959      	ldr	r1, [r3, r5]
 80090cc:	2900      	cmp	r1, #0
 80090ce:	d13b      	bne.n	8009148 <_reclaim_reent+0x98>
 80090d0:	3504      	adds	r5, #4
 80090d2:	2d80      	cmp	r5, #128	@ 0x80
 80090d4:	d1f7      	bne.n	80090c6 <_reclaim_reent+0x16>
 80090d6:	69e3      	ldr	r3, [r4, #28]
 80090d8:	4620      	mov	r0, r4
 80090da:	68d9      	ldr	r1, [r3, #12]
 80090dc:	f000 f8c0 	bl	8009260 <_free_r>
 80090e0:	69e3      	ldr	r3, [r4, #28]
 80090e2:	6819      	ldr	r1, [r3, #0]
 80090e4:	b111      	cbz	r1, 80090ec <_reclaim_reent+0x3c>
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 f8ba 	bl	8009260 <_free_r>
 80090ec:	6961      	ldr	r1, [r4, #20]
 80090ee:	b111      	cbz	r1, 80090f6 <_reclaim_reent+0x46>
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 f8b5 	bl	8009260 <_free_r>
 80090f6:	69e1      	ldr	r1, [r4, #28]
 80090f8:	b111      	cbz	r1, 8009100 <_reclaim_reent+0x50>
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 f8b0 	bl	8009260 <_free_r>
 8009100:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009102:	b111      	cbz	r1, 800910a <_reclaim_reent+0x5a>
 8009104:	4620      	mov	r0, r4
 8009106:	f000 f8ab 	bl	8009260 <_free_r>
 800910a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800910c:	b111      	cbz	r1, 8009114 <_reclaim_reent+0x64>
 800910e:	4620      	mov	r0, r4
 8009110:	f000 f8a6 	bl	8009260 <_free_r>
 8009114:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009116:	b111      	cbz	r1, 800911e <_reclaim_reent+0x6e>
 8009118:	4620      	mov	r0, r4
 800911a:	f000 f8a1 	bl	8009260 <_free_r>
 800911e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009120:	b111      	cbz	r1, 8009128 <_reclaim_reent+0x78>
 8009122:	4620      	mov	r0, r4
 8009124:	f000 f89c 	bl	8009260 <_free_r>
 8009128:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800912a:	b111      	cbz	r1, 8009132 <_reclaim_reent+0x82>
 800912c:	4620      	mov	r0, r4
 800912e:	f000 f897 	bl	8009260 <_free_r>
 8009132:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009134:	b111      	cbz	r1, 800913c <_reclaim_reent+0x8c>
 8009136:	4620      	mov	r0, r4
 8009138:	f000 f892 	bl	8009260 <_free_r>
 800913c:	6a23      	ldr	r3, [r4, #32]
 800913e:	b14b      	cbz	r3, 8009154 <_reclaim_reent+0xa4>
 8009140:	4620      	mov	r0, r4
 8009142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009146:	4718      	bx	r3
 8009148:	680e      	ldr	r6, [r1, #0]
 800914a:	4620      	mov	r0, r4
 800914c:	f000 f888 	bl	8009260 <_free_r>
 8009150:	4631      	mov	r1, r6
 8009152:	e7bb      	b.n	80090cc <_reclaim_reent+0x1c>
 8009154:	bd70      	pop	{r4, r5, r6, pc}
 8009156:	bf00      	nop
 8009158:	200000d8 	.word	0x200000d8

0800915c <_lseek_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	4d07      	ldr	r5, [pc, #28]	@ (800917c <_lseek_r+0x20>)
 8009160:	4604      	mov	r4, r0
 8009162:	4608      	mov	r0, r1
 8009164:	4611      	mov	r1, r2
 8009166:	2200      	movs	r2, #0
 8009168:	602a      	str	r2, [r5, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	f7f8 fb56 	bl	800181c <_lseek>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d102      	bne.n	800917a <_lseek_r+0x1e>
 8009174:	682b      	ldr	r3, [r5, #0]
 8009176:	b103      	cbz	r3, 800917a <_lseek_r+0x1e>
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	20004e54 	.word	0x20004e54

08009180 <_read_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	4d07      	ldr	r5, [pc, #28]	@ (80091a0 <_read_r+0x20>)
 8009184:	4604      	mov	r4, r0
 8009186:	4608      	mov	r0, r1
 8009188:	4611      	mov	r1, r2
 800918a:	2200      	movs	r2, #0
 800918c:	602a      	str	r2, [r5, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	f7f8 fae4 	bl	800175c <_read>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_read_r+0x1e>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	b103      	cbz	r3, 800919e <_read_r+0x1e>
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	20004e54 	.word	0x20004e54

080091a4 <_sbrk_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	4d06      	ldr	r5, [pc, #24]	@ (80091c0 <_sbrk_r+0x1c>)
 80091a8:	2300      	movs	r3, #0
 80091aa:	4604      	mov	r4, r0
 80091ac:	4608      	mov	r0, r1
 80091ae:	602b      	str	r3, [r5, #0]
 80091b0:	f7f8 fb42 	bl	8001838 <_sbrk>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d102      	bne.n	80091be <_sbrk_r+0x1a>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	b103      	cbz	r3, 80091be <_sbrk_r+0x1a>
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	bd38      	pop	{r3, r4, r5, pc}
 80091c0:	20004e54 	.word	0x20004e54

080091c4 <_write_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4d07      	ldr	r5, [pc, #28]	@ (80091e4 <_write_r+0x20>)
 80091c8:	4604      	mov	r4, r0
 80091ca:	4608      	mov	r0, r1
 80091cc:	4611      	mov	r1, r2
 80091ce:	2200      	movs	r2, #0
 80091d0:	602a      	str	r2, [r5, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	f7f8 fadf 	bl	8001796 <_write>
 80091d8:	1c43      	adds	r3, r0, #1
 80091da:	d102      	bne.n	80091e2 <_write_r+0x1e>
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	b103      	cbz	r3, 80091e2 <_write_r+0x1e>
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	20004e54 	.word	0x20004e54

080091e8 <__errno>:
 80091e8:	4b01      	ldr	r3, [pc, #4]	@ (80091f0 <__errno+0x8>)
 80091ea:	6818      	ldr	r0, [r3, #0]
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	200000d8 	.word	0x200000d8

080091f4 <__libc_init_array>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	4d0d      	ldr	r5, [pc, #52]	@ (800922c <__libc_init_array+0x38>)
 80091f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009230 <__libc_init_array+0x3c>)
 80091fa:	1b64      	subs	r4, r4, r5
 80091fc:	10a4      	asrs	r4, r4, #2
 80091fe:	2600      	movs	r6, #0
 8009200:	42a6      	cmp	r6, r4
 8009202:	d109      	bne.n	8009218 <__libc_init_array+0x24>
 8009204:	4d0b      	ldr	r5, [pc, #44]	@ (8009234 <__libc_init_array+0x40>)
 8009206:	4c0c      	ldr	r4, [pc, #48]	@ (8009238 <__libc_init_array+0x44>)
 8009208:	f000 fd2a 	bl	8009c60 <_init>
 800920c:	1b64      	subs	r4, r4, r5
 800920e:	10a4      	asrs	r4, r4, #2
 8009210:	2600      	movs	r6, #0
 8009212:	42a6      	cmp	r6, r4
 8009214:	d105      	bne.n	8009222 <__libc_init_array+0x2e>
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	f855 3b04 	ldr.w	r3, [r5], #4
 800921c:	4798      	blx	r3
 800921e:	3601      	adds	r6, #1
 8009220:	e7ee      	b.n	8009200 <__libc_init_array+0xc>
 8009222:	f855 3b04 	ldr.w	r3, [r5], #4
 8009226:	4798      	blx	r3
 8009228:	3601      	adds	r6, #1
 800922a:	e7f2      	b.n	8009212 <__libc_init_array+0x1e>
 800922c:	08009e7c 	.word	0x08009e7c
 8009230:	08009e7c 	.word	0x08009e7c
 8009234:	08009e7c 	.word	0x08009e7c
 8009238:	08009e80 	.word	0x08009e80

0800923c <__retarget_lock_init_recursive>:
 800923c:	4770      	bx	lr

0800923e <__retarget_lock_acquire_recursive>:
 800923e:	4770      	bx	lr

08009240 <__retarget_lock_release_recursive>:
 8009240:	4770      	bx	lr

08009242 <memcpy>:
 8009242:	440a      	add	r2, r1
 8009244:	4291      	cmp	r1, r2
 8009246:	f100 33ff 	add.w	r3, r0, #4294967295
 800924a:	d100      	bne.n	800924e <memcpy+0xc>
 800924c:	4770      	bx	lr
 800924e:	b510      	push	{r4, lr}
 8009250:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009258:	4291      	cmp	r1, r2
 800925a:	d1f9      	bne.n	8009250 <memcpy+0xe>
 800925c:	bd10      	pop	{r4, pc}
	...

08009260 <_free_r>:
 8009260:	b538      	push	{r3, r4, r5, lr}
 8009262:	4605      	mov	r5, r0
 8009264:	2900      	cmp	r1, #0
 8009266:	d041      	beq.n	80092ec <_free_r+0x8c>
 8009268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800926c:	1f0c      	subs	r4, r1, #4
 800926e:	2b00      	cmp	r3, #0
 8009270:	bfb8      	it	lt
 8009272:	18e4      	addlt	r4, r4, r3
 8009274:	f7ff fde0 	bl	8008e38 <__malloc_lock>
 8009278:	4a1d      	ldr	r2, [pc, #116]	@ (80092f0 <_free_r+0x90>)
 800927a:	6813      	ldr	r3, [r2, #0]
 800927c:	b933      	cbnz	r3, 800928c <_free_r+0x2c>
 800927e:	6063      	str	r3, [r4, #4]
 8009280:	6014      	str	r4, [r2, #0]
 8009282:	4628      	mov	r0, r5
 8009284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009288:	f7ff bddc 	b.w	8008e44 <__malloc_unlock>
 800928c:	42a3      	cmp	r3, r4
 800928e:	d908      	bls.n	80092a2 <_free_r+0x42>
 8009290:	6820      	ldr	r0, [r4, #0]
 8009292:	1821      	adds	r1, r4, r0
 8009294:	428b      	cmp	r3, r1
 8009296:	bf01      	itttt	eq
 8009298:	6819      	ldreq	r1, [r3, #0]
 800929a:	685b      	ldreq	r3, [r3, #4]
 800929c:	1809      	addeq	r1, r1, r0
 800929e:	6021      	streq	r1, [r4, #0]
 80092a0:	e7ed      	b.n	800927e <_free_r+0x1e>
 80092a2:	461a      	mov	r2, r3
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	b10b      	cbz	r3, 80092ac <_free_r+0x4c>
 80092a8:	42a3      	cmp	r3, r4
 80092aa:	d9fa      	bls.n	80092a2 <_free_r+0x42>
 80092ac:	6811      	ldr	r1, [r2, #0]
 80092ae:	1850      	adds	r0, r2, r1
 80092b0:	42a0      	cmp	r0, r4
 80092b2:	d10b      	bne.n	80092cc <_free_r+0x6c>
 80092b4:	6820      	ldr	r0, [r4, #0]
 80092b6:	4401      	add	r1, r0
 80092b8:	1850      	adds	r0, r2, r1
 80092ba:	4283      	cmp	r3, r0
 80092bc:	6011      	str	r1, [r2, #0]
 80092be:	d1e0      	bne.n	8009282 <_free_r+0x22>
 80092c0:	6818      	ldr	r0, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	6053      	str	r3, [r2, #4]
 80092c6:	4408      	add	r0, r1
 80092c8:	6010      	str	r0, [r2, #0]
 80092ca:	e7da      	b.n	8009282 <_free_r+0x22>
 80092cc:	d902      	bls.n	80092d4 <_free_r+0x74>
 80092ce:	230c      	movs	r3, #12
 80092d0:	602b      	str	r3, [r5, #0]
 80092d2:	e7d6      	b.n	8009282 <_free_r+0x22>
 80092d4:	6820      	ldr	r0, [r4, #0]
 80092d6:	1821      	adds	r1, r4, r0
 80092d8:	428b      	cmp	r3, r1
 80092da:	bf04      	itt	eq
 80092dc:	6819      	ldreq	r1, [r3, #0]
 80092de:	685b      	ldreq	r3, [r3, #4]
 80092e0:	6063      	str	r3, [r4, #4]
 80092e2:	bf04      	itt	eq
 80092e4:	1809      	addeq	r1, r1, r0
 80092e6:	6021      	streq	r1, [r4, #0]
 80092e8:	6054      	str	r4, [r2, #4]
 80092ea:	e7ca      	b.n	8009282 <_free_r+0x22>
 80092ec:	bd38      	pop	{r3, r4, r5, pc}
 80092ee:	bf00      	nop
 80092f0:	20004d14 	.word	0x20004d14

080092f4 <__sfputc_r>:
 80092f4:	6893      	ldr	r3, [r2, #8]
 80092f6:	3b01      	subs	r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	b410      	push	{r4}
 80092fc:	6093      	str	r3, [r2, #8]
 80092fe:	da08      	bge.n	8009312 <__sfputc_r+0x1e>
 8009300:	6994      	ldr	r4, [r2, #24]
 8009302:	42a3      	cmp	r3, r4
 8009304:	db01      	blt.n	800930a <__sfputc_r+0x16>
 8009306:	290a      	cmp	r1, #10
 8009308:	d103      	bne.n	8009312 <__sfputc_r+0x1e>
 800930a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800930e:	f000 bb6d 	b.w	80099ec <__swbuf_r>
 8009312:	6813      	ldr	r3, [r2, #0]
 8009314:	1c58      	adds	r0, r3, #1
 8009316:	6010      	str	r0, [r2, #0]
 8009318:	7019      	strb	r1, [r3, #0]
 800931a:	4608      	mov	r0, r1
 800931c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009320:	4770      	bx	lr

08009322 <__sfputs_r>:
 8009322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009324:	4606      	mov	r6, r0
 8009326:	460f      	mov	r7, r1
 8009328:	4614      	mov	r4, r2
 800932a:	18d5      	adds	r5, r2, r3
 800932c:	42ac      	cmp	r4, r5
 800932e:	d101      	bne.n	8009334 <__sfputs_r+0x12>
 8009330:	2000      	movs	r0, #0
 8009332:	e007      	b.n	8009344 <__sfputs_r+0x22>
 8009334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009338:	463a      	mov	r2, r7
 800933a:	4630      	mov	r0, r6
 800933c:	f7ff ffda 	bl	80092f4 <__sfputc_r>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d1f3      	bne.n	800932c <__sfputs_r+0xa>
 8009344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009348 <_vfiprintf_r>:
 8009348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	460d      	mov	r5, r1
 800934e:	b09d      	sub	sp, #116	@ 0x74
 8009350:	4614      	mov	r4, r2
 8009352:	4698      	mov	r8, r3
 8009354:	4606      	mov	r6, r0
 8009356:	b118      	cbz	r0, 8009360 <_vfiprintf_r+0x18>
 8009358:	6a03      	ldr	r3, [r0, #32]
 800935a:	b90b      	cbnz	r3, 8009360 <_vfiprintf_r+0x18>
 800935c:	f7ff fe04 	bl	8008f68 <__sinit>
 8009360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009362:	07d9      	lsls	r1, r3, #31
 8009364:	d405      	bmi.n	8009372 <_vfiprintf_r+0x2a>
 8009366:	89ab      	ldrh	r3, [r5, #12]
 8009368:	059a      	lsls	r2, r3, #22
 800936a:	d402      	bmi.n	8009372 <_vfiprintf_r+0x2a>
 800936c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800936e:	f7ff ff66 	bl	800923e <__retarget_lock_acquire_recursive>
 8009372:	89ab      	ldrh	r3, [r5, #12]
 8009374:	071b      	lsls	r3, r3, #28
 8009376:	d501      	bpl.n	800937c <_vfiprintf_r+0x34>
 8009378:	692b      	ldr	r3, [r5, #16]
 800937a:	b99b      	cbnz	r3, 80093a4 <_vfiprintf_r+0x5c>
 800937c:	4629      	mov	r1, r5
 800937e:	4630      	mov	r0, r6
 8009380:	f000 fb72 	bl	8009a68 <__swsetup_r>
 8009384:	b170      	cbz	r0, 80093a4 <_vfiprintf_r+0x5c>
 8009386:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009388:	07dc      	lsls	r4, r3, #31
 800938a:	d504      	bpl.n	8009396 <_vfiprintf_r+0x4e>
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	b01d      	add	sp, #116	@ 0x74
 8009392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009396:	89ab      	ldrh	r3, [r5, #12]
 8009398:	0598      	lsls	r0, r3, #22
 800939a:	d4f7      	bmi.n	800938c <_vfiprintf_r+0x44>
 800939c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800939e:	f7ff ff4f 	bl	8009240 <__retarget_lock_release_recursive>
 80093a2:	e7f3      	b.n	800938c <_vfiprintf_r+0x44>
 80093a4:	2300      	movs	r3, #0
 80093a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80093a8:	2320      	movs	r3, #32
 80093aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80093b2:	2330      	movs	r3, #48	@ 0x30
 80093b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009564 <_vfiprintf_r+0x21c>
 80093b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093bc:	f04f 0901 	mov.w	r9, #1
 80093c0:	4623      	mov	r3, r4
 80093c2:	469a      	mov	sl, r3
 80093c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093c8:	b10a      	cbz	r2, 80093ce <_vfiprintf_r+0x86>
 80093ca:	2a25      	cmp	r2, #37	@ 0x25
 80093cc:	d1f9      	bne.n	80093c2 <_vfiprintf_r+0x7a>
 80093ce:	ebba 0b04 	subs.w	fp, sl, r4
 80093d2:	d00b      	beq.n	80093ec <_vfiprintf_r+0xa4>
 80093d4:	465b      	mov	r3, fp
 80093d6:	4622      	mov	r2, r4
 80093d8:	4629      	mov	r1, r5
 80093da:	4630      	mov	r0, r6
 80093dc:	f7ff ffa1 	bl	8009322 <__sfputs_r>
 80093e0:	3001      	adds	r0, #1
 80093e2:	f000 80a7 	beq.w	8009534 <_vfiprintf_r+0x1ec>
 80093e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093e8:	445a      	add	r2, fp
 80093ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80093ec:	f89a 3000 	ldrb.w	r3, [sl]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 809f 	beq.w	8009534 <_vfiprintf_r+0x1ec>
 80093f6:	2300      	movs	r3, #0
 80093f8:	f04f 32ff 	mov.w	r2, #4294967295
 80093fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009400:	f10a 0a01 	add.w	sl, sl, #1
 8009404:	9304      	str	r3, [sp, #16]
 8009406:	9307      	str	r3, [sp, #28]
 8009408:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800940c:	931a      	str	r3, [sp, #104]	@ 0x68
 800940e:	4654      	mov	r4, sl
 8009410:	2205      	movs	r2, #5
 8009412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009416:	4853      	ldr	r0, [pc, #332]	@ (8009564 <_vfiprintf_r+0x21c>)
 8009418:	f7f6 fee2 	bl	80001e0 <memchr>
 800941c:	9a04      	ldr	r2, [sp, #16]
 800941e:	b9d8      	cbnz	r0, 8009458 <_vfiprintf_r+0x110>
 8009420:	06d1      	lsls	r1, r2, #27
 8009422:	bf44      	itt	mi
 8009424:	2320      	movmi	r3, #32
 8009426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800942a:	0713      	lsls	r3, r2, #28
 800942c:	bf44      	itt	mi
 800942e:	232b      	movmi	r3, #43	@ 0x2b
 8009430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009434:	f89a 3000 	ldrb.w	r3, [sl]
 8009438:	2b2a      	cmp	r3, #42	@ 0x2a
 800943a:	d015      	beq.n	8009468 <_vfiprintf_r+0x120>
 800943c:	9a07      	ldr	r2, [sp, #28]
 800943e:	4654      	mov	r4, sl
 8009440:	2000      	movs	r0, #0
 8009442:	f04f 0c0a 	mov.w	ip, #10
 8009446:	4621      	mov	r1, r4
 8009448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800944c:	3b30      	subs	r3, #48	@ 0x30
 800944e:	2b09      	cmp	r3, #9
 8009450:	d94b      	bls.n	80094ea <_vfiprintf_r+0x1a2>
 8009452:	b1b0      	cbz	r0, 8009482 <_vfiprintf_r+0x13a>
 8009454:	9207      	str	r2, [sp, #28]
 8009456:	e014      	b.n	8009482 <_vfiprintf_r+0x13a>
 8009458:	eba0 0308 	sub.w	r3, r0, r8
 800945c:	fa09 f303 	lsl.w	r3, r9, r3
 8009460:	4313      	orrs	r3, r2
 8009462:	9304      	str	r3, [sp, #16]
 8009464:	46a2      	mov	sl, r4
 8009466:	e7d2      	b.n	800940e <_vfiprintf_r+0xc6>
 8009468:	9b03      	ldr	r3, [sp, #12]
 800946a:	1d19      	adds	r1, r3, #4
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	9103      	str	r1, [sp, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	bfbb      	ittet	lt
 8009474:	425b      	neglt	r3, r3
 8009476:	f042 0202 	orrlt.w	r2, r2, #2
 800947a:	9307      	strge	r3, [sp, #28]
 800947c:	9307      	strlt	r3, [sp, #28]
 800947e:	bfb8      	it	lt
 8009480:	9204      	strlt	r2, [sp, #16]
 8009482:	7823      	ldrb	r3, [r4, #0]
 8009484:	2b2e      	cmp	r3, #46	@ 0x2e
 8009486:	d10a      	bne.n	800949e <_vfiprintf_r+0x156>
 8009488:	7863      	ldrb	r3, [r4, #1]
 800948a:	2b2a      	cmp	r3, #42	@ 0x2a
 800948c:	d132      	bne.n	80094f4 <_vfiprintf_r+0x1ac>
 800948e:	9b03      	ldr	r3, [sp, #12]
 8009490:	1d1a      	adds	r2, r3, #4
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	9203      	str	r2, [sp, #12]
 8009496:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800949a:	3402      	adds	r4, #2
 800949c:	9305      	str	r3, [sp, #20]
 800949e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009574 <_vfiprintf_r+0x22c>
 80094a2:	7821      	ldrb	r1, [r4, #0]
 80094a4:	2203      	movs	r2, #3
 80094a6:	4650      	mov	r0, sl
 80094a8:	f7f6 fe9a 	bl	80001e0 <memchr>
 80094ac:	b138      	cbz	r0, 80094be <_vfiprintf_r+0x176>
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	eba0 000a 	sub.w	r0, r0, sl
 80094b4:	2240      	movs	r2, #64	@ 0x40
 80094b6:	4082      	lsls	r2, r0
 80094b8:	4313      	orrs	r3, r2
 80094ba:	3401      	adds	r4, #1
 80094bc:	9304      	str	r3, [sp, #16]
 80094be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094c2:	4829      	ldr	r0, [pc, #164]	@ (8009568 <_vfiprintf_r+0x220>)
 80094c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094c8:	2206      	movs	r2, #6
 80094ca:	f7f6 fe89 	bl	80001e0 <memchr>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d03f      	beq.n	8009552 <_vfiprintf_r+0x20a>
 80094d2:	4b26      	ldr	r3, [pc, #152]	@ (800956c <_vfiprintf_r+0x224>)
 80094d4:	bb1b      	cbnz	r3, 800951e <_vfiprintf_r+0x1d6>
 80094d6:	9b03      	ldr	r3, [sp, #12]
 80094d8:	3307      	adds	r3, #7
 80094da:	f023 0307 	bic.w	r3, r3, #7
 80094de:	3308      	adds	r3, #8
 80094e0:	9303      	str	r3, [sp, #12]
 80094e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e4:	443b      	add	r3, r7
 80094e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80094e8:	e76a      	b.n	80093c0 <_vfiprintf_r+0x78>
 80094ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80094ee:	460c      	mov	r4, r1
 80094f0:	2001      	movs	r0, #1
 80094f2:	e7a8      	b.n	8009446 <_vfiprintf_r+0xfe>
 80094f4:	2300      	movs	r3, #0
 80094f6:	3401      	adds	r4, #1
 80094f8:	9305      	str	r3, [sp, #20]
 80094fa:	4619      	mov	r1, r3
 80094fc:	f04f 0c0a 	mov.w	ip, #10
 8009500:	4620      	mov	r0, r4
 8009502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009506:	3a30      	subs	r2, #48	@ 0x30
 8009508:	2a09      	cmp	r2, #9
 800950a:	d903      	bls.n	8009514 <_vfiprintf_r+0x1cc>
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0c6      	beq.n	800949e <_vfiprintf_r+0x156>
 8009510:	9105      	str	r1, [sp, #20]
 8009512:	e7c4      	b.n	800949e <_vfiprintf_r+0x156>
 8009514:	fb0c 2101 	mla	r1, ip, r1, r2
 8009518:	4604      	mov	r4, r0
 800951a:	2301      	movs	r3, #1
 800951c:	e7f0      	b.n	8009500 <_vfiprintf_r+0x1b8>
 800951e:	ab03      	add	r3, sp, #12
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	462a      	mov	r2, r5
 8009524:	4b12      	ldr	r3, [pc, #72]	@ (8009570 <_vfiprintf_r+0x228>)
 8009526:	a904      	add	r1, sp, #16
 8009528:	4630      	mov	r0, r6
 800952a:	f3af 8000 	nop.w
 800952e:	4607      	mov	r7, r0
 8009530:	1c78      	adds	r0, r7, #1
 8009532:	d1d6      	bne.n	80094e2 <_vfiprintf_r+0x19a>
 8009534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009536:	07d9      	lsls	r1, r3, #31
 8009538:	d405      	bmi.n	8009546 <_vfiprintf_r+0x1fe>
 800953a:	89ab      	ldrh	r3, [r5, #12]
 800953c:	059a      	lsls	r2, r3, #22
 800953e:	d402      	bmi.n	8009546 <_vfiprintf_r+0x1fe>
 8009540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009542:	f7ff fe7d 	bl	8009240 <__retarget_lock_release_recursive>
 8009546:	89ab      	ldrh	r3, [r5, #12]
 8009548:	065b      	lsls	r3, r3, #25
 800954a:	f53f af1f 	bmi.w	800938c <_vfiprintf_r+0x44>
 800954e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009550:	e71e      	b.n	8009390 <_vfiprintf_r+0x48>
 8009552:	ab03      	add	r3, sp, #12
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	462a      	mov	r2, r5
 8009558:	4b05      	ldr	r3, [pc, #20]	@ (8009570 <_vfiprintf_r+0x228>)
 800955a:	a904      	add	r1, sp, #16
 800955c:	4630      	mov	r0, r6
 800955e:	f000 f879 	bl	8009654 <_printf_i>
 8009562:	e7e4      	b.n	800952e <_vfiprintf_r+0x1e6>
 8009564:	08009e40 	.word	0x08009e40
 8009568:	08009e4a 	.word	0x08009e4a
 800956c:	00000000 	.word	0x00000000
 8009570:	08009323 	.word	0x08009323
 8009574:	08009e46 	.word	0x08009e46

08009578 <_printf_common>:
 8009578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	4616      	mov	r6, r2
 800957e:	4698      	mov	r8, r3
 8009580:	688a      	ldr	r2, [r1, #8]
 8009582:	690b      	ldr	r3, [r1, #16]
 8009584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009588:	4293      	cmp	r3, r2
 800958a:	bfb8      	it	lt
 800958c:	4613      	movlt	r3, r2
 800958e:	6033      	str	r3, [r6, #0]
 8009590:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009594:	4607      	mov	r7, r0
 8009596:	460c      	mov	r4, r1
 8009598:	b10a      	cbz	r2, 800959e <_printf_common+0x26>
 800959a:	3301      	adds	r3, #1
 800959c:	6033      	str	r3, [r6, #0]
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	0699      	lsls	r1, r3, #26
 80095a2:	bf42      	ittt	mi
 80095a4:	6833      	ldrmi	r3, [r6, #0]
 80095a6:	3302      	addmi	r3, #2
 80095a8:	6033      	strmi	r3, [r6, #0]
 80095aa:	6825      	ldr	r5, [r4, #0]
 80095ac:	f015 0506 	ands.w	r5, r5, #6
 80095b0:	d106      	bne.n	80095c0 <_printf_common+0x48>
 80095b2:	f104 0a19 	add.w	sl, r4, #25
 80095b6:	68e3      	ldr	r3, [r4, #12]
 80095b8:	6832      	ldr	r2, [r6, #0]
 80095ba:	1a9b      	subs	r3, r3, r2
 80095bc:	42ab      	cmp	r3, r5
 80095be:	dc26      	bgt.n	800960e <_printf_common+0x96>
 80095c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80095c4:	6822      	ldr	r2, [r4, #0]
 80095c6:	3b00      	subs	r3, #0
 80095c8:	bf18      	it	ne
 80095ca:	2301      	movne	r3, #1
 80095cc:	0692      	lsls	r2, r2, #26
 80095ce:	d42b      	bmi.n	8009628 <_printf_common+0xb0>
 80095d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095d4:	4641      	mov	r1, r8
 80095d6:	4638      	mov	r0, r7
 80095d8:	47c8      	blx	r9
 80095da:	3001      	adds	r0, #1
 80095dc:	d01e      	beq.n	800961c <_printf_common+0xa4>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	6922      	ldr	r2, [r4, #16]
 80095e2:	f003 0306 	and.w	r3, r3, #6
 80095e6:	2b04      	cmp	r3, #4
 80095e8:	bf02      	ittt	eq
 80095ea:	68e5      	ldreq	r5, [r4, #12]
 80095ec:	6833      	ldreq	r3, [r6, #0]
 80095ee:	1aed      	subeq	r5, r5, r3
 80095f0:	68a3      	ldr	r3, [r4, #8]
 80095f2:	bf0c      	ite	eq
 80095f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095f8:	2500      	movne	r5, #0
 80095fa:	4293      	cmp	r3, r2
 80095fc:	bfc4      	itt	gt
 80095fe:	1a9b      	subgt	r3, r3, r2
 8009600:	18ed      	addgt	r5, r5, r3
 8009602:	2600      	movs	r6, #0
 8009604:	341a      	adds	r4, #26
 8009606:	42b5      	cmp	r5, r6
 8009608:	d11a      	bne.n	8009640 <_printf_common+0xc8>
 800960a:	2000      	movs	r0, #0
 800960c:	e008      	b.n	8009620 <_printf_common+0xa8>
 800960e:	2301      	movs	r3, #1
 8009610:	4652      	mov	r2, sl
 8009612:	4641      	mov	r1, r8
 8009614:	4638      	mov	r0, r7
 8009616:	47c8      	blx	r9
 8009618:	3001      	adds	r0, #1
 800961a:	d103      	bne.n	8009624 <_printf_common+0xac>
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009624:	3501      	adds	r5, #1
 8009626:	e7c6      	b.n	80095b6 <_printf_common+0x3e>
 8009628:	18e1      	adds	r1, r4, r3
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	2030      	movs	r0, #48	@ 0x30
 800962e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009632:	4422      	add	r2, r4
 8009634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800963c:	3302      	adds	r3, #2
 800963e:	e7c7      	b.n	80095d0 <_printf_common+0x58>
 8009640:	2301      	movs	r3, #1
 8009642:	4622      	mov	r2, r4
 8009644:	4641      	mov	r1, r8
 8009646:	4638      	mov	r0, r7
 8009648:	47c8      	blx	r9
 800964a:	3001      	adds	r0, #1
 800964c:	d0e6      	beq.n	800961c <_printf_common+0xa4>
 800964e:	3601      	adds	r6, #1
 8009650:	e7d9      	b.n	8009606 <_printf_common+0x8e>
	...

08009654 <_printf_i>:
 8009654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009658:	7e0f      	ldrb	r7, [r1, #24]
 800965a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800965c:	2f78      	cmp	r7, #120	@ 0x78
 800965e:	4691      	mov	r9, r2
 8009660:	4680      	mov	r8, r0
 8009662:	460c      	mov	r4, r1
 8009664:	469a      	mov	sl, r3
 8009666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800966a:	d807      	bhi.n	800967c <_printf_i+0x28>
 800966c:	2f62      	cmp	r7, #98	@ 0x62
 800966e:	d80a      	bhi.n	8009686 <_printf_i+0x32>
 8009670:	2f00      	cmp	r7, #0
 8009672:	f000 80d2 	beq.w	800981a <_printf_i+0x1c6>
 8009676:	2f58      	cmp	r7, #88	@ 0x58
 8009678:	f000 80b9 	beq.w	80097ee <_printf_i+0x19a>
 800967c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009684:	e03a      	b.n	80096fc <_printf_i+0xa8>
 8009686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800968a:	2b15      	cmp	r3, #21
 800968c:	d8f6      	bhi.n	800967c <_printf_i+0x28>
 800968e:	a101      	add	r1, pc, #4	@ (adr r1, 8009694 <_printf_i+0x40>)
 8009690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009694:	080096ed 	.word	0x080096ed
 8009698:	08009701 	.word	0x08009701
 800969c:	0800967d 	.word	0x0800967d
 80096a0:	0800967d 	.word	0x0800967d
 80096a4:	0800967d 	.word	0x0800967d
 80096a8:	0800967d 	.word	0x0800967d
 80096ac:	08009701 	.word	0x08009701
 80096b0:	0800967d 	.word	0x0800967d
 80096b4:	0800967d 	.word	0x0800967d
 80096b8:	0800967d 	.word	0x0800967d
 80096bc:	0800967d 	.word	0x0800967d
 80096c0:	08009801 	.word	0x08009801
 80096c4:	0800972b 	.word	0x0800972b
 80096c8:	080097bb 	.word	0x080097bb
 80096cc:	0800967d 	.word	0x0800967d
 80096d0:	0800967d 	.word	0x0800967d
 80096d4:	08009823 	.word	0x08009823
 80096d8:	0800967d 	.word	0x0800967d
 80096dc:	0800972b 	.word	0x0800972b
 80096e0:	0800967d 	.word	0x0800967d
 80096e4:	0800967d 	.word	0x0800967d
 80096e8:	080097c3 	.word	0x080097c3
 80096ec:	6833      	ldr	r3, [r6, #0]
 80096ee:	1d1a      	adds	r2, r3, #4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6032      	str	r2, [r6, #0]
 80096f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096fc:	2301      	movs	r3, #1
 80096fe:	e09d      	b.n	800983c <_printf_i+0x1e8>
 8009700:	6833      	ldr	r3, [r6, #0]
 8009702:	6820      	ldr	r0, [r4, #0]
 8009704:	1d19      	adds	r1, r3, #4
 8009706:	6031      	str	r1, [r6, #0]
 8009708:	0606      	lsls	r6, r0, #24
 800970a:	d501      	bpl.n	8009710 <_printf_i+0xbc>
 800970c:	681d      	ldr	r5, [r3, #0]
 800970e:	e003      	b.n	8009718 <_printf_i+0xc4>
 8009710:	0645      	lsls	r5, r0, #25
 8009712:	d5fb      	bpl.n	800970c <_printf_i+0xb8>
 8009714:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009718:	2d00      	cmp	r5, #0
 800971a:	da03      	bge.n	8009724 <_printf_i+0xd0>
 800971c:	232d      	movs	r3, #45	@ 0x2d
 800971e:	426d      	negs	r5, r5
 8009720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009724:	4859      	ldr	r0, [pc, #356]	@ (800988c <_printf_i+0x238>)
 8009726:	230a      	movs	r3, #10
 8009728:	e011      	b.n	800974e <_printf_i+0xfa>
 800972a:	6821      	ldr	r1, [r4, #0]
 800972c:	6833      	ldr	r3, [r6, #0]
 800972e:	0608      	lsls	r0, r1, #24
 8009730:	f853 5b04 	ldr.w	r5, [r3], #4
 8009734:	d402      	bmi.n	800973c <_printf_i+0xe8>
 8009736:	0649      	lsls	r1, r1, #25
 8009738:	bf48      	it	mi
 800973a:	b2ad      	uxthmi	r5, r5
 800973c:	2f6f      	cmp	r7, #111	@ 0x6f
 800973e:	4853      	ldr	r0, [pc, #332]	@ (800988c <_printf_i+0x238>)
 8009740:	6033      	str	r3, [r6, #0]
 8009742:	bf14      	ite	ne
 8009744:	230a      	movne	r3, #10
 8009746:	2308      	moveq	r3, #8
 8009748:	2100      	movs	r1, #0
 800974a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800974e:	6866      	ldr	r6, [r4, #4]
 8009750:	60a6      	str	r6, [r4, #8]
 8009752:	2e00      	cmp	r6, #0
 8009754:	bfa2      	ittt	ge
 8009756:	6821      	ldrge	r1, [r4, #0]
 8009758:	f021 0104 	bicge.w	r1, r1, #4
 800975c:	6021      	strge	r1, [r4, #0]
 800975e:	b90d      	cbnz	r5, 8009764 <_printf_i+0x110>
 8009760:	2e00      	cmp	r6, #0
 8009762:	d04b      	beq.n	80097fc <_printf_i+0x1a8>
 8009764:	4616      	mov	r6, r2
 8009766:	fbb5 f1f3 	udiv	r1, r5, r3
 800976a:	fb03 5711 	mls	r7, r3, r1, r5
 800976e:	5dc7      	ldrb	r7, [r0, r7]
 8009770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009774:	462f      	mov	r7, r5
 8009776:	42bb      	cmp	r3, r7
 8009778:	460d      	mov	r5, r1
 800977a:	d9f4      	bls.n	8009766 <_printf_i+0x112>
 800977c:	2b08      	cmp	r3, #8
 800977e:	d10b      	bne.n	8009798 <_printf_i+0x144>
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	07df      	lsls	r7, r3, #31
 8009784:	d508      	bpl.n	8009798 <_printf_i+0x144>
 8009786:	6923      	ldr	r3, [r4, #16]
 8009788:	6861      	ldr	r1, [r4, #4]
 800978a:	4299      	cmp	r1, r3
 800978c:	bfde      	ittt	le
 800978e:	2330      	movle	r3, #48	@ 0x30
 8009790:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009794:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009798:	1b92      	subs	r2, r2, r6
 800979a:	6122      	str	r2, [r4, #16]
 800979c:	f8cd a000 	str.w	sl, [sp]
 80097a0:	464b      	mov	r3, r9
 80097a2:	aa03      	add	r2, sp, #12
 80097a4:	4621      	mov	r1, r4
 80097a6:	4640      	mov	r0, r8
 80097a8:	f7ff fee6 	bl	8009578 <_printf_common>
 80097ac:	3001      	adds	r0, #1
 80097ae:	d14a      	bne.n	8009846 <_printf_i+0x1f2>
 80097b0:	f04f 30ff 	mov.w	r0, #4294967295
 80097b4:	b004      	add	sp, #16
 80097b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	f043 0320 	orr.w	r3, r3, #32
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	4833      	ldr	r0, [pc, #204]	@ (8009890 <_printf_i+0x23c>)
 80097c4:	2778      	movs	r7, #120	@ 0x78
 80097c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	6831      	ldr	r1, [r6, #0]
 80097ce:	061f      	lsls	r7, r3, #24
 80097d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80097d4:	d402      	bmi.n	80097dc <_printf_i+0x188>
 80097d6:	065f      	lsls	r7, r3, #25
 80097d8:	bf48      	it	mi
 80097da:	b2ad      	uxthmi	r5, r5
 80097dc:	6031      	str	r1, [r6, #0]
 80097de:	07d9      	lsls	r1, r3, #31
 80097e0:	bf44      	itt	mi
 80097e2:	f043 0320 	orrmi.w	r3, r3, #32
 80097e6:	6023      	strmi	r3, [r4, #0]
 80097e8:	b11d      	cbz	r5, 80097f2 <_printf_i+0x19e>
 80097ea:	2310      	movs	r3, #16
 80097ec:	e7ac      	b.n	8009748 <_printf_i+0xf4>
 80097ee:	4827      	ldr	r0, [pc, #156]	@ (800988c <_printf_i+0x238>)
 80097f0:	e7e9      	b.n	80097c6 <_printf_i+0x172>
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	f023 0320 	bic.w	r3, r3, #32
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	e7f6      	b.n	80097ea <_printf_i+0x196>
 80097fc:	4616      	mov	r6, r2
 80097fe:	e7bd      	b.n	800977c <_printf_i+0x128>
 8009800:	6833      	ldr	r3, [r6, #0]
 8009802:	6825      	ldr	r5, [r4, #0]
 8009804:	6961      	ldr	r1, [r4, #20]
 8009806:	1d18      	adds	r0, r3, #4
 8009808:	6030      	str	r0, [r6, #0]
 800980a:	062e      	lsls	r6, r5, #24
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	d501      	bpl.n	8009814 <_printf_i+0x1c0>
 8009810:	6019      	str	r1, [r3, #0]
 8009812:	e002      	b.n	800981a <_printf_i+0x1c6>
 8009814:	0668      	lsls	r0, r5, #25
 8009816:	d5fb      	bpl.n	8009810 <_printf_i+0x1bc>
 8009818:	8019      	strh	r1, [r3, #0]
 800981a:	2300      	movs	r3, #0
 800981c:	6123      	str	r3, [r4, #16]
 800981e:	4616      	mov	r6, r2
 8009820:	e7bc      	b.n	800979c <_printf_i+0x148>
 8009822:	6833      	ldr	r3, [r6, #0]
 8009824:	1d1a      	adds	r2, r3, #4
 8009826:	6032      	str	r2, [r6, #0]
 8009828:	681e      	ldr	r6, [r3, #0]
 800982a:	6862      	ldr	r2, [r4, #4]
 800982c:	2100      	movs	r1, #0
 800982e:	4630      	mov	r0, r6
 8009830:	f7f6 fcd6 	bl	80001e0 <memchr>
 8009834:	b108      	cbz	r0, 800983a <_printf_i+0x1e6>
 8009836:	1b80      	subs	r0, r0, r6
 8009838:	6060      	str	r0, [r4, #4]
 800983a:	6863      	ldr	r3, [r4, #4]
 800983c:	6123      	str	r3, [r4, #16]
 800983e:	2300      	movs	r3, #0
 8009840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009844:	e7aa      	b.n	800979c <_printf_i+0x148>
 8009846:	6923      	ldr	r3, [r4, #16]
 8009848:	4632      	mov	r2, r6
 800984a:	4649      	mov	r1, r9
 800984c:	4640      	mov	r0, r8
 800984e:	47d0      	blx	sl
 8009850:	3001      	adds	r0, #1
 8009852:	d0ad      	beq.n	80097b0 <_printf_i+0x15c>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	079b      	lsls	r3, r3, #30
 8009858:	d413      	bmi.n	8009882 <_printf_i+0x22e>
 800985a:	68e0      	ldr	r0, [r4, #12]
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	4298      	cmp	r0, r3
 8009860:	bfb8      	it	lt
 8009862:	4618      	movlt	r0, r3
 8009864:	e7a6      	b.n	80097b4 <_printf_i+0x160>
 8009866:	2301      	movs	r3, #1
 8009868:	4632      	mov	r2, r6
 800986a:	4649      	mov	r1, r9
 800986c:	4640      	mov	r0, r8
 800986e:	47d0      	blx	sl
 8009870:	3001      	adds	r0, #1
 8009872:	d09d      	beq.n	80097b0 <_printf_i+0x15c>
 8009874:	3501      	adds	r5, #1
 8009876:	68e3      	ldr	r3, [r4, #12]
 8009878:	9903      	ldr	r1, [sp, #12]
 800987a:	1a5b      	subs	r3, r3, r1
 800987c:	42ab      	cmp	r3, r5
 800987e:	dcf2      	bgt.n	8009866 <_printf_i+0x212>
 8009880:	e7eb      	b.n	800985a <_printf_i+0x206>
 8009882:	2500      	movs	r5, #0
 8009884:	f104 0619 	add.w	r6, r4, #25
 8009888:	e7f5      	b.n	8009876 <_printf_i+0x222>
 800988a:	bf00      	nop
 800988c:	08009e51 	.word	0x08009e51
 8009890:	08009e62 	.word	0x08009e62

08009894 <__sflush_r>:
 8009894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800989c:	0716      	lsls	r6, r2, #28
 800989e:	4605      	mov	r5, r0
 80098a0:	460c      	mov	r4, r1
 80098a2:	d454      	bmi.n	800994e <__sflush_r+0xba>
 80098a4:	684b      	ldr	r3, [r1, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	dc02      	bgt.n	80098b0 <__sflush_r+0x1c>
 80098aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	dd48      	ble.n	8009942 <__sflush_r+0xae>
 80098b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098b2:	2e00      	cmp	r6, #0
 80098b4:	d045      	beq.n	8009942 <__sflush_r+0xae>
 80098b6:	2300      	movs	r3, #0
 80098b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098bc:	682f      	ldr	r7, [r5, #0]
 80098be:	6a21      	ldr	r1, [r4, #32]
 80098c0:	602b      	str	r3, [r5, #0]
 80098c2:	d030      	beq.n	8009926 <__sflush_r+0x92>
 80098c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	0759      	lsls	r1, r3, #29
 80098ca:	d505      	bpl.n	80098d8 <__sflush_r+0x44>
 80098cc:	6863      	ldr	r3, [r4, #4]
 80098ce:	1ad2      	subs	r2, r2, r3
 80098d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098d2:	b10b      	cbz	r3, 80098d8 <__sflush_r+0x44>
 80098d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098d6:	1ad2      	subs	r2, r2, r3
 80098d8:	2300      	movs	r3, #0
 80098da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098dc:	6a21      	ldr	r1, [r4, #32]
 80098de:	4628      	mov	r0, r5
 80098e0:	47b0      	blx	r6
 80098e2:	1c43      	adds	r3, r0, #1
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	d106      	bne.n	80098f6 <__sflush_r+0x62>
 80098e8:	6829      	ldr	r1, [r5, #0]
 80098ea:	291d      	cmp	r1, #29
 80098ec:	d82b      	bhi.n	8009946 <__sflush_r+0xb2>
 80098ee:	4a2a      	ldr	r2, [pc, #168]	@ (8009998 <__sflush_r+0x104>)
 80098f0:	410a      	asrs	r2, r1
 80098f2:	07d6      	lsls	r6, r2, #31
 80098f4:	d427      	bmi.n	8009946 <__sflush_r+0xb2>
 80098f6:	2200      	movs	r2, #0
 80098f8:	6062      	str	r2, [r4, #4]
 80098fa:	04d9      	lsls	r1, r3, #19
 80098fc:	6922      	ldr	r2, [r4, #16]
 80098fe:	6022      	str	r2, [r4, #0]
 8009900:	d504      	bpl.n	800990c <__sflush_r+0x78>
 8009902:	1c42      	adds	r2, r0, #1
 8009904:	d101      	bne.n	800990a <__sflush_r+0x76>
 8009906:	682b      	ldr	r3, [r5, #0]
 8009908:	b903      	cbnz	r3, 800990c <__sflush_r+0x78>
 800990a:	6560      	str	r0, [r4, #84]	@ 0x54
 800990c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800990e:	602f      	str	r7, [r5, #0]
 8009910:	b1b9      	cbz	r1, 8009942 <__sflush_r+0xae>
 8009912:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009916:	4299      	cmp	r1, r3
 8009918:	d002      	beq.n	8009920 <__sflush_r+0x8c>
 800991a:	4628      	mov	r0, r5
 800991c:	f7ff fca0 	bl	8009260 <_free_r>
 8009920:	2300      	movs	r3, #0
 8009922:	6363      	str	r3, [r4, #52]	@ 0x34
 8009924:	e00d      	b.n	8009942 <__sflush_r+0xae>
 8009926:	2301      	movs	r3, #1
 8009928:	4628      	mov	r0, r5
 800992a:	47b0      	blx	r6
 800992c:	4602      	mov	r2, r0
 800992e:	1c50      	adds	r0, r2, #1
 8009930:	d1c9      	bne.n	80098c6 <__sflush_r+0x32>
 8009932:	682b      	ldr	r3, [r5, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d0c6      	beq.n	80098c6 <__sflush_r+0x32>
 8009938:	2b1d      	cmp	r3, #29
 800993a:	d001      	beq.n	8009940 <__sflush_r+0xac>
 800993c:	2b16      	cmp	r3, #22
 800993e:	d11e      	bne.n	800997e <__sflush_r+0xea>
 8009940:	602f      	str	r7, [r5, #0]
 8009942:	2000      	movs	r0, #0
 8009944:	e022      	b.n	800998c <__sflush_r+0xf8>
 8009946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800994a:	b21b      	sxth	r3, r3
 800994c:	e01b      	b.n	8009986 <__sflush_r+0xf2>
 800994e:	690f      	ldr	r7, [r1, #16]
 8009950:	2f00      	cmp	r7, #0
 8009952:	d0f6      	beq.n	8009942 <__sflush_r+0xae>
 8009954:	0793      	lsls	r3, r2, #30
 8009956:	680e      	ldr	r6, [r1, #0]
 8009958:	bf08      	it	eq
 800995a:	694b      	ldreq	r3, [r1, #20]
 800995c:	600f      	str	r7, [r1, #0]
 800995e:	bf18      	it	ne
 8009960:	2300      	movne	r3, #0
 8009962:	eba6 0807 	sub.w	r8, r6, r7
 8009966:	608b      	str	r3, [r1, #8]
 8009968:	f1b8 0f00 	cmp.w	r8, #0
 800996c:	dde9      	ble.n	8009942 <__sflush_r+0xae>
 800996e:	6a21      	ldr	r1, [r4, #32]
 8009970:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009972:	4643      	mov	r3, r8
 8009974:	463a      	mov	r2, r7
 8009976:	4628      	mov	r0, r5
 8009978:	47b0      	blx	r6
 800997a:	2800      	cmp	r0, #0
 800997c:	dc08      	bgt.n	8009990 <__sflush_r+0xfc>
 800997e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009986:	81a3      	strh	r3, [r4, #12]
 8009988:	f04f 30ff 	mov.w	r0, #4294967295
 800998c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009990:	4407      	add	r7, r0
 8009992:	eba8 0800 	sub.w	r8, r8, r0
 8009996:	e7e7      	b.n	8009968 <__sflush_r+0xd4>
 8009998:	dfbffffe 	.word	0xdfbffffe

0800999c <_fflush_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	690b      	ldr	r3, [r1, #16]
 80099a0:	4605      	mov	r5, r0
 80099a2:	460c      	mov	r4, r1
 80099a4:	b913      	cbnz	r3, 80099ac <_fflush_r+0x10>
 80099a6:	2500      	movs	r5, #0
 80099a8:	4628      	mov	r0, r5
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	b118      	cbz	r0, 80099b6 <_fflush_r+0x1a>
 80099ae:	6a03      	ldr	r3, [r0, #32]
 80099b0:	b90b      	cbnz	r3, 80099b6 <_fflush_r+0x1a>
 80099b2:	f7ff fad9 	bl	8008f68 <__sinit>
 80099b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0f3      	beq.n	80099a6 <_fflush_r+0xa>
 80099be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099c0:	07d0      	lsls	r0, r2, #31
 80099c2:	d404      	bmi.n	80099ce <_fflush_r+0x32>
 80099c4:	0599      	lsls	r1, r3, #22
 80099c6:	d402      	bmi.n	80099ce <_fflush_r+0x32>
 80099c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ca:	f7ff fc38 	bl	800923e <__retarget_lock_acquire_recursive>
 80099ce:	4628      	mov	r0, r5
 80099d0:	4621      	mov	r1, r4
 80099d2:	f7ff ff5f 	bl	8009894 <__sflush_r>
 80099d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099d8:	07da      	lsls	r2, r3, #31
 80099da:	4605      	mov	r5, r0
 80099dc:	d4e4      	bmi.n	80099a8 <_fflush_r+0xc>
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	059b      	lsls	r3, r3, #22
 80099e2:	d4e1      	bmi.n	80099a8 <_fflush_r+0xc>
 80099e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099e6:	f7ff fc2b 	bl	8009240 <__retarget_lock_release_recursive>
 80099ea:	e7dd      	b.n	80099a8 <_fflush_r+0xc>

080099ec <__swbuf_r>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	460e      	mov	r6, r1
 80099f0:	4614      	mov	r4, r2
 80099f2:	4605      	mov	r5, r0
 80099f4:	b118      	cbz	r0, 80099fe <__swbuf_r+0x12>
 80099f6:	6a03      	ldr	r3, [r0, #32]
 80099f8:	b90b      	cbnz	r3, 80099fe <__swbuf_r+0x12>
 80099fa:	f7ff fab5 	bl	8008f68 <__sinit>
 80099fe:	69a3      	ldr	r3, [r4, #24]
 8009a00:	60a3      	str	r3, [r4, #8]
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	071a      	lsls	r2, r3, #28
 8009a06:	d501      	bpl.n	8009a0c <__swbuf_r+0x20>
 8009a08:	6923      	ldr	r3, [r4, #16]
 8009a0a:	b943      	cbnz	r3, 8009a1e <__swbuf_r+0x32>
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f000 f82a 	bl	8009a68 <__swsetup_r>
 8009a14:	b118      	cbz	r0, 8009a1e <__swbuf_r+0x32>
 8009a16:	f04f 37ff 	mov.w	r7, #4294967295
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	6922      	ldr	r2, [r4, #16]
 8009a22:	1a98      	subs	r0, r3, r2
 8009a24:	6963      	ldr	r3, [r4, #20]
 8009a26:	b2f6      	uxtb	r6, r6
 8009a28:	4283      	cmp	r3, r0
 8009a2a:	4637      	mov	r7, r6
 8009a2c:	dc05      	bgt.n	8009a3a <__swbuf_r+0x4e>
 8009a2e:	4621      	mov	r1, r4
 8009a30:	4628      	mov	r0, r5
 8009a32:	f7ff ffb3 	bl	800999c <_fflush_r>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d1ed      	bne.n	8009a16 <__swbuf_r+0x2a>
 8009a3a:	68a3      	ldr	r3, [r4, #8]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	60a3      	str	r3, [r4, #8]
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	1c5a      	adds	r2, r3, #1
 8009a44:	6022      	str	r2, [r4, #0]
 8009a46:	701e      	strb	r6, [r3, #0]
 8009a48:	6962      	ldr	r2, [r4, #20]
 8009a4a:	1c43      	adds	r3, r0, #1
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d004      	beq.n	8009a5a <__swbuf_r+0x6e>
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	07db      	lsls	r3, r3, #31
 8009a54:	d5e1      	bpl.n	8009a1a <__swbuf_r+0x2e>
 8009a56:	2e0a      	cmp	r6, #10
 8009a58:	d1df      	bne.n	8009a1a <__swbuf_r+0x2e>
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	f7ff ff9d 	bl	800999c <_fflush_r>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d0d9      	beq.n	8009a1a <__swbuf_r+0x2e>
 8009a66:	e7d6      	b.n	8009a16 <__swbuf_r+0x2a>

08009a68 <__swsetup_r>:
 8009a68:	b538      	push	{r3, r4, r5, lr}
 8009a6a:	4b29      	ldr	r3, [pc, #164]	@ (8009b10 <__swsetup_r+0xa8>)
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	6818      	ldr	r0, [r3, #0]
 8009a70:	460c      	mov	r4, r1
 8009a72:	b118      	cbz	r0, 8009a7c <__swsetup_r+0x14>
 8009a74:	6a03      	ldr	r3, [r0, #32]
 8009a76:	b90b      	cbnz	r3, 8009a7c <__swsetup_r+0x14>
 8009a78:	f7ff fa76 	bl	8008f68 <__sinit>
 8009a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a80:	0719      	lsls	r1, r3, #28
 8009a82:	d422      	bmi.n	8009aca <__swsetup_r+0x62>
 8009a84:	06da      	lsls	r2, r3, #27
 8009a86:	d407      	bmi.n	8009a98 <__swsetup_r+0x30>
 8009a88:	2209      	movs	r2, #9
 8009a8a:	602a      	str	r2, [r5, #0]
 8009a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a90:	81a3      	strh	r3, [r4, #12]
 8009a92:	f04f 30ff 	mov.w	r0, #4294967295
 8009a96:	e033      	b.n	8009b00 <__swsetup_r+0x98>
 8009a98:	0758      	lsls	r0, r3, #29
 8009a9a:	d512      	bpl.n	8009ac2 <__swsetup_r+0x5a>
 8009a9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a9e:	b141      	cbz	r1, 8009ab2 <__swsetup_r+0x4a>
 8009aa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009aa4:	4299      	cmp	r1, r3
 8009aa6:	d002      	beq.n	8009aae <__swsetup_r+0x46>
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	f7ff fbd9 	bl	8009260 <_free_r>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ab2:	89a3      	ldrh	r3, [r4, #12]
 8009ab4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ab8:	81a3      	strh	r3, [r4, #12]
 8009aba:	2300      	movs	r3, #0
 8009abc:	6063      	str	r3, [r4, #4]
 8009abe:	6923      	ldr	r3, [r4, #16]
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	89a3      	ldrh	r3, [r4, #12]
 8009ac4:	f043 0308 	orr.w	r3, r3, #8
 8009ac8:	81a3      	strh	r3, [r4, #12]
 8009aca:	6923      	ldr	r3, [r4, #16]
 8009acc:	b94b      	cbnz	r3, 8009ae2 <__swsetup_r+0x7a>
 8009ace:	89a3      	ldrh	r3, [r4, #12]
 8009ad0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ad8:	d003      	beq.n	8009ae2 <__swsetup_r+0x7a>
 8009ada:	4621      	mov	r1, r4
 8009adc:	4628      	mov	r0, r5
 8009ade:	f000 f83f 	bl	8009b60 <__smakebuf_r>
 8009ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae6:	f013 0201 	ands.w	r2, r3, #1
 8009aea:	d00a      	beq.n	8009b02 <__swsetup_r+0x9a>
 8009aec:	2200      	movs	r2, #0
 8009aee:	60a2      	str	r2, [r4, #8]
 8009af0:	6962      	ldr	r2, [r4, #20]
 8009af2:	4252      	negs	r2, r2
 8009af4:	61a2      	str	r2, [r4, #24]
 8009af6:	6922      	ldr	r2, [r4, #16]
 8009af8:	b942      	cbnz	r2, 8009b0c <__swsetup_r+0xa4>
 8009afa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009afe:	d1c5      	bne.n	8009a8c <__swsetup_r+0x24>
 8009b00:	bd38      	pop	{r3, r4, r5, pc}
 8009b02:	0799      	lsls	r1, r3, #30
 8009b04:	bf58      	it	pl
 8009b06:	6962      	ldrpl	r2, [r4, #20]
 8009b08:	60a2      	str	r2, [r4, #8]
 8009b0a:	e7f4      	b.n	8009af6 <__swsetup_r+0x8e>
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	e7f7      	b.n	8009b00 <__swsetup_r+0x98>
 8009b10:	200000d8 	.word	0x200000d8

08009b14 <__swhatbuf_r>:
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	460c      	mov	r4, r1
 8009b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b1c:	2900      	cmp	r1, #0
 8009b1e:	b096      	sub	sp, #88	@ 0x58
 8009b20:	4615      	mov	r5, r2
 8009b22:	461e      	mov	r6, r3
 8009b24:	da0d      	bge.n	8009b42 <__swhatbuf_r+0x2e>
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b2c:	f04f 0100 	mov.w	r1, #0
 8009b30:	bf14      	ite	ne
 8009b32:	2340      	movne	r3, #64	@ 0x40
 8009b34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b38:	2000      	movs	r0, #0
 8009b3a:	6031      	str	r1, [r6, #0]
 8009b3c:	602b      	str	r3, [r5, #0]
 8009b3e:	b016      	add	sp, #88	@ 0x58
 8009b40:	bd70      	pop	{r4, r5, r6, pc}
 8009b42:	466a      	mov	r2, sp
 8009b44:	f000 f848 	bl	8009bd8 <_fstat_r>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	dbec      	blt.n	8009b26 <__swhatbuf_r+0x12>
 8009b4c:	9901      	ldr	r1, [sp, #4]
 8009b4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b56:	4259      	negs	r1, r3
 8009b58:	4159      	adcs	r1, r3
 8009b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b5e:	e7eb      	b.n	8009b38 <__swhatbuf_r+0x24>

08009b60 <__smakebuf_r>:
 8009b60:	898b      	ldrh	r3, [r1, #12]
 8009b62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b64:	079d      	lsls	r5, r3, #30
 8009b66:	4606      	mov	r6, r0
 8009b68:	460c      	mov	r4, r1
 8009b6a:	d507      	bpl.n	8009b7c <__smakebuf_r+0x1c>
 8009b6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	6123      	str	r3, [r4, #16]
 8009b74:	2301      	movs	r3, #1
 8009b76:	6163      	str	r3, [r4, #20]
 8009b78:	b003      	add	sp, #12
 8009b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b7c:	ab01      	add	r3, sp, #4
 8009b7e:	466a      	mov	r2, sp
 8009b80:	f7ff ffc8 	bl	8009b14 <__swhatbuf_r>
 8009b84:	9f00      	ldr	r7, [sp, #0]
 8009b86:	4605      	mov	r5, r0
 8009b88:	4639      	mov	r1, r7
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f7ff f8d4 	bl	8008d38 <_malloc_r>
 8009b90:	b948      	cbnz	r0, 8009ba6 <__smakebuf_r+0x46>
 8009b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b96:	059a      	lsls	r2, r3, #22
 8009b98:	d4ee      	bmi.n	8009b78 <__smakebuf_r+0x18>
 8009b9a:	f023 0303 	bic.w	r3, r3, #3
 8009b9e:	f043 0302 	orr.w	r3, r3, #2
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	e7e2      	b.n	8009b6c <__smakebuf_r+0xc>
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	6020      	str	r0, [r4, #0]
 8009baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bae:	81a3      	strh	r3, [r4, #12]
 8009bb0:	9b01      	ldr	r3, [sp, #4]
 8009bb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bb6:	b15b      	cbz	r3, 8009bd0 <__smakebuf_r+0x70>
 8009bb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f000 f81d 	bl	8009bfc <_isatty_r>
 8009bc2:	b128      	cbz	r0, 8009bd0 <__smakebuf_r+0x70>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	f023 0303 	bic.w	r3, r3, #3
 8009bca:	f043 0301 	orr.w	r3, r3, #1
 8009bce:	81a3      	strh	r3, [r4, #12]
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	431d      	orrs	r5, r3
 8009bd4:	81a5      	strh	r5, [r4, #12]
 8009bd6:	e7cf      	b.n	8009b78 <__smakebuf_r+0x18>

08009bd8 <_fstat_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4d07      	ldr	r5, [pc, #28]	@ (8009bf8 <_fstat_r+0x20>)
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4604      	mov	r4, r0
 8009be0:	4608      	mov	r0, r1
 8009be2:	4611      	mov	r1, r2
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	f7f7 fdfe 	bl	80017e6 <_fstat>
 8009bea:	1c43      	adds	r3, r0, #1
 8009bec:	d102      	bne.n	8009bf4 <_fstat_r+0x1c>
 8009bee:	682b      	ldr	r3, [r5, #0]
 8009bf0:	b103      	cbz	r3, 8009bf4 <_fstat_r+0x1c>
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	bd38      	pop	{r3, r4, r5, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20004e54 	.word	0x20004e54

08009bfc <_isatty_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4d06      	ldr	r5, [pc, #24]	@ (8009c18 <_isatty_r+0x1c>)
 8009c00:	2300      	movs	r3, #0
 8009c02:	4604      	mov	r4, r0
 8009c04:	4608      	mov	r0, r1
 8009c06:	602b      	str	r3, [r5, #0]
 8009c08:	f7f7 fdfd 	bl	8001806 <_isatty>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_isatty_r+0x1a>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_isatty_r+0x1a>
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	20004e54 	.word	0x20004e54

08009c1c <sqrtf>:
 8009c1c:	b508      	push	{r3, lr}
 8009c1e:	ed2d 8b02 	vpush	{d8}
 8009c22:	eeb0 8a40 	vmov.f32	s16, s0
 8009c26:	f000 f817 	bl	8009c58 <__ieee754_sqrtf>
 8009c2a:	eeb4 8a48 	vcmp.f32	s16, s16
 8009c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c32:	d60c      	bvs.n	8009c4e <sqrtf+0x32>
 8009c34:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009c54 <sqrtf+0x38>
 8009c38:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c40:	d505      	bpl.n	8009c4e <sqrtf+0x32>
 8009c42:	f7ff fad1 	bl	80091e8 <__errno>
 8009c46:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009c4a:	2321      	movs	r3, #33	@ 0x21
 8009c4c:	6003      	str	r3, [r0, #0]
 8009c4e:	ecbd 8b02 	vpop	{d8}
 8009c52:	bd08      	pop	{r3, pc}
 8009c54:	00000000 	.word	0x00000000

08009c58 <__ieee754_sqrtf>:
 8009c58:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009c5c:	4770      	bx	lr
	...

08009c60 <_init>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	bf00      	nop
 8009c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c66:	bc08      	pop	{r3}
 8009c68:	469e      	mov	lr, r3
 8009c6a:	4770      	bx	lr

08009c6c <_fini>:
 8009c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6e:	bf00      	nop
 8009c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c72:	bc08      	pop	{r3}
 8009c74:	469e      	mov	lr, r3
 8009c76:	4770      	bx	lr
