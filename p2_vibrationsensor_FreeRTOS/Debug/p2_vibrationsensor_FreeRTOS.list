
p2_vibrationsensor_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000815c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080082fc  080082fc  000092fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800843c  0800843c  0000a108  2**0
                  CONTENTS
  4 .ARM          00000008  0800843c  0800843c  0000943c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008444  08008444  0000a108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008444  08008444  00009444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008448  08008448  00009448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  0800844c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d00  20000108  08008554  0000a108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e08  08008554  0000ae08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3fa  00000000  00000000  0000a138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040c4  00000000  00000000  00026532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  0002a5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013bf  00000000  00000000  0002bf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001967d  00000000  00000000  0002d347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d256  00000000  00000000  000469c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0ecd  00000000  00000000  00063c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104ae7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ec4  00000000  00000000  00104b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0010b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000108 	.word	0x20000108
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080082e4 	.word	0x080082e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000010c 	.word	0x2000010c
 80001dc:	080082e4 	.word	0x080082e4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004da:	2300      	movs	r3, #0
 80004dc:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80004de:	f007 fc85 	bl	8007dec <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	461a      	mov	r2, r3
 80004ea:	2120      	movs	r1, #32
 80004ec:	2032      	movs	r0, #50	@ 0x32
 80004ee:	f007 fcd5 	bl	8007e9c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80004f2:	2300      	movs	r3, #0
 80004f4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	461a      	mov	r2, r3
 80004fa:	2123      	movs	r1, #35	@ 0x23
 80004fc:	2032      	movs	r0, #50	@ 0x32
 80004fe:	f007 fccd 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800051e:	2300      	movs	r3, #0
 8000520:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000522:	f007 fc63 	bl	8007dec <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8000526:	210f      	movs	r1, #15
 8000528:	2032      	movs	r0, #50	@ 0x32
 800052a:	f007 fcca 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000532:	79fb      	ldrb	r3, [r7, #7]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000542:	2124      	movs	r1, #36	@ 0x24
 8000544:	2032      	movs	r0, #50	@ 0x32
 8000546:	f007 fcbc 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000554:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	461a      	mov	r2, r3
 800055a:	2124      	movs	r1, #36	@ 0x24
 800055c:	2032      	movs	r0, #50	@ 0x32
 800055e:	f007 fc9d 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b084      	sub	sp, #16
 800056e:	af00      	add	r7, sp, #0
 8000570:	4603      	mov	r3, r0
 8000572:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000574:	2121      	movs	r1, #33	@ 0x21
 8000576:	2032      	movs	r0, #50	@ 0x32
 8000578:	f007 fca3 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 800057c:	4603      	mov	r3, r0
 800057e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	f003 030c 	and.w	r3, r3, #12
 8000586:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000588:	7bfa      	ldrb	r2, [r7, #15]
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4313      	orrs	r3, r2
 800058e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	461a      	mov	r2, r3
 8000594:	2121      	movs	r1, #33	@ 0x21
 8000596:	2032      	movs	r0, #50	@ 0x32
 8000598:	f007 fc80 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80005ae:	2121      	movs	r1, #33	@ 0x21
 80005b0:	2032      	movs	r0, #50	@ 0x32
 80005b2:	f007 fc86 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	f023 0308 	bic.w	r3, r3, #8
 80005c0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80005c2:	7bfa      	ldrb	r2, [r7, #15]
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	4313      	orrs	r3, r2
 80005c8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	461a      	mov	r2, r3
 80005ce:	2121      	movs	r1, #33	@ 0x21
 80005d0:	2032      	movs	r0, #50	@ 0x32
 80005d2:	f007 fc63 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b088      	sub	sp, #32
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80005e6:	2300      	movs	r3, #0
 80005e8:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80005ee:	2301      	movs	r3, #1
 80005f0:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80005f2:	2123      	movs	r1, #35	@ 0x23
 80005f4:	2032      	movs	r0, #50	@ 0x32
 80005f6:	f007 fc64 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80005fa:	4603      	mov	r3, r0
 80005fc:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80005fe:	2124      	movs	r1, #36	@ 0x24
 8000600:	2032      	movs	r0, #50	@ 0x32
 8000602:	f007 fc5e 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 8000606:	4603      	mov	r3, r0
 8000608:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800060a:	2128      	movs	r1, #40	@ 0x28
 800060c:	2032      	movs	r0, #50	@ 0x32
 800060e:	f007 fc58 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 8000612:	4603      	mov	r3, r0
 8000614:	b25b      	sxtb	r3, r3
 8000616:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8000618:	2129      	movs	r1, #41	@ 0x29
 800061a:	2032      	movs	r0, #50	@ 0x32
 800061c:	f007 fc51 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 8000620:	4603      	mov	r3, r0
 8000622:	b25b      	sxtb	r3, r3
 8000624:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8000626:	212a      	movs	r1, #42	@ 0x2a
 8000628:	2032      	movs	r0, #50	@ 0x32
 800062a:	f007 fc4a 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 800062e:	4603      	mov	r3, r0
 8000630:	b25b      	sxtb	r3, r3
 8000632:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8000634:	212b      	movs	r1, #43	@ 0x2b
 8000636:	2032      	movs	r0, #50	@ 0x32
 8000638:	f007 fc43 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 800063c:	4603      	mov	r3, r0
 800063e:	b25b      	sxtb	r3, r3
 8000640:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8000642:	212c      	movs	r1, #44	@ 0x2c
 8000644:	2032      	movs	r0, #50	@ 0x32
 8000646:	f007 fc3c 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 800064a:	4603      	mov	r3, r0
 800064c:	b25b      	sxtb	r3, r3
 800064e:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8000650:	212d      	movs	r1, #45	@ 0x2d
 8000652:	2032      	movs	r0, #50	@ 0x32
 8000654:	f007 fc35 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 8000658:	4603      	mov	r3, r0
 800065a:	b25b      	sxtb	r3, r3
 800065c:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800065e:	7d3b      	ldrb	r3, [r7, #20]
 8000660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000664:	2b00      	cmp	r3, #0
 8000666:	d123      	bne.n	80006b0 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000668:	2300      	movs	r3, #0
 800066a:	77fb      	strb	r3, [r7, #31]
 800066c:	e01c      	b.n	80006a8 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800066e:	7ffb      	ldrb	r3, [r7, #31]
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	3301      	adds	r3, #1
 8000674:	3320      	adds	r3, #32
 8000676:	443b      	add	r3, r7
 8000678:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800067c:	b29b      	uxth	r3, r3
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b29a      	uxth	r2, r3
 8000682:	7ffb      	ldrb	r3, [r7, #31]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	3320      	adds	r3, #32
 8000688:	443b      	add	r3, r7
 800068a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800068e:	b29b      	uxth	r3, r3
 8000690:	4413      	add	r3, r2
 8000692:	b29a      	uxth	r2, r3
 8000694:	7ffb      	ldrb	r3, [r7, #31]
 8000696:	b212      	sxth	r2, r2
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	3320      	adds	r3, #32
 800069c:	443b      	add	r3, r7
 800069e:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80006a2:	7ffb      	ldrb	r3, [r7, #31]
 80006a4:	3301      	adds	r3, #1
 80006a6:	77fb      	strb	r3, [r7, #31]
 80006a8:	7ffb      	ldrb	r3, [r7, #31]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d9df      	bls.n	800066e <LSM303AGR_AccReadXYZ+0x90>
 80006ae:	e022      	b.n	80006f6 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	77fb      	strb	r3, [r7, #31]
 80006b4:	e01c      	b.n	80006f0 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80006b6:	7ffb      	ldrb	r3, [r7, #31]
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	3320      	adds	r3, #32
 80006bc:	443b      	add	r3, r7
 80006be:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	021b      	lsls	r3, r3, #8
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	7ffb      	ldrb	r3, [r7, #31]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	3301      	adds	r3, #1
 80006ce:	3320      	adds	r3, #32
 80006d0:	443b      	add	r3, r7
 80006d2:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	4413      	add	r3, r2
 80006da:	b29a      	uxth	r2, r3
 80006dc:	7ffb      	ldrb	r3, [r7, #31]
 80006de:	b212      	sxth	r2, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	3320      	adds	r3, #32
 80006e4:	443b      	add	r3, r7
 80006e6:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80006ea:	7ffb      	ldrb	r3, [r7, #31]
 80006ec:	3301      	adds	r3, #1
 80006ee:	77fb      	strb	r3, [r7, #31]
 80006f0:	7ffb      	ldrb	r3, [r7, #31]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d9df      	bls.n	80006b6 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 80006f6:	7d3b      	ldrb	r3, [r7, #20]
 80006f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006fc:	2b30      	cmp	r3, #48	@ 0x30
 80006fe:	d013      	beq.n	8000728 <LSM303AGR_AccReadXYZ+0x14a>
 8000700:	2b30      	cmp	r3, #48	@ 0x30
 8000702:	dc14      	bgt.n	800072e <LSM303AGR_AccReadXYZ+0x150>
 8000704:	2b20      	cmp	r3, #32
 8000706:	d00c      	beq.n	8000722 <LSM303AGR_AccReadXYZ+0x144>
 8000708:	2b20      	cmp	r3, #32
 800070a:	dc10      	bgt.n	800072e <LSM303AGR_AccReadXYZ+0x150>
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <LSM303AGR_AccReadXYZ+0x138>
 8000710:	2b10      	cmp	r3, #16
 8000712:	d003      	beq.n	800071c <LSM303AGR_AccReadXYZ+0x13e>
 8000714:	e00b      	b.n	800072e <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8000716:	2301      	movs	r3, #1
 8000718:	77bb      	strb	r3, [r7, #30]
    break;
 800071a:	e008      	b.n	800072e <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 800071c:	2302      	movs	r3, #2
 800071e:	77bb      	strb	r3, [r7, #30]
    break;
 8000720:	e005      	b.n	800072e <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8000722:	2304      	movs	r3, #4
 8000724:	77bb      	strb	r3, [r7, #30]
    break;
 8000726:	e002      	b.n	800072e <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8000728:	230c      	movs	r3, #12
 800072a:	77bb      	strb	r3, [r7, #30]
    break;
 800072c:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800072e:	2300      	movs	r3, #0
 8000730:	77fb      	strb	r3, [r7, #31]
 8000732:	e014      	b.n	800075e <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000734:	7ffb      	ldrb	r3, [r7, #31]
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	3320      	adds	r3, #32
 800073a:	443b      	add	r3, r7
 800073c:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000740:	b29a      	uxth	r2, r3
 8000742:	7fbb      	ldrb	r3, [r7, #30]
 8000744:	b29b      	uxth	r3, r3
 8000746:	fb12 f303 	smulbb	r3, r2, r3
 800074a:	b299      	uxth	r1, r3
 800074c:	7ffb      	ldrb	r3, [r7, #31]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4413      	add	r3, r2
 8000754:	b20a      	sxth	r2, r1
 8000756:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000758:	7ffb      	ldrb	r3, [r7, #31]
 800075a:	3301      	adds	r3, #1
 800075c:	77fb      	strb	r3, [r7, #31]
 800075e:	7ffb      	ldrb	r3, [r7, #31]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d9e7      	bls.n	8000734 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8000764:	bf00      	nop
 8000766:	bf00      	nop
 8000768:	3720      	adds	r7, #32
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800077c:	2121      	movs	r1, #33	@ 0x21
 800077e:	2032      	movs	r0, #50	@ 0x32
 8000780:	f007 fb9f 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 8000784:	4603      	mov	r3, r0
 8000786:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	f023 0304 	bic.w	r3, r3, #4
 800078e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000790:	7bfa      	ldrb	r2, [r7, #15]
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4313      	orrs	r3, r2
 8000796:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	461a      	mov	r2, r3
 800079c:	2121      	movs	r1, #33	@ 0x21
 800079e:	2032      	movs	r0, #50	@ 0x32
 80007a0:	f007 fb7c 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 80007ba:	2122      	movs	r1, #34	@ 0x22
 80007bc:	2032      	movs	r0, #50	@ 0x32
 80007be:	f007 fb80 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80007c2:	4603      	mov	r3, r0
 80007c4:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 80007c6:	7bfa      	ldrb	r2, [r7, #15]
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	461a      	mov	r2, r3
 80007d2:	2122      	movs	r1, #34	@ 0x22
 80007d4:	2032      	movs	r0, #50	@ 0x32
 80007d6:	f007 fb61 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b084      	sub	sp, #16
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80007f0:	2138      	movs	r1, #56	@ 0x38
 80007f2:	2032      	movs	r0, #50	@ 0x32
 80007f4:	f007 fb65 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80007f8:	4603      	mov	r3, r0
 80007fa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80007fc:	7bfa      	ldrb	r2, [r7, #15]
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	4313      	orrs	r3, r2
 8000802:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	461a      	mov	r2, r3
 8000808:	2138      	movs	r1, #56	@ 0x38
 800080a:	2032      	movs	r0, #50	@ 0x32
 800080c:	f007 fb46 	bl	8007e9c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000810:	230a      	movs	r3, #10
 8000812:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	461a      	mov	r2, r3
 8000818:	213a      	movs	r1, #58	@ 0x3a
 800081a:	2032      	movs	r0, #50	@ 0x32
 800081c:	f007 fb3e 	bl	8007e9c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000820:	2305      	movs	r3, #5
 8000822:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	461a      	mov	r2, r3
 8000828:	213b      	movs	r1, #59	@ 0x3b
 800082a:	2032      	movs	r0, #50	@ 0x32
 800082c:	f007 fb36 	bl	8007e9c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	461a      	mov	r2, r3
 8000834:	213c      	movs	r1, #60	@ 0x3c
 8000836:	2032      	movs	r0, #50	@ 0x32
 8000838:	f007 fb30 	bl	8007e9c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 800083c:	2332      	movs	r3, #50	@ 0x32
 800083e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	461a      	mov	r2, r3
 8000844:	213d      	movs	r1, #61	@ 0x3d
 8000846:	2032      	movs	r0, #50	@ 0x32
 8000848:	f007 fb28 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000858:	f007 faf0 	bl	8007e3c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 800085c:	2080      	movs	r0, #128	@ 0x80
 800085e:	f7ff ffa5 	bl	80007ac <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff ff83 	bl	800076e <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8000868:	2010      	movs	r0, #16
 800086a:	f7ff ffba 	bl	80007e2 <LSM303AGR_AccClickITEnable>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}

08000872 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8000872:	b580      	push	{r7, lr}
 8000874:	b084      	sub	sp, #16
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000880:	f007 fab4 	bl	8007dec <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	461a      	mov	r2, r3
 800088c:	2120      	movs	r1, #32
 800088e:	2032      	movs	r0, #50	@ 0x32
 8000890:	f007 fb04 	bl	8007e9c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct >> 8);
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	0a1b      	lsrs	r3, r3, #8
 8000898:	b29b      	uxth	r3, r3
 800089a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	461a      	mov	r2, r3
 80008a0:	2123      	movs	r1, #35	@ 0x23
 80008a2:	2032      	movs	r0, #50	@ 0x32
 80008a4:	f007 fafa 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80008c4:	2300      	movs	r3, #0
 80008c6:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80008c8:	f007 fa90 	bl	8007dec <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80008cc:	210f      	movs	r1, #15
 80008ce:	2032      	movs	r0, #50	@ 0x32
 80008d0:	f007 faf7 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80008d8:	79fb      	ldrb	r3, [r7, #7]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80008e8:	2124      	movs	r1, #36	@ 0x24
 80008ea:	2032      	movs	r0, #50	@ 0x32
 80008ec:	f007 fae9 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80008f0:	4603      	mov	r3, r0
 80008f2:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008fa:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	461a      	mov	r2, r3
 8000900:	2124      	movs	r1, #36	@ 0x24
 8000902:	2032      	movs	r0, #50	@ 0x32
 8000904:	f007 faca 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800091a:	2121      	movs	r1, #33	@ 0x21
 800091c:	2032      	movs	r0, #50	@ 0x32
 800091e:	f007 fad0 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 8000922:	4603      	mov	r3, r0
 8000924:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	f003 030c 	and.w	r3, r3, #12
 800092c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 800092e:	7bfa      	ldrb	r2, [r7, #15]
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4313      	orrs	r3, r2
 8000934:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	461a      	mov	r2, r3
 800093a:	2121      	movs	r1, #33	@ 0x21
 800093c:	2032      	movs	r0, #50	@ 0x32
 800093e:	f007 faad 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b084      	sub	sp, #16
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000954:	2121      	movs	r1, #33	@ 0x21
 8000956:	2032      	movs	r0, #50	@ 0x32
 8000958:	f007 fab3 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 800095c:	4603      	mov	r3, r0
 800095e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	f023 0308 	bic.w	r3, r3, #8
 8000966:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4313      	orrs	r3, r2
 800096e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	461a      	mov	r2, r3
 8000974:	2121      	movs	r1, #33	@ 0x21
 8000976:	2032      	movs	r0, #50	@ 0x32
 8000978:	f007 fa90 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 800098c:	2300      	movs	r3, #0
 800098e:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000994:	2301      	movs	r3, #1
 8000996:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000998:	2123      	movs	r1, #35	@ 0x23
 800099a:	2032      	movs	r0, #50	@ 0x32
 800099c:	f007 fa91 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80009a0:	4603      	mov	r3, r0
 80009a2:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80009a4:	2124      	movs	r1, #36	@ 0x24
 80009a6:	2032      	movs	r0, #50	@ 0x32
 80009a8:	f007 fa8b 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80009ac:	4603      	mov	r3, r0
 80009ae:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80009b0:	2128      	movs	r1, #40	@ 0x28
 80009b2:	2032      	movs	r0, #50	@ 0x32
 80009b4:	f007 fa85 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80009b8:	4603      	mov	r3, r0
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80009be:	2129      	movs	r1, #41	@ 0x29
 80009c0:	2032      	movs	r0, #50	@ 0x32
 80009c2:	f007 fa7e 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80009c6:	4603      	mov	r3, r0
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80009cc:	212a      	movs	r1, #42	@ 0x2a
 80009ce:	2032      	movs	r0, #50	@ 0x32
 80009d0:	f007 fa77 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80009da:	212b      	movs	r1, #43	@ 0x2b
 80009dc:	2032      	movs	r0, #50	@ 0x32
 80009de:	f007 fa70 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80009e8:	212c      	movs	r1, #44	@ 0x2c
 80009ea:	2032      	movs	r0, #50	@ 0x32
 80009ec:	f007 fa69 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80009f6:	212d      	movs	r1, #45	@ 0x2d
 80009f8:	2032      	movs	r0, #50	@ 0x32
 80009fa:	f007 fa62 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 80009fe:	4603      	mov	r3, r0
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8000a04:	7d3b      	ldrb	r3, [r7, #20]
 8000a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d123      	bne.n	8000a56 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	77fb      	strb	r3, [r7, #31]
 8000a12:	e01c      	b.n	8000a4e <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	3301      	adds	r3, #1
 8000a1a:	3320      	adds	r3, #32
 8000a1c:	443b      	add	r3, r7
 8000a1e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	7ffb      	ldrb	r3, [r7, #31]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	3320      	adds	r3, #32
 8000a2e:	443b      	add	r3, r7
 8000a30:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	4413      	add	r3, r2
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	7ffb      	ldrb	r3, [r7, #31]
 8000a3c:	b212      	sxth	r2, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	3320      	adds	r3, #32
 8000a42:	443b      	add	r3, r7
 8000a44:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000a48:	7ffb      	ldrb	r3, [r7, #31]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	77fb      	strb	r3, [r7, #31]
 8000a4e:	7ffb      	ldrb	r3, [r7, #31]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d9df      	bls.n	8000a14 <LSM303DLHC_AccReadXYZ+0x90>
 8000a54:	e022      	b.n	8000a9c <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	77fb      	strb	r3, [r7, #31]
 8000a5a:	e01c      	b.n	8000a96 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000a5c:	7ffb      	ldrb	r3, [r7, #31]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	3320      	adds	r3, #32
 8000a62:	443b      	add	r3, r7
 8000a64:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	7ffb      	ldrb	r3, [r7, #31]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	3301      	adds	r3, #1
 8000a74:	3320      	adds	r3, #32
 8000a76:	443b      	add	r3, r7
 8000a78:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4413      	add	r3, r2
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	7ffb      	ldrb	r3, [r7, #31]
 8000a84:	b212      	sxth	r2, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	3320      	adds	r3, #32
 8000a8a:	443b      	add	r3, r7
 8000a8c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
 8000a92:	3301      	adds	r3, #1
 8000a94:	77fb      	strb	r3, [r7, #31]
 8000a96:	7ffb      	ldrb	r3, [r7, #31]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d9df      	bls.n	8000a5c <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000a9c:	7d3b      	ldrb	r3, [r7, #20]
 8000a9e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000aa2:	2b30      	cmp	r3, #48	@ 0x30
 8000aa4:	d013      	beq.n	8000ace <LSM303DLHC_AccReadXYZ+0x14a>
 8000aa6:	2b30      	cmp	r3, #48	@ 0x30
 8000aa8:	dc14      	bgt.n	8000ad4 <LSM303DLHC_AccReadXYZ+0x150>
 8000aaa:	2b20      	cmp	r3, #32
 8000aac:	d00c      	beq.n	8000ac8 <LSM303DLHC_AccReadXYZ+0x144>
 8000aae:	2b20      	cmp	r3, #32
 8000ab0:	dc10      	bgt.n	8000ad4 <LSM303DLHC_AccReadXYZ+0x150>
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <LSM303DLHC_AccReadXYZ+0x138>
 8000ab6:	2b10      	cmp	r3, #16
 8000ab8:	d003      	beq.n	8000ac2 <LSM303DLHC_AccReadXYZ+0x13e>
 8000aba:	e00b      	b.n	8000ad4 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000abc:	2301      	movs	r3, #1
 8000abe:	77bb      	strb	r3, [r7, #30]
    break;
 8000ac0:	e008      	b.n	8000ad4 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	77bb      	strb	r3, [r7, #30]
    break;
 8000ac6:	e005      	b.n	8000ad4 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	77bb      	strb	r3, [r7, #30]
    break;
 8000acc:	e002      	b.n	8000ad4 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	77bb      	strb	r3, [r7, #30]
    break;
 8000ad2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	77fb      	strb	r3, [r7, #31]
 8000ad8:	e014      	b.n	8000b04 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000ada:	7ffb      	ldrb	r3, [r7, #31]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	3320      	adds	r3, #32
 8000ae0:	443b      	add	r3, r7
 8000ae2:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	7fbb      	ldrb	r3, [r7, #30]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	fb12 f303 	smulbb	r3, r2, r3
 8000af0:	b299      	uxth	r1, r3
 8000af2:	7ffb      	ldrb	r3, [r7, #31]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	b20a      	sxth	r2, r1
 8000afc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000afe:	7ffb      	ldrb	r3, [r7, #31]
 8000b00:	3301      	adds	r3, #1
 8000b02:	77fb      	strb	r3, [r7, #31]
 8000b04:	7ffb      	ldrb	r3, [r7, #31]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d9e7      	bls.n	8000ada <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000b22:	2121      	movs	r1, #33	@ 0x21
 8000b24:	2032      	movs	r0, #50	@ 0x32
 8000b26:	f007 f9cc 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	f023 0304 	bic.w	r3, r3, #4
 8000b34:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000b36:	7bfa      	ldrb	r2, [r7, #15]
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	461a      	mov	r2, r3
 8000b42:	2121      	movs	r1, #33	@ 0x21
 8000b44:	2032      	movs	r0, #50	@ 0x32
 8000b46:	f007 f9a9 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8000b60:	2122      	movs	r1, #34	@ 0x22
 8000b62:	2032      	movs	r0, #50	@ 0x32
 8000b64:	f007 f9ad 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8000b6c:	7bfa      	ldrb	r2, [r7, #15]
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	461a      	mov	r2, r3
 8000b78:	2122      	movs	r1, #34	@ 0x22
 8000b7a:	2032      	movs	r0, #50	@ 0x32
 8000b7c:	f007 f98e 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000b92:	2300      	movs	r3, #0
 8000b94:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8000b96:	2138      	movs	r1, #56	@ 0x38
 8000b98:	2032      	movs	r0, #50	@ 0x32
 8000b9a:	f007 f992 	bl	8007ec2 <COMPASSACCELERO_IO_Read>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000ba2:	7bfa      	ldrb	r2, [r7, #15]
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	461a      	mov	r2, r3
 8000bae:	2138      	movs	r1, #56	@ 0x38
 8000bb0:	2032      	movs	r0, #50	@ 0x32
 8000bb2:	f007 f973 	bl	8007e9c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000bb6:	230a      	movs	r3, #10
 8000bb8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	213a      	movs	r1, #58	@ 0x3a
 8000bc0:	2032      	movs	r0, #50	@ 0x32
 8000bc2:	f007 f96b 	bl	8007e9c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	213b      	movs	r1, #59	@ 0x3b
 8000bd0:	2032      	movs	r0, #50	@ 0x32
 8000bd2:	f007 f963 	bl	8007e9c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	213c      	movs	r1, #60	@ 0x3c
 8000bdc:	2032      	movs	r0, #50	@ 0x32
 8000bde:	f007 f95d 	bl	8007e9c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000be2:	2332      	movs	r3, #50	@ 0x32
 8000be4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	461a      	mov	r2, r3
 8000bea:	213d      	movs	r1, #61	@ 0x3d
 8000bec:	2032      	movs	r0, #50	@ 0x32
 8000bee:	f007 f955 	bl	8007e9c <COMPASSACCELERO_IO_Write>
}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000bfe:	f007 f91d 	bl	8007e3c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8000c02:	2080      	movs	r0, #128	@ 0x80
 8000c04:	f7ff ffa5 	bl	8000b52 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8000c08:	2004      	movs	r0, #4
 8000c0a:	f7ff ff83 	bl	8000b14 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8000c0e:	2010      	movs	r0, #16
 8000c10:	f7ff ffba 	bl	8000b88 <LSM303DLHC_AccClickITEnable>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
	CoreDebug -> DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <configureTimerForRunTimeStats+0x2c>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	4a08      	ldr	r2, [pc, #32]	@ (8000c44 <configureTimerForRunTimeStats+0x2c>)
 8000c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c26:	60d3      	str	r3, [r2, #12]
	DWT -> CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c28:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <configureTimerForRunTimeStats+0x30>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a06      	ldr	r2, [pc, #24]	@ (8000c48 <configureTimerForRunTimeStats+0x30>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6013      	str	r3, [r2, #0]
	DWT -> CYCCNT = 0; //Reloj de depuración, cuenta ciclos de reloj, empieza en 0;
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <configureTimerForRunTimeStats+0x30>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]

}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000edf0 	.word	0xe000edf0
 8000c48:	e0001000 	.word	0xe0001000

08000c4c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
return DWT -> CYCCNT;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <getRunTimeCounterValue+0x14>)
 8000c52:	685b      	ldr	r3, [r3, #4]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e0001000 	.word	0xe0001000

08000c64 <fsm_fire>:
  this->current_state = tt[0].orig_state;
}

void
fsm_fire (fsm_t* this)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	e01c      	b.n	8000cae <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d113      	bne.n	8000ca8 <fsm_fire+0x44>
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	4798      	blx	r3
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00c      	beq.n	8000ca8 <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00c      	beq.n	8000cb8 <fsm_fire+0x54>
        t->out(this);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	4798      	blx	r3
      break;
 8000ca6:	e007      	b.n	8000cb8 <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3310      	adds	r3, #16
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	dade      	bge.n	8000c74 <fsm_fire+0x10>
    }
  }
}
 8000cb6:	e000      	b.n	8000cba <fsm_fire+0x56>
      break;
 8000cb8:	bf00      	nop
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc8:	f000 fd7c 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ccc:	f000 f862 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd0:	f000 f9ae 	bl	8001030 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cd4:	f000 f8c8 	bl	8000e68 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000cd8:	f000 f8f4 	bl	8000ec4 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000cdc:	f000 f928 	bl	8000f30 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8000ce0:	f007 f902 	bl	8007ee8 <BSP_ACCELERO_Init>
  TIM4 -> CCR1 = 0;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <main+0x8c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000cea:	2100      	movs	r1, #0
 8000cec:	4819      	ldr	r0, [pc, #100]	@ (8000d54 <main+0x90>)
 8000cee:	f002 ffe9 	bl	8003cc4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cf2:	f003 fed7 	bl	8004aa4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of exti_sem */
  exti_semHandle = osSemaphoreNew(1, 1, &exti_sem_attributes);
 8000cf6:	4a18      	ldr	r2, [pc, #96]	@ (8000d58 <main+0x94>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f003 ffc9 	bl	8004c92 <osSemaphoreNew>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4a16      	ldr	r2, [pc, #88]	@ (8000d5c <main+0x98>)
 8000d04:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d06:	4a16      	ldr	r2, [pc, #88]	@ (8000d60 <main+0x9c>)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4816      	ldr	r0, [pc, #88]	@ (8000d64 <main+0xa0>)
 8000d0c:	f003 ff14 	bl	8004b38 <osThreadNew>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4a15      	ldr	r2, [pc, #84]	@ (8000d68 <main+0xa4>)
 8000d14:	6013      	str	r3, [r2, #0]

  /* creation of task_BlinkBlue */
  task_BlinkBlueHandle = osThreadNew(tk_BlinkBlue, NULL, &task_BlinkBlue_attributes);
 8000d16:	4a15      	ldr	r2, [pc, #84]	@ (8000d6c <main+0xa8>)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4815      	ldr	r0, [pc, #84]	@ (8000d70 <main+0xac>)
 8000d1c:	f003 ff0c 	bl	8004b38 <osThreadNew>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <main+0xb0>)
 8000d24:	6013      	str	r3, [r2, #0]

  /* creation of task_ReadAccel */
  task_ReadAccelHandle = osThreadNew(tk_ReadAccel, NULL, &task_ReadAccel_attributes);
 8000d26:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <main+0xb4>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4814      	ldr	r0, [pc, #80]	@ (8000d7c <main+0xb8>)
 8000d2c:	f003 ff04 	bl	8004b38 <osThreadNew>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a13      	ldr	r2, [pc, #76]	@ (8000d80 <main+0xbc>)
 8000d34:	6013      	str	r3, [r2, #0]

  /* creation of task_WriteGreen */
  task_WriteGreenHandle = osThreadNew(tk_WriteLED, (void*) &data_green, &task_WriteGreen_attributes);
 8000d36:	4a13      	ldr	r2, [pc, #76]	@ (8000d84 <main+0xc0>)
 8000d38:	4913      	ldr	r1, [pc, #76]	@ (8000d88 <main+0xc4>)
 8000d3a:	4814      	ldr	r0, [pc, #80]	@ (8000d8c <main+0xc8>)
 8000d3c:	f003 fefc 	bl	8004b38 <osThreadNew>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a13      	ldr	r2, [pc, #76]	@ (8000d90 <main+0xcc>)
 8000d44:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d46:	f003 fed1 	bl	8004aec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d4a:	bf00      	nop
 8000d4c:	e7fd      	b.n	8000d4a <main+0x86>
 8000d4e:	bf00      	nop
 8000d50:	40000800 	.word	0x40000800
 8000d54:	200001d0 	.word	0x200001d0
 8000d58:	08008414 	.word	0x08008414
 8000d5c:	20000228 	.word	0x20000228
 8000d60:	08008384 	.word	0x08008384
 8000d64:	08001111 	.word	0x08001111
 8000d68:	20000218 	.word	0x20000218
 8000d6c:	080083a8 	.word	0x080083a8
 8000d70:	080015c9 	.word	0x080015c9
 8000d74:	2000021c 	.word	0x2000021c
 8000d78:	080083cc 	.word	0x080083cc
 8000d7c:	080015e9 	.word	0x080015e9
 8000d80:	20000220 	.word	0x20000220
 8000d84:	080083f0 	.word	0x080083f0
 8000d88:	20000068 	.word	0x20000068
 8000d8c:	08001681 	.word	0x08001681
 8000d90:	20000224 	.word	0x20000224

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	@ 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2230      	movs	r2, #48	@ 0x30
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f007 f99a 	bl	80080dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b28      	ldr	r3, [pc, #160]	@ (8000e60 <SystemClock_Config+0xcc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	4a27      	ldr	r2, [pc, #156]	@ (8000e60 <SystemClock_Config+0xcc>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc8:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <SystemClock_Config+0xcc>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	4b22      	ldr	r3, [pc, #136]	@ (8000e64 <SystemClock_Config+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a21      	ldr	r2, [pc, #132]	@ (8000e64 <SystemClock_Config+0xd0>)
 8000dde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <SystemClock_Config+0xd0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df0:	2302      	movs	r3, #2
 8000df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e00:	2300      	movs	r3, #0
 8000e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e04:	2308      	movs	r3, #8
 8000e06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e08:	23c0      	movs	r3, #192	@ 0xc0
 8000e0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000e10:	2308      	movs	r3, #8
 8000e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e14:	f107 0320 	add.w	r3, r7, #32
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 f8f5 	bl	8003008 <HAL_RCC_OscConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e24:	f000 f9a2 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e28:	230f      	movs	r3, #15
 8000e2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e34:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2103      	movs	r1, #3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 fb56 	bl	80034f8 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e52:	f000 f98b 	bl	800116c <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3750      	adds	r7, #80	@ 0x50
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_I2C1_Init+0x50>)
 8000e6e:	4a13      	ldr	r2, [pc, #76]	@ (8000ebc <MX_I2C1_Init+0x54>)
 8000e70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_I2C1_Init+0x50>)
 8000e74:	4a12      	ldr	r2, [pc, #72]	@ (8000ec0 <MX_I2C1_Init+0x58>)
 8000e76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_I2C1_Init+0x50>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <MX_I2C1_Init+0x50>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <MX_I2C1_Init+0x50>)
 8000e86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <MX_I2C1_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e92:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <MX_I2C1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	@ (8000eb8 <MX_I2C1_Init+0x50>)
 8000ea6:	f001 f84d 	bl	8001f44 <HAL_I2C_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000eb0:	f000 f95c 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000124 	.word	0x20000124
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	000186a0 	.word	0x000186a0

08000ec4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <MX_SPI1_Init+0x64>)
 8000eca:	4a18      	ldr	r2, [pc, #96]	@ (8000f2c <MX_SPI1_Init+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ece:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <MX_SPI1_Init+0x64>)
 8000ed0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ed4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <MX_SPI1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <MX_SPI1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <MX_SPI1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <MX_SPI1_Init+0x64>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ef4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <MX_SPI1_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <MX_SPI1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f02:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <MX_SPI1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <MX_SPI1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <MX_SPI1_Init+0x64>)
 8000f10:	220a      	movs	r2, #10
 8000f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	@ (8000f28 <MX_SPI1_Init+0x64>)
 8000f16:	f002 fd41 	bl	800399c <HAL_SPI_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f20:	f000 f924 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000178 	.word	0x20000178
 8000f2c:	40013000 	.word	0x40013000

08000f30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08e      	sub	sp, #56	@ 0x38
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	615a      	str	r2, [r3, #20]
 8000f5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f60:	4b31      	ldr	r3, [pc, #196]	@ (8001028 <MX_TIM4_Init+0xf8>)
 8000f62:	4a32      	ldr	r2, [pc, #200]	@ (800102c <MX_TIM4_Init+0xfc>)
 8000f64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 8000f66:	4b30      	ldr	r3, [pc, #192]	@ (8001028 <MX_TIM4_Init+0xf8>)
 8000f68:	222f      	movs	r2, #47	@ 0x2f
 8000f6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001028 <MX_TIM4_Init+0xf8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000f72:	4b2d      	ldr	r3, [pc, #180]	@ (8001028 <MX_TIM4_Init+0xf8>)
 8000f74:	2263      	movs	r2, #99	@ 0x63
 8000f76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	4b2b      	ldr	r3, [pc, #172]	@ (8001028 <MX_TIM4_Init+0xf8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <MX_TIM4_Init+0xf8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f84:	4828      	ldr	r0, [pc, #160]	@ (8001028 <MX_TIM4_Init+0xf8>)
 8000f86:	f002 fd92 	bl	8003aae <HAL_TIM_Base_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000f90:	f000 f8ec 	bl	800116c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4821      	ldr	r0, [pc, #132]	@ (8001028 <MX_TIM4_Init+0xf8>)
 8000fa2:	f003 f8f1 	bl	8004188 <HAL_TIM_ConfigClockSource>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000fac:	f000 f8de 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fb0:	481d      	ldr	r0, [pc, #116]	@ (8001028 <MX_TIM4_Init+0xf8>)
 8000fb2:	f002 fe2d 	bl	8003c10 <HAL_TIM_PWM_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000fbc:	f000 f8d6 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4816      	ldr	r0, [pc, #88]	@ (8001028 <MX_TIM4_Init+0xf8>)
 8000fd0:	f003 fca2 	bl	8004918 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000fda:	f000 f8c7 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fde:	2360      	movs	r3, #96	@ 0x60
 8000fe0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <MX_TIM4_Init+0xf8>)
 8000ff6:	f003 f805 	bl	8004004 <HAL_TIM_PWM_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001000:	f000 f8b4 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2208      	movs	r2, #8
 8001008:	4619      	mov	r1, r3
 800100a:	4807      	ldr	r0, [pc, #28]	@ (8001028 <MX_TIM4_Init+0xf8>)
 800100c:	f002 fffa 	bl	8004004 <HAL_TIM_PWM_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8001016:	f000 f8a9 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800101a:	4803      	ldr	r0, [pc, #12]	@ (8001028 <MX_TIM4_Init+0xf8>)
 800101c:	f000 f9ac 	bl	8001378 <HAL_TIM_MspPostInit>

}
 8001020:	bf00      	nop
 8001022:	3738      	adds	r7, #56	@ 0x38
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200001d0 	.word	0x200001d0
 800102c:	40000800 	.word	0x40000800

08001030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b2e      	ldr	r3, [pc, #184]	@ (8001104 <MX_GPIO_Init+0xd4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a2d      	ldr	r2, [pc, #180]	@ (8001104 <MX_GPIO_Init+0xd4>)
 8001050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b2b      	ldr	r3, [pc, #172]	@ (8001104 <MX_GPIO_Init+0xd4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <MX_GPIO_Init+0xd4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a26      	ldr	r2, [pc, #152]	@ (8001104 <MX_GPIO_Init+0xd4>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <MX_GPIO_Init+0xd4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b20      	ldr	r3, [pc, #128]	@ (8001104 <MX_GPIO_Init+0xd4>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a1f      	ldr	r2, [pc, #124]	@ (8001104 <MX_GPIO_Init+0xd4>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <MX_GPIO_Init+0xd4>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <MX_GPIO_Init+0xd4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a18      	ldr	r2, [pc, #96]	@ (8001104 <MX_GPIO_Init+0xd4>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_GPIO_Init+0xd4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010bc:	4812      	ldr	r0, [pc, #72]	@ (8001108 <MX_GPIO_Init+0xd8>)
 80010be:	f000 ff0d 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UserBTN_Pin */
  GPIO_InitStruct.Pin = UserBTN_Pin;
 80010c2:	2301      	movs	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserBTN_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	480d      	ldr	r0, [pc, #52]	@ (800110c <MX_GPIO_Init+0xdc>)
 80010d8:	f000 fc98 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_LED_Pin */
  GPIO_InitStruct.Pin = Blue_LED_Pin;
 80010dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Blue_LED_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4804      	ldr	r0, [pc, #16]	@ (8001108 <MX_GPIO_Init+0xd8>)
 80010f6:	f000 fc89 	bl	8001a0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	@ 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40020c00 	.word	0x40020c00
 800110c:	40020000 	.word	0x40020000

08001110 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreAcquire(exti_semHandle, osWaitForever) == osOK){ //Antirrebotes del botón
 8001118:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <StartDefaultTask+0x34>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fe3f 	bl	8004da4 <osSemaphoreAcquire>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f5      	bne.n	8001118 <StartDefaultTask+0x8>
		osDelay(500);
 800112c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001130:	f003 fd94 	bl	8004c5c <osDelay>
		osSemaphoreAcquire(exti_semHandle, 0);
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <StartDefaultTask+0x34>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f003 fe32 	bl	8004da4 <osSemaphoreAcquire>
	if(osSemaphoreAcquire(exti_semHandle, osWaitForever) == osOK){ //Antirrebotes del botón
 8001140:	e7ea      	b.n	8001118 <StartDefaultTask+0x8>
 8001142:	bf00      	nop
 8001144:	20000228 	.word	0x20000228

08001148 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800115a:	f000 fb55 	bl	8001808 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40014400 	.word	0x40014400

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <Error_Handler+0x8>

08001178 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_MspInit+0x54>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	4a11      	ldr	r2, [pc, #68]	@ (80011cc <HAL_MspInit+0x54>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118c:	6453      	str	r3, [r2, #68]	@ 0x44
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <HAL_MspInit+0x54>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <HAL_MspInit+0x54>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a2:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <HAL_MspInit+0x54>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <HAL_MspInit+0x54>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	210f      	movs	r1, #15
 80011ba:	f06f 0001 	mvn.w	r0, #1
 80011be:	f000 fbfb 	bl	80019b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800

080011d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	@ 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a19      	ldr	r2, [pc, #100]	@ (8001254 <HAL_I2C_MspInit+0x84>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d12c      	bne.n	800124c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_I2C_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a17      	ldr	r2, [pc, #92]	@ (8001258 <HAL_I2C_MspInit+0x88>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_I2C_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800120e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001214:	2312      	movs	r3, #18
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001220:	2304      	movs	r3, #4
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	480c      	ldr	r0, [pc, #48]	@ (800125c <HAL_I2C_MspInit+0x8c>)
 800122c:	f000 fbee 	bl	8001a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <HAL_I2C_MspInit+0x88>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <HAL_I2C_MspInit+0x88>)
 800123a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800123e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <HAL_I2C_MspInit+0x88>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	@ 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40005400 	.word	0x40005400
 8001258:	40023800 	.word	0x40023800
 800125c:	40020400 	.word	0x40020400

08001260 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <HAL_I2C_MspDeInit+0x38>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10e      	bne.n	8001290 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_I2C_MspDeInit+0x3c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	4a09      	ldr	r2, [pc, #36]	@ (800129c <HAL_I2C_MspDeInit+0x3c>)
 8001278:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800127c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800127e:	2140      	movs	r1, #64	@ 0x40
 8001280:	4807      	ldr	r0, [pc, #28]	@ (80012a0 <HAL_I2C_MspDeInit+0x40>)
 8001282:	f000 fd47 	bl	8001d14 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001286:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <HAL_I2C_MspDeInit+0x40>)
 800128c:	f000 fd42 	bl	8001d14 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40005400 	.word	0x40005400
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020400 	.word	0x40020400

080012a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a19      	ldr	r2, [pc, #100]	@ (8001328 <HAL_SPI_MspInit+0x84>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d12b      	bne.n	800131e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b18      	ldr	r3, [pc, #96]	@ (800132c <HAL_SPI_MspInit+0x88>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a17      	ldr	r2, [pc, #92]	@ (800132c <HAL_SPI_MspInit+0x88>)
 80012d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <HAL_SPI_MspInit+0x88>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <HAL_SPI_MspInit+0x88>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a10      	ldr	r2, [pc, #64]	@ (800132c <HAL_SPI_MspInit+0x88>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <HAL_SPI_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012fe:	23e0      	movs	r3, #224	@ 0xe0
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800130e:	2305      	movs	r3, #5
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	@ (8001330 <HAL_SPI_MspInit+0x8c>)
 800131a:	f000 fb77 	bl	8001a0c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	@ 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40013000 	.word	0x40013000
 800132c:	40023800 	.word	0x40023800
 8001330:	40020000 	.word	0x40020000

08001334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0b      	ldr	r2, [pc, #44]	@ (8001370 <HAL_TIM_Base_MspInit+0x3c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d10d      	bne.n	8001362 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <HAL_TIM_Base_MspInit+0x40>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	4a09      	ldr	r2, [pc, #36]	@ (8001374 <HAL_TIM_Base_MspInit+0x40>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6413      	str	r3, [r2, #64]	@ 0x40
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <HAL_TIM_Base_MspInit+0x40>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40000800 	.word	0x40000800
 8001374:	40023800 	.word	0x40023800

08001378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <HAL_TIM_MspPostInit+0x68>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d11e      	bne.n	80013d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_TIM_MspPostInit+0x6c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a10      	ldr	r2, [pc, #64]	@ (80013e4 <HAL_TIM_MspPostInit+0x6c>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <HAL_TIM_MspPostInit+0x6c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 80013b6:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80013ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	4619      	mov	r1, r3
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <HAL_TIM_MspPostInit+0x70>)
 80013d4:	f000 fb1a 	bl	8001a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013d8:	bf00      	nop
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40000800 	.word	0x40000800
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020c00 	.word	0x40020c00

080013ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08c      	sub	sp, #48	@ 0x30
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <HAL_InitTick+0xd4>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001404:	4a2e      	ldr	r2, [pc, #184]	@ (80014c0 <HAL_InitTick+0xd4>)
 8001406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800140a:	6453      	str	r3, [r2, #68]	@ 0x44
 800140c:	4b2c      	ldr	r3, [pc, #176]	@ (80014c0 <HAL_InitTick+0xd4>)
 800140e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001418:	f107 020c 	add.w	r2, r7, #12
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fa88 	bl	8003938 <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001428:	f002 fa72 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 800142c:	4603      	mov	r3, r0
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001434:	4a23      	ldr	r2, [pc, #140]	@ (80014c4 <HAL_InitTick+0xd8>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	0c9b      	lsrs	r3, r3, #18
 800143c:	3b01      	subs	r3, #1
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001440:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <HAL_InitTick+0xdc>)
 8001442:	4a22      	ldr	r2, [pc, #136]	@ (80014cc <HAL_InitTick+0xe0>)
 8001444:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001446:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <HAL_InitTick+0xdc>)
 8001448:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800144c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800144e:	4a1e      	ldr	r2, [pc, #120]	@ (80014c8 <HAL_InitTick+0xdc>)
 8001450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001452:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001454:	4b1c      	ldr	r3, [pc, #112]	@ (80014c8 <HAL_InitTick+0xdc>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <HAL_InitTick+0xdc>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <HAL_InitTick+0xdc>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001466:	4818      	ldr	r0, [pc, #96]	@ (80014c8 <HAL_InitTick+0xdc>)
 8001468:	f002 fb21 	bl	8003aae <HAL_TIM_Base_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001476:	2b00      	cmp	r3, #0
 8001478:	d11b      	bne.n	80014b2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800147a:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <HAL_InitTick+0xdc>)
 800147c:	f002 fb66 	bl	8003b4c <HAL_TIM_Base_Start_IT>
 8001480:	4603      	mov	r3, r0
 8001482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001486:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800148a:	2b00      	cmp	r3, #0
 800148c:	d111      	bne.n	80014b2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800148e:	2019      	movs	r0, #25
 8001490:	f000 faae 	bl	80019f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b0f      	cmp	r3, #15
 8001498:	d808      	bhi.n	80014ac <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800149a:	2200      	movs	r2, #0
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	2019      	movs	r0, #25
 80014a0:	f000 fa8a 	bl	80019b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a4:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <HAL_InitTick+0xe4>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e002      	b.n	80014b2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3730      	adds	r7, #48	@ 0x30
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	431bde83 	.word	0x431bde83
 80014c8:	20000230 	.word	0x20000230
 80014cc:	40014400 	.word	0x40014400
 80014d0:	200000a8 	.word	0x200000a8

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <NMI_Handler+0x4>

080014dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <MemManage_Handler+0x4>

080014ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001510:	4802      	ldr	r0, [pc, #8]	@ (800151c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001512:	f002 fc87 	bl	8003e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000230 	.word	0x20000230

08001520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <encender>:
	ACTIVO,
	INACTIVO,
};


static int encender(fsm_t* this){
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	return encendido; //btnstate;
 800154c:	4b03      	ldr	r3, [pc, #12]	@ (800155c <encender+0x18>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	2000022c 	.word	0x2000022c

08001560 <apagar>:

static int apagar(fsm_t* this){
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	return !encendido; //Si pongo a 0 la variable encendido en estado activo, paso a inactivo
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <apagar+0x24>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf0c      	ite	eq
 8001570:	2301      	moveq	r3, #1
 8001572:	2300      	movne	r3, #0
 8001574:	b2db      	uxtb	r3, r3
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	2000022c 	.word	0x2000022c

08001588 <func_LED_Activo>:

void func_LED_Activo(fsm_t* this){
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 8001590:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001594:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <func_LED_Activo+0x1c>)
 8001596:	f000 fcba 	bl	8001f0e <HAL_GPIO_TogglePin>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020c00 	.word	0x40020c00

080015a8 <func_LED_Inactivo>:

void func_LED_Inactivo(fsm_t* this){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015b6:	4803      	ldr	r0, [pc, #12]	@ (80015c4 <func_LED_Inactivo+0x1c>)
 80015b8:	f000 fc90 	bl	8001edc <HAL_GPIO_WritePin>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40020c00 	.word	0x40020c00

080015c8 <tk_BlinkBlue>:
};


//Tareas

void tk_BlinkBlue(void *argument){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	for (;;) {
		fsm_fire(ledfsm);
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <tk_BlinkBlue+0x1c>)
 80015d2:	f7ff fb47 	bl	8000c64 <fsm_fire>
		//HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
		osDelay(1000);
 80015d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015da:	f003 fb3f 	bl	8004c5c <osDelay>
		fsm_fire(ledfsm);
 80015de:	bf00      	nop
 80015e0:	e7f6      	b.n	80015d0 <tk_BlinkBlue+0x8>
 80015e2:	bf00      	nop
 80015e4:	20000078 	.word	0x20000078

080015e8 <tk_ReadAccel>:
	}
}

void tk_ReadAccel(void *argument){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	for(;;) {
		BSP_ACCELERO_GetXYZ(xyz);
 80015f0:	4821      	ldr	r0, [pc, #132]	@ (8001678 <tk_ReadAccel+0x90>)
 80015f2:	f006 fd3b 	bl	800806c <BSP_ACCELERO_GetXYZ>
		//printf("%d, %d, %d \n", xyz[0], xyz[1], xyz[2]);
		//if (
		arm_sqrt_f32(xyz[0]*xyz[0] + xyz[1]*xyz[1] + xyz[2]*xyz[2], &modulo);//){
 80015f6:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <tk_ReadAccel+0x90>)
 80015f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <tk_ReadAccel+0x90>)
 8001600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001604:	fb03 f202 	mul.w	r2, r3, r2
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <tk_ReadAccel+0x90>)
 800160a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800160e:	4619      	mov	r1, r3
 8001610:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <tk_ReadAccel+0x90>)
 8001612:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	441a      	add	r2, r3
 800161c:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <tk_ReadAccel+0x90>)
 800161e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001622:	4619      	mov	r1, r3
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <tk_ReadAccel+0x90>)
 8001626:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800162a:	fb01 f303 	mul.w	r3, r1, r3
 800162e:	4413      	add	r3, r2
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001638:	edc7 7a03 	vstr	s15, [r7, #12]
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <tk_ReadAccel+0x94>)
 800163e:	60bb      	str	r3, [r7, #8]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001640:	edd7 7a03 	vldr	s15, [r7, #12]
 8001644:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	db09      	blt.n	8001662 <tk_ReadAccel+0x7a>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800164e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001652:	f006 fe25 	bl	80082a0 <sqrtf>
 8001656:	eef0 7a40 	vmov.f32	s15, s0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001660:	e004      	b.n	800166c <tk_ReadAccel+0x84>
    }
    else
    {
      *pOut = 0.0f;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800166a:	bf00      	nop
			//printf("Resultado: %d\n", (int)modulo);
			//printf("\n");
		//}
		osDelay(5);
 800166c:	2005      	movs	r0, #5
 800166e:	f003 faf5 	bl	8004c5c <osDelay>
		BSP_ACCELERO_GetXYZ(xyz);
 8001672:	bf00      	nop
 8001674:	e7bc      	b.n	80015f0 <tk_ReadAccel+0x8>
 8001676:	bf00      	nop
 8001678:	20000278 	.word	0x20000278
 800167c:	20000280 	.word	0x20000280

08001680 <tk_WriteLED>:
	}
}

void tk_WriteLED(void *argument){
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	for(;;) {
		write_t* data = (write_t*)argument;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	60fb      	str	r3, [r7, #12]
		if (modulo >= TH_ACC_WARN && modulo < TH_ACC_DANGER){
 800168c:	4b35      	ldr	r3, [pc, #212]	@ (8001764 <tk_WriteLED+0xe4>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001768 <tk_WriteLED+0xe8>
 8001696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169e:	db2d      	blt.n	80016fc <tk_WriteLED+0x7c>
 80016a0:	4b30      	ldr	r3, [pc, #192]	@ (8001764 <tk_WriteLED+0xe4>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800176c <tk_WriteLED+0xec>
 80016aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b2:	d523      	bpl.n	80016fc <tk_WriteLED+0x7c>
			__HAL_TIM_SET_COMPARE(data->htim, data->channel, 50);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <tk_WriteLED+0x48>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2232      	movs	r2, #50	@ 0x32
 80016c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016c6:	e046      	b.n	8001756 <tk_WriteLED+0xd6>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d105      	bne.n	80016dc <tk_WriteLED+0x5c>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2332      	movs	r3, #50	@ 0x32
 80016d8:	6393      	str	r3, [r2, #56]	@ 0x38
 80016da:	e03c      	b.n	8001756 <tk_WriteLED+0xd6>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d105      	bne.n	80016f0 <tk_WriteLED+0x70>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	2332      	movs	r3, #50	@ 0x32
 80016ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80016ee:	e032      	b.n	8001756 <tk_WriteLED+0xd6>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	2332      	movs	r3, #50	@ 0x32
 80016f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fa:	e02c      	b.n	8001756 <tk_WriteLED+0xd6>
		}
		else if (modulo >= TH_ACC_DANGER){
 80016fc:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <tk_WriteLED+0xe4>)
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800176c <tk_WriteLED+0xec>
 8001706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170e:	db22      	blt.n	8001756 <tk_WriteLED+0xd6>
			__HAL_TIM_SET_COMPARE(data->htim, data->channel, 90);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d105      	bne.n	8001724 <tk_WriteLED+0xa4>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	225a      	movs	r2, #90	@ 0x5a
 8001720:	635a      	str	r2, [r3, #52]	@ 0x34
 8001722:	e018      	b.n	8001756 <tk_WriteLED+0xd6>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d105      	bne.n	8001738 <tk_WriteLED+0xb8>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	235a      	movs	r3, #90	@ 0x5a
 8001734:	6393      	str	r3, [r2, #56]	@ 0x38
 8001736:	e00e      	b.n	8001756 <tk_WriteLED+0xd6>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b08      	cmp	r3, #8
 800173e:	d105      	bne.n	800174c <tk_WriteLED+0xcc>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	235a      	movs	r3, #90	@ 0x5a
 8001748:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800174a:	e004      	b.n	8001756 <tk_WriteLED+0xd6>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	235a      	movs	r3, #90	@ 0x5a
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40
		}
		osDelay(data->timeout);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f003 fa7e 	bl	8004c5c <osDelay>
	for(;;) {
 8001760:	e792      	b.n	8001688 <tk_WriteLED+0x8>
 8001762:	bf00      	nop
 8001764:	20000280 	.word	0x20000280
 8001768:	468ca000 	.word	0x468ca000
 800176c:	46b3b000 	.word	0x46b3b000

08001770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001770:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001774:	f7ff fed4 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001778:	480c      	ldr	r0, [pc, #48]	@ (80017ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800177a:	490d      	ldr	r1, [pc, #52]	@ (80017b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800177c:	4a0d      	ldr	r2, [pc, #52]	@ (80017b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0a      	ldr	r2, [pc, #40]	@ (80017b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001790:	4c0a      	ldr	r4, [pc, #40]	@ (80017bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179e:	f006 fd01 	bl	80081a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a2:	f7ff fa8f 	bl	8000cc4 <main>
  bx  lr    
 80017a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80017b4:	0800844c 	.word	0x0800844c
  ldr r2, =_sbss
 80017b8:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80017bc:	20004e08 	.word	0x20004e08

080017c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001804 <HAL_Init+0x40>)
 80017ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <HAL_Init+0x40>)
 80017da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a07      	ldr	r2, [pc, #28]	@ (8001804 <HAL_Init+0x40>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 f8d8 	bl	80019a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f2:	200f      	movs	r0, #15
 80017f4:	f7ff fdfa 	bl	80013ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f8:	f7ff fcbe 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023c00 	.word	0x40023c00

08001808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_IncTick+0x20>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_IncTick+0x24>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a04      	ldr	r2, [pc, #16]	@ (800182c <HAL_IncTick+0x24>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200000ac 	.word	0x200000ac
 800182c:	20000284 	.word	0x20000284

08001830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b03      	ldr	r3, [pc, #12]	@ (8001844 <HAL_GetTick+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000284 	.word	0x20000284

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	@ (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4907      	ldr	r1, [pc, #28]	@ (80018e4 <__NVIC_EnableIRQ+0x38>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	@ (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	@ (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	@ 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	@ 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ff4c 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ca:	f7ff ff61 	bl	8001890 <__NVIC_GetPriorityGrouping>
 80019ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	6978      	ldr	r0, [r7, #20]
 80019d6:	f7ff ffb1 	bl	800193c <NVIC_EncodePriority>
 80019da:	4602      	mov	r2, r0
 80019dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff80 	bl	80018e8 <__NVIC_SetPriority>
}
 80019e8:	bf00      	nop
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff54 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	@ 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	e159      	b.n	8001cdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	f040 8148 	bne.w	8001cd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d005      	beq.n	8001a5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d130      	bne.n	8001ac0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 0201 	and.w	r2, r3, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d017      	beq.n	8001afc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d123      	bne.n	8001b50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	220f      	movs	r2, #15
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3208      	adds	r2, #8
 8001b4a:	69b9      	ldr	r1, [r7, #24]
 8001b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80a2 	beq.w	8001cd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b57      	ldr	r3, [pc, #348]	@ (8001cf4 <HAL_GPIO_Init+0x2e8>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	4a56      	ldr	r2, [pc, #344]	@ (8001cf4 <HAL_GPIO_Init+0x2e8>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba2:	4b54      	ldr	r3, [pc, #336]	@ (8001cf4 <HAL_GPIO_Init+0x2e8>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bae:	4a52      	ldr	r2, [pc, #328]	@ (8001cf8 <HAL_GPIO_Init+0x2ec>)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a49      	ldr	r2, [pc, #292]	@ (8001cfc <HAL_GPIO_Init+0x2f0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d019      	beq.n	8001c0e <HAL_GPIO_Init+0x202>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a48      	ldr	r2, [pc, #288]	@ (8001d00 <HAL_GPIO_Init+0x2f4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_GPIO_Init+0x1fe>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a47      	ldr	r2, [pc, #284]	@ (8001d04 <HAL_GPIO_Init+0x2f8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00d      	beq.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a46      	ldr	r2, [pc, #280]	@ (8001d08 <HAL_GPIO_Init+0x2fc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d007      	beq.n	8001c02 <HAL_GPIO_Init+0x1f6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a45      	ldr	r2, [pc, #276]	@ (8001d0c <HAL_GPIO_Init+0x300>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_GPIO_Init+0x1f2>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	e008      	b.n	8001c10 <HAL_GPIO_Init+0x204>
 8001bfe:	2307      	movs	r3, #7
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x204>
 8001c02:	2303      	movs	r3, #3
 8001c04:	e004      	b.n	8001c10 <HAL_GPIO_Init+0x204>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_Init+0x204>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_GPIO_Init+0x204>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	f002 0203 	and.w	r2, r2, #3
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	4093      	lsls	r3, r2
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c20:	4935      	ldr	r1, [pc, #212]	@ (8001cf8 <HAL_GPIO_Init+0x2ec>)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2e:	4b38      	ldr	r3, [pc, #224]	@ (8001d10 <HAL_GPIO_Init+0x304>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c52:	4a2f      	ldr	r2, [pc, #188]	@ (8001d10 <HAL_GPIO_Init+0x304>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c58:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <HAL_GPIO_Init+0x304>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c7c:	4a24      	ldr	r2, [pc, #144]	@ (8001d10 <HAL_GPIO_Init+0x304>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c82:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <HAL_GPIO_Init+0x304>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d10 <HAL_GPIO_Init+0x304>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cac:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HAL_GPIO_Init+0x304>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d10 <HAL_GPIO_Init+0x304>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	f67f aea2 	bls.w	8001a28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3724      	adds	r7, #36	@ 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40020800 	.word	0x40020800
 8001d08:	40020c00 	.word	0x40020c00
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40013c00 	.word	0x40013c00

08001d14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e0bb      	b.n	8001ea8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d30:	2201      	movs	r2, #1
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	f040 80ab 	bne.w	8001ea2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001d4c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ec0 <HAL_GPIO_DeInit+0x1ac>)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	3302      	adds	r3, #2
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	220f      	movs	r2, #15
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a54      	ldr	r2, [pc, #336]	@ (8001ec4 <HAL_GPIO_DeInit+0x1b0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d019      	beq.n	8001daa <HAL_GPIO_DeInit+0x96>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a53      	ldr	r2, [pc, #332]	@ (8001ec8 <HAL_GPIO_DeInit+0x1b4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_DeInit+0x92>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a52      	ldr	r2, [pc, #328]	@ (8001ecc <HAL_GPIO_DeInit+0x1b8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00d      	beq.n	8001da2 <HAL_GPIO_DeInit+0x8e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a51      	ldr	r2, [pc, #324]	@ (8001ed0 <HAL_GPIO_DeInit+0x1bc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d007      	beq.n	8001d9e <HAL_GPIO_DeInit+0x8a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a50      	ldr	r2, [pc, #320]	@ (8001ed4 <HAL_GPIO_DeInit+0x1c0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_GPIO_DeInit+0x86>
 8001d96:	2304      	movs	r3, #4
 8001d98:	e008      	b.n	8001dac <HAL_GPIO_DeInit+0x98>
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_DeInit+0x98>
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e004      	b.n	8001dac <HAL_GPIO_DeInit+0x98>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e002      	b.n	8001dac <HAL_GPIO_DeInit+0x98>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_GPIO_DeInit+0x98>
 8001daa:	2300      	movs	r3, #0
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	f002 0203 	and.w	r2, r2, #3
 8001db2:	0092      	lsls	r2, r2, #2
 8001db4:	4093      	lsls	r3, r2
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d132      	bne.n	8001e22 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001dbc:	4b46      	ldr	r3, [pc, #280]	@ (8001ed8 <HAL_GPIO_DeInit+0x1c4>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	4944      	ldr	r1, [pc, #272]	@ (8001ed8 <HAL_GPIO_DeInit+0x1c4>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001dca:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <HAL_GPIO_DeInit+0x1c4>)
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	4941      	ldr	r1, [pc, #260]	@ (8001ed8 <HAL_GPIO_DeInit+0x1c4>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ed8 <HAL_GPIO_DeInit+0x1c4>)
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	493d      	ldr	r1, [pc, #244]	@ (8001ed8 <HAL_GPIO_DeInit+0x1c4>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001de6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ed8 <HAL_GPIO_DeInit+0x1c4>)
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	493a      	ldr	r1, [pc, #232]	@ (8001ed8 <HAL_GPIO_DeInit+0x1c4>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001e04:	4a2e      	ldr	r2, [pc, #184]	@ (8001ec0 <HAL_GPIO_DeInit+0x1ac>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	43da      	mvns	r2, r3
 8001e14:	482a      	ldr	r0, [pc, #168]	@ (8001ec0 <HAL_GPIO_DeInit+0x1ac>)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	400a      	ands	r2, r1
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2103      	movs	r1, #3
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	401a      	ands	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	08d2      	lsrs	r2, r2, #3
 8001e58:	4019      	ands	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2103      	movs	r1, #3
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2103      	movs	r1, #3
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	f67f af40 	bls.w	8001d30 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40013800 	.word	0x40013800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40013c00 	.word	0x40013c00

08001edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef8:	e003      	b.n	8001f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	041a      	lsls	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	619a      	str	r2, [r3, #24]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f20:	887a      	ldrh	r2, [r7, #2]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4013      	ands	r3, r2
 8001f26:	041a      	lsls	r2, r3, #16
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	400b      	ands	r3, r1
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	619a      	str	r2, [r3, #24]
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e12b      	b.n	80021ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff f930 	bl	80011d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2224      	movs	r2, #36	@ 0x24
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fa8:	f001 fc9e 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 8001fac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4a81      	ldr	r2, [pc, #516]	@ (80021b8 <HAL_I2C_Init+0x274>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d807      	bhi.n	8001fc8 <HAL_I2C_Init+0x84>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a80      	ldr	r2, [pc, #512]	@ (80021bc <HAL_I2C_Init+0x278>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	bf94      	ite	ls
 8001fc0:	2301      	movls	r3, #1
 8001fc2:	2300      	movhi	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e006      	b.n	8001fd6 <HAL_I2C_Init+0x92>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a7d      	ldr	r2, [pc, #500]	@ (80021c0 <HAL_I2C_Init+0x27c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	bf94      	ite	ls
 8001fd0:	2301      	movls	r3, #1
 8001fd2:	2300      	movhi	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0e7      	b.n	80021ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4a78      	ldr	r2, [pc, #480]	@ (80021c4 <HAL_I2C_Init+0x280>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0c9b      	lsrs	r3, r3, #18
 8001fe8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4a6a      	ldr	r2, [pc, #424]	@ (80021b8 <HAL_I2C_Init+0x274>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d802      	bhi.n	8002018 <HAL_I2C_Init+0xd4>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3301      	adds	r3, #1
 8002016:	e009      	b.n	800202c <HAL_I2C_Init+0xe8>
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	4a69      	ldr	r2, [pc, #420]	@ (80021c8 <HAL_I2C_Init+0x284>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	099b      	lsrs	r3, r3, #6
 800202a:	3301      	adds	r3, #1
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	430b      	orrs	r3, r1
 8002032:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800203e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	495c      	ldr	r1, [pc, #368]	@ (80021b8 <HAL_I2C_Init+0x274>)
 8002048:	428b      	cmp	r3, r1
 800204a:	d819      	bhi.n	8002080 <HAL_I2C_Init+0x13c>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1e59      	subs	r1, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fbb1 f3f3 	udiv	r3, r1, r3
 800205a:	1c59      	adds	r1, r3, #1
 800205c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002060:	400b      	ands	r3, r1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_I2C_Init+0x138>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1e59      	subs	r1, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fbb1 f3f3 	udiv	r3, r1, r3
 8002074:	3301      	adds	r3, #1
 8002076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207a:	e051      	b.n	8002120 <HAL_I2C_Init+0x1dc>
 800207c:	2304      	movs	r3, #4
 800207e:	e04f      	b.n	8002120 <HAL_I2C_Init+0x1dc>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d111      	bne.n	80020ac <HAL_I2C_Init+0x168>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1e58      	subs	r0, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	440b      	add	r3, r1
 8002096:	fbb0 f3f3 	udiv	r3, r0, r3
 800209a:	3301      	adds	r3, #1
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e012      	b.n	80020d2 <HAL_I2C_Init+0x18e>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e58      	subs	r0, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	0099      	lsls	r1, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Init+0x196>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e022      	b.n	8002120 <HAL_I2C_Init+0x1dc>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10e      	bne.n	8002100 <HAL_I2C_Init+0x1bc>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1e58      	subs	r0, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6859      	ldr	r1, [r3, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	440b      	add	r3, r1
 80020f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020fe:	e00f      	b.n	8002120 <HAL_I2C_Init+0x1dc>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1e58      	subs	r0, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6859      	ldr	r1, [r3, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	0099      	lsls	r1, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	fbb0 f3f3 	udiv	r3, r0, r3
 8002116:	3301      	adds	r3, #1
 8002118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	6809      	ldr	r1, [r1, #0]
 8002124:	4313      	orrs	r3, r2
 8002126:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800214e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6911      	ldr	r1, [r2, #16]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68d2      	ldr	r2, [r2, #12]
 800215a:	4311      	orrs	r1, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	430b      	orrs	r3, r1
 8002162:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	000186a0 	.word	0x000186a0
 80021bc:	001e847f 	.word	0x001e847f
 80021c0:	003d08ff 	.word	0x003d08ff
 80021c4:	431bde83 	.word	0x431bde83
 80021c8:	10624dd3 	.word	0x10624dd3

080021cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e021      	b.n	8002222 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2224      	movs	r2, #36	@ 0x24
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff f832 	bl	8001260 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	4608      	mov	r0, r1
 8002236:	4611      	mov	r1, r2
 8002238:	461a      	mov	r2, r3
 800223a:	4603      	mov	r3, r0
 800223c:	817b      	strh	r3, [r7, #10]
 800223e:	460b      	mov	r3, r1
 8002240:	813b      	strh	r3, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002246:	f7ff faf3 	bl	8001830 <HAL_GetTick>
 800224a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b20      	cmp	r3, #32
 8002256:	f040 80d9 	bne.w	800240c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	2319      	movs	r3, #25
 8002260:	2201      	movs	r2, #1
 8002262:	496d      	ldr	r1, [pc, #436]	@ (8002418 <HAL_I2C_Mem_Write+0x1ec>)
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fc99 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002270:	2302      	movs	r3, #2
 8002272:	e0cc      	b.n	800240e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_I2C_Mem_Write+0x56>
 800227e:	2302      	movs	r3, #2
 8002280:	e0c5      	b.n	800240e <HAL_I2C_Mem_Write+0x1e2>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d007      	beq.n	80022a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2221      	movs	r2, #33	@ 0x21
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2240      	movs	r2, #64	@ 0x40
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a3a      	ldr	r2, [r7, #32]
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a4d      	ldr	r2, [pc, #308]	@ (800241c <HAL_I2C_Mem_Write+0x1f0>)
 80022e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022ea:	88f8      	ldrh	r0, [r7, #6]
 80022ec:	893a      	ldrh	r2, [r7, #8]
 80022ee:	8979      	ldrh	r1, [r7, #10]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	4603      	mov	r3, r0
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fad0 	bl	80028a0 <I2C_RequestMemoryWrite>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d052      	beq.n	80023ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e081      	b.n	800240e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fd5e 	bl	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00d      	beq.n	8002336 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	2b04      	cmp	r3, #4
 8002320:	d107      	bne.n	8002332 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002330:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e06b      	b.n	800240e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b04      	cmp	r3, #4
 8002372:	d11b      	bne.n	80023ac <HAL_I2C_Mem_Write+0x180>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002378:	2b00      	cmp	r3, #0
 800237a:	d017      	beq.n	80023ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002380:	781a      	ldrb	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1aa      	bne.n	800230a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 fd51 	bl	8002e60 <I2C_WaitOnBTFFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d107      	bne.n	80023dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e016      	b.n	800240e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	e000      	b.n	800240e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800240c:	2302      	movs	r3, #2
  }
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	00100002 	.word	0x00100002
 800241c:	ffff0000 	.word	0xffff0000

08002420 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08c      	sub	sp, #48	@ 0x30
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	4608      	mov	r0, r1
 800242a:	4611      	mov	r1, r2
 800242c:	461a      	mov	r2, r3
 800242e:	4603      	mov	r3, r0
 8002430:	817b      	strh	r3, [r7, #10]
 8002432:	460b      	mov	r3, r1
 8002434:	813b      	strh	r3, [r7, #8]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800243a:	f7ff f9f9 	bl	8001830 <HAL_GetTick>
 800243e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b20      	cmp	r3, #32
 800244a:	f040 8214 	bne.w	8002876 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2319      	movs	r3, #25
 8002454:	2201      	movs	r2, #1
 8002456:	497b      	ldr	r1, [pc, #492]	@ (8002644 <HAL_I2C_Mem_Read+0x224>)
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fb9f 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002464:	2302      	movs	r3, #2
 8002466:	e207      	b.n	8002878 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_I2C_Mem_Read+0x56>
 8002472:	2302      	movs	r3, #2
 8002474:	e200      	b.n	8002878 <HAL_I2C_Mem_Read+0x458>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d007      	beq.n	800249c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2222      	movs	r2, #34	@ 0x22
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2240      	movs	r2, #64	@ 0x40
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80024cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4a5b      	ldr	r2, [pc, #364]	@ (8002648 <HAL_I2C_Mem_Read+0x228>)
 80024dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024de:	88f8      	ldrh	r0, [r7, #6]
 80024e0:	893a      	ldrh	r2, [r7, #8]
 80024e2:	8979      	ldrh	r1, [r7, #10]
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	4603      	mov	r3, r0
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fa6c 	bl	80029cc <I2C_RequestMemoryRead>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e1bc      	b.n	8002878 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002502:	2b00      	cmp	r3, #0
 8002504:	d113      	bne.n	800252e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	623b      	str	r3, [r7, #32]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	623b      	str	r3, [r7, #32]
 800251a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e190      	b.n	8002850 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002532:	2b01      	cmp	r3, #1
 8002534:	d11b      	bne.n	800256e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e170      	b.n	8002850 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002572:	2b02      	cmp	r3, #2
 8002574:	d11b      	bne.n	80025ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002584:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	e150      	b.n	8002850 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025c4:	e144      	b.n	8002850 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	f200 80f1 	bhi.w	80027b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d123      	bne.n	8002620 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fc87 	bl	8002ef0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e145      	b.n	8002878 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800261e:	e117      	b.n	8002850 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002624:	2b02      	cmp	r3, #2
 8002626:	d14e      	bne.n	80026c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262e:	2200      	movs	r2, #0
 8002630:	4906      	ldr	r1, [pc, #24]	@ (800264c <HAL_I2C_Mem_Read+0x22c>)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fab2 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e11a      	b.n	8002878 <HAL_I2C_Mem_Read+0x458>
 8002642:	bf00      	nop
 8002644:	00100002 	.word	0x00100002
 8002648:	ffff0000 	.word	0xffff0000
 800264c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800265e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026c4:	e0c4      	b.n	8002850 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026cc:	2200      	movs	r2, #0
 80026ce:	496c      	ldr	r1, [pc, #432]	@ (8002880 <HAL_I2C_Mem_Read+0x460>)
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fa63 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0cb      	b.n	8002878 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002728:	2200      	movs	r2, #0
 800272a:	4955      	ldr	r1, [pc, #340]	@ (8002880 <HAL_I2C_Mem_Read+0x460>)
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 fa35 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e09d      	b.n	8002878 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800274a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027b0:	e04e      	b.n	8002850 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fb9a 	bl	8002ef0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e058      	b.n	8002878 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b04      	cmp	r3, #4
 8002804:	d124      	bne.n	8002850 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280a:	2b03      	cmp	r3, #3
 800280c:	d107      	bne.n	800281e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800281c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002854:	2b00      	cmp	r3, #0
 8002856:	f47f aeb6 	bne.w	80025c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	3728      	adds	r7, #40	@ 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	00010004 	.word	0x00010004

08002884 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002892:	b2db      	uxtb	r3, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	461a      	mov	r2, r3
 80028ae:	4603      	mov	r3, r0
 80028b0:	817b      	strh	r3, [r7, #10]
 80028b2:	460b      	mov	r3, r1
 80028b4:	813b      	strh	r3, [r7, #8]
 80028b6:	4613      	mov	r3, r2
 80028b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f960 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028f0:	d103      	bne.n	80028fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e05f      	b.n	80029be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028fe:	897b      	ldrh	r3, [r7, #10]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800290c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	492d      	ldr	r1, [pc, #180]	@ (80029c8 <I2C_RequestMemoryWrite+0x128>)
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f9bb 	bl	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e04c      	b.n	80029be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800293a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800293c:	6a39      	ldr	r1, [r7, #32]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fa46 	bl	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	2b04      	cmp	r3, #4
 8002950:	d107      	bne.n	8002962 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002960:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e02b      	b.n	80029be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d105      	bne.n	8002978 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800296c:	893b      	ldrh	r3, [r7, #8]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	611a      	str	r2, [r3, #16]
 8002976:	e021      	b.n	80029bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002978:	893b      	ldrh	r3, [r7, #8]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	b29b      	uxth	r3, r3
 800297e:	b2da      	uxtb	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002988:	6a39      	ldr	r1, [r7, #32]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fa20 	bl	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	2b04      	cmp	r3, #4
 800299c:	d107      	bne.n	80029ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e005      	b.n	80029be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029b2:	893b      	ldrh	r3, [r7, #8]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	00010002 	.word	0x00010002

080029cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	4608      	mov	r0, r1
 80029d6:	4611      	mov	r1, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	817b      	strh	r3, [r7, #10]
 80029de:	460b      	mov	r3, r1
 80029e0:	813b      	strh	r3, [r7, #8]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f8c2 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00d      	beq.n	8002a3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a2c:	d103      	bne.n	8002a36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e0aa      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a3a:	897b      	ldrh	r3, [r7, #10]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	6a3a      	ldr	r2, [r7, #32]
 8002a4e:	4952      	ldr	r1, [pc, #328]	@ (8002b98 <I2C_RequestMemoryRead+0x1cc>)
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f91d 	bl	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e097      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a78:	6a39      	ldr	r1, [r7, #32]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f9a8 	bl	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00d      	beq.n	8002aa2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d107      	bne.n	8002a9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e076      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa8:	893b      	ldrh	r3, [r7, #8]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	611a      	str	r2, [r3, #16]
 8002ab2:	e021      	b.n	8002af8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ab4:	893b      	ldrh	r3, [r7, #8]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac4:	6a39      	ldr	r1, [r7, #32]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f982 	bl	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d107      	bne.n	8002aea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e050      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aee:	893b      	ldrh	r3, [r7, #8]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002afa:	6a39      	ldr	r1, [r7, #32]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f967 	bl	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00d      	beq.n	8002b24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d107      	bne.n	8002b20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e035      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f82b 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00d      	beq.n	8002b68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b5a:	d103      	bne.n	8002b64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e013      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b68:	897b      	ldrh	r3, [r7, #10]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	6a3a      	ldr	r2, [r7, #32]
 8002b7c:	4906      	ldr	r1, [pc, #24]	@ (8002b98 <I2C_RequestMemoryRead+0x1cc>)
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f886 	bl	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	00010002 	.word	0x00010002

08002b9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bac:	e048      	b.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d044      	beq.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb6:	f7fe fe3b 	bl	8001830 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d302      	bcc.n	8002bcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d139      	bne.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	0c1b      	lsrs	r3, r3, #16
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10d      	bne.n	8002bf2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	43da      	mvns	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4013      	ands	r3, r2
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	e00c      	b.n	8002c0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	43da      	mvns	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d116      	bne.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e023      	b.n	8002c88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	0c1b      	lsrs	r3, r3, #16
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d10d      	bne.n	8002c66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	43da      	mvns	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	4013      	ands	r3, r2
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2301      	moveq	r3, #1
 8002c5e:	2300      	movne	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	e00c      	b.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	43da      	mvns	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4013      	ands	r3, r2
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d093      	beq.n	8002bae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c9e:	e071      	b.n	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cae:	d123      	bne.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	f043 0204 	orr.w	r2, r3, #4
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e067      	b.n	8002dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfe:	d041      	beq.n	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d00:	f7fe fd96 	bl	8001830 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d302      	bcc.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d136      	bne.n	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	0c1b      	lsrs	r3, r3, #16
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d10c      	bne.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	bf14      	ite	ne
 8002d32:	2301      	movne	r3, #1
 8002d34:	2300      	moveq	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	e00b      	b.n	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	43da      	mvns	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	4013      	ands	r3, r2
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf14      	ite	ne
 8002d4c:	2301      	movne	r3, #1
 8002d4e:	2300      	moveq	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e021      	b.n	8002dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	0c1b      	lsrs	r3, r3, #16
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d10c      	bne.n	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	43da      	mvns	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf14      	ite	ne
 8002da0:	2301      	movne	r3, #1
 8002da2:	2300      	moveq	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e00b      	b.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	43da      	mvns	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4013      	ands	r3, r2
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf14      	ite	ne
 8002dba:	2301      	movne	r3, #1
 8002dbc:	2300      	moveq	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f47f af6d 	bne.w	8002ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ddc:	e034      	b.n	8002e48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f8e3 	bl	8002faa <I2C_IsAcknowledgeFailed>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e034      	b.n	8002e58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d028      	beq.n	8002e48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fe fd1b 	bl	8001830 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11d      	bne.n	8002e48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e16:	2b80      	cmp	r3, #128	@ 0x80
 8002e18:	d016      	beq.n	8002e48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e007      	b.n	8002e58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e52:	2b80      	cmp	r3, #128	@ 0x80
 8002e54:	d1c3      	bne.n	8002dde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e6c:	e034      	b.n	8002ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f89b 	bl	8002faa <I2C_IsAcknowledgeFailed>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e034      	b.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d028      	beq.n	8002ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e86:	f7fe fcd3 	bl	8001830 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d302      	bcc.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d11d      	bne.n	8002ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d016      	beq.n	8002ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	f043 0220 	orr.w	r2, r3, #32
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e007      	b.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d1c3      	bne.n	8002e6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002efc:	e049      	b.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d119      	bne.n	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0210 	mvn.w	r2, #16
 8002f14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e030      	b.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f40:	f7fe fc76 	bl	8001830 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d302      	bcc.n	8002f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d11d      	bne.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f60:	2b40      	cmp	r3, #64	@ 0x40
 8002f62:	d016      	beq.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	f043 0220 	orr.w	r2, r3, #32
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e007      	b.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9c:	2b40      	cmp	r3, #64	@ 0x40
 8002f9e:	d1ae      	bne.n	8002efe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc0:	d11b      	bne.n	8002ffa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	f043 0204 	orr.w	r2, r3, #4
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e267      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d075      	beq.n	8003112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003026:	4b88      	ldr	r3, [pc, #544]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b04      	cmp	r3, #4
 8003030:	d00c      	beq.n	800304c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003032:	4b85      	ldr	r3, [pc, #532]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800303a:	2b08      	cmp	r3, #8
 800303c:	d112      	bne.n	8003064 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800303e:	4b82      	ldr	r3, [pc, #520]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003046:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800304a:	d10b      	bne.n	8003064 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	4b7e      	ldr	r3, [pc, #504]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d05b      	beq.n	8003110 <HAL_RCC_OscConfig+0x108>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d157      	bne.n	8003110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e242      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800306c:	d106      	bne.n	800307c <HAL_RCC_OscConfig+0x74>
 800306e:	4b76      	ldr	r3, [pc, #472]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a75      	ldr	r2, [pc, #468]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e01d      	b.n	80030b8 <HAL_RCC_OscConfig+0xb0>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x98>
 8003086:	4b70      	ldr	r3, [pc, #448]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6f      	ldr	r2, [pc, #444]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 800308c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b6d      	ldr	r3, [pc, #436]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a6c      	ldr	r2, [pc, #432]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0xb0>
 80030a0:	4b69      	ldr	r3, [pc, #420]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a68      	ldr	r2, [pc, #416]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 80030a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4b66      	ldr	r3, [pc, #408]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a65      	ldr	r2, [pc, #404]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 80030b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fbb6 	bl	8001830 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fe fbb2 	bl	8001830 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	@ 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e207      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b5b      	ldr	r3, [pc, #364]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0xc0>
 80030e6:	e014      	b.n	8003112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe fba2 	bl	8001830 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe fb9e 	bl	8001830 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	@ 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1f3      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	4b51      	ldr	r3, [pc, #324]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0xe8>
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d063      	beq.n	80031e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800311e:	4b4a      	ldr	r3, [pc, #296]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312a:	4b47      	ldr	r3, [pc, #284]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003132:	2b08      	cmp	r3, #8
 8003134:	d11c      	bne.n	8003170 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003136:	4b44      	ldr	r3, [pc, #272]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d116      	bne.n	8003170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	4b41      	ldr	r3, [pc, #260]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x152>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e1c7      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b3b      	ldr	r3, [pc, #236]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4937      	ldr	r1, [pc, #220]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316e:	e03a      	b.n	80031e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003178:	4b34      	ldr	r3, [pc, #208]	@ (800324c <HAL_RCC_OscConfig+0x244>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fe fb57 	bl	8001830 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003186:	f7fe fb53 	bl	8001830 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e1a8      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	4b2b      	ldr	r3, [pc, #172]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b28      	ldr	r3, [pc, #160]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4925      	ldr	r1, [pc, #148]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
 80031b8:	e015      	b.n	80031e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ba:	4b24      	ldr	r3, [pc, #144]	@ (800324c <HAL_RCC_OscConfig+0x244>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fb36 	bl	8001830 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fe fb32 	bl	8001830 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e187      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d036      	beq.n	8003260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d016      	beq.n	8003228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fa:	4b15      	ldr	r3, [pc, #84]	@ (8003250 <HAL_RCC_OscConfig+0x248>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fe fb16 	bl	8001830 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003208:	f7fe fb12 	bl	8001830 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e167      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	4b0b      	ldr	r3, [pc, #44]	@ (8003248 <HAL_RCC_OscConfig+0x240>)
 800321c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x200>
 8003226:	e01b      	b.n	8003260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003228:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <HAL_RCC_OscConfig+0x248>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7fe faff 	bl	8001830 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	e00e      	b.n	8003254 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003236:	f7fe fafb 	bl	8001830 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d907      	bls.n	8003254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e150      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
 8003248:	40023800 	.word	0x40023800
 800324c:	42470000 	.word	0x42470000
 8003250:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	4b88      	ldr	r3, [pc, #544]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ea      	bne.n	8003236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8097 	beq.w	800339c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b81      	ldr	r3, [pc, #516]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	4b7d      	ldr	r3, [pc, #500]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	4a7c      	ldr	r2, [pc, #496]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	@ 0x40
 800328e:	4b7a      	ldr	r3, [pc, #488]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	4b77      	ldr	r3, [pc, #476]	@ (800347c <HAL_RCC_OscConfig+0x474>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d118      	bne.n	80032dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032aa:	4b74      	ldr	r3, [pc, #464]	@ (800347c <HAL_RCC_OscConfig+0x474>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a73      	ldr	r2, [pc, #460]	@ (800347c <HAL_RCC_OscConfig+0x474>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b6:	f7fe fabb 	bl	8001830 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032be:	f7fe fab7 	bl	8001830 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e10c      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	4b6a      	ldr	r3, [pc, #424]	@ (800347c <HAL_RCC_OscConfig+0x474>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2ea>
 80032e4:	4b64      	ldr	r3, [pc, #400]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e8:	4a63      	ldr	r2, [pc, #396]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f0:	e01c      	b.n	800332c <HAL_RCC_OscConfig+0x324>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x30c>
 80032fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	@ 0x70
 8003306:	4b5c      	ldr	r3, [pc, #368]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330a:	4a5b      	ldr	r2, [pc, #364]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6713      	str	r3, [r2, #112]	@ 0x70
 8003312:	e00b      	b.n	800332c <HAL_RCC_OscConfig+0x324>
 8003314:	4b58      	ldr	r3, [pc, #352]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003318:	4a57      	ldr	r2, [pc, #348]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003320:	4b55      	ldr	r3, [pc, #340]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003324:	4a54      	ldr	r2, [pc, #336]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003326:	f023 0304 	bic.w	r3, r3, #4
 800332a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d015      	beq.n	8003360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fe fa7c 	bl	8001830 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fe fa78 	bl	8001830 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0cb      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	4b49      	ldr	r3, [pc, #292]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ee      	beq.n	800333c <HAL_RCC_OscConfig+0x334>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003360:	f7fe fa66 	bl	8001830 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fe fa62 	bl	8001830 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e0b5      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337e:	4b3e      	ldr	r3, [pc, #248]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ee      	bne.n	8003368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800338a:	7dfb      	ldrb	r3, [r7, #23]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003390:	4b39      	ldr	r3, [pc, #228]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	4a38      	ldr	r2, [pc, #224]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003396:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800339a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80a1 	beq.w	80034e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033a6:	4b34      	ldr	r3, [pc, #208]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d05c      	beq.n	800346c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d141      	bne.n	800343e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b31      	ldr	r3, [pc, #196]	@ (8003480 <HAL_RCC_OscConfig+0x478>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fe fa36 	bl	8001830 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe fa32 	bl	8001830 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e087      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	4b27      	ldr	r3, [pc, #156]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	019b      	lsls	r3, r3, #6
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	3b01      	subs	r3, #1
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	061b      	lsls	r3, r3, #24
 800340a:	491b      	ldr	r1, [pc, #108]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003410:	4b1b      	ldr	r3, [pc, #108]	@ (8003480 <HAL_RCC_OscConfig+0x478>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe fa0b 	bl	8001830 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341e:	f7fe fa07 	bl	8001830 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e05c      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003430:	4b11      	ldr	r3, [pc, #68]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x416>
 800343c:	e054      	b.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	4b10      	ldr	r3, [pc, #64]	@ (8003480 <HAL_RCC_OscConfig+0x478>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe f9f4 	bl	8001830 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe f9f0 	bl	8001830 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e045      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <HAL_RCC_OscConfig+0x470>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x444>
 800346a:	e03d      	b.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d107      	bne.n	8003484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e038      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
 8003478:	40023800 	.word	0x40023800
 800347c:	40007000 	.word	0x40007000
 8003480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003484:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <HAL_RCC_OscConfig+0x4ec>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d028      	beq.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d121      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d11a      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034b4:	4013      	ands	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034bc:	4293      	cmp	r3, r2
 80034be:	d111      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	3b01      	subs	r3, #1
 80034ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800

080034f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0cc      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800350c:	4b68      	ldr	r3, [pc, #416]	@ (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d90c      	bls.n	8003534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b65      	ldr	r3, [pc, #404]	@ (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b63      	ldr	r3, [pc, #396]	@ (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0b8      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800354c:	4b59      	ldr	r3, [pc, #356]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a58      	ldr	r2, [pc, #352]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003556:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003564:	4b53      	ldr	r3, [pc, #332]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a52      	ldr	r2, [pc, #328]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800356e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003570:	4b50      	ldr	r3, [pc, #320]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	494d      	ldr	r1, [pc, #308]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d044      	beq.n	8003618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	4b47      	ldr	r3, [pc, #284]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d119      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e07f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d003      	beq.n	80035b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b6:	4b3f      	ldr	r3, [pc, #252]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e06f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c6:	4b3b      	ldr	r3, [pc, #236]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e067      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d6:	4b37      	ldr	r3, [pc, #220]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4934      	ldr	r1, [pc, #208]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e8:	f7fe f922 	bl	8001830 <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f0:	f7fe f91e 	bl	8001830 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e04f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	4b2b      	ldr	r3, [pc, #172]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 020c 	and.w	r2, r3, #12
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	429a      	cmp	r2, r3
 8003616:	d1eb      	bne.n	80035f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003618:	4b25      	ldr	r3, [pc, #148]	@ (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d20c      	bcs.n	8003640 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b22      	ldr	r3, [pc, #136]	@ (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b20      	ldr	r3, [pc, #128]	@ (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e032      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364c:	4b19      	ldr	r3, [pc, #100]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4916      	ldr	r1, [pc, #88]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366a:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	490e      	ldr	r1, [pc, #56]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800367e:	f000 f821 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003682:	4602      	mov	r2, r0
 8003684:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	490a      	ldr	r1, [pc, #40]	@ (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003690:	5ccb      	ldrb	r3, [r1, r3]
 8003692:	fa22 f303 	lsr.w	r3, r2, r3
 8003696:	4a09      	ldr	r2, [pc, #36]	@ (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800369a:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd fea4 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023c00 	.word	0x40023c00
 80036b4:	40023800 	.word	0x40023800
 80036b8:	08008424 	.word	0x08008424
 80036bc:	20000074 	.word	0x20000074
 80036c0:	200000a8 	.word	0x200000a8

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c8:	b094      	sub	sp, #80	@ 0x50
 80036ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036dc:	4b79      	ldr	r3, [pc, #484]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d00d      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x40>
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	f200 80e1 	bhi.w	80038b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x34>
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x3a>
 80036f6:	e0db      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f8:	4b73      	ldr	r3, [pc, #460]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80036fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036fc:	e0db      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036fe:	4b73      	ldr	r3, [pc, #460]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003700:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003702:	e0d8      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003704:	4b6f      	ldr	r3, [pc, #444]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800370c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800370e:	4b6d      	ldr	r3, [pc, #436]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d063      	beq.n	80037e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371a:	4b6a      	ldr	r3, [pc, #424]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	2200      	movs	r2, #0
 8003722:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003724:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372c:	633b      	str	r3, [r7, #48]	@ 0x30
 800372e:	2300      	movs	r3, #0
 8003730:	637b      	str	r3, [r7, #52]	@ 0x34
 8003732:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003736:	4622      	mov	r2, r4
 8003738:	462b      	mov	r3, r5
 800373a:	f04f 0000 	mov.w	r0, #0
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	0159      	lsls	r1, r3, #5
 8003744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003748:	0150      	lsls	r0, r2, #5
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4621      	mov	r1, r4
 8003750:	1a51      	subs	r1, r2, r1
 8003752:	6139      	str	r1, [r7, #16]
 8003754:	4629      	mov	r1, r5
 8003756:	eb63 0301 	sbc.w	r3, r3, r1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003768:	4659      	mov	r1, fp
 800376a:	018b      	lsls	r3, r1, #6
 800376c:	4651      	mov	r1, sl
 800376e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003772:	4651      	mov	r1, sl
 8003774:	018a      	lsls	r2, r1, #6
 8003776:	4651      	mov	r1, sl
 8003778:	ebb2 0801 	subs.w	r8, r2, r1
 800377c:	4659      	mov	r1, fp
 800377e:	eb63 0901 	sbc.w	r9, r3, r1
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800378e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003796:	4690      	mov	r8, r2
 8003798:	4699      	mov	r9, r3
 800379a:	4623      	mov	r3, r4
 800379c:	eb18 0303 	adds.w	r3, r8, r3
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	462b      	mov	r3, r5
 80037a4:	eb49 0303 	adc.w	r3, r9, r3
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037b6:	4629      	mov	r1, r5
 80037b8:	024b      	lsls	r3, r1, #9
 80037ba:	4621      	mov	r1, r4
 80037bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037c0:	4621      	mov	r1, r4
 80037c2:	024a      	lsls	r2, r1, #9
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ca:	2200      	movs	r2, #0
 80037cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037d4:	f7fc fd04 	bl	80001e0 <__aeabi_uldivmod>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4613      	mov	r3, r2
 80037de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037e0:	e058      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e2:	4b38      	ldr	r3, [pc, #224]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	2200      	movs	r2, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	4611      	mov	r1, r2
 80037ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037f2:	623b      	str	r3, [r7, #32]
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037fc:	4642      	mov	r2, r8
 80037fe:	464b      	mov	r3, r9
 8003800:	f04f 0000 	mov.w	r0, #0
 8003804:	f04f 0100 	mov.w	r1, #0
 8003808:	0159      	lsls	r1, r3, #5
 800380a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800380e:	0150      	lsls	r0, r2, #5
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4641      	mov	r1, r8
 8003816:	ebb2 0a01 	subs.w	sl, r2, r1
 800381a:	4649      	mov	r1, r9
 800381c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800382c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003830:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003834:	ebb2 040a 	subs.w	r4, r2, sl
 8003838:	eb63 050b 	sbc.w	r5, r3, fp
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	00eb      	lsls	r3, r5, #3
 8003846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800384a:	00e2      	lsls	r2, r4, #3
 800384c:	4614      	mov	r4, r2
 800384e:	461d      	mov	r5, r3
 8003850:	4643      	mov	r3, r8
 8003852:	18e3      	adds	r3, r4, r3
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	464b      	mov	r3, r9
 8003858:	eb45 0303 	adc.w	r3, r5, r3
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800386a:	4629      	mov	r1, r5
 800386c:	028b      	lsls	r3, r1, #10
 800386e:	4621      	mov	r1, r4
 8003870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003874:	4621      	mov	r1, r4
 8003876:	028a      	lsls	r2, r1, #10
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800387e:	2200      	movs	r2, #0
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	61fa      	str	r2, [r7, #28]
 8003884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003888:	f7fc fcaa 	bl	80001e0 <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4613      	mov	r3, r2
 8003892:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003894:	4b0b      	ldr	r3, [pc, #44]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	3301      	adds	r3, #1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038ae:	e002      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b0:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3750      	adds	r7, #80	@ 0x50
 80038bc:	46bd      	mov	sp, r7
 80038be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	00f42400 	.word	0x00f42400
 80038cc:	007a1200 	.word	0x007a1200

080038d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d4:	4b03      	ldr	r3, [pc, #12]	@ (80038e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000074 	.word	0x20000074

080038e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038ec:	f7ff fff0 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	0a9b      	lsrs	r3, r3, #10
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4903      	ldr	r1, [pc, #12]	@ (800390c <HAL_RCC_GetPCLK1Freq+0x24>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40023800 	.word	0x40023800
 800390c:	08008434 	.word	0x08008434

08003910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003914:	f7ff ffdc 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	@ (8003930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0b5b      	lsrs	r3, r3, #13
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4903      	ldr	r1, [pc, #12]	@ (8003934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	08008434 	.word	0x08008434

08003938 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	220f      	movs	r2, #15
 8003946:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003948:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0203 	and.w	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003954:	4b0f      	ldr	r3, [pc, #60]	@ (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003960:	4b0c      	ldr	r3, [pc, #48]	@ (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800396c:	4b09      	ldr	r3, [pc, #36]	@ (8003994 <HAL_RCC_GetClockConfig+0x5c>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800397a:	4b07      	ldr	r3, [pc, #28]	@ (8003998 <HAL_RCC_GetClockConfig+0x60>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0207 	and.w	r2, r3, #7
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	601a      	str	r2, [r3, #0]
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	40023c00 	.word	0x40023c00

0800399c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e07b      	b.n	8003aa6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d108      	bne.n	80039c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039be:	d009      	beq.n	80039d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	61da      	str	r2, [r3, #28]
 80039c6:	e005      	b.n	80039d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd fc58 	bl	80012a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a58:	ea42 0103 	orr.w	r1, r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	f003 0104 	and.w	r1, r3, #4
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	f003 0210 	and.w	r2, r3, #16
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e041      	b.n	8003b44 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fd fc2d 	bl	8001334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f000 fc3b 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d001      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e044      	b.n	8003bee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1e      	ldr	r2, [pc, #120]	@ (8003bfc <HAL_TIM_Base_Start_IT+0xb0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d018      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b8e:	d013      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1a      	ldr	r2, [pc, #104]	@ (8003c00 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00e      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a19      	ldr	r2, [pc, #100]	@ (8003c04 <HAL_TIM_Base_Start_IT+0xb8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d009      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a17      	ldr	r2, [pc, #92]	@ (8003c08 <HAL_TIM_Base_Start_IT+0xbc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a16      	ldr	r2, [pc, #88]	@ (8003c0c <HAL_TIM_Base_Start_IT+0xc0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d111      	bne.n	8003bdc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b06      	cmp	r3, #6
 8003bc8:	d010      	beq.n	8003bec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0201 	orr.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bda:	e007      	b.n	8003bec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	40000c00 	.word	0x40000c00
 8003c0c:	40014000 	.word	0x40014000

08003c10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e041      	b.n	8003ca6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f839 	bl	8003cae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f000 fb8a 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <HAL_TIM_PWM_Start+0x24>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e022      	b.n	8003d2e <HAL_TIM_PWM_Start+0x6a>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d109      	bne.n	8003d02 <HAL_TIM_PWM_Start+0x3e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	bf14      	ite	ne
 8003cfa:	2301      	movne	r3, #1
 8003cfc:	2300      	moveq	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	e015      	b.n	8003d2e <HAL_TIM_PWM_Start+0x6a>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d109      	bne.n	8003d1c <HAL_TIM_PWM_Start+0x58>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	e008      	b.n	8003d2e <HAL_TIM_PWM_Start+0x6a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	bf14      	ite	ne
 8003d28:	2301      	movne	r3, #1
 8003d2a:	2300      	moveq	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e068      	b.n	8003e08 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Start+0x82>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d44:	e013      	b.n	8003d6e <HAL_TIM_PWM_Start+0xaa>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_PWM_Start+0x92>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d54:	e00b      	b.n	8003d6e <HAL_TIM_PWM_Start+0xaa>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_PWM_Start+0xa2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d64:	e003      	b.n	8003d6e <HAL_TIM_PWM_Start+0xaa>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2201      	movs	r2, #1
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fda8 	bl	80048cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a23      	ldr	r2, [pc, #140]	@ (8003e10 <HAL_TIM_PWM_Start+0x14c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d107      	bne.n	8003d96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003e10 <HAL_TIM_PWM_Start+0x14c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d018      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x10e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da8:	d013      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x10e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a19      	ldr	r2, [pc, #100]	@ (8003e14 <HAL_TIM_PWM_Start+0x150>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00e      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x10e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a17      	ldr	r2, [pc, #92]	@ (8003e18 <HAL_TIM_PWM_Start+0x154>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d009      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x10e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a16      	ldr	r2, [pc, #88]	@ (8003e1c <HAL_TIM_PWM_Start+0x158>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d004      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x10e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a14      	ldr	r2, [pc, #80]	@ (8003e20 <HAL_TIM_PWM_Start+0x15c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d111      	bne.n	8003df6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b06      	cmp	r3, #6
 8003de2:	d010      	beq.n	8003e06 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df4:	e007      	b.n	8003e06 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0201 	orr.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800
 8003e1c:	40000c00 	.word	0x40000c00
 8003e20:	40014000 	.word	0x40014000

08003e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d020      	beq.n	8003e88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01b      	beq.n	8003e88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0202 	mvn.w	r2, #2
 8003e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fa5b 	bl	800432a <HAL_TIM_IC_CaptureCallback>
 8003e74:	e005      	b.n	8003e82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fa4d 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fa5e 	bl	800433e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d020      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01b      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0204 	mvn.w	r2, #4
 8003ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fa35 	bl	800432a <HAL_TIM_IC_CaptureCallback>
 8003ec0:	e005      	b.n	8003ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fa27 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fa38 	bl	800433e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d020      	beq.n	8003f20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01b      	beq.n	8003f20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0208 	mvn.w	r2, #8
 8003ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fa0f 	bl	800432a <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa01 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fa12 	bl	800433e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d020      	beq.n	8003f6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01b      	beq.n	8003f6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0210 	mvn.w	r2, #16
 8003f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2208      	movs	r2, #8
 8003f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f9e9 	bl	800432a <HAL_TIM_IC_CaptureCallback>
 8003f58:	e005      	b.n	8003f66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9db 	bl	8004316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f9ec 	bl	800433e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00c      	beq.n	8003f90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d007      	beq.n	8003f90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0201 	mvn.w	r2, #1
 8003f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd f8dc 	bl	8001148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00c      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fd2a 	bl	8004a08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00c      	beq.n	8003fd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d007      	beq.n	8003fd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f9bd 	bl	8004352 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00c      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d007      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0220 	mvn.w	r2, #32
 8003ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fcfc 	bl	80049f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800401e:	2302      	movs	r3, #2
 8004020:	e0ae      	b.n	8004180 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	f200 809f 	bhi.w	8004170 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004032:	a201      	add	r2, pc, #4	@ (adr r2, 8004038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	0800406d 	.word	0x0800406d
 800403c:	08004171 	.word	0x08004171
 8004040:	08004171 	.word	0x08004171
 8004044:	08004171 	.word	0x08004171
 8004048:	080040ad 	.word	0x080040ad
 800404c:	08004171 	.word	0x08004171
 8004050:	08004171 	.word	0x08004171
 8004054:	08004171 	.word	0x08004171
 8004058:	080040ef 	.word	0x080040ef
 800405c:	08004171 	.word	0x08004171
 8004060:	08004171 	.word	0x08004171
 8004064:	08004171 	.word	0x08004171
 8004068:	0800412f 	.word	0x0800412f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fa04 	bl	8004480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0208 	orr.w	r2, r2, #8
 8004086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0204 	bic.w	r2, r2, #4
 8004096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6999      	ldr	r1, [r3, #24]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	619a      	str	r2, [r3, #24]
      break;
 80040aa:	e064      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fa4a 	bl	800454c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6999      	ldr	r1, [r3, #24]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	021a      	lsls	r2, r3, #8
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	619a      	str	r2, [r3, #24]
      break;
 80040ec:	e043      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fa95 	bl	8004624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0208 	orr.w	r2, r2, #8
 8004108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0204 	bic.w	r2, r2, #4
 8004118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69d9      	ldr	r1, [r3, #28]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	61da      	str	r2, [r3, #28]
      break;
 800412c:	e023      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fadf 	bl	80046f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69d9      	ldr	r1, [r3, #28]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	021a      	lsls	r2, r3, #8
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	61da      	str	r2, [r3, #28]
      break;
 800416e:	e002      	b.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	75fb      	strb	r3, [r7, #23]
      break;
 8004174:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800417e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_TIM_ConfigClockSource+0x1c>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e0b4      	b.n	800430e <HAL_TIM_ConfigClockSource+0x186>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041dc:	d03e      	beq.n	800425c <HAL_TIM_ConfigClockSource+0xd4>
 80041de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e2:	f200 8087 	bhi.w	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ea:	f000 8086 	beq.w	80042fa <HAL_TIM_ConfigClockSource+0x172>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f2:	d87f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041f4:	2b70      	cmp	r3, #112	@ 0x70
 80041f6:	d01a      	beq.n	800422e <HAL_TIM_ConfigClockSource+0xa6>
 80041f8:	2b70      	cmp	r3, #112	@ 0x70
 80041fa:	d87b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 80041fc:	2b60      	cmp	r3, #96	@ 0x60
 80041fe:	d050      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004200:	2b60      	cmp	r3, #96	@ 0x60
 8004202:	d877      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004204:	2b50      	cmp	r3, #80	@ 0x50
 8004206:	d03c      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0xfa>
 8004208:	2b50      	cmp	r3, #80	@ 0x50
 800420a:	d873      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 800420c:	2b40      	cmp	r3, #64	@ 0x40
 800420e:	d058      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004210:	2b40      	cmp	r3, #64	@ 0x40
 8004212:	d86f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004214:	2b30      	cmp	r3, #48	@ 0x30
 8004216:	d064      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004218:	2b30      	cmp	r3, #48	@ 0x30
 800421a:	d86b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d060      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d867      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05c      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d05a      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15a>
 800422c:	e062      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800423e:	f000 fb25 	bl	800488c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	609a      	str	r2, [r3, #8]
      break;
 800425a:	e04f      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800426c:	f000 fb0e 	bl	800488c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800427e:	609a      	str	r2, [r3, #8]
      break;
 8004280:	e03c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800428e:	461a      	mov	r2, r3
 8004290:	f000 fa82 	bl	8004798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2150      	movs	r1, #80	@ 0x50
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fadb 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 80042a0:	e02c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ae:	461a      	mov	r2, r3
 80042b0:	f000 faa1 	bl	80047f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2160      	movs	r1, #96	@ 0x60
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 facb 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 80042c0:	e01c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ce:	461a      	mov	r2, r3
 80042d0:	f000 fa62 	bl	8004798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2140      	movs	r1, #64	@ 0x40
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fabb 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 80042e0:	e00c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f000 fab2 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 80042f2:	e003      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      break;
 80042f8:	e000      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a3a      	ldr	r2, [pc, #232]	@ (8004464 <TIM_Base_SetConfig+0xfc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00f      	beq.n	80043a0 <TIM_Base_SetConfig+0x38>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004386:	d00b      	beq.n	80043a0 <TIM_Base_SetConfig+0x38>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a37      	ldr	r2, [pc, #220]	@ (8004468 <TIM_Base_SetConfig+0x100>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d007      	beq.n	80043a0 <TIM_Base_SetConfig+0x38>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a36      	ldr	r2, [pc, #216]	@ (800446c <TIM_Base_SetConfig+0x104>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_Base_SetConfig+0x38>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a35      	ldr	r2, [pc, #212]	@ (8004470 <TIM_Base_SetConfig+0x108>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d108      	bne.n	80043b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004464 <TIM_Base_SetConfig+0xfc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01b      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043c0:	d017      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a28      	ldr	r2, [pc, #160]	@ (8004468 <TIM_Base_SetConfig+0x100>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a27      	ldr	r2, [pc, #156]	@ (800446c <TIM_Base_SetConfig+0x104>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00f      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a26      	ldr	r2, [pc, #152]	@ (8004470 <TIM_Base_SetConfig+0x108>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00b      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a25      	ldr	r2, [pc, #148]	@ (8004474 <TIM_Base_SetConfig+0x10c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a24      	ldr	r2, [pc, #144]	@ (8004478 <TIM_Base_SetConfig+0x110>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a23      	ldr	r2, [pc, #140]	@ (800447c <TIM_Base_SetConfig+0x114>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d108      	bne.n	8004404 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a0e      	ldr	r2, [pc, #56]	@ (8004464 <TIM_Base_SetConfig+0xfc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d103      	bne.n	8004438 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b01      	cmp	r3, #1
 8004448:	d105      	bne.n	8004456 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f023 0201 	bic.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	611a      	str	r2, [r3, #16]
  }
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40010000 	.word	0x40010000
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800
 8004470:	40000c00 	.word	0x40000c00
 8004474:	40014000 	.word	0x40014000
 8004478:	40014400 	.word	0x40014400
 800447c:	40014800 	.word	0x40014800

08004480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f023 0201 	bic.w	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f023 0302 	bic.w	r3, r3, #2
 80044c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004548 <TIM_OC1_SetConfig+0xc8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10c      	bne.n	80044f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0308 	bic.w	r3, r3, #8
 80044e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f023 0304 	bic.w	r3, r3, #4
 80044f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a13      	ldr	r2, [pc, #76]	@ (8004548 <TIM_OC1_SetConfig+0xc8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d111      	bne.n	8004522 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800450c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	621a      	str	r2, [r3, #32]
}
 800453c:	bf00      	nop
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40010000 	.word	0x40010000

0800454c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f023 0210 	bic.w	r2, r3, #16
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800457a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0320 	bic.w	r3, r3, #32
 8004596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004620 <TIM_OC2_SetConfig+0xd4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d10d      	bne.n	80045c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a15      	ldr	r2, [pc, #84]	@ (8004620 <TIM_OC2_SetConfig+0xd4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d113      	bne.n	80045f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40010000 	.word	0x40010000

08004624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800466c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1d      	ldr	r2, [pc, #116]	@ (80046f4 <TIM_OC3_SetConfig+0xd0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10d      	bne.n	800469e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800469c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a14      	ldr	r2, [pc, #80]	@ (80046f4 <TIM_OC3_SetConfig+0xd0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d113      	bne.n	80046ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	621a      	str	r2, [r3, #32]
}
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	40010000 	.word	0x40010000

080046f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800472e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	031b      	lsls	r3, r3, #12
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a10      	ldr	r2, [pc, #64]	@ (8004794 <TIM_OC4_SetConfig+0x9c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d109      	bne.n	800476c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800475e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	019b      	lsls	r3, r3, #6
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000

08004798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f023 0201 	bic.w	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f023 030a 	bic.w	r3, r3, #10
 80047d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	621a      	str	r2, [r3, #32]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b087      	sub	sp, #28
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f023 0210 	bic.w	r2, r3, #16
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	031b      	lsls	r3, r3, #12
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004832:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	621a      	str	r2, [r3, #32]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	f043 0307 	orr.w	r3, r3, #7
 8004878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	609a      	str	r2, [r3, #8]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	021a      	lsls	r2, r3, #8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	609a      	str	r2, [r3, #8]
}
 80048c0:	bf00      	nop
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	2201      	movs	r2, #1
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1a      	ldr	r2, [r3, #32]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	401a      	ands	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	fa01 f303 	lsl.w	r3, r1, r3
 8004904:	431a      	orrs	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800492c:	2302      	movs	r3, #2
 800492e:	e050      	b.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1c      	ldr	r2, [pc, #112]	@ (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d018      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800497c:	d013      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a18      	ldr	r2, [pc, #96]	@ (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00e      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a16      	ldr	r2, [pc, #88]	@ (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d009      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a15      	ldr	r2, [pc, #84]	@ (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a13      	ldr	r2, [pc, #76]	@ (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d10c      	bne.n	80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40014000 	.word	0x40014000

080049f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <__NVIC_SetPriority>:
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	6039      	str	r1, [r7, #0]
 8004a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	db0a      	blt.n	8004a46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	490c      	ldr	r1, [pc, #48]	@ (8004a68 <__NVIC_SetPriority+0x4c>)
 8004a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3a:	0112      	lsls	r2, r2, #4
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	440b      	add	r3, r1
 8004a40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a44:	e00a      	b.n	8004a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4908      	ldr	r1, [pc, #32]	@ (8004a6c <__NVIC_SetPriority+0x50>)
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	3b04      	subs	r3, #4
 8004a54:	0112      	lsls	r2, r2, #4
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	440b      	add	r3, r1
 8004a5a:	761a      	strb	r2, [r3, #24]
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	e000e100 	.word	0xe000e100
 8004a6c:	e000ed00 	.word	0xe000ed00

08004a70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a74:	4b05      	ldr	r3, [pc, #20]	@ (8004a8c <SysTick_Handler+0x1c>)
 8004a76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a78:	f002 f8e4 	bl	8006c44 <xTaskGetSchedulerState>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d001      	beq.n	8004a86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a82:	f002 ffd9 	bl	8007a38 <xPortSysTickHandler>
  }
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	e000e010 	.word	0xe000e010

08004a90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a94:	2100      	movs	r1, #0
 8004a96:	f06f 0004 	mvn.w	r0, #4
 8004a9a:	f7ff ffbf 	bl	8004a1c <__NVIC_SetPriority>
#endif
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aaa:	f3ef 8305 	mrs	r3, IPSR
 8004aae:	603b      	str	r3, [r7, #0]
  return(result);
 8004ab0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004ab6:	f06f 0305 	mvn.w	r3, #5
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	e00c      	b.n	8004ad8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004abe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <osKernelInitialize+0x44>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d105      	bne.n	8004ad2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ac6:	4b08      	ldr	r3, [pc, #32]	@ (8004ae8 <osKernelInitialize+0x44>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	607b      	str	r3, [r7, #4]
 8004ad0:	e002      	b.n	8004ad8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ad8:	687b      	ldr	r3, [r7, #4]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000288 	.word	0x20000288

08004aec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004af2:	f3ef 8305 	mrs	r3, IPSR
 8004af6:	603b      	str	r3, [r7, #0]
  return(result);
 8004af8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004afe:	f06f 0305 	mvn.w	r3, #5
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	e010      	b.n	8004b28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b06:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <osKernelStart+0x48>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d109      	bne.n	8004b22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b0e:	f7ff ffbf 	bl	8004a90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b12:	4b08      	ldr	r3, [pc, #32]	@ (8004b34 <osKernelStart+0x48>)
 8004b14:	2202      	movs	r2, #2
 8004b16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b18:	f001 fc14 	bl	8006344 <vTaskStartScheduler>
      stat = osOK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	607b      	str	r3, [r7, #4]
 8004b20:	e002      	b.n	8004b28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b28:	687b      	ldr	r3, [r7, #4]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000288 	.word	0x20000288

08004b38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08e      	sub	sp, #56	@ 0x38
 8004b3c:	af04      	add	r7, sp, #16
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b48:	f3ef 8305 	mrs	r3, IPSR
 8004b4c:	617b      	str	r3, [r7, #20]
  return(result);
 8004b4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d17e      	bne.n	8004c52 <osThreadNew+0x11a>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d07b      	beq.n	8004c52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b5a:	2380      	movs	r3, #128	@ 0x80
 8004b5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b5e:	2318      	movs	r3, #24
 8004b60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004b66:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d045      	beq.n	8004bfe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <osThreadNew+0x48>
        name = attr->name;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <osThreadNew+0x6e>
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b38      	cmp	r3, #56	@ 0x38
 8004b98:	d805      	bhi.n	8004ba6 <osThreadNew+0x6e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <osThreadNew+0x72>
        return (NULL);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	e054      	b.n	8004c54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	089b      	lsrs	r3, r3, #2
 8004bb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00e      	beq.n	8004be0 <osThreadNew+0xa8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	2baf      	cmp	r3, #175	@ 0xaf
 8004bc8:	d90a      	bls.n	8004be0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d006      	beq.n	8004be0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <osThreadNew+0xa8>
        mem = 1;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	e010      	b.n	8004c02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10c      	bne.n	8004c02 <osThreadNew+0xca>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d108      	bne.n	8004c02 <osThreadNew+0xca>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d104      	bne.n	8004c02 <osThreadNew+0xca>
          mem = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61bb      	str	r3, [r7, #24]
 8004bfc:	e001      	b.n	8004c02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d110      	bne.n	8004c2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c10:	9202      	str	r2, [sp, #8]
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	6a3a      	ldr	r2, [r7, #32]
 8004c1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f001 f996 	bl	8005f50 <xTaskCreateStatic>
 8004c24:	4603      	mov	r3, r0
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	e013      	b.n	8004c52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d110      	bne.n	8004c52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	f107 0310 	add.w	r3, r7, #16
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f001 f9e4 	bl	8006010 <xTaskCreate>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d001      	beq.n	8004c52 <osThreadNew+0x11a>
            hTask = NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c52:	693b      	ldr	r3, [r7, #16]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3728      	adds	r7, #40	@ 0x28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c64:	f3ef 8305 	mrs	r3, IPSR
 8004c68:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <osDelay+0x1c>
    stat = osErrorISR;
 8004c70:	f06f 0305 	mvn.w	r3, #5
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	e007      	b.n	8004c88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 fb28 	bl	80062d8 <vTaskDelay>
    }
  }

  return (stat);
 8004c88:	68fb      	ldr	r3, [r7, #12]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b08a      	sub	sp, #40	@ 0x28
 8004c96:	af02      	add	r7, sp, #8
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca2:	f3ef 8305 	mrs	r3, IPSR
 8004ca6:	613b      	str	r3, [r7, #16]
  return(result);
 8004ca8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d175      	bne.n	8004d9a <osSemaphoreNew+0x108>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d072      	beq.n	8004d9a <osSemaphoreNew+0x108>
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d86e      	bhi.n	8004d9a <osSemaphoreNew+0x108>
    mem = -1;
 8004cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d015      	beq.n	8004cf4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d006      	beq.n	8004cde <osSemaphoreNew+0x4c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	2b4f      	cmp	r3, #79	@ 0x4f
 8004cd6:	d902      	bls.n	8004cde <osSemaphoreNew+0x4c>
        mem = 1;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	61bb      	str	r3, [r7, #24]
 8004cdc:	e00c      	b.n	8004cf8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d108      	bne.n	8004cf8 <osSemaphoreNew+0x66>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d104      	bne.n	8004cf8 <osSemaphoreNew+0x66>
          mem = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e001      	b.n	8004cf8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d04c      	beq.n	8004d9a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d128      	bne.n	8004d58 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d10a      	bne.n	8004d22 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2203      	movs	r2, #3
 8004d12:	9200      	str	r2, [sp, #0]
 8004d14:	2200      	movs	r2, #0
 8004d16:	2100      	movs	r1, #0
 8004d18:	2001      	movs	r0, #1
 8004d1a:	f000 f9e7 	bl	80050ec <xQueueGenericCreateStatic>
 8004d1e:	61f8      	str	r0, [r7, #28]
 8004d20:	e005      	b.n	8004d2e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004d22:	2203      	movs	r2, #3
 8004d24:	2100      	movs	r1, #0
 8004d26:	2001      	movs	r0, #1
 8004d28:	f000 fa5d 	bl	80051e6 <xQueueGenericCreate>
 8004d2c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d022      	beq.n	8004d7a <osSemaphoreNew+0xe8>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01f      	beq.n	8004d7a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2100      	movs	r1, #0
 8004d40:	69f8      	ldr	r0, [r7, #28]
 8004d42:	f000 fb1d 	bl	8005380 <xQueueGenericSend>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d016      	beq.n	8004d7a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004d4c:	69f8      	ldr	r0, [r7, #28]
 8004d4e:	f000 ff2b 	bl	8005ba8 <vQueueDelete>
            hSemaphore = NULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	e010      	b.n	8004d7a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d108      	bne.n	8004d70 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	461a      	mov	r2, r3
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fa9b 	bl	80052a2 <xQueueCreateCountingSemaphoreStatic>
 8004d6c:	61f8      	str	r0, [r7, #28]
 8004d6e:	e004      	b.n	8004d7a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 face 	bl	8005314 <xQueueCreateCountingSemaphore>
 8004d78:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00c      	beq.n	8004d9a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <osSemaphoreNew+0xfc>
          name = attr->name;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e001      	b.n	8004d92 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004d92:	6979      	ldr	r1, [r7, #20]
 8004d94:	69f8      	ldr	r0, [r7, #28]
 8004d96:	f001 f853 	bl	8005e40 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004d9a:	69fb      	ldr	r3, [r7, #28]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3720      	adds	r7, #32
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004dbc:	f06f 0303 	mvn.w	r3, #3
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	e039      	b.n	8004e38 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc4:	f3ef 8305 	mrs	r3, IPSR
 8004dc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dca:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d022      	beq.n	8004e16 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004dd6:	f06f 0303 	mvn.w	r3, #3
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e02c      	b.n	8004e38 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004de2:	f107 0308 	add.w	r3, r7, #8
 8004de6:	461a      	mov	r2, r3
 8004de8:	2100      	movs	r1, #0
 8004dea:	6938      	ldr	r0, [r7, #16]
 8004dec:	f000 fe5a 	bl	8005aa4 <xQueueReceiveFromISR>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d003      	beq.n	8004dfe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004df6:	f06f 0302 	mvn.w	r3, #2
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e01c      	b.n	8004e38 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d019      	beq.n	8004e38 <osSemaphoreAcquire+0x94>
 8004e04:	4b0f      	ldr	r3, [pc, #60]	@ (8004e44 <osSemaphoreAcquire+0xa0>)
 8004e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	e010      	b.n	8004e38 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	6938      	ldr	r0, [r7, #16]
 8004e1a:	f000 fd33 	bl	8005884 <xQueueSemaphoreTake>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d009      	beq.n	8004e38 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004e2a:	f06f 0301 	mvn.w	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	e002      	b.n	8004e38 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004e32:	f06f 0302 	mvn.w	r3, #2
 8004e36:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004e38:	697b      	ldr	r3, [r7, #20]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	e000ed04 	.word	0xe000ed04

08004e48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4a07      	ldr	r2, [pc, #28]	@ (8004e74 <vApplicationGetIdleTaskMemory+0x2c>)
 8004e58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4a06      	ldr	r2, [pc, #24]	@ (8004e78 <vApplicationGetIdleTaskMemory+0x30>)
 8004e5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2280      	movs	r2, #128	@ 0x80
 8004e64:	601a      	str	r2, [r3, #0]
}
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	2000028c 	.word	0x2000028c
 8004e78:	2000033c 	.word	0x2000033c

08004e7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a07      	ldr	r2, [pc, #28]	@ (8004ea8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4a06      	ldr	r2, [pc, #24]	@ (8004eac <vApplicationGetTimerTaskMemory+0x30>)
 8004e92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e9a:	601a      	str	r2, [r3, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	2000053c 	.word	0x2000053c
 8004eac:	200005ec 	.word	0x200005ec

08004eb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f103 0208 	add.w	r2, r3, #8
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f103 0208 	add.w	r2, r3, #8
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f103 0208 	add.w	r2, r3, #8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	601a      	str	r2, [r3, #0]
}
 8004f46:	bf00      	nop
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f68:	d103      	bne.n	8004f72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e00c      	b.n	8004f8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3308      	adds	r3, #8
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	e002      	b.n	8004f80 <vListInsert+0x2e>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d2f6      	bcs.n	8004f7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	601a      	str	r2, [r3, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6892      	ldr	r2, [r2, #8]
 8004fda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6852      	ldr	r2, [r2, #4]
 8004fe4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d103      	bne.n	8004ff8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	1e5a      	subs	r2, r3, #1
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10b      	bne.n	8005044 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800503e:	bf00      	nop
 8005040:	bf00      	nop
 8005042:	e7fd      	b.n	8005040 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005044:	f002 fc68 	bl	8007918 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005050:	68f9      	ldr	r1, [r7, #12]
 8005052:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	441a      	add	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005074:	3b01      	subs	r3, #1
 8005076:	68f9      	ldr	r1, [r7, #12]
 8005078:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	441a      	add	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	22ff      	movs	r2, #255	@ 0xff
 8005088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	22ff      	movs	r2, #255	@ 0xff
 8005090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d114      	bne.n	80050c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d01a      	beq.n	80050d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3310      	adds	r3, #16
 80050a6:	4618      	mov	r0, r3
 80050a8:	f001 fc06 	bl	80068b8 <xTaskRemoveFromEventList>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d012      	beq.n	80050d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050b2:	4b0d      	ldr	r3, [pc, #52]	@ (80050e8 <xQueueGenericReset+0xd0>)
 80050b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	e009      	b.n	80050d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3310      	adds	r3, #16
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fef1 	bl	8004eb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3324      	adds	r3, #36	@ 0x24
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff feec 	bl	8004eb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050d8:	f002 fc50 	bl	800797c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050dc:	2301      	movs	r3, #1
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08e      	sub	sp, #56	@ 0x38
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10b      	bne.n	8005118 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	e7fd      	b.n	8005114 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10b      	bne.n	8005136 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	e7fd      	b.n	8005132 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <xQueueGenericCreateStatic+0x56>
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <xQueueGenericCreateStatic+0x5a>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <xQueueGenericCreateStatic+0x5c>
 8005146:	2300      	movs	r3, #0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10b      	bne.n	8005164 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	623b      	str	r3, [r7, #32]
}
 800515e:	bf00      	nop
 8005160:	bf00      	nop
 8005162:	e7fd      	b.n	8005160 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <xQueueGenericCreateStatic+0x84>
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <xQueueGenericCreateStatic+0x88>
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <xQueueGenericCreateStatic+0x8a>
 8005174:	2300      	movs	r3, #0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10b      	bne.n	8005192 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	61fb      	str	r3, [r7, #28]
}
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	e7fd      	b.n	800518e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005192:	2350      	movs	r3, #80	@ 0x50
 8005194:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b50      	cmp	r3, #80	@ 0x50
 800519a:	d00b      	beq.n	80051b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	61bb      	str	r3, [r7, #24]
}
 80051ae:	bf00      	nop
 80051b0:	bf00      	nop
 80051b2:	e7fd      	b.n	80051b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80051ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00d      	beq.n	80051dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80051cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	4613      	mov	r3, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 f840 	bl	800525c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80051de:	4618      	mov	r0, r3
 80051e0:	3730      	adds	r7, #48	@ 0x30
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b08a      	sub	sp, #40	@ 0x28
 80051ea:	af02      	add	r7, sp, #8
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	4613      	mov	r3, r2
 80051f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10b      	bne.n	8005212 <xQueueGenericCreate+0x2c>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	613b      	str	r3, [r7, #16]
}
 800520c:	bf00      	nop
 800520e:	bf00      	nop
 8005210:	e7fd      	b.n	800520e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	3350      	adds	r3, #80	@ 0x50
 8005220:	4618      	mov	r0, r3
 8005222:	f002 fc9b 	bl	8007b5c <pvPortMalloc>
 8005226:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d011      	beq.n	8005252 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	3350      	adds	r3, #80	@ 0x50
 8005236:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005240:	79fa      	ldrb	r2, [r7, #7]
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f805 	bl	800525c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005252:	69bb      	ldr	r3, [r7, #24]
	}
 8005254:	4618      	mov	r0, r3
 8005256:	3720      	adds	r7, #32
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d103      	bne.n	8005278 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e002      	b.n	800527e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800528a:	2101      	movs	r1, #1
 800528c:	69b8      	ldr	r0, [r7, #24]
 800528e:	f7ff fec3 	bl	8005018 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	78fa      	ldrb	r2, [r7, #3]
 8005296:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b08a      	sub	sp, #40	@ 0x28
 80052a6:	af02      	add	r7, sp, #8
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10b      	bne.n	80052cc <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	61bb      	str	r3, [r7, #24]
}
 80052c6:	bf00      	nop
 80052c8:	bf00      	nop
 80052ca:	e7fd      	b.n	80052c8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d90b      	bls.n	80052ec <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	617b      	str	r3, [r7, #20]
}
 80052e6:	bf00      	nop
 80052e8:	bf00      	nop
 80052ea:	e7fd      	b.n	80052e8 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80052ec:	2302      	movs	r3, #2
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	2100      	movs	r1, #0
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff fef8 	bl	80050ec <xQueueGenericCreateStatic>
 80052fc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800530a:	69fb      	ldr	r3, [r7, #28]
	}
 800530c:	4618      	mov	r0, r3
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10b      	bne.n	800533c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	613b      	str	r3, [r7, #16]
}
 8005336:	bf00      	nop
 8005338:	bf00      	nop
 800533a:	e7fd      	b.n	8005338 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d90b      	bls.n	800535c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	60fb      	str	r3, [r7, #12]
}
 8005356:	bf00      	nop
 8005358:	bf00      	nop
 800535a:	e7fd      	b.n	8005358 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800535c:	2202      	movs	r2, #2
 800535e:	2100      	movs	r1, #0
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff ff40 	bl	80051e6 <xQueueGenericCreate>
 8005366:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005374:	697b      	ldr	r3, [r7, #20]
	}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08e      	sub	sp, #56	@ 0x38
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800538e:	2300      	movs	r3, #0
 8005390:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <xQueueGenericSend+0x34>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	e7fd      	b.n	80053b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <xQueueGenericSend+0x42>
 80053ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <xQueueGenericSend+0x46>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <xQueueGenericSend+0x48>
 80053c6:	2300      	movs	r3, #0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <xQueueGenericSend+0x64>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	e7fd      	b.n	80053e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d103      	bne.n	80053f2 <xQueueGenericSend+0x72>
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <xQueueGenericSend+0x76>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <xQueueGenericSend+0x78>
 80053f6:	2300      	movs	r3, #0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10b      	bne.n	8005414 <xQueueGenericSend+0x94>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	623b      	str	r3, [r7, #32]
}
 800540e:	bf00      	nop
 8005410:	bf00      	nop
 8005412:	e7fd      	b.n	8005410 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005414:	f001 fc16 	bl	8006c44 <xTaskGetSchedulerState>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d102      	bne.n	8005424 <xQueueGenericSend+0xa4>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <xQueueGenericSend+0xa8>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <xQueueGenericSend+0xaa>
 8005428:	2300      	movs	r3, #0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <xQueueGenericSend+0xc6>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	61fb      	str	r3, [r7, #28]
}
 8005440:	bf00      	nop
 8005442:	bf00      	nop
 8005444:	e7fd      	b.n	8005442 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005446:	f002 fa67 	bl	8007918 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800544a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005452:	429a      	cmp	r2, r3
 8005454:	d302      	bcc.n	800545c <xQueueGenericSend+0xdc>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d129      	bne.n	80054b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005462:	f000 fbdd 	bl	8005c20 <prvCopyDataToQueue>
 8005466:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	2b00      	cmp	r3, #0
 800546e:	d010      	beq.n	8005492 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005472:	3324      	adds	r3, #36	@ 0x24
 8005474:	4618      	mov	r0, r3
 8005476:	f001 fa1f 	bl	80068b8 <xTaskRemoveFromEventList>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005480:	4b3f      	ldr	r3, [pc, #252]	@ (8005580 <xQueueGenericSend+0x200>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	e00a      	b.n	80054a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d007      	beq.n	80054a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005498:	4b39      	ldr	r3, [pc, #228]	@ (8005580 <xQueueGenericSend+0x200>)
 800549a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054a8:	f002 fa68 	bl	800797c <vPortExitCritical>
				return pdPASS;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e063      	b.n	8005578 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d103      	bne.n	80054be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054b6:	f002 fa61 	bl	800797c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	e05c      	b.n	8005578 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054c4:	f107 0314 	add.w	r3, r7, #20
 80054c8:	4618      	mov	r0, r3
 80054ca:	f001 fa59 	bl	8006980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054ce:	2301      	movs	r3, #1
 80054d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054d2:	f002 fa53 	bl	800797c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054d6:	f000 ffa7 	bl	8006428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054da:	f002 fa1d 	bl	8007918 <vPortEnterCritical>
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054e4:	b25b      	sxtb	r3, r3
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ea:	d103      	bne.n	80054f4 <xQueueGenericSend+0x174>
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005500:	d103      	bne.n	800550a <xQueueGenericSend+0x18a>
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800550a:	f002 fa37 	bl	800797c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800550e:	1d3a      	adds	r2, r7, #4
 8005510:	f107 0314 	add.w	r3, r7, #20
 8005514:	4611      	mov	r1, r2
 8005516:	4618      	mov	r0, r3
 8005518:	f001 fa48 	bl	80069ac <xTaskCheckForTimeOut>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d124      	bne.n	800556c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005522:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005524:	f000 fc74 	bl	8005e10 <prvIsQueueFull>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d018      	beq.n	8005560 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	3310      	adds	r3, #16
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4611      	mov	r1, r2
 8005536:	4618      	mov	r0, r3
 8005538:	f001 f96c 	bl	8006814 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800553c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800553e:	f000 fbff 	bl	8005d40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005542:	f000 ff7f 	bl	8006444 <xTaskResumeAll>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	f47f af7c 	bne.w	8005446 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800554e:	4b0c      	ldr	r3, [pc, #48]	@ (8005580 <xQueueGenericSend+0x200>)
 8005550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	e772      	b.n	8005446 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005560:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005562:	f000 fbed 	bl	8005d40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005566:	f000 ff6d 	bl	8006444 <xTaskResumeAll>
 800556a:	e76c      	b.n	8005446 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800556c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800556e:	f000 fbe7 	bl	8005d40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005572:	f000 ff67 	bl	8006444 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005576:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005578:	4618      	mov	r0, r3
 800557a:	3738      	adds	r7, #56	@ 0x38
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	e000ed04 	.word	0xe000ed04

08005584 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b090      	sub	sp, #64	@ 0x40
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10b      	bne.n	80055b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055ae:	bf00      	nop
 80055b0:	bf00      	nop
 80055b2:	e7fd      	b.n	80055b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d103      	bne.n	80055c2 <xQueueGenericSendFromISR+0x3e>
 80055ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <xQueueGenericSendFromISR+0x42>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <xQueueGenericSendFromISR+0x44>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10b      	bne.n	80055e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	e7fd      	b.n	80055e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d103      	bne.n	80055f2 <xQueueGenericSendFromISR+0x6e>
 80055ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <xQueueGenericSendFromISR+0x72>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <xQueueGenericSendFromISR+0x74>
 80055f6:	2300      	movs	r3, #0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10b      	bne.n	8005614 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	623b      	str	r3, [r7, #32]
}
 800560e:	bf00      	nop
 8005610:	bf00      	nop
 8005612:	e7fd      	b.n	8005610 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005614:	f002 fa60 	bl	8007ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005618:	f3ef 8211 	mrs	r2, BASEPRI
 800561c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	61fa      	str	r2, [r7, #28]
 800562e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005630:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005632:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563c:	429a      	cmp	r2, r3
 800563e:	d302      	bcc.n	8005646 <xQueueGenericSendFromISR+0xc2>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b02      	cmp	r3, #2
 8005644:	d12f      	bne.n	80056a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005648:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800564c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005654:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800565c:	f000 fae0 	bl	8005c20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005660:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d112      	bne.n	8005690 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	d016      	beq.n	80056a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005674:	3324      	adds	r3, #36	@ 0x24
 8005676:	4618      	mov	r0, r3
 8005678:	f001 f91e 	bl	80068b8 <xTaskRemoveFromEventList>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00e      	beq.n	80056a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	e007      	b.n	80056a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005690:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005694:	3301      	adds	r3, #1
 8005696:	b2db      	uxtb	r3, r3
 8005698:	b25a      	sxtb	r2, r3
 800569a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80056a0:	2301      	movs	r3, #1
 80056a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80056a4:	e001      	b.n	80056aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3740      	adds	r7, #64	@ 0x40
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08c      	sub	sp, #48	@ 0x30
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10b      	bne.n	80056f2 <xQueueReceive+0x32>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	623b      	str	r3, [r7, #32]
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	e7fd      	b.n	80056ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d103      	bne.n	8005700 <xQueueReceive+0x40>
 80056f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <xQueueReceive+0x44>
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <xQueueReceive+0x46>
 8005704:	2300      	movs	r3, #0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <xQueueReceive+0x62>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	61fb      	str	r3, [r7, #28]
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	e7fd      	b.n	800571e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005722:	f001 fa8f 	bl	8006c44 <xTaskGetSchedulerState>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d102      	bne.n	8005732 <xQueueReceive+0x72>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <xQueueReceive+0x76>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <xQueueReceive+0x78>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10b      	bne.n	8005754 <xQueueReceive+0x94>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	61bb      	str	r3, [r7, #24]
}
 800574e:	bf00      	nop
 8005750:	bf00      	nop
 8005752:	e7fd      	b.n	8005750 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005754:	f002 f8e0 	bl	8007918 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01f      	beq.n	80057a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005768:	f000 fac4 	bl	8005cf4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576e:	1e5a      	subs	r2, r3, #1
 8005770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005772:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00f      	beq.n	800579c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800577c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577e:	3310      	adds	r3, #16
 8005780:	4618      	mov	r0, r3
 8005782:	f001 f899 	bl	80068b8 <xTaskRemoveFromEventList>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800578c:	4b3c      	ldr	r3, [pc, #240]	@ (8005880 <xQueueReceive+0x1c0>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800579c:	f002 f8ee 	bl	800797c <vPortExitCritical>
				return pdPASS;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e069      	b.n	8005878 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057aa:	f002 f8e7 	bl	800797c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e062      	b.n	8005878 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057b8:	f107 0310 	add.w	r3, r7, #16
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 f8df 	bl	8006980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057c2:	2301      	movs	r3, #1
 80057c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057c6:	f002 f8d9 	bl	800797c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057ca:	f000 fe2d 	bl	8006428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057ce:	f002 f8a3 	bl	8007918 <vPortEnterCritical>
 80057d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057d8:	b25b      	sxtb	r3, r3
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057de:	d103      	bne.n	80057e8 <xQueueReceive+0x128>
 80057e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057ee:	b25b      	sxtb	r3, r3
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d103      	bne.n	80057fe <xQueueReceive+0x13e>
 80057f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057fe:	f002 f8bd 	bl	800797c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005802:	1d3a      	adds	r2, r7, #4
 8005804:	f107 0310 	add.w	r3, r7, #16
 8005808:	4611      	mov	r1, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f001 f8ce 	bl	80069ac <xTaskCheckForTimeOut>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d123      	bne.n	800585e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005818:	f000 fae4 	bl	8005de4 <prvIsQueueEmpty>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d017      	beq.n	8005852 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	3324      	adds	r3, #36	@ 0x24
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	4611      	mov	r1, r2
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fff2 	bl	8006814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005830:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005832:	f000 fa85 	bl	8005d40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005836:	f000 fe05 	bl	8006444 <xTaskResumeAll>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d189      	bne.n	8005754 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005840:	4b0f      	ldr	r3, [pc, #60]	@ (8005880 <xQueueReceive+0x1c0>)
 8005842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	e780      	b.n	8005754 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005854:	f000 fa74 	bl	8005d40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005858:	f000 fdf4 	bl	8006444 <xTaskResumeAll>
 800585c:	e77a      	b.n	8005754 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800585e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005860:	f000 fa6e 	bl	8005d40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005864:	f000 fdee 	bl	8006444 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005868:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800586a:	f000 fabb 	bl	8005de4 <prvIsQueueEmpty>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	f43f af6f 	beq.w	8005754 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005876:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005878:	4618      	mov	r0, r3
 800587a:	3730      	adds	r7, #48	@ 0x30
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	e000ed04 	.word	0xe000ed04

08005884 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08e      	sub	sp, #56	@ 0x38
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800588e:	2300      	movs	r3, #0
 8005890:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005896:	2300      	movs	r3, #0
 8005898:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800589a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10b      	bne.n	80058b8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	623b      	str	r3, [r7, #32]
}
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
 80058b6:	e7fd      	b.n	80058b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	61fb      	str	r3, [r7, #28]
}
 80058d2:	bf00      	nop
 80058d4:	bf00      	nop
 80058d6:	e7fd      	b.n	80058d4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058d8:	f001 f9b4 	bl	8006c44 <xTaskGetSchedulerState>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d102      	bne.n	80058e8 <xQueueSemaphoreTake+0x64>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <xQueueSemaphoreTake+0x68>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <xQueueSemaphoreTake+0x6a>
 80058ec:	2300      	movs	r3, #0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10b      	bne.n	800590a <xQueueSemaphoreTake+0x86>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	61bb      	str	r3, [r7, #24]
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	e7fd      	b.n	8005906 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800590a:	f002 f805 	bl	8007918 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800590e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005912:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	2b00      	cmp	r3, #0
 8005918:	d024      	beq.n	8005964 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800591a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591c:	1e5a      	subs	r2, r3, #1
 800591e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005920:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d104      	bne.n	8005934 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800592a:	f001 fb05 	bl	8006f38 <pvTaskIncrementMutexHeldCount>
 800592e:	4602      	mov	r2, r0
 8005930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005932:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00f      	beq.n	800595c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800593c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593e:	3310      	adds	r3, #16
 8005940:	4618      	mov	r0, r3
 8005942:	f000 ffb9 	bl	80068b8 <xTaskRemoveFromEventList>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d007      	beq.n	800595c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800594c:	4b54      	ldr	r3, [pc, #336]	@ (8005aa0 <xQueueSemaphoreTake+0x21c>)
 800594e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800595c:	f002 f80e 	bl	800797c <vPortExitCritical>
				return pdPASS;
 8005960:	2301      	movs	r3, #1
 8005962:	e098      	b.n	8005a96 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d112      	bne.n	8005990 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800596a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	617b      	str	r3, [r7, #20]
}
 8005982:	bf00      	nop
 8005984:	bf00      	nop
 8005986:	e7fd      	b.n	8005984 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005988:	f001 fff8 	bl	800797c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800598c:	2300      	movs	r3, #0
 800598e:	e082      	b.n	8005a96 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005996:	f107 030c 	add.w	r3, r7, #12
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fff0 	bl	8006980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059a0:	2301      	movs	r3, #1
 80059a2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059a4:	f001 ffea 	bl	800797c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059a8:	f000 fd3e 	bl	8006428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059ac:	f001 ffb4 	bl	8007918 <vPortEnterCritical>
 80059b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059b6:	b25b      	sxtb	r3, r3
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d103      	bne.n	80059c6 <xQueueSemaphoreTake+0x142>
 80059be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059cc:	b25b      	sxtb	r3, r3
 80059ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d2:	d103      	bne.n	80059dc <xQueueSemaphoreTake+0x158>
 80059d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059dc:	f001 ffce 	bl	800797c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059e0:	463a      	mov	r2, r7
 80059e2:	f107 030c 	add.w	r3, r7, #12
 80059e6:	4611      	mov	r1, r2
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 ffdf 	bl	80069ac <xTaskCheckForTimeOut>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d132      	bne.n	8005a5a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059f6:	f000 f9f5 	bl	8005de4 <prvIsQueueEmpty>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d026      	beq.n	8005a4e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d109      	bne.n	8005a1c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005a08:	f001 ff86 	bl	8007918 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 f935 	bl	8006c80 <xTaskPriorityInherit>
 8005a16:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005a18:	f001 ffb0 	bl	800797c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1e:	3324      	adds	r3, #36	@ 0x24
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	4611      	mov	r1, r2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fef5 	bl	8006814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a2c:	f000 f988 	bl	8005d40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a30:	f000 fd08 	bl	8006444 <xTaskResumeAll>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f47f af67 	bne.w	800590a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005a3c:	4b18      	ldr	r3, [pc, #96]	@ (8005aa0 <xQueueSemaphoreTake+0x21c>)
 8005a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	e75d      	b.n	800590a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005a4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a50:	f000 f976 	bl	8005d40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a54:	f000 fcf6 	bl	8006444 <xTaskResumeAll>
 8005a58:	e757      	b.n	800590a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005a5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a5c:	f000 f970 	bl	8005d40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a60:	f000 fcf0 	bl	8006444 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a66:	f000 f9bd 	bl	8005de4 <prvIsQueueEmpty>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f43f af4c 	beq.w	800590a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00d      	beq.n	8005a94 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005a78:	f001 ff4e 	bl	8007918 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005a7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a7e:	f000 f8b7 	bl	8005bf0 <prvGetDisinheritPriorityAfterTimeout>
 8005a82:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 f9d0 	bl	8006e30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a90:	f001 ff74 	bl	800797c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3738      	adds	r7, #56	@ 0x38
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	e000ed04 	.word	0xe000ed04

08005aa4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08e      	sub	sp, #56	@ 0x38
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10b      	bne.n	8005ad2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	623b      	str	r3, [r7, #32]
}
 8005acc:	bf00      	nop
 8005ace:	bf00      	nop
 8005ad0:	e7fd      	b.n	8005ace <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d103      	bne.n	8005ae0 <xQueueReceiveFromISR+0x3c>
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <xQueueReceiveFromISR+0x40>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <xQueueReceiveFromISR+0x42>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	61fb      	str	r3, [r7, #28]
}
 8005afc:	bf00      	nop
 8005afe:	bf00      	nop
 8005b00:	e7fd      	b.n	8005afe <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b02:	f001 ffe9 	bl	8007ad8 <vPortValidateInterruptPriority>
	__asm volatile
 8005b06:	f3ef 8211 	mrs	r2, BASEPRI
 8005b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	61ba      	str	r2, [r7, #24]
 8005b1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b26:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d02f      	beq.n	8005b8e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b3c:	f000 f8da 	bl	8005cf4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b42:	1e5a      	subs	r2, r3, #1
 8005b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b46:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005b48:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d112      	bne.n	8005b78 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d016      	beq.n	8005b88 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5c:	3310      	adds	r3, #16
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 feaa 	bl	80068b8 <xTaskRemoveFromEventList>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00e      	beq.n	8005b88 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e007      	b.n	8005b88 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005b78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	b25a      	sxtb	r2, r3
 8005b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b8c:	e001      	b.n	8005b92 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f383 8811 	msr	BASEPRI, r3
}
 8005b9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3738      	adds	r7, #56	@ 0x38
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10b      	bne.n	8005bd2 <vQueueDelete+0x2a>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	60bb      	str	r3, [r7, #8]
}
 8005bcc:	bf00      	nop
 8005bce:	bf00      	nop
 8005bd0:	e7fd      	b.n	8005bce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 f95e 	bl	8005e94 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f002 f800 	bl	8007be8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005be8:	bf00      	nop
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d006      	beq.n	8005c0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e001      	b.n	8005c12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c12:	68fb      	ldr	r3, [r7, #12]
	}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10d      	bne.n	8005c5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d14d      	bne.n	8005ce2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 f880 	bl	8006d50 <xTaskPriorityDisinherit>
 8005c50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	609a      	str	r2, [r3, #8]
 8005c58:	e043      	b.n	8005ce2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d119      	bne.n	8005c94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6858      	ldr	r0, [r3, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c68:	461a      	mov	r2, r3
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	f002 fac0 	bl	80081f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c78:	441a      	add	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d32b      	bcc.n	8005ce2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	605a      	str	r2, [r3, #4]
 8005c92:	e026      	b.n	8005ce2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68d8      	ldr	r0, [r3, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	f002 faa6 	bl	80081f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cac:	425b      	negs	r3, r3
 8005cae:	441a      	add	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d207      	bcs.n	8005cd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc8:	425b      	negs	r3, r3
 8005cca:	441a      	add	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d105      	bne.n	8005ce2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005cea:	697b      	ldr	r3, [r7, #20]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d018      	beq.n	8005d38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0e:	441a      	add	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d303      	bcc.n	8005d28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68d9      	ldr	r1, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d30:	461a      	mov	r2, r3
 8005d32:	6838      	ldr	r0, [r7, #0]
 8005d34:	f002 fa5c 	bl	80081f0 <memcpy>
	}
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d48:	f001 fde6 	bl	8007918 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d54:	e011      	b.n	8005d7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d012      	beq.n	8005d84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3324      	adds	r3, #36	@ 0x24
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fda8 	bl	80068b8 <xTaskRemoveFromEventList>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d6e:	f000 fe81 	bl	8006a74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	dce9      	bgt.n	8005d56 <prvUnlockQueue+0x16>
 8005d82:	e000      	b.n	8005d86 <prvUnlockQueue+0x46>
					break;
 8005d84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	22ff      	movs	r2, #255	@ 0xff
 8005d8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d8e:	f001 fdf5 	bl	800797c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d92:	f001 fdc1 	bl	8007918 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d9e:	e011      	b.n	8005dc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d012      	beq.n	8005dce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3310      	adds	r3, #16
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fd83 	bl	80068b8 <xTaskRemoveFromEventList>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005db8:	f000 fe5c 	bl	8006a74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dbc:	7bbb      	ldrb	r3, [r7, #14]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	dce9      	bgt.n	8005da0 <prvUnlockQueue+0x60>
 8005dcc:	e000      	b.n	8005dd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	22ff      	movs	r2, #255	@ 0xff
 8005dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005dd8:	f001 fdd0 	bl	800797c <vPortExitCritical>
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dec:	f001 fd94 	bl	8007918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	e001      	b.n	8005e02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e02:	f001 fdbb 	bl	800797c <vPortExitCritical>

	return xReturn;
 8005e06:	68fb      	ldr	r3, [r7, #12]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e18:	f001 fd7e 	bl	8007918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d102      	bne.n	8005e2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	e001      	b.n	8005e32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e32:	f001 fda3 	bl	800797c <vPortExitCritical>

	return xReturn;
 8005e36:	68fb      	ldr	r3, [r7, #12]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	e014      	b.n	8005e7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e50:	4a0f      	ldr	r2, [pc, #60]	@ (8005e90 <vQueueAddToRegistry+0x50>)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10b      	bne.n	8005e74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e5c:	490c      	ldr	r1, [pc, #48]	@ (8005e90 <vQueueAddToRegistry+0x50>)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e66:	4a0a      	ldr	r2, [pc, #40]	@ (8005e90 <vQueueAddToRegistry+0x50>)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e72:	e006      	b.n	8005e82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3301      	adds	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b07      	cmp	r3, #7
 8005e7e:	d9e7      	bls.n	8005e50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	200009ec 	.word	0x200009ec

08005e94 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	e016      	b.n	8005ed0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005ea2:	4a10      	ldr	r2, [pc, #64]	@ (8005ee4 <vQueueUnregisterQueue+0x50>)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d10b      	bne.n	8005eca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ee4 <vQueueUnregisterQueue+0x50>)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005ebc:	4a09      	ldr	r2, [pc, #36]	@ (8005ee4 <vQueueUnregisterQueue+0x50>)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	605a      	str	r2, [r3, #4]
				break;
 8005ec8:	e006      	b.n	8005ed8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b07      	cmp	r3, #7
 8005ed4:	d9e5      	bls.n	8005ea2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	200009ec 	.word	0x200009ec

08005ee8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ef8:	f001 fd0e 	bl	8007918 <vPortEnterCritical>
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f02:	b25b      	sxtb	r3, r3
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d103      	bne.n	8005f12 <vQueueWaitForMessageRestricted+0x2a>
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f18:	b25b      	sxtb	r3, r3
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1e:	d103      	bne.n	8005f28 <vQueueWaitForMessageRestricted+0x40>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f28:	f001 fd28 	bl	800797c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d106      	bne.n	8005f42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	3324      	adds	r3, #36	@ 0x24
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fc8f 	bl	8006860 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f42:	6978      	ldr	r0, [r7, #20]
 8005f44:	f7ff fefc 	bl	8005d40 <prvUnlockQueue>
	}
 8005f48:	bf00      	nop
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08e      	sub	sp, #56	@ 0x38
 8005f54:	af04      	add	r7, sp, #16
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10b      	bne.n	8005f7c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	623b      	str	r3, [r7, #32]
}
 8005f76:	bf00      	nop
 8005f78:	bf00      	nop
 8005f7a:	e7fd      	b.n	8005f78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10b      	bne.n	8005f9a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	61fb      	str	r3, [r7, #28]
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	e7fd      	b.n	8005f96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f9a:	23b0      	movs	r3, #176	@ 0xb0
 8005f9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2bb0      	cmp	r3, #176	@ 0xb0
 8005fa2:	d00b      	beq.n	8005fbc <xTaskCreateStatic+0x6c>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	61bb      	str	r3, [r7, #24]
}
 8005fb6:	bf00      	nop
 8005fb8:	bf00      	nop
 8005fba:	e7fd      	b.n	8005fb8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01e      	beq.n	8006002 <xTaskCreateStatic+0xb2>
 8005fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01b      	beq.n	8006002 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fcc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fd2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005fdc:	2300      	movs	r3, #0
 8005fde:	9303      	str	r3, [sp, #12]
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	9302      	str	r3, [sp, #8]
 8005fe4:	f107 0314 	add.w	r3, r7, #20
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f851 	bl	800609c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ffa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ffc:	f000 f8fc 	bl	80061f8 <prvAddNewTaskToReadyList>
 8006000:	e001      	b.n	8006006 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006006:	697b      	ldr	r3, [r7, #20]
	}
 8006008:	4618      	mov	r0, r3
 800600a:	3728      	adds	r7, #40	@ 0x28
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08c      	sub	sp, #48	@ 0x30
 8006014:	af04      	add	r7, sp, #16
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006020:	88fb      	ldrh	r3, [r7, #6]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4618      	mov	r0, r3
 8006026:	f001 fd99 	bl	8007b5c <pvPortMalloc>
 800602a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00e      	beq.n	8006050 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006032:	20b0      	movs	r0, #176	@ 0xb0
 8006034:	f001 fd92 	bl	8007b5c <pvPortMalloc>
 8006038:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	631a      	str	r2, [r3, #48]	@ 0x30
 8006046:	e005      	b.n	8006054 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006048:	6978      	ldr	r0, [r7, #20]
 800604a:	f001 fdcd 	bl	8007be8 <vPortFree>
 800604e:	e001      	b.n	8006054 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006050:	2300      	movs	r3, #0
 8006052:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d017      	beq.n	800608a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006062:	88fa      	ldrh	r2, [r7, #6]
 8006064:	2300      	movs	r3, #0
 8006066:	9303      	str	r3, [sp, #12]
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	9302      	str	r3, [sp, #8]
 800606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606e:	9301      	str	r3, [sp, #4]
 8006070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f80f 	bl	800609c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800607e:	69f8      	ldr	r0, [r7, #28]
 8006080:	f000 f8ba 	bl	80061f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006084:	2301      	movs	r3, #1
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	e002      	b.n	8006090 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800608a:	f04f 33ff 	mov.w	r3, #4294967295
 800608e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006090:	69bb      	ldr	r3, [r7, #24]
	}
 8006092:	4618      	mov	r0, r3
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	461a      	mov	r2, r3
 80060b4:	21a5      	movs	r1, #165	@ 0xa5
 80060b6:	f002 f811 	bl	80080dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060c4:	3b01      	subs	r3, #1
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	f023 0307 	bic.w	r3, r3, #7
 80060d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	617b      	str	r3, [r7, #20]
}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	e7fd      	b.n	80060f2 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d01f      	beq.n	8006142 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006102:	2300      	movs	r3, #0
 8006104:	61fb      	str	r3, [r7, #28]
 8006106:	e012      	b.n	800612e <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	7819      	ldrb	r1, [r3, #0]
 8006110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	3334      	adds	r3, #52	@ 0x34
 8006118:	460a      	mov	r2, r1
 800611a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d006      	beq.n	8006136 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	3301      	adds	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	2b0f      	cmp	r3, #15
 8006132:	d9e9      	bls.n	8006108 <prvInitialiseNewTask+0x6c>
 8006134:	e000      	b.n	8006138 <prvInitialiseNewTask+0x9c>
			{
				break;
 8006136:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006140:	e003      	b.n	800614a <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800614a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614c:	2b37      	cmp	r3, #55	@ 0x37
 800614e:	d901      	bls.n	8006154 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006150:	2337      	movs	r3, #55	@ 0x37
 8006152:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006158:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800615e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006162:	2200      	movs	r2, #0
 8006164:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006168:	3304      	adds	r3, #4
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe fec0 	bl	8004ef0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	3318      	adds	r3, #24
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe febb 	bl	8004ef0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800617e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006182:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800618e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006192:	2200      	movs	r2, #0
 8006194:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	2200      	movs	r2, #0
 800619a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	335c      	adds	r3, #92	@ 0x5c
 80061aa:	224c      	movs	r2, #76	@ 0x4c
 80061ac:	2100      	movs	r1, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f001 ff94 	bl	80080dc <memset>
 80061b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b6:	4a0d      	ldr	r2, [pc, #52]	@ (80061ec <prvInitialiseNewTask+0x150>)
 80061b8:	661a      	str	r2, [r3, #96]	@ 0x60
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	4a0c      	ldr	r2, [pc, #48]	@ (80061f0 <prvInitialiseNewTask+0x154>)
 80061be:	665a      	str	r2, [r3, #100]	@ 0x64
 80061c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c2:	4a0c      	ldr	r2, [pc, #48]	@ (80061f4 <prvInitialiseNewTask+0x158>)
 80061c4:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	68f9      	ldr	r1, [r7, #12]
 80061ca:	69b8      	ldr	r0, [r7, #24]
 80061cc:	f001 fa76 	bl	80076bc <pxPortInitialiseStack>
 80061d0:	4602      	mov	r2, r0
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061e2:	bf00      	nop
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20004ccc 	.word	0x20004ccc
 80061f0:	20004d34 	.word	0x20004d34
 80061f4:	20004d9c 	.word	0x20004d9c

080061f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006200:	f001 fb8a 	bl	8007918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006204:	4b2d      	ldr	r3, [pc, #180]	@ (80062bc <prvAddNewTaskToReadyList+0xc4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3301      	adds	r3, #1
 800620a:	4a2c      	ldr	r2, [pc, #176]	@ (80062bc <prvAddNewTaskToReadyList+0xc4>)
 800620c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800620e:	4b2c      	ldr	r3, [pc, #176]	@ (80062c0 <prvAddNewTaskToReadyList+0xc8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006216:	4a2a      	ldr	r2, [pc, #168]	@ (80062c0 <prvAddNewTaskToReadyList+0xc8>)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800621c:	4b27      	ldr	r3, [pc, #156]	@ (80062bc <prvAddNewTaskToReadyList+0xc4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d110      	bne.n	8006246 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006224:	f000 fc4a 	bl	8006abc <prvInitialiseTaskLists>
 8006228:	e00d      	b.n	8006246 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800622a:	4b26      	ldr	r3, [pc, #152]	@ (80062c4 <prvAddNewTaskToReadyList+0xcc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006232:	4b23      	ldr	r3, [pc, #140]	@ (80062c0 <prvAddNewTaskToReadyList+0xc8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623c:	429a      	cmp	r2, r3
 800623e:	d802      	bhi.n	8006246 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006240:	4a1f      	ldr	r2, [pc, #124]	@ (80062c0 <prvAddNewTaskToReadyList+0xc8>)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006246:	4b20      	ldr	r3, [pc, #128]	@ (80062c8 <prvAddNewTaskToReadyList+0xd0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3301      	adds	r3, #1
 800624c:	4a1e      	ldr	r2, [pc, #120]	@ (80062c8 <prvAddNewTaskToReadyList+0xd0>)
 800624e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006250:	4b1d      	ldr	r3, [pc, #116]	@ (80062c8 <prvAddNewTaskToReadyList+0xd0>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800625c:	4b1b      	ldr	r3, [pc, #108]	@ (80062cc <prvAddNewTaskToReadyList+0xd4>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d903      	bls.n	800626c <prvAddNewTaskToReadyList+0x74>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006268:	4a18      	ldr	r2, [pc, #96]	@ (80062cc <prvAddNewTaskToReadyList+0xd4>)
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4a15      	ldr	r2, [pc, #84]	@ (80062d0 <prvAddNewTaskToReadyList+0xd8>)
 800627a:	441a      	add	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3304      	adds	r3, #4
 8006280:	4619      	mov	r1, r3
 8006282:	4610      	mov	r0, r2
 8006284:	f7fe fe41 	bl	8004f0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006288:	f001 fb78 	bl	800797c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800628c:	4b0d      	ldr	r3, [pc, #52]	@ (80062c4 <prvAddNewTaskToReadyList+0xcc>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00e      	beq.n	80062b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006294:	4b0a      	ldr	r3, [pc, #40]	@ (80062c0 <prvAddNewTaskToReadyList+0xc8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629e:	429a      	cmp	r2, r3
 80062a0:	d207      	bcs.n	80062b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062a2:	4b0c      	ldr	r3, [pc, #48]	@ (80062d4 <prvAddNewTaskToReadyList+0xdc>)
 80062a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000f00 	.word	0x20000f00
 80062c0:	20000a2c 	.word	0x20000a2c
 80062c4:	20000f0c 	.word	0x20000f0c
 80062c8:	20000f1c 	.word	0x20000f1c
 80062cc:	20000f08 	.word	0x20000f08
 80062d0:	20000a30 	.word	0x20000a30
 80062d4:	e000ed04 	.word	0xe000ed04

080062d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d018      	beq.n	800631c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062ea:	4b14      	ldr	r3, [pc, #80]	@ (800633c <vTaskDelay+0x64>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00b      	beq.n	800630a <vTaskDelay+0x32>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60bb      	str	r3, [r7, #8]
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	e7fd      	b.n	8006306 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800630a:	f000 f88d 	bl	8006428 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800630e:	2100      	movs	r1, #0
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fe25 	bl	8006f60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006316:	f000 f895 	bl	8006444 <xTaskResumeAll>
 800631a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d107      	bne.n	8006332 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006322:	4b07      	ldr	r3, [pc, #28]	@ (8006340 <vTaskDelay+0x68>)
 8006324:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000f28 	.word	0x20000f28
 8006340:	e000ed04 	.word	0xe000ed04

08006344 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08a      	sub	sp, #40	@ 0x28
 8006348:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800634e:	2300      	movs	r3, #0
 8006350:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006352:	463a      	mov	r2, r7
 8006354:	1d39      	adds	r1, r7, #4
 8006356:	f107 0308 	add.w	r3, r7, #8
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe fd74 	bl	8004e48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	9202      	str	r2, [sp, #8]
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	2300      	movs	r3, #0
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	2300      	movs	r3, #0
 8006370:	460a      	mov	r2, r1
 8006372:	4925      	ldr	r1, [pc, #148]	@ (8006408 <vTaskStartScheduler+0xc4>)
 8006374:	4825      	ldr	r0, [pc, #148]	@ (800640c <vTaskStartScheduler+0xc8>)
 8006376:	f7ff fdeb 	bl	8005f50 <xTaskCreateStatic>
 800637a:	4603      	mov	r3, r0
 800637c:	4a24      	ldr	r2, [pc, #144]	@ (8006410 <vTaskStartScheduler+0xcc>)
 800637e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006380:	4b23      	ldr	r3, [pc, #140]	@ (8006410 <vTaskStartScheduler+0xcc>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006388:	2301      	movs	r3, #1
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	e001      	b.n	8006392 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d102      	bne.n	800639e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006398:	f000 fe36 	bl	8007008 <xTimerCreateTimerTask>
 800639c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d11d      	bne.n	80063e0 <vTaskStartScheduler+0x9c>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	613b      	str	r3, [r7, #16]
}
 80063b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063b8:	4b16      	ldr	r3, [pc, #88]	@ (8006414 <vTaskStartScheduler+0xd0>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	335c      	adds	r3, #92	@ 0x5c
 80063be:	4a16      	ldr	r2, [pc, #88]	@ (8006418 <vTaskStartScheduler+0xd4>)
 80063c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063c2:	4b16      	ldr	r3, [pc, #88]	@ (800641c <vTaskStartScheduler+0xd8>)
 80063c4:	f04f 32ff 	mov.w	r2, #4294967295
 80063c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063ca:	4b15      	ldr	r3, [pc, #84]	@ (8006420 <vTaskStartScheduler+0xdc>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063d0:	4b14      	ldr	r3, [pc, #80]	@ (8006424 <vTaskStartScheduler+0xe0>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80063d6:	f7fa fc1f 	bl	8000c18 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063da:	f001 f9f9 	bl	80077d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063de:	e00f      	b.n	8006400 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e6:	d10b      	bne.n	8006400 <vTaskStartScheduler+0xbc>
	__asm volatile
 80063e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	60fb      	str	r3, [r7, #12]
}
 80063fa:	bf00      	nop
 80063fc:	bf00      	nop
 80063fe:	e7fd      	b.n	80063fc <vTaskStartScheduler+0xb8>
}
 8006400:	bf00      	nop
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	08008344 	.word	0x08008344
 800640c:	08006a8d 	.word	0x08006a8d
 8006410:	20000f24 	.word	0x20000f24
 8006414:	20000a2c 	.word	0x20000a2c
 8006418:	200000b8 	.word	0x200000b8
 800641c:	20000f20 	.word	0x20000f20
 8006420:	20000f0c 	.word	0x20000f0c
 8006424:	20000f04 	.word	0x20000f04

08006428 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800642c:	4b04      	ldr	r3, [pc, #16]	@ (8006440 <vTaskSuspendAll+0x18>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3301      	adds	r3, #1
 8006432:	4a03      	ldr	r2, [pc, #12]	@ (8006440 <vTaskSuspendAll+0x18>)
 8006434:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006436:	bf00      	nop
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	20000f28 	.word	0x20000f28

08006444 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006452:	4b42      	ldr	r3, [pc, #264]	@ (800655c <xTaskResumeAll+0x118>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <xTaskResumeAll+0x2e>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	603b      	str	r3, [r7, #0]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006472:	f001 fa51 	bl	8007918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006476:	4b39      	ldr	r3, [pc, #228]	@ (800655c <xTaskResumeAll+0x118>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3b01      	subs	r3, #1
 800647c:	4a37      	ldr	r2, [pc, #220]	@ (800655c <xTaskResumeAll+0x118>)
 800647e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006480:	4b36      	ldr	r3, [pc, #216]	@ (800655c <xTaskResumeAll+0x118>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d162      	bne.n	800654e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006488:	4b35      	ldr	r3, [pc, #212]	@ (8006560 <xTaskResumeAll+0x11c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d05e      	beq.n	800654e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006490:	e02f      	b.n	80064f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006492:	4b34      	ldr	r3, [pc, #208]	@ (8006564 <xTaskResumeAll+0x120>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3318      	adds	r3, #24
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe fd90 	bl	8004fc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fe fd8b 	bl	8004fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006568 <xTaskResumeAll+0x124>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d903      	bls.n	80064c2 <xTaskResumeAll+0x7e>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064be:	4a2a      	ldr	r2, [pc, #168]	@ (8006568 <xTaskResumeAll+0x124>)
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4a27      	ldr	r2, [pc, #156]	@ (800656c <xTaskResumeAll+0x128>)
 80064d0:	441a      	add	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4619      	mov	r1, r3
 80064d8:	4610      	mov	r0, r2
 80064da:	f7fe fd16 	bl	8004f0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e2:	4b23      	ldr	r3, [pc, #140]	@ (8006570 <xTaskResumeAll+0x12c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d302      	bcc.n	80064f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80064ec:	4b21      	ldr	r3, [pc, #132]	@ (8006574 <xTaskResumeAll+0x130>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064f2:	4b1c      	ldr	r3, [pc, #112]	@ (8006564 <xTaskResumeAll+0x120>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1cb      	bne.n	8006492 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006500:	f000 fb80 	bl	8006c04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006504:	4b1c      	ldr	r3, [pc, #112]	@ (8006578 <xTaskResumeAll+0x134>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d010      	beq.n	8006532 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006510:	f000 f846 	bl	80065a0 <xTaskIncrementTick>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800651a:	4b16      	ldr	r3, [pc, #88]	@ (8006574 <xTaskResumeAll+0x130>)
 800651c:	2201      	movs	r2, #1
 800651e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3b01      	subs	r3, #1
 8006524:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1f1      	bne.n	8006510 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800652c:	4b12      	ldr	r3, [pc, #72]	@ (8006578 <xTaskResumeAll+0x134>)
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006532:	4b10      	ldr	r3, [pc, #64]	@ (8006574 <xTaskResumeAll+0x130>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800653a:	2301      	movs	r3, #1
 800653c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800653e:	4b0f      	ldr	r3, [pc, #60]	@ (800657c <xTaskResumeAll+0x138>)
 8006540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800654e:	f001 fa15 	bl	800797c <vPortExitCritical>

	return xAlreadyYielded;
 8006552:	68bb      	ldr	r3, [r7, #8]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20000f28 	.word	0x20000f28
 8006560:	20000f00 	.word	0x20000f00
 8006564:	20000ec0 	.word	0x20000ec0
 8006568:	20000f08 	.word	0x20000f08
 800656c:	20000a30 	.word	0x20000a30
 8006570:	20000a2c 	.word	0x20000a2c
 8006574:	20000f14 	.word	0x20000f14
 8006578:	20000f10 	.word	0x20000f10
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006586:	4b05      	ldr	r3, [pc, #20]	@ (800659c <xTaskGetTickCount+0x1c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800658c:	687b      	ldr	r3, [r7, #4]
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000f04 	.word	0x20000f04

080065a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065aa:	4b4f      	ldr	r3, [pc, #316]	@ (80066e8 <xTaskIncrementTick+0x148>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f040 8090 	bne.w	80066d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065b4:	4b4d      	ldr	r3, [pc, #308]	@ (80066ec <xTaskIncrementTick+0x14c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065bc:	4a4b      	ldr	r2, [pc, #300]	@ (80066ec <xTaskIncrementTick+0x14c>)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d121      	bne.n	800660c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80065c8:	4b49      	ldr	r3, [pc, #292]	@ (80066f0 <xTaskIncrementTick+0x150>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	603b      	str	r3, [r7, #0]
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	e7fd      	b.n	80065e6 <xTaskIncrementTick+0x46>
 80065ea:	4b41      	ldr	r3, [pc, #260]	@ (80066f0 <xTaskIncrementTick+0x150>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	4b40      	ldr	r3, [pc, #256]	@ (80066f4 <xTaskIncrementTick+0x154>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a3e      	ldr	r2, [pc, #248]	@ (80066f0 <xTaskIncrementTick+0x150>)
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	4a3e      	ldr	r2, [pc, #248]	@ (80066f4 <xTaskIncrementTick+0x154>)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	4b3e      	ldr	r3, [pc, #248]	@ (80066f8 <xTaskIncrementTick+0x158>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	4a3c      	ldr	r2, [pc, #240]	@ (80066f8 <xTaskIncrementTick+0x158>)
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	f000 fafc 	bl	8006c04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800660c:	4b3b      	ldr	r3, [pc, #236]	@ (80066fc <xTaskIncrementTick+0x15c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	429a      	cmp	r2, r3
 8006614:	d349      	bcc.n	80066aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006616:	4b36      	ldr	r3, [pc, #216]	@ (80066f0 <xTaskIncrementTick+0x150>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d104      	bne.n	800662a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006620:	4b36      	ldr	r3, [pc, #216]	@ (80066fc <xTaskIncrementTick+0x15c>)
 8006622:	f04f 32ff 	mov.w	r2, #4294967295
 8006626:	601a      	str	r2, [r3, #0]
					break;
 8006628:	e03f      	b.n	80066aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662a:	4b31      	ldr	r3, [pc, #196]	@ (80066f0 <xTaskIncrementTick+0x150>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	429a      	cmp	r2, r3
 8006640:	d203      	bcs.n	800664a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006642:	4a2e      	ldr	r2, [pc, #184]	@ (80066fc <xTaskIncrementTick+0x15c>)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006648:	e02f      	b.n	80066aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	3304      	adds	r3, #4
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe fcb8 	bl	8004fc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006658:	2b00      	cmp	r3, #0
 800665a:	d004      	beq.n	8006666 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	3318      	adds	r3, #24
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fcaf 	bl	8004fc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800666a:	4b25      	ldr	r3, [pc, #148]	@ (8006700 <xTaskIncrementTick+0x160>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d903      	bls.n	800667a <xTaskIncrementTick+0xda>
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006676:	4a22      	ldr	r2, [pc, #136]	@ (8006700 <xTaskIncrementTick+0x160>)
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4a1f      	ldr	r2, [pc, #124]	@ (8006704 <xTaskIncrementTick+0x164>)
 8006688:	441a      	add	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	3304      	adds	r3, #4
 800668e:	4619      	mov	r1, r3
 8006690:	4610      	mov	r0, r2
 8006692:	f7fe fc3a 	bl	8004f0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669a:	4b1b      	ldr	r3, [pc, #108]	@ (8006708 <xTaskIncrementTick+0x168>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d3b8      	bcc.n	8006616 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80066a4:	2301      	movs	r3, #1
 80066a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066a8:	e7b5      	b.n	8006616 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066aa:	4b17      	ldr	r3, [pc, #92]	@ (8006708 <xTaskIncrementTick+0x168>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b0:	4914      	ldr	r1, [pc, #80]	@ (8006704 <xTaskIncrementTick+0x164>)
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d901      	bls.n	80066c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80066c2:	2301      	movs	r3, #1
 80066c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066c6:	4b11      	ldr	r3, [pc, #68]	@ (800670c <xTaskIncrementTick+0x16c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80066ce:	2301      	movs	r3, #1
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e004      	b.n	80066de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006710 <xTaskIncrementTick+0x170>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3301      	adds	r3, #1
 80066da:	4a0d      	ldr	r2, [pc, #52]	@ (8006710 <xTaskIncrementTick+0x170>)
 80066dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066de:	697b      	ldr	r3, [r7, #20]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20000f28 	.word	0x20000f28
 80066ec:	20000f04 	.word	0x20000f04
 80066f0:	20000eb8 	.word	0x20000eb8
 80066f4:	20000ebc 	.word	0x20000ebc
 80066f8:	20000f18 	.word	0x20000f18
 80066fc:	20000f20 	.word	0x20000f20
 8006700:	20000f08 	.word	0x20000f08
 8006704:	20000a30 	.word	0x20000a30
 8006708:	20000a2c 	.word	0x20000a2c
 800670c:	20000f14 	.word	0x20000f14
 8006710:	20000f10 	.word	0x20000f10

08006714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800671a:	4b36      	ldr	r3, [pc, #216]	@ (80067f4 <vTaskSwitchContext+0xe0>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006722:	4b35      	ldr	r3, [pc, #212]	@ (80067f8 <vTaskSwitchContext+0xe4>)
 8006724:	2201      	movs	r2, #1
 8006726:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006728:	e060      	b.n	80067ec <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 800672a:	4b33      	ldr	r3, [pc, #204]	@ (80067f8 <vTaskSwitchContext+0xe4>)
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006730:	f7fa fa8c 	bl	8000c4c <getRunTimeCounterValue>
 8006734:	4603      	mov	r3, r0
 8006736:	4a31      	ldr	r2, [pc, #196]	@ (80067fc <vTaskSwitchContext+0xe8>)
 8006738:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800673a:	4b30      	ldr	r3, [pc, #192]	@ (80067fc <vTaskSwitchContext+0xe8>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b30      	ldr	r3, [pc, #192]	@ (8006800 <vTaskSwitchContext+0xec>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d909      	bls.n	800675a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006746:	4b2f      	ldr	r3, [pc, #188]	@ (8006804 <vTaskSwitchContext+0xf0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800674c:	4a2b      	ldr	r2, [pc, #172]	@ (80067fc <vTaskSwitchContext+0xe8>)
 800674e:	6810      	ldr	r0, [r2, #0]
 8006750:	4a2b      	ldr	r2, [pc, #172]	@ (8006800 <vTaskSwitchContext+0xec>)
 8006752:	6812      	ldr	r2, [r2, #0]
 8006754:	1a82      	subs	r2, r0, r2
 8006756:	440a      	add	r2, r1
 8006758:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800675a:	4b28      	ldr	r3, [pc, #160]	@ (80067fc <vTaskSwitchContext+0xe8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a28      	ldr	r2, [pc, #160]	@ (8006800 <vTaskSwitchContext+0xec>)
 8006760:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006762:	4b29      	ldr	r3, [pc, #164]	@ (8006808 <vTaskSwitchContext+0xf4>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	e011      	b.n	800678e <vTaskSwitchContext+0x7a>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10b      	bne.n	8006788 <vTaskSwitchContext+0x74>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	607b      	str	r3, [r7, #4]
}
 8006782:	bf00      	nop
 8006784:	bf00      	nop
 8006786:	e7fd      	b.n	8006784 <vTaskSwitchContext+0x70>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3b01      	subs	r3, #1
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	491f      	ldr	r1, [pc, #124]	@ (800680c <vTaskSwitchContext+0xf8>)
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	440b      	add	r3, r1
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0e3      	beq.n	800676a <vTaskSwitchContext+0x56>
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4a17      	ldr	r2, [pc, #92]	@ (800680c <vTaskSwitchContext+0xf8>)
 80067ae:	4413      	add	r3, r2
 80067b0:	60bb      	str	r3, [r7, #8]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	605a      	str	r2, [r3, #4]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	3308      	adds	r3, #8
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d104      	bne.n	80067d2 <vTaskSwitchContext+0xbe>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	605a      	str	r2, [r3, #4]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	4a0a      	ldr	r2, [pc, #40]	@ (8006804 <vTaskSwitchContext+0xf0>)
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006808 <vTaskSwitchContext+0xf4>)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067e2:	4b08      	ldr	r3, [pc, #32]	@ (8006804 <vTaskSwitchContext+0xf0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	335c      	adds	r3, #92	@ 0x5c
 80067e8:	4a09      	ldr	r2, [pc, #36]	@ (8006810 <vTaskSwitchContext+0xfc>)
 80067ea:	6013      	str	r3, [r2, #0]
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20000f28 	.word	0x20000f28
 80067f8:	20000f14 	.word	0x20000f14
 80067fc:	20000f30 	.word	0x20000f30
 8006800:	20000f2c 	.word	0x20000f2c
 8006804:	20000a2c 	.word	0x20000a2c
 8006808:	20000f08 	.word	0x20000f08
 800680c:	20000a30 	.word	0x20000a30
 8006810:	200000b8 	.word	0x200000b8

08006814 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10b      	bne.n	800683c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	60fb      	str	r3, [r7, #12]
}
 8006836:	bf00      	nop
 8006838:	bf00      	nop
 800683a:	e7fd      	b.n	8006838 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800683c:	4b07      	ldr	r3, [pc, #28]	@ (800685c <vTaskPlaceOnEventList+0x48>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3318      	adds	r3, #24
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fe fb84 	bl	8004f52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800684a:	2101      	movs	r1, #1
 800684c:	6838      	ldr	r0, [r7, #0]
 800684e:	f000 fb87 	bl	8006f60 <prvAddCurrentTaskToDelayedList>
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000a2c 	.word	0x20000a2c

08006860 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10b      	bne.n	800688a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	617b      	str	r3, [r7, #20]
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop
 8006888:	e7fd      	b.n	8006886 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800688a:	4b0a      	ldr	r3, [pc, #40]	@ (80068b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3318      	adds	r3, #24
 8006890:	4619      	mov	r1, r3
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f7fe fb39 	bl	8004f0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800689e:	f04f 33ff 	mov.w	r3, #4294967295
 80068a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	68b8      	ldr	r0, [r7, #8]
 80068a8:	f000 fb5a 	bl	8006f60 <prvAddCurrentTaskToDelayedList>
	}
 80068ac:	bf00      	nop
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20000a2c 	.word	0x20000a2c

080068b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10b      	bne.n	80068e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	60fb      	str	r3, [r7, #12]
}
 80068e0:	bf00      	nop
 80068e2:	bf00      	nop
 80068e4:	e7fd      	b.n	80068e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	3318      	adds	r3, #24
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe fb6a 	bl	8004fc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006968 <xTaskRemoveFromEventList+0xb0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d11d      	bne.n	8006934 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	3304      	adds	r3, #4
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe fb61 	bl	8004fc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006906:	4b19      	ldr	r3, [pc, #100]	@ (800696c <xTaskRemoveFromEventList+0xb4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d903      	bls.n	8006916 <xTaskRemoveFromEventList+0x5e>
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006912:	4a16      	ldr	r2, [pc, #88]	@ (800696c <xTaskRemoveFromEventList+0xb4>)
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4a13      	ldr	r2, [pc, #76]	@ (8006970 <xTaskRemoveFromEventList+0xb8>)
 8006924:	441a      	add	r2, r3
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	3304      	adds	r3, #4
 800692a:	4619      	mov	r1, r3
 800692c:	4610      	mov	r0, r2
 800692e:	f7fe faec 	bl	8004f0a <vListInsertEnd>
 8006932:	e005      	b.n	8006940 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	3318      	adds	r3, #24
 8006938:	4619      	mov	r1, r3
 800693a:	480e      	ldr	r0, [pc, #56]	@ (8006974 <xTaskRemoveFromEventList+0xbc>)
 800693c:	f7fe fae5 	bl	8004f0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006944:	4b0c      	ldr	r3, [pc, #48]	@ (8006978 <xTaskRemoveFromEventList+0xc0>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694a:	429a      	cmp	r2, r3
 800694c:	d905      	bls.n	800695a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800694e:	2301      	movs	r3, #1
 8006950:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006952:	4b0a      	ldr	r3, [pc, #40]	@ (800697c <xTaskRemoveFromEventList+0xc4>)
 8006954:	2201      	movs	r2, #1
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	e001      	b.n	800695e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800695e:	697b      	ldr	r3, [r7, #20]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	20000f28 	.word	0x20000f28
 800696c:	20000f08 	.word	0x20000f08
 8006970:	20000a30 	.word	0x20000a30
 8006974:	20000ec0 	.word	0x20000ec0
 8006978:	20000a2c 	.word	0x20000a2c
 800697c:	20000f14 	.word	0x20000f14

08006980 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006988:	4b06      	ldr	r3, [pc, #24]	@ (80069a4 <vTaskInternalSetTimeOutState+0x24>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006990:	4b05      	ldr	r3, [pc, #20]	@ (80069a8 <vTaskInternalSetTimeOutState+0x28>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	605a      	str	r2, [r3, #4]
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	20000f18 	.word	0x20000f18
 80069a8:	20000f04 	.word	0x20000f04

080069ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10b      	bne.n	80069d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	613b      	str	r3, [r7, #16]
}
 80069ce:	bf00      	nop
 80069d0:	bf00      	nop
 80069d2:	e7fd      	b.n	80069d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	60fb      	str	r3, [r7, #12]
}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	e7fd      	b.n	80069ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80069f2:	f000 ff91 	bl	8007918 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069f6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a6c <xTaskCheckForTimeOut+0xc0>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d102      	bne.n	8006a16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a10:	2300      	movs	r3, #0
 8006a12:	61fb      	str	r3, [r7, #28]
 8006a14:	e023      	b.n	8006a5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b15      	ldr	r3, [pc, #84]	@ (8006a70 <xTaskCheckForTimeOut+0xc4>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d007      	beq.n	8006a32 <xTaskCheckForTimeOut+0x86>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d302      	bcc.n	8006a32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	61fb      	str	r3, [r7, #28]
 8006a30:	e015      	b.n	8006a5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d20b      	bcs.n	8006a54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	1ad2      	subs	r2, r2, r3
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff ff99 	bl	8006980 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	e004      	b.n	8006a5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a5e:	f000 ff8d 	bl	800797c <vPortExitCritical>

	return xReturn;
 8006a62:	69fb      	ldr	r3, [r7, #28]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3720      	adds	r7, #32
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20000f04 	.word	0x20000f04
 8006a70:	20000f18 	.word	0x20000f18

08006a74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a78:	4b03      	ldr	r3, [pc, #12]	@ (8006a88 <vTaskMissedYield+0x14>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]
}
 8006a7e:	bf00      	nop
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	20000f14 	.word	0x20000f14

08006a8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a94:	f000 f852 	bl	8006b3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a98:	4b06      	ldr	r3, [pc, #24]	@ (8006ab4 <prvIdleTask+0x28>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d9f9      	bls.n	8006a94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006aa0:	4b05      	ldr	r3, [pc, #20]	@ (8006ab8 <prvIdleTask+0x2c>)
 8006aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ab0:	e7f0      	b.n	8006a94 <prvIdleTask+0x8>
 8006ab2:	bf00      	nop
 8006ab4:	20000a30 	.word	0x20000a30
 8006ab8:	e000ed04 	.word	0xe000ed04

08006abc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	607b      	str	r3, [r7, #4]
 8006ac6:	e00c      	b.n	8006ae2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	4613      	mov	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4a12      	ldr	r2, [pc, #72]	@ (8006b1c <prvInitialiseTaskLists+0x60>)
 8006ad4:	4413      	add	r3, r2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe f9ea 	bl	8004eb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b37      	cmp	r3, #55	@ 0x37
 8006ae6:	d9ef      	bls.n	8006ac8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ae8:	480d      	ldr	r0, [pc, #52]	@ (8006b20 <prvInitialiseTaskLists+0x64>)
 8006aea:	f7fe f9e1 	bl	8004eb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006aee:	480d      	ldr	r0, [pc, #52]	@ (8006b24 <prvInitialiseTaskLists+0x68>)
 8006af0:	f7fe f9de 	bl	8004eb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006af4:	480c      	ldr	r0, [pc, #48]	@ (8006b28 <prvInitialiseTaskLists+0x6c>)
 8006af6:	f7fe f9db 	bl	8004eb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006afa:	480c      	ldr	r0, [pc, #48]	@ (8006b2c <prvInitialiseTaskLists+0x70>)
 8006afc:	f7fe f9d8 	bl	8004eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b00:	480b      	ldr	r0, [pc, #44]	@ (8006b30 <prvInitialiseTaskLists+0x74>)
 8006b02:	f7fe f9d5 	bl	8004eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b06:	4b0b      	ldr	r3, [pc, #44]	@ (8006b34 <prvInitialiseTaskLists+0x78>)
 8006b08:	4a05      	ldr	r2, [pc, #20]	@ (8006b20 <prvInitialiseTaskLists+0x64>)
 8006b0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <prvInitialiseTaskLists+0x7c>)
 8006b0e:	4a05      	ldr	r2, [pc, #20]	@ (8006b24 <prvInitialiseTaskLists+0x68>)
 8006b10:	601a      	str	r2, [r3, #0]
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000a30 	.word	0x20000a30
 8006b20:	20000e90 	.word	0x20000e90
 8006b24:	20000ea4 	.word	0x20000ea4
 8006b28:	20000ec0 	.word	0x20000ec0
 8006b2c:	20000ed4 	.word	0x20000ed4
 8006b30:	20000eec 	.word	0x20000eec
 8006b34:	20000eb8 	.word	0x20000eb8
 8006b38:	20000ebc 	.word	0x20000ebc

08006b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b42:	e019      	b.n	8006b78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b44:	f000 fee8 	bl	8007918 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b48:	4b10      	ldr	r3, [pc, #64]	@ (8006b8c <prvCheckTasksWaitingTermination+0x50>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3304      	adds	r3, #4
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fe fa35 	bl	8004fc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b90 <prvCheckTasksWaitingTermination+0x54>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	4a0b      	ldr	r2, [pc, #44]	@ (8006b90 <prvCheckTasksWaitingTermination+0x54>)
 8006b62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b64:	4b0b      	ldr	r3, [pc, #44]	@ (8006b94 <prvCheckTasksWaitingTermination+0x58>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b94 <prvCheckTasksWaitingTermination+0x58>)
 8006b6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b6e:	f000 ff05 	bl	800797c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f810 	bl	8006b98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b78:	4b06      	ldr	r3, [pc, #24]	@ (8006b94 <prvCheckTasksWaitingTermination+0x58>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e1      	bne.n	8006b44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000ed4 	.word	0x20000ed4
 8006b90:	20000f00 	.word	0x20000f00
 8006b94:	20000ee8 	.word	0x20000ee8

08006b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	335c      	adds	r3, #92	@ 0x5c
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f001 faa1 	bl	80080ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d108      	bne.n	8006bc6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f001 f815 	bl	8007be8 <vPortFree>
				vPortFree( pxTCB );
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 f812 	bl	8007be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bc4:	e019      	b.n	8006bfa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d103      	bne.n	8006bd8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 f809 	bl	8007be8 <vPortFree>
	}
 8006bd6:	e010      	b.n	8006bfa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d00b      	beq.n	8006bfa <prvDeleteTCB+0x62>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	60fb      	str	r3, [r7, #12]
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop
 8006bf8:	e7fd      	b.n	8006bf6 <prvDeleteTCB+0x5e>
	}
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c3c <prvResetNextTaskUnblockTime+0x38>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d104      	bne.n	8006c1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c14:	4b0a      	ldr	r3, [pc, #40]	@ (8006c40 <prvResetNextTaskUnblockTime+0x3c>)
 8006c16:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c1c:	e008      	b.n	8006c30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c1e:	4b07      	ldr	r3, [pc, #28]	@ (8006c3c <prvResetNextTaskUnblockTime+0x38>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	4a04      	ldr	r2, [pc, #16]	@ (8006c40 <prvResetNextTaskUnblockTime+0x3c>)
 8006c2e:	6013      	str	r3, [r2, #0]
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	20000eb8 	.word	0x20000eb8
 8006c40:	20000f20 	.word	0x20000f20

08006c44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c78 <xTaskGetSchedulerState+0x34>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d102      	bne.n	8006c58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c52:	2301      	movs	r3, #1
 8006c54:	607b      	str	r3, [r7, #4]
 8006c56:	e008      	b.n	8006c6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c58:	4b08      	ldr	r3, [pc, #32]	@ (8006c7c <xTaskGetSchedulerState+0x38>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c60:	2302      	movs	r3, #2
 8006c62:	607b      	str	r3, [r7, #4]
 8006c64:	e001      	b.n	8006c6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c6a:	687b      	ldr	r3, [r7, #4]
	}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	20000f0c 	.word	0x20000f0c
 8006c7c:	20000f28 	.word	0x20000f28

08006c80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d051      	beq.n	8006d3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d44 <xTaskPriorityInherit+0xc4>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d241      	bcs.n	8006d28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	db06      	blt.n	8006cba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cac:	4b25      	ldr	r3, [pc, #148]	@ (8006d44 <xTaskPriorityInherit+0xc4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	6959      	ldr	r1, [r3, #20]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4a1f      	ldr	r2, [pc, #124]	@ (8006d48 <xTaskPriorityInherit+0xc8>)
 8006ccc:	4413      	add	r3, r2
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	d122      	bne.n	8006d18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe f974 	bl	8004fc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cdc:	4b19      	ldr	r3, [pc, #100]	@ (8006d44 <xTaskPriorityInherit+0xc4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cea:	4b18      	ldr	r3, [pc, #96]	@ (8006d4c <xTaskPriorityInherit+0xcc>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d903      	bls.n	8006cfa <xTaskPriorityInherit+0x7a>
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf6:	4a15      	ldr	r2, [pc, #84]	@ (8006d4c <xTaskPriorityInherit+0xcc>)
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4a10      	ldr	r2, [pc, #64]	@ (8006d48 <xTaskPriorityInherit+0xc8>)
 8006d08:	441a      	add	r2, r3
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4610      	mov	r0, r2
 8006d12:	f7fe f8fa 	bl	8004f0a <vListInsertEnd>
 8006d16:	e004      	b.n	8006d22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d18:	4b0a      	ldr	r3, [pc, #40]	@ (8006d44 <xTaskPriorityInherit+0xc4>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d22:	2301      	movs	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	e008      	b.n	8006d3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d2c:	4b05      	ldr	r3, [pc, #20]	@ (8006d44 <xTaskPriorityInherit+0xc4>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d201      	bcs.n	8006d3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d36:	2301      	movs	r3, #1
 8006d38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
	}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20000a2c 	.word	0x20000a2c
 8006d48:	20000a30 	.word	0x20000a30
 8006d4c:	20000f08 	.word	0x20000f08

08006d50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d058      	beq.n	8006e18 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d66:	4b2f      	ldr	r3, [pc, #188]	@ (8006e24 <xTaskPriorityDisinherit+0xd4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d00b      	beq.n	8006d88 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60fb      	str	r3, [r7, #12]
}
 8006d82:	bf00      	nop
 8006d84:	bf00      	nop
 8006d86:	e7fd      	b.n	8006d84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10b      	bne.n	8006da8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	60bb      	str	r3, [r7, #8]
}
 8006da2:	bf00      	nop
 8006da4:	bf00      	nop
 8006da6:	e7fd      	b.n	8006da4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dac:	1e5a      	subs	r2, r3, #1
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d02c      	beq.n	8006e18 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d128      	bne.n	8006e18 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fe f8fa 	bl	8004fc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ddc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de8:	4b0f      	ldr	r3, [pc, #60]	@ (8006e28 <xTaskPriorityDisinherit+0xd8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d903      	bls.n	8006df8 <xTaskPriorityDisinherit+0xa8>
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	4a0c      	ldr	r2, [pc, #48]	@ (8006e28 <xTaskPriorityDisinherit+0xd8>)
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4a09      	ldr	r2, [pc, #36]	@ (8006e2c <xTaskPriorityDisinherit+0xdc>)
 8006e06:	441a      	add	r2, r3
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4610      	mov	r0, r2
 8006e10:	f7fe f87b 	bl	8004f0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e14:	2301      	movs	r3, #1
 8006e16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e18:	697b      	ldr	r3, [r7, #20]
	}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000a2c 	.word	0x20000a2c
 8006e28:	20000f08 	.word	0x20000f08
 8006e2c:	20000a30 	.word	0x20000a30

08006e30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d06c      	beq.n	8006f22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10b      	bne.n	8006e68 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	60fb      	str	r3, [r7, #12]
}
 8006e62:	bf00      	nop
 8006e64:	bf00      	nop
 8006e66:	e7fd      	b.n	8006e64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d902      	bls.n	8006e78 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	61fb      	str	r3, [r7, #28]
 8006e76:	e002      	b.n	8006e7e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e7c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d04c      	beq.n	8006f22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d147      	bne.n	8006f22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e92:	4b26      	ldr	r3, [pc, #152]	@ (8006f2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d10b      	bne.n	8006eb4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60bb      	str	r3, [r7, #8]
}
 8006eae:	bf00      	nop
 8006eb0:	bf00      	nop
 8006eb2:	e7fd      	b.n	8006eb0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	db04      	blt.n	8006ed2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	6959      	ldr	r1, [r3, #20]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4a13      	ldr	r2, [pc, #76]	@ (8006f30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006ee2:	4413      	add	r3, r2
 8006ee4:	4299      	cmp	r1, r3
 8006ee6:	d11c      	bne.n	8006f22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fe f869 	bl	8004fc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f34 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d903      	bls.n	8006f06 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f02:	4a0c      	ldr	r2, [pc, #48]	@ (8006f34 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4a07      	ldr	r2, [pc, #28]	@ (8006f30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006f14:	441a      	add	r2, r3
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	f7fd fff4 	bl	8004f0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f22:	bf00      	nop
 8006f24:	3720      	adds	r7, #32
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20000a2c 	.word	0x20000a2c
 8006f30:	20000a30 	.word	0x20000a30
 8006f34:	20000f08 	.word	0x20000f08

08006f38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f3c:	4b07      	ldr	r3, [pc, #28]	@ (8006f5c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d004      	beq.n	8006f4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f44:	4b05      	ldr	r3, [pc, #20]	@ (8006f5c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f4a:	3201      	adds	r2, #1
 8006f4c:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 8006f4e:	4b03      	ldr	r3, [pc, #12]	@ (8006f5c <pvTaskIncrementMutexHeldCount+0x24>)
 8006f50:	681b      	ldr	r3, [r3, #0]
	}
 8006f52:	4618      	mov	r0, r3
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	20000a2c 	.word	0x20000a2c

08006f60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f6a:	4b21      	ldr	r3, [pc, #132]	@ (8006ff0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f70:	4b20      	ldr	r3, [pc, #128]	@ (8006ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe f824 	bl	8004fc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f82:	d10a      	bne.n	8006f9a <prvAddCurrentTaskToDelayedList+0x3a>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d007      	beq.n	8006f9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	4619      	mov	r1, r3
 8006f92:	4819      	ldr	r0, [pc, #100]	@ (8006ff8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f94:	f7fd ffb9 	bl	8004f0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f98:	e026      	b.n	8006fe8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fa2:	4b14      	ldr	r3, [pc, #80]	@ (8006ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d209      	bcs.n	8006fc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fb2:	4b12      	ldr	r3, [pc, #72]	@ (8006ffc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	f7fd ffc7 	bl	8004f52 <vListInsert>
}
 8006fc4:	e010      	b.n	8006fe8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8007000 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f7fd ffbd 	bl	8004f52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8007004 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d202      	bcs.n	8006fe8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fe2:	4a08      	ldr	r2, [pc, #32]	@ (8007004 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	6013      	str	r3, [r2, #0]
}
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20000f04 	.word	0x20000f04
 8006ff4:	20000a2c 	.word	0x20000a2c
 8006ff8:	20000eec 	.word	0x20000eec
 8006ffc:	20000ebc 	.word	0x20000ebc
 8007000:	20000eb8 	.word	0x20000eb8
 8007004:	20000f20 	.word	0x20000f20

08007008 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08a      	sub	sp, #40	@ 0x28
 800700c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007012:	f000 fb13 	bl	800763c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007016:	4b1d      	ldr	r3, [pc, #116]	@ (800708c <xTimerCreateTimerTask+0x84>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d021      	beq.n	8007062 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007022:	2300      	movs	r3, #0
 8007024:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007026:	1d3a      	adds	r2, r7, #4
 8007028:	f107 0108 	add.w	r1, r7, #8
 800702c:	f107 030c 	add.w	r3, r7, #12
 8007030:	4618      	mov	r0, r3
 8007032:	f7fd ff23 	bl	8004e7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007036:	6879      	ldr	r1, [r7, #4]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	9202      	str	r2, [sp, #8]
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	2302      	movs	r3, #2
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	2300      	movs	r3, #0
 8007046:	460a      	mov	r2, r1
 8007048:	4911      	ldr	r1, [pc, #68]	@ (8007090 <xTimerCreateTimerTask+0x88>)
 800704a:	4812      	ldr	r0, [pc, #72]	@ (8007094 <xTimerCreateTimerTask+0x8c>)
 800704c:	f7fe ff80 	bl	8005f50 <xTaskCreateStatic>
 8007050:	4603      	mov	r3, r0
 8007052:	4a11      	ldr	r2, [pc, #68]	@ (8007098 <xTimerCreateTimerTask+0x90>)
 8007054:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007056:	4b10      	ldr	r3, [pc, #64]	@ (8007098 <xTimerCreateTimerTask+0x90>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800705e:	2301      	movs	r3, #1
 8007060:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10b      	bne.n	8007080 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	613b      	str	r3, [r7, #16]
}
 800707a:	bf00      	nop
 800707c:	bf00      	nop
 800707e:	e7fd      	b.n	800707c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007080:	697b      	ldr	r3, [r7, #20]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20000f64 	.word	0x20000f64
 8007090:	08008374 	.word	0x08008374
 8007094:	080071d5 	.word	0x080071d5
 8007098:	20000f68 	.word	0x20000f68

0800709c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	@ 0x28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10b      	bne.n	80070cc <xTimerGenericCommand+0x30>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	623b      	str	r3, [r7, #32]
}
 80070c6:	bf00      	nop
 80070c8:	bf00      	nop
 80070ca:	e7fd      	b.n	80070c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070cc:	4b19      	ldr	r3, [pc, #100]	@ (8007134 <xTimerGenericCommand+0x98>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d02a      	beq.n	800712a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b05      	cmp	r3, #5
 80070e4:	dc18      	bgt.n	8007118 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070e6:	f7ff fdad 	bl	8006c44 <xTaskGetSchedulerState>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d109      	bne.n	8007104 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070f0:	4b10      	ldr	r3, [pc, #64]	@ (8007134 <xTimerGenericCommand+0x98>)
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	f107 0110 	add.w	r1, r7, #16
 80070f8:	2300      	movs	r3, #0
 80070fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070fc:	f7fe f940 	bl	8005380 <xQueueGenericSend>
 8007100:	6278      	str	r0, [r7, #36]	@ 0x24
 8007102:	e012      	b.n	800712a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007104:	4b0b      	ldr	r3, [pc, #44]	@ (8007134 <xTimerGenericCommand+0x98>)
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	f107 0110 	add.w	r1, r7, #16
 800710c:	2300      	movs	r3, #0
 800710e:	2200      	movs	r2, #0
 8007110:	f7fe f936 	bl	8005380 <xQueueGenericSend>
 8007114:	6278      	str	r0, [r7, #36]	@ 0x24
 8007116:	e008      	b.n	800712a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007118:	4b06      	ldr	r3, [pc, #24]	@ (8007134 <xTimerGenericCommand+0x98>)
 800711a:	6818      	ldr	r0, [r3, #0]
 800711c:	f107 0110 	add.w	r1, r7, #16
 8007120:	2300      	movs	r3, #0
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	f7fe fa2e 	bl	8005584 <xQueueGenericSendFromISR>
 8007128:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800712c:	4618      	mov	r0, r3
 800712e:	3728      	adds	r7, #40	@ 0x28
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20000f64 	.word	0x20000f64

08007138 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af02      	add	r7, sp, #8
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007142:	4b23      	ldr	r3, [pc, #140]	@ (80071d0 <prvProcessExpiredTimer+0x98>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	3304      	adds	r3, #4
 8007150:	4618      	mov	r0, r3
 8007152:	f7fd ff37 	bl	8004fc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	d023      	beq.n	80071ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	699a      	ldr	r2, [r3, #24]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	18d1      	adds	r1, r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	6978      	ldr	r0, [r7, #20]
 8007172:	f000 f8d5 	bl	8007320 <prvInsertTimerInActiveList>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d020      	beq.n	80071be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800717c:	2300      	movs	r3, #0
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	2300      	movs	r3, #0
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	2100      	movs	r1, #0
 8007186:	6978      	ldr	r0, [r7, #20]
 8007188:	f7ff ff88 	bl	800709c <xTimerGenericCommand>
 800718c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d114      	bne.n	80071be <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	60fb      	str	r3, [r7, #12]
}
 80071a6:	bf00      	nop
 80071a8:	bf00      	nop
 80071aa:	e7fd      	b.n	80071a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071b2:	f023 0301 	bic.w	r3, r3, #1
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	6978      	ldr	r0, [r7, #20]
 80071c4:	4798      	blx	r3
}
 80071c6:	bf00      	nop
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20000f5c 	.word	0x20000f5c

080071d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071dc:	f107 0308 	add.w	r3, r7, #8
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 f859 	bl	8007298 <prvGetNextExpireTime>
 80071e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	4619      	mov	r1, r3
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 f805 	bl	80071fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071f2:	f000 f8d7 	bl	80073a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071f6:	bf00      	nop
 80071f8:	e7f0      	b.n	80071dc <prvTimerTask+0x8>
	...

080071fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007206:	f7ff f90f 	bl	8006428 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800720a:	f107 0308 	add.w	r3, r7, #8
 800720e:	4618      	mov	r0, r3
 8007210:	f000 f866 	bl	80072e0 <prvSampleTimeNow>
 8007214:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d130      	bne.n	800727e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <prvProcessTimerOrBlockTask+0x3c>
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	429a      	cmp	r2, r3
 8007228:	d806      	bhi.n	8007238 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800722a:	f7ff f90b 	bl	8006444 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff ff81 	bl	8007138 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007236:	e024      	b.n	8007282 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d008      	beq.n	8007250 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800723e:	4b13      	ldr	r3, [pc, #76]	@ (800728c <prvProcessTimerOrBlockTask+0x90>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <prvProcessTimerOrBlockTask+0x50>
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <prvProcessTimerOrBlockTask+0x52>
 800724c:	2300      	movs	r3, #0
 800724e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007250:	4b0f      	ldr	r3, [pc, #60]	@ (8007290 <prvProcessTimerOrBlockTask+0x94>)
 8007252:	6818      	ldr	r0, [r3, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	4619      	mov	r1, r3
 800725e:	f7fe fe43 	bl	8005ee8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007262:	f7ff f8ef 	bl	8006444 <xTaskResumeAll>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10a      	bne.n	8007282 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800726c:	4b09      	ldr	r3, [pc, #36]	@ (8007294 <prvProcessTimerOrBlockTask+0x98>)
 800726e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	f3bf 8f6f 	isb	sy
}
 800727c:	e001      	b.n	8007282 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800727e:	f7ff f8e1 	bl	8006444 <xTaskResumeAll>
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000f60 	.word	0x20000f60
 8007290:	20000f64 	.word	0x20000f64
 8007294:	e000ed04 	.word	0xe000ed04

08007298 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072a0:	4b0e      	ldr	r3, [pc, #56]	@ (80072dc <prvGetNextExpireTime+0x44>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <prvGetNextExpireTime+0x16>
 80072aa:	2201      	movs	r2, #1
 80072ac:	e000      	b.n	80072b0 <prvGetNextExpireTime+0x18>
 80072ae:	2200      	movs	r2, #0
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d105      	bne.n	80072c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072bc:	4b07      	ldr	r3, [pc, #28]	@ (80072dc <prvGetNextExpireTime+0x44>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	e001      	b.n	80072cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072cc:	68fb      	ldr	r3, [r7, #12]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20000f5c 	.word	0x20000f5c

080072e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072e8:	f7ff f94a 	bl	8006580 <xTaskGetTickCount>
 80072ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072ee:	4b0b      	ldr	r3, [pc, #44]	@ (800731c <prvSampleTimeNow+0x3c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d205      	bcs.n	8007304 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072f8:	f000 f93a 	bl	8007570 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	e002      	b.n	800730a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800730a:	4a04      	ldr	r2, [pc, #16]	@ (800731c <prvSampleTimeNow+0x3c>)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007310:	68fb      	ldr	r3, [r7, #12]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20000f6c 	.word	0x20000f6c

08007320 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800732e:	2300      	movs	r3, #0
 8007330:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	429a      	cmp	r2, r3
 8007344:	d812      	bhi.n	800736c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	1ad2      	subs	r2, r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	429a      	cmp	r2, r3
 8007352:	d302      	bcc.n	800735a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007354:	2301      	movs	r3, #1
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	e01b      	b.n	8007392 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800735a:	4b10      	ldr	r3, [pc, #64]	@ (800739c <prvInsertTimerInActiveList+0x7c>)
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3304      	adds	r3, #4
 8007362:	4619      	mov	r1, r3
 8007364:	4610      	mov	r0, r2
 8007366:	f7fd fdf4 	bl	8004f52 <vListInsert>
 800736a:	e012      	b.n	8007392 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	429a      	cmp	r2, r3
 8007372:	d206      	bcs.n	8007382 <prvInsertTimerInActiveList+0x62>
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d302      	bcc.n	8007382 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800737c:	2301      	movs	r3, #1
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	e007      	b.n	8007392 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007382:	4b07      	ldr	r3, [pc, #28]	@ (80073a0 <prvInsertTimerInActiveList+0x80>)
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3304      	adds	r3, #4
 800738a:	4619      	mov	r1, r3
 800738c:	4610      	mov	r0, r2
 800738e:	f7fd fde0 	bl	8004f52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007392:	697b      	ldr	r3, [r7, #20]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	20000f60 	.word	0x20000f60
 80073a0:	20000f5c 	.word	0x20000f5c

080073a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b08e      	sub	sp, #56	@ 0x38
 80073a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073aa:	e0ce      	b.n	800754a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	da19      	bge.n	80073e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073b2:	1d3b      	adds	r3, r7, #4
 80073b4:	3304      	adds	r3, #4
 80073b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10b      	bne.n	80073d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	61fb      	str	r3, [r7, #28]
}
 80073d0:	bf00      	nop
 80073d2:	bf00      	nop
 80073d4:	e7fd      	b.n	80073d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073dc:	6850      	ldr	r0, [r2, #4]
 80073de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073e0:	6892      	ldr	r2, [r2, #8]
 80073e2:	4611      	mov	r1, r2
 80073e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f2c0 80ae 	blt.w	800754a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d004      	beq.n	8007404 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fc:	3304      	adds	r3, #4
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fd fde0 	bl	8004fc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007404:	463b      	mov	r3, r7
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff ff6a 	bl	80072e0 <prvSampleTimeNow>
 800740c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b09      	cmp	r3, #9
 8007412:	f200 8097 	bhi.w	8007544 <prvProcessReceivedCommands+0x1a0>
 8007416:	a201      	add	r2, pc, #4	@ (adr r2, 800741c <prvProcessReceivedCommands+0x78>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007445 	.word	0x08007445
 8007420:	08007445 	.word	0x08007445
 8007424:	08007445 	.word	0x08007445
 8007428:	080074bb 	.word	0x080074bb
 800742c:	080074cf 	.word	0x080074cf
 8007430:	0800751b 	.word	0x0800751b
 8007434:	08007445 	.word	0x08007445
 8007438:	08007445 	.word	0x08007445
 800743c:	080074bb 	.word	0x080074bb
 8007440:	080074cf 	.word	0x080074cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007446:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	b2da      	uxtb	r2, r3
 8007450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007452:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	18d1      	adds	r1, r2, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007464:	f7ff ff5c 	bl	8007320 <prvInsertTimerInActiveList>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d06c      	beq.n	8007548 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800746e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007474:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007478:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b00      	cmp	r3, #0
 8007482:	d061      	beq.n	8007548 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	441a      	add	r2, r3
 800748c:	2300      	movs	r3, #0
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	2300      	movs	r3, #0
 8007492:	2100      	movs	r1, #0
 8007494:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007496:	f7ff fe01 	bl	800709c <xTimerGenericCommand>
 800749a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d152      	bne.n	8007548 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	61bb      	str	r3, [r7, #24]
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	e7fd      	b.n	80074b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074c0:	f023 0301 	bic.w	r3, r3, #1
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074cc:	e03d      	b.n	800754a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074d4:	f043 0301 	orr.w	r3, r3, #1
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10b      	bne.n	8007506 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	617b      	str	r3, [r7, #20]
}
 8007500:	bf00      	nop
 8007502:	bf00      	nop
 8007504:	e7fd      	b.n	8007502 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750c:	18d1      	adds	r1, r2, r3
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007514:	f7ff ff04 	bl	8007320 <prvInsertTimerInActiveList>
					break;
 8007518:	e017      	b.n	800754a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800751a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d103      	bne.n	8007530 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007528:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800752a:	f000 fb5d 	bl	8007be8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800752e:	e00c      	b.n	800754a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007532:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007536:	f023 0301 	bic.w	r3, r3, #1
 800753a:	b2da      	uxtb	r2, r3
 800753c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007542:	e002      	b.n	800754a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007544:	bf00      	nop
 8007546:	e000      	b.n	800754a <prvProcessReceivedCommands+0x1a6>
					break;
 8007548:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800754a:	4b08      	ldr	r3, [pc, #32]	@ (800756c <prvProcessReceivedCommands+0x1c8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	1d39      	adds	r1, r7, #4
 8007550:	2200      	movs	r2, #0
 8007552:	4618      	mov	r0, r3
 8007554:	f7fe f8b4 	bl	80056c0 <xQueueReceive>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	f47f af26 	bne.w	80073ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	3730      	adds	r7, #48	@ 0x30
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000f64 	.word	0x20000f64

08007570 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007576:	e049      	b.n	800760c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007578:	4b2e      	ldr	r3, [pc, #184]	@ (8007634 <prvSwitchTimerLists+0xc4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007582:	4b2c      	ldr	r3, [pc, #176]	@ (8007634 <prvSwitchTimerLists+0xc4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3304      	adds	r3, #4
 8007590:	4618      	mov	r0, r3
 8007592:	f7fd fd17 	bl	8004fc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d02f      	beq.n	800760c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	4413      	add	r3, r2
 80075b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d90e      	bls.n	80075dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007634 <prvSwitchTimerLists+0xc4>)
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3304      	adds	r3, #4
 80075d2:	4619      	mov	r1, r3
 80075d4:	4610      	mov	r0, r2
 80075d6:	f7fd fcbc 	bl	8004f52 <vListInsert>
 80075da:	e017      	b.n	800760c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075dc:	2300      	movs	r3, #0
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	2300      	movs	r3, #0
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	2100      	movs	r1, #0
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff fd58 	bl	800709c <xTimerGenericCommand>
 80075ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10b      	bne.n	800760c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	603b      	str	r3, [r7, #0]
}
 8007606:	bf00      	nop
 8007608:	bf00      	nop
 800760a:	e7fd      	b.n	8007608 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800760c:	4b09      	ldr	r3, [pc, #36]	@ (8007634 <prvSwitchTimerLists+0xc4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1b0      	bne.n	8007578 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007616:	4b07      	ldr	r3, [pc, #28]	@ (8007634 <prvSwitchTimerLists+0xc4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800761c:	4b06      	ldr	r3, [pc, #24]	@ (8007638 <prvSwitchTimerLists+0xc8>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a04      	ldr	r2, [pc, #16]	@ (8007634 <prvSwitchTimerLists+0xc4>)
 8007622:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007624:	4a04      	ldr	r2, [pc, #16]	@ (8007638 <prvSwitchTimerLists+0xc8>)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	6013      	str	r3, [r2, #0]
}
 800762a:	bf00      	nop
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20000f5c 	.word	0x20000f5c
 8007638:	20000f60 	.word	0x20000f60

0800763c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007642:	f000 f969 	bl	8007918 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007646:	4b15      	ldr	r3, [pc, #84]	@ (800769c <prvCheckForValidListAndQueue+0x60>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d120      	bne.n	8007690 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800764e:	4814      	ldr	r0, [pc, #80]	@ (80076a0 <prvCheckForValidListAndQueue+0x64>)
 8007650:	f7fd fc2e 	bl	8004eb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007654:	4813      	ldr	r0, [pc, #76]	@ (80076a4 <prvCheckForValidListAndQueue+0x68>)
 8007656:	f7fd fc2b 	bl	8004eb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800765a:	4b13      	ldr	r3, [pc, #76]	@ (80076a8 <prvCheckForValidListAndQueue+0x6c>)
 800765c:	4a10      	ldr	r2, [pc, #64]	@ (80076a0 <prvCheckForValidListAndQueue+0x64>)
 800765e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007660:	4b12      	ldr	r3, [pc, #72]	@ (80076ac <prvCheckForValidListAndQueue+0x70>)
 8007662:	4a10      	ldr	r2, [pc, #64]	@ (80076a4 <prvCheckForValidListAndQueue+0x68>)
 8007664:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007666:	2300      	movs	r3, #0
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	4b11      	ldr	r3, [pc, #68]	@ (80076b0 <prvCheckForValidListAndQueue+0x74>)
 800766c:	4a11      	ldr	r2, [pc, #68]	@ (80076b4 <prvCheckForValidListAndQueue+0x78>)
 800766e:	2110      	movs	r1, #16
 8007670:	200a      	movs	r0, #10
 8007672:	f7fd fd3b 	bl	80050ec <xQueueGenericCreateStatic>
 8007676:	4603      	mov	r3, r0
 8007678:	4a08      	ldr	r2, [pc, #32]	@ (800769c <prvCheckForValidListAndQueue+0x60>)
 800767a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800767c:	4b07      	ldr	r3, [pc, #28]	@ (800769c <prvCheckForValidListAndQueue+0x60>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d005      	beq.n	8007690 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007684:	4b05      	ldr	r3, [pc, #20]	@ (800769c <prvCheckForValidListAndQueue+0x60>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	490b      	ldr	r1, [pc, #44]	@ (80076b8 <prvCheckForValidListAndQueue+0x7c>)
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe fbd8 	bl	8005e40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007690:	f000 f974 	bl	800797c <vPortExitCritical>
}
 8007694:	bf00      	nop
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20000f64 	.word	0x20000f64
 80076a0:	20000f34 	.word	0x20000f34
 80076a4:	20000f48 	.word	0x20000f48
 80076a8:	20000f5c 	.word	0x20000f5c
 80076ac:	20000f60 	.word	0x20000f60
 80076b0:	20001010 	.word	0x20001010
 80076b4:	20000f70 	.word	0x20000f70
 80076b8:	0800837c 	.word	0x0800837c

080076bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	3b04      	subs	r3, #4
 80076cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3b04      	subs	r3, #4
 80076da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f023 0201 	bic.w	r2, r3, #1
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3b04      	subs	r3, #4
 80076ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076ec:	4a0c      	ldr	r2, [pc, #48]	@ (8007720 <pxPortInitialiseStack+0x64>)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3b14      	subs	r3, #20
 80076f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3b04      	subs	r3, #4
 8007702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f06f 0202 	mvn.w	r2, #2
 800770a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3b20      	subs	r3, #32
 8007710:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007712:	68fb      	ldr	r3, [r7, #12]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	08007725 	.word	0x08007725

08007724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800772a:	2300      	movs	r3, #0
 800772c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800772e:	4b13      	ldr	r3, [pc, #76]	@ (800777c <prvTaskExitError+0x58>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007736:	d00b      	beq.n	8007750 <prvTaskExitError+0x2c>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	60fb      	str	r3, [r7, #12]
}
 800774a:	bf00      	nop
 800774c:	bf00      	nop
 800774e:	e7fd      	b.n	800774c <prvTaskExitError+0x28>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	60bb      	str	r3, [r7, #8]
}
 8007762:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007764:	bf00      	nop
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0fc      	beq.n	8007766 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800776c:	bf00      	nop
 800776e:	bf00      	nop
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	200000b0 	.word	0x200000b0

08007780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007780:	4b07      	ldr	r3, [pc, #28]	@ (80077a0 <pxCurrentTCBConst2>)
 8007782:	6819      	ldr	r1, [r3, #0]
 8007784:	6808      	ldr	r0, [r1, #0]
 8007786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778a:	f380 8809 	msr	PSP, r0
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f04f 0000 	mov.w	r0, #0
 8007796:	f380 8811 	msr	BASEPRI, r0
 800779a:	4770      	bx	lr
 800779c:	f3af 8000 	nop.w

080077a0 <pxCurrentTCBConst2>:
 80077a0:	20000a2c 	.word	0x20000a2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop

080077a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077a8:	4808      	ldr	r0, [pc, #32]	@ (80077cc <prvPortStartFirstTask+0x24>)
 80077aa:	6800      	ldr	r0, [r0, #0]
 80077ac:	6800      	ldr	r0, [r0, #0]
 80077ae:	f380 8808 	msr	MSP, r0
 80077b2:	f04f 0000 	mov.w	r0, #0
 80077b6:	f380 8814 	msr	CONTROL, r0
 80077ba:	b662      	cpsie	i
 80077bc:	b661      	cpsie	f
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	df00      	svc	0
 80077c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077ca:	bf00      	nop
 80077cc:	e000ed08 	.word	0xe000ed08

080077d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077d6:	4b47      	ldr	r3, [pc, #284]	@ (80078f4 <xPortStartScheduler+0x124>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a47      	ldr	r2, [pc, #284]	@ (80078f8 <xPortStartScheduler+0x128>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d10b      	bne.n	80077f8 <xPortStartScheduler+0x28>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	613b      	str	r3, [r7, #16]
}
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
 80077f6:	e7fd      	b.n	80077f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077f8:	4b3e      	ldr	r3, [pc, #248]	@ (80078f4 <xPortStartScheduler+0x124>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a3f      	ldr	r2, [pc, #252]	@ (80078fc <xPortStartScheduler+0x12c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d10b      	bne.n	800781a <xPortStartScheduler+0x4a>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	60fb      	str	r3, [r7, #12]
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	e7fd      	b.n	8007816 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800781a:	4b39      	ldr	r3, [pc, #228]	@ (8007900 <xPortStartScheduler+0x130>)
 800781c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	22ff      	movs	r2, #255	@ 0xff
 800782a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800783c:	b2da      	uxtb	r2, r3
 800783e:	4b31      	ldr	r3, [pc, #196]	@ (8007904 <xPortStartScheduler+0x134>)
 8007840:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007842:	4b31      	ldr	r3, [pc, #196]	@ (8007908 <xPortStartScheduler+0x138>)
 8007844:	2207      	movs	r2, #7
 8007846:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007848:	e009      	b.n	800785e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800784a:	4b2f      	ldr	r3, [pc, #188]	@ (8007908 <xPortStartScheduler+0x138>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3b01      	subs	r3, #1
 8007850:	4a2d      	ldr	r2, [pc, #180]	@ (8007908 <xPortStartScheduler+0x138>)
 8007852:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	b2db      	uxtb	r3, r3
 800785c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007866:	2b80      	cmp	r3, #128	@ 0x80
 8007868:	d0ef      	beq.n	800784a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800786a:	4b27      	ldr	r3, [pc, #156]	@ (8007908 <xPortStartScheduler+0x138>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f1c3 0307 	rsb	r3, r3, #7
 8007872:	2b04      	cmp	r3, #4
 8007874:	d00b      	beq.n	800788e <xPortStartScheduler+0xbe>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	60bb      	str	r3, [r7, #8]
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800788e:	4b1e      	ldr	r3, [pc, #120]	@ (8007908 <xPortStartScheduler+0x138>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	021b      	lsls	r3, r3, #8
 8007894:	4a1c      	ldr	r2, [pc, #112]	@ (8007908 <xPortStartScheduler+0x138>)
 8007896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007898:	4b1b      	ldr	r3, [pc, #108]	@ (8007908 <xPortStartScheduler+0x138>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078a0:	4a19      	ldr	r2, [pc, #100]	@ (8007908 <xPortStartScheduler+0x138>)
 80078a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078ac:	4b17      	ldr	r3, [pc, #92]	@ (800790c <xPortStartScheduler+0x13c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a16      	ldr	r2, [pc, #88]	@ (800790c <xPortStartScheduler+0x13c>)
 80078b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80078b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078b8:	4b14      	ldr	r3, [pc, #80]	@ (800790c <xPortStartScheduler+0x13c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a13      	ldr	r2, [pc, #76]	@ (800790c <xPortStartScheduler+0x13c>)
 80078be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80078c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078c4:	f000 f8da 	bl	8007a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078c8:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <xPortStartScheduler+0x140>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078ce:	f000 f8f9 	bl	8007ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078d2:	4b10      	ldr	r3, [pc, #64]	@ (8007914 <xPortStartScheduler+0x144>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007914 <xPortStartScheduler+0x144>)
 80078d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80078dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078de:	f7ff ff63 	bl	80077a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078e2:	f7fe ff17 	bl	8006714 <vTaskSwitchContext>
	prvTaskExitError();
 80078e6:	f7ff ff1d 	bl	8007724 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	e000ed00 	.word	0xe000ed00
 80078f8:	410fc271 	.word	0x410fc271
 80078fc:	410fc270 	.word	0x410fc270
 8007900:	e000e400 	.word	0xe000e400
 8007904:	20001060 	.word	0x20001060
 8007908:	20001064 	.word	0x20001064
 800790c:	e000ed20 	.word	0xe000ed20
 8007910:	200000b0 	.word	0x200000b0
 8007914:	e000ef34 	.word	0xe000ef34

08007918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	607b      	str	r3, [r7, #4]
}
 8007930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007932:	4b10      	ldr	r3, [pc, #64]	@ (8007974 <vPortEnterCritical+0x5c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3301      	adds	r3, #1
 8007938:	4a0e      	ldr	r2, [pc, #56]	@ (8007974 <vPortEnterCritical+0x5c>)
 800793a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800793c:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <vPortEnterCritical+0x5c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d110      	bne.n	8007966 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007944:	4b0c      	ldr	r3, [pc, #48]	@ (8007978 <vPortEnterCritical+0x60>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00b      	beq.n	8007966 <vPortEnterCritical+0x4e>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	603b      	str	r3, [r7, #0]
}
 8007960:	bf00      	nop
 8007962:	bf00      	nop
 8007964:	e7fd      	b.n	8007962 <vPortEnterCritical+0x4a>
	}
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	200000b0 	.word	0x200000b0
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007982:	4b12      	ldr	r3, [pc, #72]	@ (80079cc <vPortExitCritical+0x50>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10b      	bne.n	80079a2 <vPortExitCritical+0x26>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	607b      	str	r3, [r7, #4]
}
 800799c:	bf00      	nop
 800799e:	bf00      	nop
 80079a0:	e7fd      	b.n	800799e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079a2:	4b0a      	ldr	r3, [pc, #40]	@ (80079cc <vPortExitCritical+0x50>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	4a08      	ldr	r2, [pc, #32]	@ (80079cc <vPortExitCritical+0x50>)
 80079aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079ac:	4b07      	ldr	r3, [pc, #28]	@ (80079cc <vPortExitCritical+0x50>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <vPortExitCritical+0x44>
 80079b4:	2300      	movs	r3, #0
 80079b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	f383 8811 	msr	BASEPRI, r3
}
 80079be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	200000b0 	.word	0x200000b0

080079d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079d0:	f3ef 8009 	mrs	r0, PSP
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	4b15      	ldr	r3, [pc, #84]	@ (8007a30 <pxCurrentTCBConst>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	f01e 0f10 	tst.w	lr, #16
 80079e0:	bf08      	it	eq
 80079e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ea:	6010      	str	r0, [r2, #0]
 80079ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80079f4:	f380 8811 	msr	BASEPRI, r0
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f7fe fe88 	bl	8006714 <vTaskSwitchContext>
 8007a04:	f04f 0000 	mov.w	r0, #0
 8007a08:	f380 8811 	msr	BASEPRI, r0
 8007a0c:	bc09      	pop	{r0, r3}
 8007a0e:	6819      	ldr	r1, [r3, #0]
 8007a10:	6808      	ldr	r0, [r1, #0]
 8007a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a16:	f01e 0f10 	tst.w	lr, #16
 8007a1a:	bf08      	it	eq
 8007a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a20:	f380 8809 	msr	PSP, r0
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	f3af 8000 	nop.w

08007a30 <pxCurrentTCBConst>:
 8007a30:	20000a2c 	.word	0x20000a2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop

08007a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	607b      	str	r3, [r7, #4]
}
 8007a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a52:	f7fe fda5 	bl	80065a0 <xTaskIncrementTick>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a5c:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <xPortSysTickHandler+0x40>)
 8007a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	2300      	movs	r3, #0
 8007a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	f383 8811 	msr	BASEPRI, r3
}
 8007a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a80:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab0 <vPortSetupTimerInterrupt+0x34>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a86:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab4 <vPortSetupTimerInterrupt+0x38>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab8 <vPortSetupTimerInterrupt+0x3c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a0a      	ldr	r2, [pc, #40]	@ (8007abc <vPortSetupTimerInterrupt+0x40>)
 8007a92:	fba2 2303 	umull	r2, r3, r2, r3
 8007a96:	099b      	lsrs	r3, r3, #6
 8007a98:	4a09      	ldr	r2, [pc, #36]	@ (8007ac0 <vPortSetupTimerInterrupt+0x44>)
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a9e:	4b04      	ldr	r3, [pc, #16]	@ (8007ab0 <vPortSetupTimerInterrupt+0x34>)
 8007aa0:	2207      	movs	r2, #7
 8007aa2:	601a      	str	r2, [r3, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	e000e010 	.word	0xe000e010
 8007ab4:	e000e018 	.word	0xe000e018
 8007ab8:	20000074 	.word	0x20000074
 8007abc:	10624dd3 	.word	0x10624dd3
 8007ac0:	e000e014 	.word	0xe000e014

08007ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ad4 <vPortEnableVFP+0x10>
 8007ac8:	6801      	ldr	r1, [r0, #0]
 8007aca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ace:	6001      	str	r1, [r0, #0]
 8007ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ad2:	bf00      	nop
 8007ad4:	e000ed88 	.word	0xe000ed88

08007ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ade:	f3ef 8305 	mrs	r3, IPSR
 8007ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b0f      	cmp	r3, #15
 8007ae8:	d915      	bls.n	8007b16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aea:	4a18      	ldr	r2, [pc, #96]	@ (8007b4c <vPortValidateInterruptPriority+0x74>)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007af4:	4b16      	ldr	r3, [pc, #88]	@ (8007b50 <vPortValidateInterruptPriority+0x78>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	7afa      	ldrb	r2, [r7, #11]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d20b      	bcs.n	8007b16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	607b      	str	r3, [r7, #4]
}
 8007b10:	bf00      	nop
 8007b12:	bf00      	nop
 8007b14:	e7fd      	b.n	8007b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b16:	4b0f      	ldr	r3, [pc, #60]	@ (8007b54 <vPortValidateInterruptPriority+0x7c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b58 <vPortValidateInterruptPriority+0x80>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d90b      	bls.n	8007b3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	603b      	str	r3, [r7, #0]
}
 8007b38:	bf00      	nop
 8007b3a:	bf00      	nop
 8007b3c:	e7fd      	b.n	8007b3a <vPortValidateInterruptPriority+0x62>
	}
 8007b3e:	bf00      	nop
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	e000e3f0 	.word	0xe000e3f0
 8007b50:	20001060 	.word	0x20001060
 8007b54:	e000ed0c 	.word	0xe000ed0c
 8007b58:	20001064 	.word	0x20001064

08007b5c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d004      	beq.n	8007b7c <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f023 0307 	bic.w	r3, r3, #7
 8007b78:	3308      	adds	r3, #8
 8007b7a:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8007b7c:	f7fe fc54 	bl	8006428 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8007b80:	4b16      	ldr	r3, [pc, #88]	@ (8007bdc <pvPortMalloc+0x80>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d105      	bne.n	8007b94 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8007b88:	4b15      	ldr	r3, [pc, #84]	@ (8007be0 <pvPortMalloc+0x84>)
 8007b8a:	f023 0307 	bic.w	r3, r3, #7
 8007b8e:	461a      	mov	r2, r3
 8007b90:	4b12      	ldr	r3, [pc, #72]	@ (8007bdc <pvPortMalloc+0x80>)
 8007b92:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8007b94:	4b13      	ldr	r3, [pc, #76]	@ (8007be4 <pvPortMalloc+0x88>)
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f643 32f7 	movw	r2, #15351	@ 0x3bf7
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d813      	bhi.n	8007bcc <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8007ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8007be4 <pvPortMalloc+0x88>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	441a      	add	r2, r3
 8007bac:	4b0d      	ldr	r3, [pc, #52]	@ (8007be4 <pvPortMalloc+0x88>)
 8007bae:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d90b      	bls.n	8007bcc <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8007bb4:	4b09      	ldr	r3, [pc, #36]	@ (8007bdc <pvPortMalloc+0x80>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8007be4 <pvPortMalloc+0x88>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8007bc0:	4b08      	ldr	r3, [pc, #32]	@ (8007be4 <pvPortMalloc+0x88>)
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	4a06      	ldr	r2, [pc, #24]	@ (8007be4 <pvPortMalloc+0x88>)
 8007bca:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bcc:	f7fe fc3a 	bl	8006444 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20004c6c 	.word	0x20004c6c
 8007be0:	20001070 	.word	0x20001070
 8007be4:	20004c68 	.word	0x20004c68

08007be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <vPortFree+0x26>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	60fb      	str	r3, [r7, #12]
}
 8007c08:	bf00      	nop
 8007c0a:	bf00      	nop
 8007c0c:	e7fd      	b.n	8007c0a <vPortFree+0x22>
}
 8007c0e:	bf00      	nop
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
	...

08007c1c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8007c20:	4814      	ldr	r0, [pc, #80]	@ (8007c74 <I2Cx_Init+0x58>)
 8007c22:	f7fa fe2f 	bl	8002884 <HAL_I2C_GetState>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d121      	bne.n	8007c70 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8007c2c:	4b11      	ldr	r3, [pc, #68]	@ (8007c74 <I2Cx_Init+0x58>)
 8007c2e:	4a12      	ldr	r2, [pc, #72]	@ (8007c78 <I2Cx_Init+0x5c>)
 8007c30:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8007c32:	4b10      	ldr	r3, [pc, #64]	@ (8007c74 <I2Cx_Init+0x58>)
 8007c34:	2243      	movs	r2, #67	@ 0x43
 8007c36:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8007c38:	4b0e      	ldr	r3, [pc, #56]	@ (8007c74 <I2Cx_Init+0x58>)
 8007c3a:	4a10      	ldr	r2, [pc, #64]	@ (8007c7c <I2Cx_Init+0x60>)
 8007c3c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c74 <I2Cx_Init+0x58>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007c44:	4b0b      	ldr	r3, [pc, #44]	@ (8007c74 <I2Cx_Init+0x58>)
 8007c46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007c4a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8007c4c:	4b09      	ldr	r3, [pc, #36]	@ (8007c74 <I2Cx_Init+0x58>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8007c52:	4b08      	ldr	r3, [pc, #32]	@ (8007c74 <I2Cx_Init+0x58>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8007c58:	4b06      	ldr	r3, [pc, #24]	@ (8007c74 <I2Cx_Init+0x58>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8007c5e:	4b05      	ldr	r3, [pc, #20]	@ (8007c74 <I2Cx_Init+0x58>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8007c64:	4803      	ldr	r0, [pc, #12]	@ (8007c74 <I2Cx_Init+0x58>)
 8007c66:	f000 f86b 	bl	8007d40 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8007c6a:	4802      	ldr	r0, [pc, #8]	@ (8007c74 <I2Cx_Init+0x58>)
 8007c6c:	f7fa f96a 	bl	8001f44 <HAL_I2C_Init>
  }
}
 8007c70:	bf00      	nop
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	20004c70 	.word	0x20004c70
 8007c78:	40005400 	.word	0x40005400
 8007c7c:	000186a0 	.word	0x000186a0

08007c80 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af04      	add	r7, sp, #16
 8007c86:	4603      	mov	r3, r0
 8007c88:	80fb      	strh	r3, [r7, #6]
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	717b      	strb	r3, [r7, #5]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8007c96:	797b      	ldrb	r3, [r7, #5]
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc8 <I2Cx_WriteData+0x48>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	88f9      	ldrh	r1, [r7, #6]
 8007ca0:	9302      	str	r3, [sp, #8]
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	1d3b      	adds	r3, r7, #4
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	2301      	movs	r3, #1
 8007cac:	4807      	ldr	r0, [pc, #28]	@ (8007ccc <I2Cx_WriteData+0x4c>)
 8007cae:	f7fa fabd 	bl	800222c <HAL_I2C_Mem_Write>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8007cbc:	f000 f834 	bl	8007d28 <I2Cx_Error>
  }
}
 8007cc0:	bf00      	nop
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	200000b4 	.word	0x200000b4
 8007ccc:	20004c70 	.word	0x20004c70

08007cd0 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b088      	sub	sp, #32
 8007cd4:	af04      	add	r7, sp, #16
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	460a      	mov	r2, r1
 8007cda:	80fb      	strh	r3, [r7, #6]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8007ce8:	797b      	ldrb	r3, [r7, #5]
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	4b0c      	ldr	r3, [pc, #48]	@ (8007d20 <I2Cx_ReadData+0x50>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	88f9      	ldrh	r1, [r7, #6]
 8007cf2:	9302      	str	r3, [sp, #8]
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	f107 030e 	add.w	r3, r7, #14
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4808      	ldr	r0, [pc, #32]	@ (8007d24 <I2Cx_ReadData+0x54>)
 8007d02:	f7fa fb8d 	bl	8002420 <HAL_I2C_Mem_Read>
 8007d06:	4603      	mov	r3, r0
 8007d08:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8007d10:	f000 f80a 	bl	8007d28 <I2Cx_Error>
  }
  return value;
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	200000b4 	.word	0x200000b4
 8007d24:	20004c70 	.word	0x20004c70

08007d28 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8007d2c:	4803      	ldr	r0, [pc, #12]	@ (8007d3c <I2Cx_Error+0x14>)
 8007d2e:	f7fa fa4d 	bl	80021cc <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C communication BUS */
  I2Cx_Init();
 8007d32:	f7ff ff73 	bl	8007c1c <I2Cx_Init>
}
 8007d36:	bf00      	nop
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20004c70 	.word	0x20004c70

08007d40 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08a      	sub	sp, #40	@ 0x28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8007d48:	2300      	movs	r3, #0
 8007d4a:	613b      	str	r3, [r7, #16]
 8007d4c:	4b25      	ldr	r3, [pc, #148]	@ (8007de4 <I2Cx_MspInit+0xa4>)
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d50:	4a24      	ldr	r2, [pc, #144]	@ (8007de4 <I2Cx_MspInit+0xa4>)
 8007d52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d58:	4b22      	ldr	r3, [pc, #136]	@ (8007de4 <I2Cx_MspInit+0xa4>)
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d60:	613b      	str	r3, [r7, #16]
 8007d62:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	4b1e      	ldr	r3, [pc, #120]	@ (8007de4 <I2Cx_MspInit+0xa4>)
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007de4 <I2Cx_MspInit+0xa4>)
 8007d6e:	f043 0302 	orr.w	r3, r3, #2
 8007d72:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d74:	4b1b      	ldr	r3, [pc, #108]	@ (8007de4 <I2Cx_MspInit+0xa4>)
 8007d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	60fb      	str	r3, [r7, #12]
 8007d7e:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8007d80:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8007d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8007d86:	2312      	movs	r3, #18
 8007d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8007d8e:	2302      	movs	r3, #2
 8007d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8007d92:	2304      	movs	r3, #4
 8007d94:	627b      	str	r3, [r7, #36]	@ 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8007d96:	f107 0314 	add.w	r3, r7, #20
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	4812      	ldr	r0, [pc, #72]	@ (8007de8 <I2Cx_MspInit+0xa8>)
 8007d9e:	f7f9 fe35 	bl	8001a0c <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8007da2:	4b10      	ldr	r3, [pc, #64]	@ (8007de4 <I2Cx_MspInit+0xa4>)
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	4a0f      	ldr	r2, [pc, #60]	@ (8007de4 <I2Cx_MspInit+0xa4>)
 8007da8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007dac:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8007dae:	4b0d      	ldr	r3, [pc, #52]	@ (8007de4 <I2Cx_MspInit+0xa4>)
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	4a0c      	ldr	r2, [pc, #48]	@ (8007de4 <I2Cx_MspInit+0xa4>)
 8007db4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007db8:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8007dba:	2200      	movs	r2, #0
 8007dbc:	210f      	movs	r1, #15
 8007dbe:	201f      	movs	r0, #31
 8007dc0:	f7f9 fdfa 	bl	80019b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8007dc4:	201f      	movs	r0, #31
 8007dc6:	f7f9 fe13 	bl	80019f0 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8007dca:	2200      	movs	r2, #0
 8007dcc:	210f      	movs	r1, #15
 8007dce:	2020      	movs	r0, #32
 8007dd0:	f7f9 fdf2 	bl	80019b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8007dd4:	2020      	movs	r0, #32
 8007dd6:	f7f9 fe0b 	bl	80019f0 <HAL_NVIC_EnableIRQ>
}
 8007dda:	bf00      	nop
 8007ddc:	3728      	adds	r7, #40	@ 0x28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	40023800 	.word	0x40023800
 8007de8:	40020400 	.word	0x40020400

08007dec <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8007df2:	2300      	movs	r3, #0
 8007df4:	603b      	str	r3, [r7, #0]
 8007df6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e34 <COMPASSACCELERO_IO_Init+0x48>)
 8007df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8007e34 <COMPASSACCELERO_IO_Init+0x48>)
 8007dfc:	f043 0310 	orr.w	r3, r3, #16
 8007e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e02:	4b0c      	ldr	r3, [pc, #48]	@ (8007e34 <COMPASSACCELERO_IO_Init+0x48>)
 8007e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e06:	f003 0310 	and.w	r3, r3, #16
 8007e0a:	603b      	str	r3, [r7, #0]
 8007e0c:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8007e0e:	2304      	movs	r3, #4
 8007e10:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8007e1e:	1d3b      	adds	r3, r7, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4805      	ldr	r0, [pc, #20]	@ (8007e38 <COMPASSACCELERO_IO_Init+0x4c>)
 8007e24:	f7f9 fdf2 	bl	8001a0c <HAL_GPIO_Init>
  
  I2Cx_Init();
 8007e28:	f7ff fef8 	bl	8007c1c <I2Cx_Init>
}
 8007e2c:	bf00      	nop
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	40023800 	.word	0x40023800
 8007e38:	40021000 	.word	0x40021000

08007e3c <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8007e42:	2300      	movs	r3, #0
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	4b13      	ldr	r3, [pc, #76]	@ (8007e94 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8007e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e4a:	4a12      	ldr	r2, [pc, #72]	@ (8007e94 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8007e4c:	f043 0310 	orr.w	r3, r3, #16
 8007e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8007e52:	4b10      	ldr	r3, [pc, #64]	@ (8007e94 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8007e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e56:	f003 0310 	and.w	r3, r3, #16
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8007e5e:	2330      	movs	r3, #48	@ 0x30
 8007e60:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8007e62:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8007e66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8007e70:	1d3b      	adds	r3, r7, #4
 8007e72:	4619      	mov	r1, r3
 8007e74:	4808      	ldr	r0, [pc, #32]	@ (8007e98 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8007e76:	f7f9 fdc9 	bl	8001a0c <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	210f      	movs	r1, #15
 8007e7e:	200a      	movs	r0, #10
 8007e80:	f7f9 fd9a 	bl	80019b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8007e84:	200a      	movs	r0, #10
 8007e86:	f7f9 fdb3 	bl	80019f0 <HAL_NVIC_EnableIRQ>
}
 8007e8a:	bf00      	nop
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	40023800 	.word	0x40023800
 8007e98:	40021000 	.word	0x40021000

08007e9c <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	80fb      	strh	r3, [r7, #6]
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	717b      	strb	r3, [r7, #5]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8007eae:	793a      	ldrb	r2, [r7, #4]
 8007eb0:	7979      	ldrb	r1, [r7, #5]
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff fee3 	bl	8007c80 <I2Cx_WriteData>
}
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b082      	sub	sp, #8
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	4603      	mov	r3, r0
 8007eca:	460a      	mov	r2, r1
 8007ecc:	80fb      	strh	r3, [r7, #6]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8007ed2:	797a      	ldrb	r2, [r7, #5]
 8007ed4:	88fb      	ldrh	r3, [r7, #6]
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7ff fef9 	bl	8007cd0 <I2Cx_ReadData>
 8007ede:	4603      	mov	r3, r0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8007ef6:	1d3b      	adds	r3, r7, #4
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8007efe:	4b58      	ldr	r3, [pc, #352]	@ (8008060 <BSP_ACCELERO_Init+0x178>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	4798      	blx	r3
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b33      	cmp	r3, #51	@ 0x33
 8007f08:	d14f      	bne.n	8007faa <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8007f0a:	4b56      	ldr	r3, [pc, #344]	@ (8008064 <BSP_ACCELERO_Init+0x17c>)
 8007f0c:	4a54      	ldr	r2, [pc, #336]	@ (8008060 <BSP_ACCELERO_Init+0x178>)
 8007f0e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8007f10:	2300      	movs	r3, #0
 8007f12:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_200_HZ;
 8007f14:	2360      	movs	r3, #96	@ 0x60
 8007f16:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8007f18:	2307      	movs	r3, #7
 8007f1a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8007f20:	2300      	movs	r3, #0
 8007f22:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8007f24:	2300      	movs	r3, #0
 8007f26:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8007f28:	2308      	movs	r3, #8
 8007f2a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8007f2c:	7b3a      	ldrb	r2, [r7, #12]
 8007f2e:	7b7b      	ldrb	r3, [r7, #13]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8007f36:	4313      	orrs	r3, r2
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	8abb      	ldrh	r3, [r7, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8007f42:	7c3a      	ldrb	r2, [r7, #16]
 8007f44:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8007f46:	4313      	orrs	r3, r2
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	7cbb      	ldrb	r3, [r7, #18]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8007f58:	b21a      	sxth	r2, r3
 8007f5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	b21b      	sxth	r3, r3
 8007f62:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8007f64:	4b3f      	ldr	r3, [pc, #252]	@ (8008064 <BSP_ACCELERO_Init+0x17c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	8aba      	ldrh	r2, [r7, #20]
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8007f70:	2380      	movs	r3, #128	@ 0x80
 8007f72:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8007f74:	2310      	movs	r3, #16
 8007f76:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8007f80:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8007f82:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8007f84:	4313      	orrs	r3, r2
 8007f86:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8007f88:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8007f90:	4313      	orrs	r3, r2
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8007f96:	4b33      	ldr	r3, [pc, #204]	@ (8008064 <BSP_ACCELERO_Init+0x17c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9c:	8aba      	ldrh	r2, [r7, #20]
 8007f9e:	b2d2      	uxtb	r2, r2
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4798      	blx	r3

    ret = ACCELERO_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	75fb      	strb	r3, [r7, #23]
 8007fa8:	e054      	b.n	8008054 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8007faa:	4b2f      	ldr	r3, [pc, #188]	@ (8008068 <BSP_ACCELERO_Init+0x180>)
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	4798      	blx	r3
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b33      	cmp	r3, #51	@ 0x33
 8007fb4:	d14e      	bne.n	8008054 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8007fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8008064 <BSP_ACCELERO_Init+0x17c>)
 8007fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8008068 <BSP_ACCELERO_Init+0x180>)
 8007fba:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_200_HZ;
 8007fc0:	2360      	movs	r3, #96	@ 0x60
 8007fc2:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8007fc4:	2307      	movs	r3, #7
 8007fc6:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8007fd4:	2308      	movs	r3, #8
 8007fd6:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8007fd8:	7b3a      	ldrb	r2, [r7, #12]
 8007fda:	7b7b      	ldrb	r3, [r7, #13]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	8abb      	ldrh	r3, [r7, #20]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8007fee:	7c3a      	ldrb	r2, [r7, #16]
 8007ff0:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	7cbb      	ldrb	r3, [r7, #18]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	b2db      	uxtb	r3, r3
 8008002:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8008004:	b21a      	sxth	r2, r3
 8008006:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800800a:	4313      	orrs	r3, r2
 800800c:	b21b      	sxth	r3, r3
 800800e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8008010:	4b14      	ldr	r3, [pc, #80]	@ (8008064 <BSP_ACCELERO_Init+0x17c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	8aba      	ldrh	r2, [r7, #20]
 8008018:	4610      	mov	r0, r2
 800801a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 800801c:	2380      	movs	r3, #128	@ 0x80
 800801e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8008020:	2310      	movs	r3, #16
 8008022:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8008024:	2300      	movs	r3, #0
 8008026:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8008028:	2300      	movs	r3, #0
 800802a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800802c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800802e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8008030:	4313      	orrs	r3, r2
 8008032:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8008034:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8008036:	4313      	orrs	r3, r2
 8008038:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800803a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800803c:	4313      	orrs	r3, r2
 800803e:	b2db      	uxtb	r3, r3
 8008040:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8008042:	4b08      	ldr	r3, [pc, #32]	@ (8008064 <BSP_ACCELERO_Init+0x17c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008048:	8aba      	ldrh	r2, [r7, #20]
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	4610      	mov	r0, r2
 800804e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008054:	7dfb      	ldrb	r3, [r7, #23]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000034 	.word	0x20000034
 8008064:	20004cc4 	.word	0x20004cc4
 8008068:	20000000 	.word	0x20000000

0800806c <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8008078:	4b10      	ldr	r3, [pc, #64]	@ (80080bc <BSP_ACCELERO_GetXYZ+0x50>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800807e:	2b00      	cmp	r3, #0
 8008080:	d018      	beq.n	80080b4 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8008082:	4b0e      	ldr	r3, [pc, #56]	@ (80080bc <BSP_ACCELERO_GetXYZ+0x50>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 800808c:	4b0b      	ldr	r3, [pc, #44]	@ (80080bc <BSP_ACCELERO_GetXYZ+0x50>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a0b      	ldr	r2, [pc, #44]	@ (80080c0 <BSP_ACCELERO_GetXYZ+0x54>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d10e      	bne.n	80080b4 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 80080a6:	89fb      	ldrh	r3, [r7, #14]
 80080a8:	425b      	negs	r3, r3
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3302      	adds	r3, #2
 80080b0:	b212      	sxth	r2, r2
 80080b2:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80080b4:	bf00      	nop
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20004cc4 	.word	0x20004cc4
 80080c0:	20000034 	.word	0x20000034

080080c4 <__malloc_lock>:
 80080c4:	4801      	ldr	r0, [pc, #4]	@ (80080cc <__malloc_lock+0x8>)
 80080c6:	f000 b891 	b.w	80081ec <__retarget_lock_acquire_recursive>
 80080ca:	bf00      	nop
 80080cc:	20004e04 	.word	0x20004e04

080080d0 <__malloc_unlock>:
 80080d0:	4801      	ldr	r0, [pc, #4]	@ (80080d8 <__malloc_unlock+0x8>)
 80080d2:	f000 b88c 	b.w	80081ee <__retarget_lock_release_recursive>
 80080d6:	bf00      	nop
 80080d8:	20004e04 	.word	0x20004e04

080080dc <memset>:
 80080dc:	4402      	add	r2, r0
 80080de:	4603      	mov	r3, r0
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d100      	bne.n	80080e6 <memset+0xa>
 80080e4:	4770      	bx	lr
 80080e6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ea:	e7f9      	b.n	80080e0 <memset+0x4>

080080ec <_reclaim_reent>:
 80080ec:	4b29      	ldr	r3, [pc, #164]	@ (8008194 <_reclaim_reent+0xa8>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4283      	cmp	r3, r0
 80080f2:	b570      	push	{r4, r5, r6, lr}
 80080f4:	4604      	mov	r4, r0
 80080f6:	d04b      	beq.n	8008190 <_reclaim_reent+0xa4>
 80080f8:	69c3      	ldr	r3, [r0, #28]
 80080fa:	b1ab      	cbz	r3, 8008128 <_reclaim_reent+0x3c>
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	b16b      	cbz	r3, 800811c <_reclaim_reent+0x30>
 8008100:	2500      	movs	r5, #0
 8008102:	69e3      	ldr	r3, [r4, #28]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	5959      	ldr	r1, [r3, r5]
 8008108:	2900      	cmp	r1, #0
 800810a:	d13b      	bne.n	8008184 <_reclaim_reent+0x98>
 800810c:	3504      	adds	r5, #4
 800810e:	2d80      	cmp	r5, #128	@ 0x80
 8008110:	d1f7      	bne.n	8008102 <_reclaim_reent+0x16>
 8008112:	69e3      	ldr	r3, [r4, #28]
 8008114:	4620      	mov	r0, r4
 8008116:	68d9      	ldr	r1, [r3, #12]
 8008118:	f000 f878 	bl	800820c <_free_r>
 800811c:	69e3      	ldr	r3, [r4, #28]
 800811e:	6819      	ldr	r1, [r3, #0]
 8008120:	b111      	cbz	r1, 8008128 <_reclaim_reent+0x3c>
 8008122:	4620      	mov	r0, r4
 8008124:	f000 f872 	bl	800820c <_free_r>
 8008128:	6961      	ldr	r1, [r4, #20]
 800812a:	b111      	cbz	r1, 8008132 <_reclaim_reent+0x46>
 800812c:	4620      	mov	r0, r4
 800812e:	f000 f86d 	bl	800820c <_free_r>
 8008132:	69e1      	ldr	r1, [r4, #28]
 8008134:	b111      	cbz	r1, 800813c <_reclaim_reent+0x50>
 8008136:	4620      	mov	r0, r4
 8008138:	f000 f868 	bl	800820c <_free_r>
 800813c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800813e:	b111      	cbz	r1, 8008146 <_reclaim_reent+0x5a>
 8008140:	4620      	mov	r0, r4
 8008142:	f000 f863 	bl	800820c <_free_r>
 8008146:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008148:	b111      	cbz	r1, 8008150 <_reclaim_reent+0x64>
 800814a:	4620      	mov	r0, r4
 800814c:	f000 f85e 	bl	800820c <_free_r>
 8008150:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008152:	b111      	cbz	r1, 800815a <_reclaim_reent+0x6e>
 8008154:	4620      	mov	r0, r4
 8008156:	f000 f859 	bl	800820c <_free_r>
 800815a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800815c:	b111      	cbz	r1, 8008164 <_reclaim_reent+0x78>
 800815e:	4620      	mov	r0, r4
 8008160:	f000 f854 	bl	800820c <_free_r>
 8008164:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008166:	b111      	cbz	r1, 800816e <_reclaim_reent+0x82>
 8008168:	4620      	mov	r0, r4
 800816a:	f000 f84f 	bl	800820c <_free_r>
 800816e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008170:	b111      	cbz	r1, 8008178 <_reclaim_reent+0x8c>
 8008172:	4620      	mov	r0, r4
 8008174:	f000 f84a 	bl	800820c <_free_r>
 8008178:	6a23      	ldr	r3, [r4, #32]
 800817a:	b14b      	cbz	r3, 8008190 <_reclaim_reent+0xa4>
 800817c:	4620      	mov	r0, r4
 800817e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008182:	4718      	bx	r3
 8008184:	680e      	ldr	r6, [r1, #0]
 8008186:	4620      	mov	r0, r4
 8008188:	f000 f840 	bl	800820c <_free_r>
 800818c:	4631      	mov	r1, r6
 800818e:	e7bb      	b.n	8008108 <_reclaim_reent+0x1c>
 8008190:	bd70      	pop	{r4, r5, r6, pc}
 8008192:	bf00      	nop
 8008194:	200000b8 	.word	0x200000b8

08008198 <__errno>:
 8008198:	4b01      	ldr	r3, [pc, #4]	@ (80081a0 <__errno+0x8>)
 800819a:	6818      	ldr	r0, [r3, #0]
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	200000b8 	.word	0x200000b8

080081a4 <__libc_init_array>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	4d0d      	ldr	r5, [pc, #52]	@ (80081dc <__libc_init_array+0x38>)
 80081a8:	4c0d      	ldr	r4, [pc, #52]	@ (80081e0 <__libc_init_array+0x3c>)
 80081aa:	1b64      	subs	r4, r4, r5
 80081ac:	10a4      	asrs	r4, r4, #2
 80081ae:	2600      	movs	r6, #0
 80081b0:	42a6      	cmp	r6, r4
 80081b2:	d109      	bne.n	80081c8 <__libc_init_array+0x24>
 80081b4:	4d0b      	ldr	r5, [pc, #44]	@ (80081e4 <__libc_init_array+0x40>)
 80081b6:	4c0c      	ldr	r4, [pc, #48]	@ (80081e8 <__libc_init_array+0x44>)
 80081b8:	f000 f894 	bl	80082e4 <_init>
 80081bc:	1b64      	subs	r4, r4, r5
 80081be:	10a4      	asrs	r4, r4, #2
 80081c0:	2600      	movs	r6, #0
 80081c2:	42a6      	cmp	r6, r4
 80081c4:	d105      	bne.n	80081d2 <__libc_init_array+0x2e>
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081cc:	4798      	blx	r3
 80081ce:	3601      	adds	r6, #1
 80081d0:	e7ee      	b.n	80081b0 <__libc_init_array+0xc>
 80081d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d6:	4798      	blx	r3
 80081d8:	3601      	adds	r6, #1
 80081da:	e7f2      	b.n	80081c2 <__libc_init_array+0x1e>
 80081dc:	08008444 	.word	0x08008444
 80081e0:	08008444 	.word	0x08008444
 80081e4:	08008444 	.word	0x08008444
 80081e8:	08008448 	.word	0x08008448

080081ec <__retarget_lock_acquire_recursive>:
 80081ec:	4770      	bx	lr

080081ee <__retarget_lock_release_recursive>:
 80081ee:	4770      	bx	lr

080081f0 <memcpy>:
 80081f0:	440a      	add	r2, r1
 80081f2:	4291      	cmp	r1, r2
 80081f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80081f8:	d100      	bne.n	80081fc <memcpy+0xc>
 80081fa:	4770      	bx	lr
 80081fc:	b510      	push	{r4, lr}
 80081fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008206:	4291      	cmp	r1, r2
 8008208:	d1f9      	bne.n	80081fe <memcpy+0xe>
 800820a:	bd10      	pop	{r4, pc}

0800820c <_free_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4605      	mov	r5, r0
 8008210:	2900      	cmp	r1, #0
 8008212:	d041      	beq.n	8008298 <_free_r+0x8c>
 8008214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008218:	1f0c      	subs	r4, r1, #4
 800821a:	2b00      	cmp	r3, #0
 800821c:	bfb8      	it	lt
 800821e:	18e4      	addlt	r4, r4, r3
 8008220:	f7ff ff50 	bl	80080c4 <__malloc_lock>
 8008224:	4a1d      	ldr	r2, [pc, #116]	@ (800829c <_free_r+0x90>)
 8008226:	6813      	ldr	r3, [r2, #0]
 8008228:	b933      	cbnz	r3, 8008238 <_free_r+0x2c>
 800822a:	6063      	str	r3, [r4, #4]
 800822c:	6014      	str	r4, [r2, #0]
 800822e:	4628      	mov	r0, r5
 8008230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008234:	f7ff bf4c 	b.w	80080d0 <__malloc_unlock>
 8008238:	42a3      	cmp	r3, r4
 800823a:	d908      	bls.n	800824e <_free_r+0x42>
 800823c:	6820      	ldr	r0, [r4, #0]
 800823e:	1821      	adds	r1, r4, r0
 8008240:	428b      	cmp	r3, r1
 8008242:	bf01      	itttt	eq
 8008244:	6819      	ldreq	r1, [r3, #0]
 8008246:	685b      	ldreq	r3, [r3, #4]
 8008248:	1809      	addeq	r1, r1, r0
 800824a:	6021      	streq	r1, [r4, #0]
 800824c:	e7ed      	b.n	800822a <_free_r+0x1e>
 800824e:	461a      	mov	r2, r3
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	b10b      	cbz	r3, 8008258 <_free_r+0x4c>
 8008254:	42a3      	cmp	r3, r4
 8008256:	d9fa      	bls.n	800824e <_free_r+0x42>
 8008258:	6811      	ldr	r1, [r2, #0]
 800825a:	1850      	adds	r0, r2, r1
 800825c:	42a0      	cmp	r0, r4
 800825e:	d10b      	bne.n	8008278 <_free_r+0x6c>
 8008260:	6820      	ldr	r0, [r4, #0]
 8008262:	4401      	add	r1, r0
 8008264:	1850      	adds	r0, r2, r1
 8008266:	4283      	cmp	r3, r0
 8008268:	6011      	str	r1, [r2, #0]
 800826a:	d1e0      	bne.n	800822e <_free_r+0x22>
 800826c:	6818      	ldr	r0, [r3, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	6053      	str	r3, [r2, #4]
 8008272:	4408      	add	r0, r1
 8008274:	6010      	str	r0, [r2, #0]
 8008276:	e7da      	b.n	800822e <_free_r+0x22>
 8008278:	d902      	bls.n	8008280 <_free_r+0x74>
 800827a:	230c      	movs	r3, #12
 800827c:	602b      	str	r3, [r5, #0]
 800827e:	e7d6      	b.n	800822e <_free_r+0x22>
 8008280:	6820      	ldr	r0, [r4, #0]
 8008282:	1821      	adds	r1, r4, r0
 8008284:	428b      	cmp	r3, r1
 8008286:	bf04      	itt	eq
 8008288:	6819      	ldreq	r1, [r3, #0]
 800828a:	685b      	ldreq	r3, [r3, #4]
 800828c:	6063      	str	r3, [r4, #4]
 800828e:	bf04      	itt	eq
 8008290:	1809      	addeq	r1, r1, r0
 8008292:	6021      	streq	r1, [r4, #0]
 8008294:	6054      	str	r4, [r2, #4]
 8008296:	e7ca      	b.n	800822e <_free_r+0x22>
 8008298:	bd38      	pop	{r3, r4, r5, pc}
 800829a:	bf00      	nop
 800829c:	20004cc8 	.word	0x20004cc8

080082a0 <sqrtf>:
 80082a0:	b508      	push	{r3, lr}
 80082a2:	ed2d 8b02 	vpush	{d8}
 80082a6:	eeb0 8a40 	vmov.f32	s16, s0
 80082aa:	f000 f817 	bl	80082dc <__ieee754_sqrtf>
 80082ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80082b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b6:	d60c      	bvs.n	80082d2 <sqrtf+0x32>
 80082b8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80082d8 <sqrtf+0x38>
 80082bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80082c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c4:	d505      	bpl.n	80082d2 <sqrtf+0x32>
 80082c6:	f7ff ff67 	bl	8008198 <__errno>
 80082ca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80082ce:	2321      	movs	r3, #33	@ 0x21
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	ecbd 8b02 	vpop	{d8}
 80082d6:	bd08      	pop	{r3, pc}
 80082d8:	00000000 	.word	0x00000000

080082dc <__ieee754_sqrtf>:
 80082dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80082e0:	4770      	bx	lr
	...

080082e4 <_init>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	bf00      	nop
 80082e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ea:	bc08      	pop	{r3}
 80082ec:	469e      	mov	lr, r3
 80082ee:	4770      	bx	lr

080082f0 <_fini>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr
