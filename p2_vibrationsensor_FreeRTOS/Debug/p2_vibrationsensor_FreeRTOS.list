
p2_vibrationsensor_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009828  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080099c8  080099c8  0000a9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bd0  08009bd0  0000b138  2**0
                  CONTENTS
  4 .ARM          00000008  08009bd0  08009bd0  0000abd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bd8  08009bd8  0000b138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bd8  08009bd8  0000abd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bdc  08009bdc  0000abdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  20000000  08009be0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d34  20000138  08009d18  0000b138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e6c  08009d18  0000be6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d02e  00000000  00000000  0000b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044a2  00000000  00000000  00028196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  0002c638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000147f  00000000  00000000  0002e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5dd  00000000  00000000  0002f557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e8cb  00000000  00000000  00049b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2ee0  00000000  00000000  000683ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b2df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007730  00000000  00000000  0010b324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00112a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000138 	.word	0x20000138
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099b0 	.word	0x080099b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000013c 	.word	0x2000013c
 80001dc:	080099b0 	.word	0x080099b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800057e:	f008 f895 	bl	80086ac <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	461a      	mov	r2, r3
 800058a:	2120      	movs	r1, #32
 800058c:	2032      	movs	r0, #50	@ 0x32
 800058e:	f008 f8e5 	bl	800875c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8000592:	2300      	movs	r3, #0
 8000594:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	461a      	mov	r2, r3
 800059a:	2123      	movs	r1, #35	@ 0x23
 800059c:	2032      	movs	r0, #50	@ 0x32
 800059e:	f008 f8dd 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80005c2:	f008 f873 	bl	80086ac <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 80005c6:	210f      	movs	r1, #15
 80005c8:	2032      	movs	r0, #50	@ 0x32
 80005ca:	f008 f8da 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80005d2:	79fb      	ldrb	r3, [r7, #7]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80005e2:	2124      	movs	r1, #36	@ 0x24
 80005e4:	2032      	movs	r0, #50	@ 0x32
 80005e6:	f008 f8cc 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005f4:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	461a      	mov	r2, r3
 80005fa:	2124      	movs	r1, #36	@ 0x24
 80005fc:	2032      	movs	r0, #50	@ 0x32
 80005fe:	f008 f8ad 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b084      	sub	sp, #16
 800060e:	af00      	add	r7, sp, #0
 8000610:	4603      	mov	r3, r0
 8000612:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000614:	2121      	movs	r1, #33	@ 0x21
 8000616:	2032      	movs	r0, #50	@ 0x32
 8000618:	f008 f8b3 	bl	8008782 <COMPASSACCELERO_IO_Read>
 800061c:	4603      	mov	r3, r0
 800061e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	f003 030c 	and.w	r3, r3, #12
 8000626:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000628:	7bfa      	ldrb	r2, [r7, #15]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4313      	orrs	r3, r2
 800062e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	461a      	mov	r2, r3
 8000634:	2121      	movs	r1, #33	@ 0x21
 8000636:	2032      	movs	r0, #50	@ 0x32
 8000638:	f008 f890 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800064e:	2121      	movs	r1, #33	@ 0x21
 8000650:	2032      	movs	r0, #50	@ 0x32
 8000652:	f008 f896 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	f023 0308 	bic.w	r3, r3, #8
 8000660:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000662:	7bfa      	ldrb	r2, [r7, #15]
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4313      	orrs	r3, r2
 8000668:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	461a      	mov	r2, r3
 800066e:	2121      	movs	r1, #33	@ 0x21
 8000670:	2032      	movs	r0, #50	@ 0x32
 8000672:	f008 f873 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b088      	sub	sp, #32
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000686:	2300      	movs	r3, #0
 8000688:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 800068e:	2301      	movs	r3, #1
 8000690:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8000692:	2123      	movs	r1, #35	@ 0x23
 8000694:	2032      	movs	r0, #50	@ 0x32
 8000696:	f008 f874 	bl	8008782 <COMPASSACCELERO_IO_Read>
 800069a:	4603      	mov	r3, r0
 800069c:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800069e:	2124      	movs	r1, #36	@ 0x24
 80006a0:	2032      	movs	r0, #50	@ 0x32
 80006a2:	f008 f86e 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 80006aa:	2128      	movs	r1, #40	@ 0x28
 80006ac:	2032      	movs	r0, #50	@ 0x32
 80006ae:	f008 f868 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 80006b8:	2129      	movs	r1, #41	@ 0x29
 80006ba:	2032      	movs	r0, #50	@ 0x32
 80006bc:	f008 f861 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 80006c6:	212a      	movs	r1, #42	@ 0x2a
 80006c8:	2032      	movs	r0, #50	@ 0x32
 80006ca:	f008 f85a 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 80006d4:	212b      	movs	r1, #43	@ 0x2b
 80006d6:	2032      	movs	r0, #50	@ 0x32
 80006d8:	f008 f853 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80006dc:	4603      	mov	r3, r0
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 80006e2:	212c      	movs	r1, #44	@ 0x2c
 80006e4:	2032      	movs	r0, #50	@ 0x32
 80006e6:	f008 f84c 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 80006f0:	212d      	movs	r1, #45	@ 0x2d
 80006f2:	2032      	movs	r0, #50	@ 0x32
 80006f4:	f008 f845 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80006f8:	4603      	mov	r3, r0
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 80006fe:	7d3b      	ldrb	r3, [r7, #20]
 8000700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000704:	2b00      	cmp	r3, #0
 8000706:	d123      	bne.n	8000750 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	77fb      	strb	r3, [r7, #31]
 800070c:	e01c      	b.n	8000748 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800070e:	7ffb      	ldrb	r3, [r7, #31]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	3301      	adds	r3, #1
 8000714:	3320      	adds	r3, #32
 8000716:	443b      	add	r3, r7
 8000718:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800071c:	b29b      	uxth	r3, r3
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	b29a      	uxth	r2, r3
 8000722:	7ffb      	ldrb	r3, [r7, #31]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	3320      	adds	r3, #32
 8000728:	443b      	add	r3, r7
 800072a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800072e:	b29b      	uxth	r3, r3
 8000730:	4413      	add	r3, r2
 8000732:	b29a      	uxth	r2, r3
 8000734:	7ffb      	ldrb	r3, [r7, #31]
 8000736:	b212      	sxth	r2, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	3320      	adds	r3, #32
 800073c:	443b      	add	r3, r7
 800073e:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000742:	7ffb      	ldrb	r3, [r7, #31]
 8000744:	3301      	adds	r3, #1
 8000746:	77fb      	strb	r3, [r7, #31]
 8000748:	7ffb      	ldrb	r3, [r7, #31]
 800074a:	2b02      	cmp	r3, #2
 800074c:	d9df      	bls.n	800070e <LSM303AGR_AccReadXYZ+0x90>
 800074e:	e022      	b.n	8000796 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000750:	2300      	movs	r3, #0
 8000752:	77fb      	strb	r3, [r7, #31]
 8000754:	e01c      	b.n	8000790 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000756:	7ffb      	ldrb	r3, [r7, #31]
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	3320      	adds	r3, #32
 800075c:	443b      	add	r3, r7
 800075e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000762:	b29b      	uxth	r3, r3
 8000764:	021b      	lsls	r3, r3, #8
 8000766:	b29a      	uxth	r2, r3
 8000768:	7ffb      	ldrb	r3, [r7, #31]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	3301      	adds	r3, #1
 800076e:	3320      	adds	r3, #32
 8000770:	443b      	add	r3, r7
 8000772:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000776:	b29b      	uxth	r3, r3
 8000778:	4413      	add	r3, r2
 800077a:	b29a      	uxth	r2, r3
 800077c:	7ffb      	ldrb	r3, [r7, #31]
 800077e:	b212      	sxth	r2, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	3320      	adds	r3, #32
 8000784:	443b      	add	r3, r7
 8000786:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800078a:	7ffb      	ldrb	r3, [r7, #31]
 800078c:	3301      	adds	r3, #1
 800078e:	77fb      	strb	r3, [r7, #31]
 8000790:	7ffb      	ldrb	r3, [r7, #31]
 8000792:	2b02      	cmp	r3, #2
 8000794:	d9df      	bls.n	8000756 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8000796:	7d3b      	ldrb	r3, [r7, #20]
 8000798:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800079c:	2b30      	cmp	r3, #48	@ 0x30
 800079e:	d013      	beq.n	80007c8 <LSM303AGR_AccReadXYZ+0x14a>
 80007a0:	2b30      	cmp	r3, #48	@ 0x30
 80007a2:	dc14      	bgt.n	80007ce <LSM303AGR_AccReadXYZ+0x150>
 80007a4:	2b20      	cmp	r3, #32
 80007a6:	d00c      	beq.n	80007c2 <LSM303AGR_AccReadXYZ+0x144>
 80007a8:	2b20      	cmp	r3, #32
 80007aa:	dc10      	bgt.n	80007ce <LSM303AGR_AccReadXYZ+0x150>
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <LSM303AGR_AccReadXYZ+0x138>
 80007b0:	2b10      	cmp	r3, #16
 80007b2:	d003      	beq.n	80007bc <LSM303AGR_AccReadXYZ+0x13e>
 80007b4:	e00b      	b.n	80007ce <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80007b6:	2301      	movs	r3, #1
 80007b8:	77bb      	strb	r3, [r7, #30]
    break;
 80007ba:	e008      	b.n	80007ce <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 80007bc:	2302      	movs	r3, #2
 80007be:	77bb      	strb	r3, [r7, #30]
    break;
 80007c0:	e005      	b.n	80007ce <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 80007c2:	2304      	movs	r3, #4
 80007c4:	77bb      	strb	r3, [r7, #30]
    break;
 80007c6:	e002      	b.n	80007ce <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 80007c8:	230c      	movs	r3, #12
 80007ca:	77bb      	strb	r3, [r7, #30]
    break;
 80007cc:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	77fb      	strb	r3, [r7, #31]
 80007d2:	e014      	b.n	80007fe <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80007d4:	7ffb      	ldrb	r3, [r7, #31]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	3320      	adds	r3, #32
 80007da:	443b      	add	r3, r7
 80007dc:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	7fbb      	ldrb	r3, [r7, #30]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	fb12 f303 	smulbb	r3, r2, r3
 80007ea:	b299      	uxth	r1, r3
 80007ec:	7ffb      	ldrb	r3, [r7, #31]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4413      	add	r3, r2
 80007f4:	b20a      	sxth	r2, r1
 80007f6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80007f8:	7ffb      	ldrb	r3, [r7, #31]
 80007fa:	3301      	adds	r3, #1
 80007fc:	77fb      	strb	r3, [r7, #31]
 80007fe:	7ffb      	ldrb	r3, [r7, #31]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d9e7      	bls.n	80007d4 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000818:	2300      	movs	r3, #0
 800081a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800081c:	2121      	movs	r1, #33	@ 0x21
 800081e:	2032      	movs	r0, #50	@ 0x32
 8000820:	f007 ffaf 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000824:	4603      	mov	r3, r0
 8000826:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	f023 0304 	bic.w	r3, r3, #4
 800082e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000830:	7bfa      	ldrb	r2, [r7, #15]
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4313      	orrs	r3, r2
 8000836:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	2121      	movs	r1, #33	@ 0x21
 800083e:	2032      	movs	r0, #50	@ 0x32
 8000840:	f007 ff8c 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800085a:	2122      	movs	r1, #34	@ 0x22
 800085c:	2032      	movs	r0, #50	@ 0x32
 800085e:	f007 ff90 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000862:	4603      	mov	r3, r0
 8000864:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8000866:	7bfa      	ldrb	r2, [r7, #15]
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4313      	orrs	r3, r2
 800086c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	461a      	mov	r2, r3
 8000872:	2122      	movs	r1, #34	@ 0x22
 8000874:	2032      	movs	r0, #50	@ 0x32
 8000876:	f007 ff71 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8000882:	b580      	push	{r7, lr}
 8000884:	b084      	sub	sp, #16
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800088c:	2300      	movs	r3, #0
 800088e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8000890:	2138      	movs	r1, #56	@ 0x38
 8000892:	2032      	movs	r0, #50	@ 0x32
 8000894:	f007 ff75 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000898:	4603      	mov	r3, r0
 800089a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800089c:	7bfa      	ldrb	r2, [r7, #15]
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	461a      	mov	r2, r3
 80008a8:	2138      	movs	r1, #56	@ 0x38
 80008aa:	2032      	movs	r0, #50	@ 0x32
 80008ac:	f007 ff56 	bl	800875c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80008b0:	230a      	movs	r3, #10
 80008b2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	461a      	mov	r2, r3
 80008b8:	213a      	movs	r1, #58	@ 0x3a
 80008ba:	2032      	movs	r0, #50	@ 0x32
 80008bc:	f007 ff4e 	bl	800875c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80008c0:	2305      	movs	r3, #5
 80008c2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	461a      	mov	r2, r3
 80008c8:	213b      	movs	r1, #59	@ 0x3b
 80008ca:	2032      	movs	r0, #50	@ 0x32
 80008cc:	f007 ff46 	bl	800875c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	461a      	mov	r2, r3
 80008d4:	213c      	movs	r1, #60	@ 0x3c
 80008d6:	2032      	movs	r0, #50	@ 0x32
 80008d8:	f007 ff40 	bl	800875c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80008dc:	2332      	movs	r3, #50	@ 0x32
 80008de:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	461a      	mov	r2, r3
 80008e4:	213d      	movs	r1, #61	@ 0x3d
 80008e6:	2032      	movs	r0, #50	@ 0x32
 80008e8:	f007 ff38 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80008f8:	f007 ff00 	bl	80086fc <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 80008fc:	2080      	movs	r0, #128	@ 0x80
 80008fe:	f7ff ffa5 	bl	800084c <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8000902:	2004      	movs	r0, #4
 8000904:	f7ff ff83 	bl	800080e <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8000908:	2010      	movs	r0, #16
 800090a:	f7ff ffba 	bl	8000882 <LSM303AGR_AccClickITEnable>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}

08000912 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000920:	f007 fec4 	bl	80086ac <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	461a      	mov	r2, r3
 800092c:	2120      	movs	r1, #32
 800092e:	2032      	movs	r0, #50	@ 0x32
 8000930:	f007 ff14 	bl	800875c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct >> 8);
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	0a1b      	lsrs	r3, r3, #8
 8000938:	b29b      	uxth	r3, r3
 800093a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	461a      	mov	r2, r3
 8000940:	2123      	movs	r1, #35	@ 0x23
 8000942:	2032      	movs	r0, #50	@ 0x32
 8000944:	f007 ff0a 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000964:	2300      	movs	r3, #0
 8000966:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000968:	f007 fea0 	bl	80086ac <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800096c:	210f      	movs	r1, #15
 800096e:	2032      	movs	r0, #50	@ 0x32
 8000970:	f007 ff07 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000974:	4603      	mov	r3, r0
 8000976:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000978:	79fb      	ldrb	r3, [r7, #7]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000988:	2124      	movs	r1, #36	@ 0x24
 800098a:	2032      	movs	r0, #50	@ 0x32
 800098c:	f007 fef9 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000990:	4603      	mov	r3, r0
 8000992:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800099a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	461a      	mov	r2, r3
 80009a0:	2124      	movs	r1, #36	@ 0x24
 80009a2:	2032      	movs	r0, #50	@ 0x32
 80009a4:	f007 feda 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80009ba:	2121      	movs	r1, #33	@ 0x21
 80009bc:	2032      	movs	r0, #50	@ 0x32
 80009be:	f007 fee0 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80009c2:	4603      	mov	r3, r0
 80009c4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	f003 030c 	and.w	r3, r3, #12
 80009cc:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80009ce:	7bfa      	ldrb	r2, [r7, #15]
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	461a      	mov	r2, r3
 80009da:	2121      	movs	r1, #33	@ 0x21
 80009dc:	2032      	movs	r0, #50	@ 0x32
 80009de:	f007 febd 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80009f4:	2121      	movs	r1, #33	@ 0x21
 80009f6:	2032      	movs	r0, #50	@ 0x32
 80009f8:	f007 fec3 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80009fc:	4603      	mov	r3, r0
 80009fe:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	f023 0308 	bic.w	r3, r3, #8
 8000a06:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000a08:	7bfa      	ldrb	r2, [r7, #15]
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	461a      	mov	r2, r3
 8000a14:	2121      	movs	r1, #33	@ 0x21
 8000a16:	2032      	movs	r0, #50	@ 0x32
 8000a18:	f007 fea0 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000a34:	2301      	movs	r3, #1
 8000a36:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000a38:	2123      	movs	r1, #35	@ 0x23
 8000a3a:	2032      	movs	r0, #50	@ 0x32
 8000a3c:	f007 fea1 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000a40:	4603      	mov	r3, r0
 8000a42:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000a44:	2124      	movs	r1, #36	@ 0x24
 8000a46:	2032      	movs	r0, #50	@ 0x32
 8000a48:	f007 fe9b 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8000a50:	2128      	movs	r1, #40	@ 0x28
 8000a52:	2032      	movs	r0, #50	@ 0x32
 8000a54:	f007 fe95 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000a5e:	2129      	movs	r1, #41	@ 0x29
 8000a60:	2032      	movs	r0, #50	@ 0x32
 8000a62:	f007 fe8e 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000a6c:	212a      	movs	r1, #42	@ 0x2a
 8000a6e:	2032      	movs	r0, #50	@ 0x32
 8000a70:	f007 fe87 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000a7a:	212b      	movs	r1, #43	@ 0x2b
 8000a7c:	2032      	movs	r0, #50	@ 0x32
 8000a7e:	f007 fe80 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b25b      	sxtb	r3, r3
 8000a86:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000a88:	212c      	movs	r1, #44	@ 0x2c
 8000a8a:	2032      	movs	r0, #50	@ 0x32
 8000a8c:	f007 fe79 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000a90:	4603      	mov	r3, r0
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000a96:	212d      	movs	r1, #45	@ 0x2d
 8000a98:	2032      	movs	r0, #50	@ 0x32
 8000a9a:	f007 fe72 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8000aa4:	7d3b      	ldrb	r3, [r7, #20]
 8000aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d123      	bne.n	8000af6 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	77fb      	strb	r3, [r7, #31]
 8000ab2:	e01c      	b.n	8000aee <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000ab4:	7ffb      	ldrb	r3, [r7, #31]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	3301      	adds	r3, #1
 8000aba:	3320      	adds	r3, #32
 8000abc:	443b      	add	r3, r7
 8000abe:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	7ffb      	ldrb	r3, [r7, #31]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	3320      	adds	r3, #32
 8000ace:	443b      	add	r3, r7
 8000ad0:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	7ffb      	ldrb	r3, [r7, #31]
 8000adc:	b212      	sxth	r2, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	3320      	adds	r3, #32
 8000ae2:	443b      	add	r3, r7
 8000ae4:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000ae8:	7ffb      	ldrb	r3, [r7, #31]
 8000aea:	3301      	adds	r3, #1
 8000aec:	77fb      	strb	r3, [r7, #31]
 8000aee:	7ffb      	ldrb	r3, [r7, #31]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d9df      	bls.n	8000ab4 <LSM303DLHC_AccReadXYZ+0x90>
 8000af4:	e022      	b.n	8000b3c <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	77fb      	strb	r3, [r7, #31]
 8000afa:	e01c      	b.n	8000b36 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000afc:	7ffb      	ldrb	r3, [r7, #31]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	3320      	adds	r3, #32
 8000b02:	443b      	add	r3, r7
 8000b04:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	7ffb      	ldrb	r3, [r7, #31]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	3301      	adds	r3, #1
 8000b14:	3320      	adds	r3, #32
 8000b16:	443b      	add	r3, r7
 8000b18:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	4413      	add	r3, r2
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	7ffb      	ldrb	r3, [r7, #31]
 8000b24:	b212      	sxth	r2, r2
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	3320      	adds	r3, #32
 8000b2a:	443b      	add	r3, r7
 8000b2c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000b30:	7ffb      	ldrb	r3, [r7, #31]
 8000b32:	3301      	adds	r3, #1
 8000b34:	77fb      	strb	r3, [r7, #31]
 8000b36:	7ffb      	ldrb	r3, [r7, #31]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d9df      	bls.n	8000afc <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000b3c:	7d3b      	ldrb	r3, [r7, #20]
 8000b3e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000b42:	2b30      	cmp	r3, #48	@ 0x30
 8000b44:	d013      	beq.n	8000b6e <LSM303DLHC_AccReadXYZ+0x14a>
 8000b46:	2b30      	cmp	r3, #48	@ 0x30
 8000b48:	dc14      	bgt.n	8000b74 <LSM303DLHC_AccReadXYZ+0x150>
 8000b4a:	2b20      	cmp	r3, #32
 8000b4c:	d00c      	beq.n	8000b68 <LSM303DLHC_AccReadXYZ+0x144>
 8000b4e:	2b20      	cmp	r3, #32
 8000b50:	dc10      	bgt.n	8000b74 <LSM303DLHC_AccReadXYZ+0x150>
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <LSM303DLHC_AccReadXYZ+0x138>
 8000b56:	2b10      	cmp	r3, #16
 8000b58:	d003      	beq.n	8000b62 <LSM303DLHC_AccReadXYZ+0x13e>
 8000b5a:	e00b      	b.n	8000b74 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	77bb      	strb	r3, [r7, #30]
    break;
 8000b60:	e008      	b.n	8000b74 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8000b62:	2302      	movs	r3, #2
 8000b64:	77bb      	strb	r3, [r7, #30]
    break;
 8000b66:	e005      	b.n	8000b74 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	77bb      	strb	r3, [r7, #30]
    break;
 8000b6c:	e002      	b.n	8000b74 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8000b6e:	230c      	movs	r3, #12
 8000b70:	77bb      	strb	r3, [r7, #30]
    break;
 8000b72:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	77fb      	strb	r3, [r7, #31]
 8000b78:	e014      	b.n	8000ba4 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000b7a:	7ffb      	ldrb	r3, [r7, #31]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	3320      	adds	r3, #32
 8000b80:	443b      	add	r3, r7
 8000b82:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	7fbb      	ldrb	r3, [r7, #30]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	fb12 f303 	smulbb	r3, r2, r3
 8000b90:	b299      	uxth	r1, r3
 8000b92:	7ffb      	ldrb	r3, [r7, #31]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	b20a      	sxth	r2, r1
 8000b9c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000b9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	77fb      	strb	r3, [r7, #31]
 8000ba4:	7ffb      	ldrb	r3, [r7, #31]
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d9e7      	bls.n	8000b7a <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000bc2:	2121      	movs	r1, #33	@ 0x21
 8000bc4:	2032      	movs	r0, #50	@ 0x32
 8000bc6:	f007 fddc 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	f023 0304 	bic.w	r3, r3, #4
 8000bd4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000bd6:	7bfa      	ldrb	r2, [r7, #15]
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	461a      	mov	r2, r3
 8000be2:	2121      	movs	r1, #33	@ 0x21
 8000be4:	2032      	movs	r0, #50	@ 0x32
 8000be6:	f007 fdb9 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b084      	sub	sp, #16
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8000c00:	2122      	movs	r1, #34	@ 0x22
 8000c02:	2032      	movs	r0, #50	@ 0x32
 8000c04:	f007 fdbd 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	461a      	mov	r2, r3
 8000c18:	2122      	movs	r1, #34	@ 0x22
 8000c1a:	2032      	movs	r0, #50	@ 0x32
 8000c1c:	f007 fd9e 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8000c36:	2138      	movs	r1, #56	@ 0x38
 8000c38:	2032      	movs	r0, #50	@ 0x32
 8000c3a:	f007 fda2 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000c42:	7bfa      	ldrb	r2, [r7, #15]
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	2138      	movs	r1, #56	@ 0x38
 8000c50:	2032      	movs	r0, #50	@ 0x32
 8000c52:	f007 fd83 	bl	800875c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000c56:	230a      	movs	r3, #10
 8000c58:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	213a      	movs	r1, #58	@ 0x3a
 8000c60:	2032      	movs	r0, #50	@ 0x32
 8000c62:	f007 fd7b 	bl	800875c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000c66:	2305      	movs	r3, #5
 8000c68:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	213b      	movs	r1, #59	@ 0x3b
 8000c70:	2032      	movs	r0, #50	@ 0x32
 8000c72:	f007 fd73 	bl	800875c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	213c      	movs	r1, #60	@ 0x3c
 8000c7c:	2032      	movs	r0, #50	@ 0x32
 8000c7e:	f007 fd6d 	bl	800875c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000c82:	2332      	movs	r3, #50	@ 0x32
 8000c84:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	213d      	movs	r1, #61	@ 0x3d
 8000c8c:	2032      	movs	r0, #50	@ 0x32
 8000c8e:	f007 fd65 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000c9e:	f007 fd2d 	bl	80086fc <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8000ca2:	2080      	movs	r0, #128	@ 0x80
 8000ca4:	f7ff ffa5 	bl	8000bf2 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8000ca8:	2004      	movs	r0, #4
 8000caa:	f7ff ff83 	bl	8000bb4 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8000cae:	2010      	movs	r0, #16
 8000cb0:	f7ff ffba 	bl	8000c28 <LSM303DLHC_AccClickITEnable>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	CoreDebug -> DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <configureTimerForRunTimeStats+0x2c>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <configureTimerForRunTimeStats+0x2c>)
 8000cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cc6:	60d3      	str	r3, [r2, #12]
	DWT -> CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <configureTimerForRunTimeStats+0x30>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a06      	ldr	r2, [pc, #24]	@ (8000ce8 <configureTimerForRunTimeStats+0x30>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6013      	str	r3, [r2, #0]
	DWT -> CYCCNT = 0; //Reloj de depuración, cuenta ciclos de reloj, empieza en 0;
 8000cd4:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <configureTimerForRunTimeStats+0x30>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]

}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000edf0 	.word	0xe000edf0
 8000ce8:	e0001000 	.word	0xe0001000

08000cec <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
return DWT -> CYCCNT;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <getRunTimeCounterValue+0x14>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e0001000 	.word	0xe0001000

08000d04 <fsm_new>:
#include <stdlib.h>
#include "fsm.h"

fsm_t*
fsm_new (fsm_trans_t* tt)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 8000d0c:	2008      	movs	r0, #8
 8000d0e:	f007 fe91 	bl	8008a34 <malloc>
 8000d12:	4603      	mov	r3, r0
 8000d14:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f000 f805 	bl	8000d28 <fsm_init>
  return this;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <fsm_init>:

void
fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	605a      	str	r2, [r3, #4]
  this->current_state = tt[0].orig_state;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	601a      	str	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d54:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d013      	beq.n	8000d8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d64:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000d6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d00b      	beq.n	8000d8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d74:	e000      	b.n	8000d78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f9      	beq.n	8000d76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d82:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <encender>:
	ACTIVO,
	INACTIVO,
};


static int encender(fsm_t* this){
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	return encendido;
 8000da4:	4b03      	ldr	r3, [pc, #12]	@ (8000db4 <encender+0x18>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	20000268 	.word	0x20000268

08000db8 <apagar>:

static int apagar(fsm_t* this){
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	return !encendido; //Si pongo a 0 la variable encendido en estado activo, paso a inactivo
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <apagar+0x24>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bf0c      	ite	eq
 8000dc8:	2301      	moveq	r3, #1
 8000dca:	2300      	movne	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000268 	.word	0x20000268

08000de0 <func_LED_Activo>:

void func_LED_Activo(fsm_t* this){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 8000de8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dec:	4803      	ldr	r0, [pc, #12]	@ (8000dfc <func_LED_Activo+0x1c>)
 8000dee:	f001 fb12 	bl	8002416 <HAL_GPIO_TogglePin>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40020c00 	.word	0x40020c00

08000e00 <func_LED_Inactivo>:

void func_LED_Inactivo(fsm_t* this){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e0e:	4803      	ldr	r0, [pc, #12]	@ (8000e1c <func_LED_Inactivo+0x1c>)
 8000e10:	f001 fae8 	bl	80023e4 <HAL_GPIO_WritePin>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40020c00 	.word	0x40020c00

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e24:	f000 ff52 	bl	8001ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e28:	f000 f89a 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2c:	f000 f9e6 	bl	80011fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e30:	f000 f900 	bl	8001034 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e34:	f000 f92c 	bl	8001090 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000e38:	f000 f960 	bl	80010fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8000e3c:	f007 fcb4 	bl	80087a8 <BSP_ACCELERO_Init>
  LSM303AGR_MagInit();
 8000e40:	f007 fda0 	bl	8008984 <LSM303AGR_MagInit>
  TIM4 -> CCR1 = 0; //Registro CCR para el canal 1: led verde
 8000e44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <main+0xd4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM4 -> CCR3 = 0; //Registro CCR para el canal 3: led rojo
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <main+0xd4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e50:	2100      	movs	r1, #0
 8000e52:	4829      	ldr	r0, [pc, #164]	@ (8000ef8 <main+0xd8>)
 8000e54:	f003 f9ba 	bl	80041cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000e58:	2108      	movs	r1, #8
 8000e5a:	4827      	ldr	r0, [pc, #156]	@ (8000ef8 <main+0xd8>)
 8000e5c:	f003 f9b6 	bl	80041cc <HAL_TIM_PWM_Start>

  LEDazul = fsm_new(ledfsm);
 8000e60:	4826      	ldr	r0, [pc, #152]	@ (8000efc <main+0xdc>)
 8000e62:	f7ff ff4f 	bl	8000d04 <fsm_new>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a25      	ldr	r2, [pc, #148]	@ (8000f00 <main+0xe0>)
 8000e6a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e6c:	f004 f89e 	bl	8004fac <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutexi2c1 */
  mutexi2c1Handle = osMutexNew(&mutexi2c1_attributes);
 8000e70:	4824      	ldr	r0, [pc, #144]	@ (8000f04 <main+0xe4>)
 8000e72:	f004 f992 	bl	800519a <osMutexNew>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4a23      	ldr	r2, [pc, #140]	@ (8000f08 <main+0xe8>)
 8000e7a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of exti_sem */
  exti_semHandle = osSemaphoreNew(1, 1, &exti_sem_attributes);
 8000e7c:	4a23      	ldr	r2, [pc, #140]	@ (8000f0c <main+0xec>)
 8000e7e:	2101      	movs	r1, #1
 8000e80:	2001      	movs	r0, #1
 8000e82:	f004 fa98 	bl	80053b6 <osSemaphoreNew>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a21      	ldr	r2, [pc, #132]	@ (8000f10 <main+0xf0>)
 8000e8a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e8c:	4a21      	ldr	r2, [pc, #132]	@ (8000f14 <main+0xf4>)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4821      	ldr	r0, [pc, #132]	@ (8000f18 <main+0xf8>)
 8000e92:	f004 f8d5 	bl	8005040 <osThreadNew>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a20      	ldr	r2, [pc, #128]	@ (8000f1c <main+0xfc>)
 8000e9a:	6013      	str	r3, [r2, #0]

  /* creation of task_BlinkBlue */
  task_BlinkBlueHandle = osThreadNew(tk_BlinkBlue, NULL, &task_BlinkBlue_attributes);
 8000e9c:	4a20      	ldr	r2, [pc, #128]	@ (8000f20 <main+0x100>)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4820      	ldr	r0, [pc, #128]	@ (8000f24 <main+0x104>)
 8000ea2:	f004 f8cd 	bl	8005040 <osThreadNew>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <main+0x108>)
 8000eaa:	6013      	str	r3, [r2, #0]

  /* creation of task_ReadAccel */
  task_ReadAccelHandle = osThreadNew(tk_ReadAccel, NULL, &task_ReadAccel_attributes);
 8000eac:	4a1f      	ldr	r2, [pc, #124]	@ (8000f2c <main+0x10c>)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	481f      	ldr	r0, [pc, #124]	@ (8000f30 <main+0x110>)
 8000eb2:	f004 f8c5 	bl	8005040 <osThreadNew>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f34 <main+0x114>)
 8000eba:	6013      	str	r3, [r2, #0]

  /* creation of task_WriteGreen */
  task_WriteGreenHandle = osThreadNew(tk_WriteLED, (void*) &data_green, &task_WriteGreen_attributes);
 8000ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8000f38 <main+0x118>)
 8000ebe:	491f      	ldr	r1, [pc, #124]	@ (8000f3c <main+0x11c>)
 8000ec0:	481f      	ldr	r0, [pc, #124]	@ (8000f40 <main+0x120>)
 8000ec2:	f004 f8bd 	bl	8005040 <osThreadNew>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f44 <main+0x124>)
 8000eca:	6013      	str	r3, [r2, #0]

  /* creation of task_ReadMagnet */
  task_ReadMagnetHandle = osThreadNew(tk_ReadMagnet, NULL, &task_ReadMagnet_attributes);
 8000ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8000f48 <main+0x128>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	481e      	ldr	r0, [pc, #120]	@ (8000f4c <main+0x12c>)
 8000ed2:	f004 f8b5 	bl	8005040 <osThreadNew>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f50 <main+0x130>)
 8000eda:	6013      	str	r3, [r2, #0]

  /* creation of task_WriteRed */
  task_WriteRedHandle = osThreadNew(tk_WriteLED, (void*) &data_red, &task_WriteRed_attributes);
 8000edc:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <main+0x134>)
 8000ede:	491e      	ldr	r1, [pc, #120]	@ (8000f58 <main+0x138>)
 8000ee0:	4817      	ldr	r0, [pc, #92]	@ (8000f40 <main+0x120>)
 8000ee2:	f004 f8ad 	bl	8005040 <osThreadNew>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f5c <main+0x13c>)
 8000eea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000eec:	f004 f882 	bl	8004ff4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <main+0xd0>
 8000ef4:	40000800 	.word	0x40000800
 8000ef8:	20000200 	.word	0x20000200
 8000efc:	20000098 	.word	0x20000098
 8000f00:	2000026c 	.word	0x2000026c
 8000f04:	08009b64 	.word	0x08009b64
 8000f08:	20000260 	.word	0x20000260
 8000f0c:	08009b74 	.word	0x08009b74
 8000f10:	20000264 	.word	0x20000264
 8000f14:	08009a8c 	.word	0x08009a8c
 8000f18:	080012f9 	.word	0x080012f9
 8000f1c:	20000248 	.word	0x20000248
 8000f20:	08009ab0 	.word	0x08009ab0
 8000f24:	080018b5 	.word	0x080018b5
 8000f28:	2000024c 	.word	0x2000024c
 8000f2c:	08009ad4 	.word	0x08009ad4
 8000f30:	080018d9 	.word	0x080018d9
 8000f34:	20000250 	.word	0x20000250
 8000f38:	08009af8 	.word	0x08009af8
 8000f3c:	20000068 	.word	0x20000068
 8000f40:	08001a41 	.word	0x08001a41
 8000f44:	20000254 	.word	0x20000254
 8000f48:	08009b1c 	.word	0x08009b1c
 8000f4c:	0800197d 	.word	0x0800197d
 8000f50:	20000258 	.word	0x20000258
 8000f54:	08009b40 	.word	0x08009b40
 8000f58:	20000080 	.word	0x20000080
 8000f5c:	2000025c 	.word	0x2000025c

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	@ 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2230      	movs	r2, #48	@ 0x30
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f007 ff2d 	bl	8008dce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	4b28      	ldr	r3, [pc, #160]	@ (800102c <SystemClock_Config+0xcc>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a27      	ldr	r2, [pc, #156]	@ (800102c <SystemClock_Config+0xcc>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b25      	ldr	r3, [pc, #148]	@ (800102c <SystemClock_Config+0xcc>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <SystemClock_Config+0xd0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a21      	ldr	r2, [pc, #132]	@ (8001030 <SystemClock_Config+0xd0>)
 8000faa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <SystemClock_Config+0xd0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fd4:	23c0      	movs	r3, #192	@ 0xc0
 8000fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 fa93 	bl	8003510 <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff0:	f000 f9ba 	bl	8001368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001000:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001004:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001006:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2103      	movs	r1, #3
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fcf4 	bl	8003a00 <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800101e:	f000 f9a3 	bl	8001368 <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	@ 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <MX_I2C1_Init+0x50>)
 800103a:	4a13      	ldr	r2, [pc, #76]	@ (8001088 <MX_I2C1_Init+0x54>)
 800103c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001040:	4a12      	ldr	r2, [pc, #72]	@ (800108c <MX_I2C1_Init+0x58>)
 8001042:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001044:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <MX_I2C1_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001052:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001056:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <MX_I2C1_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_I2C1_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	@ (8001084 <MX_I2C1_Init+0x50>)
 8001072:	f001 f9eb 	bl	800244c <HAL_I2C_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800107c:	f000 f974 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000154 	.word	0x20000154
 8001088:	40005400 	.word	0x40005400
 800108c:	000186a0 	.word	0x000186a0

08001090 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_SPI1_Init+0x64>)
 8001096:	4a18      	ldr	r2, [pc, #96]	@ (80010f8 <MX_SPI1_Init+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_SPI1_Init+0x64>)
 800109c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010dc:	220a      	movs	r2, #10
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_SPI1_Init+0x64>)
 80010e2:	f002 fedf 	bl	8003ea4 <HAL_SPI_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010ec:	f000 f93c 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200001a8 	.word	0x200001a8
 80010f8:	40013000 	.word	0x40013000

080010fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	@ 0x38
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	615a      	str	r2, [r3, #20]
 800112a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800112c:	4b31      	ldr	r3, [pc, #196]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 800112e:	4a32      	ldr	r2, [pc, #200]	@ (80011f8 <MX_TIM4_Init+0xfc>)
 8001130:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 8001132:	4b30      	ldr	r3, [pc, #192]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 8001134:	222f      	movs	r2, #47	@ 0x2f
 8001136:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b2e      	ldr	r3, [pc, #184]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800113e:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 8001140:	2263      	movs	r2, #99	@ 0x63
 8001142:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001144:	4b2b      	ldr	r3, [pc, #172]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b2a      	ldr	r3, [pc, #168]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001150:	4828      	ldr	r0, [pc, #160]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 8001152:	f002 ff30 	bl	8003fb6 <HAL_TIM_Base_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800115c:	f000 f904 	bl	8001368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001166:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800116a:	4619      	mov	r1, r3
 800116c:	4821      	ldr	r0, [pc, #132]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 800116e:	f003 fa8f 	bl	8004690 <HAL_TIM_ConfigClockSource>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001178:	f000 f8f6 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800117c:	481d      	ldr	r0, [pc, #116]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 800117e:	f002 ffcb 	bl	8004118 <HAL_TIM_PWM_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001188:	f000 f8ee 	bl	8001368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4619      	mov	r1, r3
 800119a:	4816      	ldr	r0, [pc, #88]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 800119c:	f003 fe40 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80011a6:	f000 f8df 	bl	8001368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011aa:	2360      	movs	r3, #96	@ 0x60
 80011ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 80011c2:	f003 f9a3 	bl	800450c <HAL_TIM_PWM_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80011cc:	f000 f8cc 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2208      	movs	r2, #8
 80011d4:	4619      	mov	r1, r3
 80011d6:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 80011d8:	f003 f998 	bl	800450c <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80011e2:	f000 f8c1 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011e6:	4803      	ldr	r0, [pc, #12]	@ (80011f4 <MX_TIM4_Init+0xf8>)
 80011e8:	f000 f9c4 	bl	8001574 <HAL_TIM_MspPostInit>

}
 80011ec:	bf00      	nop
 80011ee:	3738      	adds	r7, #56	@ 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000200 	.word	0x20000200
 80011f8:	40000800 	.word	0x40000800

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b2e      	ldr	r3, [pc, #184]	@ (80012d0 <MX_GPIO_Init+0xd4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a2d      	ldr	r2, [pc, #180]	@ (80012d0 <MX_GPIO_Init+0xd4>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b2b      	ldr	r3, [pc, #172]	@ (80012d0 <MX_GPIO_Init+0xd4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <MX_GPIO_Init+0xd4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a26      	ldr	r2, [pc, #152]	@ (80012d0 <MX_GPIO_Init+0xd4>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <MX_GPIO_Init+0xd4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <MX_GPIO_Init+0xd4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a1f      	ldr	r2, [pc, #124]	@ (80012d0 <MX_GPIO_Init+0xd4>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_GPIO_Init+0xd4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <MX_GPIO_Init+0xd4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <MX_GPIO_Init+0xd4>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <MX_GPIO_Init+0xd4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blue_LED_GPIO_Port, Blue_LED_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001288:	4812      	ldr	r0, [pc, #72]	@ (80012d4 <MX_GPIO_Init+0xd8>)
 800128a:	f001 f8ab 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UserBTN_Pin */
  GPIO_InitStruct.Pin = UserBTN_Pin;
 800128e:	2301      	movs	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001292:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserBTN_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <MX_GPIO_Init+0xdc>)
 80012a4:	f000 fe36 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_LED_Pin */
  GPIO_InitStruct.Pin = Blue_LED_Pin;
 80012a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Blue_LED_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4804      	ldr	r0, [pc, #16]	@ (80012d4 <MX_GPIO_Init+0xd8>)
 80012c2:	f000 fe27 	bl	8001f14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	@ 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40020000 	.word	0x40020000

080012dc <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	return ITM_SendChar(ch);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fd30 	bl	8000d4c <ITM_SendChar>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreAcquire(exti_semHandle, osWaitForever) == osOK){ //Antirrebotes del botón
 8001300:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <StartDefaultTask+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	4618      	mov	r0, r3
 800130a:	f004 f8dd 	bl	80054c8 <osSemaphoreAcquire>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f5      	bne.n	8001300 <StartDefaultTask+0x8>
		printf("%d", encendido);
 8001314:	4b09      	ldr	r3, [pc, #36]	@ (800133c <StartDefaultTask+0x44>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	4809      	ldr	r0, [pc, #36]	@ (8001340 <StartDefaultTask+0x48>)
 800131c:	f007 fd02 	bl	8008d24 <iprintf>
		osDelay(500);
 8001320:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001324:	f003 ff1e 	bl	8005164 <osDelay>
		osSemaphoreAcquire(exti_semHandle, 0);
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <StartDefaultTask+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f004 f8ca 	bl	80054c8 <osSemaphoreAcquire>
	if(osSemaphoreAcquire(exti_semHandle, osWaitForever) == osOK){ //Antirrebotes del botón
 8001334:	e7e4      	b.n	8001300 <StartDefaultTask+0x8>
 8001336:	bf00      	nop
 8001338:	20000264 	.word	0x20000264
 800133c:	20000268 	.word	0x20000268
 8001340:	08009a3c 	.word	0x08009a3c

08001344 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d101      	bne.n	800135a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001356:	f000 fcdb 	bl	8001d10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40014400 	.word	0x40014400

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <Error_Handler+0x8>

08001374 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_MspInit+0x54>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	4a11      	ldr	r2, [pc, #68]	@ (80013c8 <HAL_MspInit+0x54>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001388:	6453      	str	r3, [r2, #68]	@ 0x44
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_MspInit+0x54>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <HAL_MspInit+0x54>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <HAL_MspInit+0x54>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a6:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <HAL_MspInit+0x54>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	210f      	movs	r1, #15
 80013b6:	f06f 0001 	mvn.w	r0, #1
 80013ba:	f000 fd81 	bl	8001ec0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	@ 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <HAL_I2C_MspInit+0x84>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12c      	bne.n	8001448 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a17      	ldr	r2, [pc, #92]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800140a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001410:	2312      	movs	r3, #18
 8001412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800141c:	2304      	movs	r3, #4
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	480c      	ldr	r0, [pc, #48]	@ (8001458 <HAL_I2C_MspInit+0x8c>)
 8001428:	f000 fd74 	bl	8001f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	4a07      	ldr	r2, [pc, #28]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 8001436:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800143a:	6413      	str	r3, [r2, #64]	@ 0x40
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_I2C_MspInit+0x88>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	@ 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40005400 	.word	0x40005400
 8001454:	40023800 	.word	0x40023800
 8001458:	40020400 	.word	0x40020400

0800145c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <HAL_I2C_MspDeInit+0x38>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d10e      	bne.n	800148c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800146e:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <HAL_I2C_MspDeInit+0x3c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <HAL_I2C_MspDeInit+0x3c>)
 8001474:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001478:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800147a:	2140      	movs	r1, #64	@ 0x40
 800147c:	4807      	ldr	r0, [pc, #28]	@ (800149c <HAL_I2C_MspDeInit+0x40>)
 800147e:	f000 fecd 	bl	800221c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001482:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <HAL_I2C_MspDeInit+0x40>)
 8001488:	f000 fec8 	bl	800221c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40005400 	.word	0x40005400
 8001498:	40023800 	.word	0x40023800
 800149c:	40020400 	.word	0x40020400

080014a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a19      	ldr	r2, [pc, #100]	@ (8001524 <HAL_SPI_MspInit+0x84>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d12b      	bne.n	800151a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <HAL_SPI_MspInit+0x88>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a17      	ldr	r2, [pc, #92]	@ (8001528 <HAL_SPI_MspInit+0x88>)
 80014cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <HAL_SPI_MspInit+0x88>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <HAL_SPI_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a10      	ldr	r2, [pc, #64]	@ (8001528 <HAL_SPI_MspInit+0x88>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <HAL_SPI_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014fa:	23e0      	movs	r3, #224	@ 0xe0
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800150a:	2305      	movs	r3, #5
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <HAL_SPI_MspInit+0x8c>)
 8001516:	f000 fcfd 	bl	8001f14 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	@ 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40013000 	.word	0x40013000
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0b      	ldr	r2, [pc, #44]	@ (800156c <HAL_TIM_Base_MspInit+0x3c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d10d      	bne.n	800155e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <HAL_TIM_Base_MspInit+0x40>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	4a09      	ldr	r2, [pc, #36]	@ (8001570 <HAL_TIM_Base_MspInit+0x40>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6413      	str	r3, [r2, #64]	@ 0x40
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <HAL_TIM_Base_MspInit+0x40>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40000800 	.word	0x40000800
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <HAL_TIM_MspPostInit+0x68>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d11e      	bne.n	80015d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <HAL_TIM_MspPostInit+0x6c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a10      	ldr	r2, [pc, #64]	@ (80015e0 <HAL_TIM_MspPostInit+0x6c>)
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <HAL_TIM_MspPostInit+0x6c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 80015b2:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80015b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4619      	mov	r1, r3
 80015ce:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <HAL_TIM_MspPostInit+0x70>)
 80015d0:	f000 fca0 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40000800 	.word	0x40000800
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020c00 	.word	0x40020c00

080015e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	@ 0x30
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	4b2f      	ldr	r3, [pc, #188]	@ (80016bc <HAL_InitTick+0xd4>)
 80015fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001600:	4a2e      	ldr	r2, [pc, #184]	@ (80016bc <HAL_InitTick+0xd4>)
 8001602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001606:	6453      	str	r3, [r2, #68]	@ 0x44
 8001608:	4b2c      	ldr	r3, [pc, #176]	@ (80016bc <HAL_InitTick+0xd4>)
 800160a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001614:	f107 020c 	add.w	r2, r7, #12
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f002 fc0e 	bl	8003e40 <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001624:	f002 fbf8 	bl	8003e18 <HAL_RCC_GetPCLK2Freq>
 8001628:	4603      	mov	r3, r0
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800162e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001630:	4a23      	ldr	r2, [pc, #140]	@ (80016c0 <HAL_InitTick+0xd8>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	0c9b      	lsrs	r3, r3, #18
 8001638:	3b01      	subs	r3, #1
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800163c:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <HAL_InitTick+0xdc>)
 800163e:	4a22      	ldr	r2, [pc, #136]	@ (80016c8 <HAL_InitTick+0xe0>)
 8001640:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001642:	4b20      	ldr	r3, [pc, #128]	@ (80016c4 <HAL_InitTick+0xdc>)
 8001644:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001648:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800164a:	4a1e      	ldr	r2, [pc, #120]	@ (80016c4 <HAL_InitTick+0xdc>)
 800164c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <HAL_InitTick+0xdc>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <HAL_InitTick+0xdc>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165c:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <HAL_InitTick+0xdc>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001662:	4818      	ldr	r0, [pc, #96]	@ (80016c4 <HAL_InitTick+0xdc>)
 8001664:	f002 fca7 	bl	8003fb6 <HAL_TIM_Base_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800166e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001672:	2b00      	cmp	r3, #0
 8001674:	d11b      	bne.n	80016ae <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001676:	4813      	ldr	r0, [pc, #76]	@ (80016c4 <HAL_InitTick+0xdc>)
 8001678:	f002 fcec 	bl	8004054 <HAL_TIM_Base_Start_IT>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001682:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001686:	2b00      	cmp	r3, #0
 8001688:	d111      	bne.n	80016ae <HAL_InitTick+0xc6>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800168a:	2019      	movs	r0, #25
 800168c:	f000 fc34 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b0f      	cmp	r3, #15
 8001694:	d808      	bhi.n	80016a8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001696:	2200      	movs	r2, #0
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	2019      	movs	r0, #25
 800169c:	f000 fc10 	bl	8001ec0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a0:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <HAL_InitTick+0xe4>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e002      	b.n	80016ae <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3730      	adds	r7, #48	@ 0x30
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	431bde83 	.word	0x431bde83
 80016c4:	20000270 	.word	0x20000270
 80016c8:	40014400 	.word	0x40014400
 80016cc:	200000cc 	.word	0x200000cc

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <NMI_Handler+0x4>

080016d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <MemManage_Handler+0x4>

080016e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800170c:	4802      	ldr	r0, [pc, #8]	@ (8001718 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800170e:	f002 fe0d 	bl	800432c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000270 	.word	0x20000270

0800171c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e00a      	b.n	8001744 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800172e:	f3af 8000 	nop.w
 8001732:	4601      	mov	r1, r0
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	b2ca      	uxtb	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	dbf0      	blt.n	800172e <_read+0x12>
  }

  return len;
 800174c:	687b      	ldr	r3, [r7, #4]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e009      	b.n	800177c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fdb3 	bl	80012dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3301      	adds	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	dbf1      	blt.n	8001768 <_write+0x12>
  }
  return len;
 8001784:	687b      	ldr	r3, [r7, #4]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_close>:

int _close(int file)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017b6:	605a      	str	r2, [r3, #4]
  return 0;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_isatty>:

int _isatty(int file)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001800:	4a14      	ldr	r2, [pc, #80]	@ (8001854 <_sbrk+0x5c>)
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <_sbrk+0x60>)
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800180c:	4b13      	ldr	r3, [pc, #76]	@ (800185c <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <_sbrk+0x64>)
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <_sbrk+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	429a      	cmp	r2, r3
 8001826:	d207      	bcs.n	8001838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001828:	f007 fb86 	bl	8008f38 <__errno>
 800182c:	4603      	mov	r3, r0
 800182e:	220c      	movs	r2, #12
 8001830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	e009      	b.n	800184c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001838:	4b08      	ldr	r3, [pc, #32]	@ (800185c <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	4a05      	ldr	r2, [pc, #20]	@ (800185c <_sbrk+0x64>)
 8001848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20020000 	.word	0x20020000
 8001858:	00000400 	.word	0x00000400
 800185c:	200002b8 	.word	0x200002b8
 8001860:	20004e70 	.word	0x20004e70

08001864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <SystemInit+0x20>)
 800186a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <SystemInit+0x20>)
 8001870:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001874:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <absolute>:
extern osMutexId_t mutexi2c1Handle;
int16_t accxyz[3], magxyz[3], cumxyz[3], magcumxyz[3];

//extern fsm_t* LEDazul;

int absolute(int16_t value){
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	80fb      	strh	r3, [r7, #6]
	if (value >= 0) return value;
 8001892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db02      	blt.n	80018a0 <absolute+0x18>
 800189a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189e:	e002      	b.n	80018a6 <absolute+0x1e>
	else return -value;
 80018a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a4:	425b      	negs	r3, r3
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <tk_BlinkBlue>:


//Tareas

void tk_BlinkBlue(void *argument){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	for (;;) {

		HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 80018bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018c0:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <tk_BlinkBlue+0x20>)
 80018c2:	f000 fda8 	bl	8002416 <HAL_GPIO_TogglePin>
		osDelay(1000);
 80018c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018ca:	f003 fc4b 	bl	8005164 <osDelay>
		HAL_GPIO_TogglePin(Blue_LED_GPIO_Port, Blue_LED_Pin);
 80018ce:	bf00      	nop
 80018d0:	e7f4      	b.n	80018bc <tk_BlinkBlue+0x8>
 80018d2:	bf00      	nop
 80018d4:	40020c00 	.word	0x40020c00

080018d8 <tk_ReadAccel>:
	}
}

void tk_ReadAccel(void *argument){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

	for(;;) {
		osMutexAcquire(mutexi2c1Handle, osWaitForever); //Pongo a esperar hasta que el token esté available
 80018e0:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <tk_ReadAccel+0x98>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 fcdc 	bl	80052a6 <osMutexAcquire>
		BSP_ACCELERO_GetXYZ(accxyz);
 80018ee:	4821      	ldr	r0, [pc, #132]	@ (8001974 <tk_ReadAccel+0x9c>)
 80018f0:	f007 f81c 	bl	800892c <BSP_ACCELERO_GetXYZ>
		osMutexRelease(mutexi2c1Handle); //Pongo el token available
 80018f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <tk_ReadAccel+0x98>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 fd1f 	bl	800533c <osMutexRelease>

		cumxyz[0] += absolute(accxyz[0]);
 80018fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <tk_ReadAccel+0x9c>)
 8001900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ffbf 	bl	8001888 <absolute>
 800190a:	4601      	mov	r1, r0
 800190c:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <tk_ReadAccel+0xa0>)
 800190e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001912:	b29a      	uxth	r2, r3
 8001914:	b28b      	uxth	r3, r1
 8001916:	4413      	add	r3, r2
 8001918:	b29b      	uxth	r3, r3
 800191a:	b21a      	sxth	r2, r3
 800191c:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <tk_ReadAccel+0xa0>)
 800191e:	801a      	strh	r2, [r3, #0]
		cumxyz[1] += absolute(accxyz[1]);
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <tk_ReadAccel+0x9c>)
 8001922:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ffae 	bl	8001888 <absolute>
 800192c:	4601      	mov	r1, r0
 800192e:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <tk_ReadAccel+0xa0>)
 8001930:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001934:	b29a      	uxth	r2, r3
 8001936:	b28b      	uxth	r3, r1
 8001938:	4413      	add	r3, r2
 800193a:	b29b      	uxth	r3, r3
 800193c:	b21a      	sxth	r2, r3
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <tk_ReadAccel+0xa0>)
 8001940:	805a      	strh	r2, [r3, #2]
		cumxyz[2] += absolute(accxyz[2]);
 8001942:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <tk_ReadAccel+0x9c>)
 8001944:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff9d 	bl	8001888 <absolute>
 800194e:	4601      	mov	r1, r0
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <tk_ReadAccel+0xa0>)
 8001952:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001956:	b29a      	uxth	r2, r3
 8001958:	b28b      	uxth	r3, r1
 800195a:	4413      	add	r3, r2
 800195c:	b29b      	uxth	r3, r3
 800195e:	b21a      	sxth	r2, r3
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <tk_ReadAccel+0xa0>)
 8001962:	809a      	strh	r2, [r3, #4]


		osDelay(5);
 8001964:	2005      	movs	r0, #5
 8001966:	f003 fbfd 	bl	8005164 <osDelay>
		osMutexAcquire(mutexi2c1Handle, osWaitForever); //Pongo a esperar hasta que el token esté available
 800196a:	bf00      	nop
 800196c:	e7b8      	b.n	80018e0 <tk_ReadAccel+0x8>
 800196e:	bf00      	nop
 8001970:	20000260 	.word	0x20000260
 8001974:	200002bc 	.word	0x200002bc
 8001978:	200002cc 	.word	0x200002cc

0800197c <tk_ReadMagnet>:
	}
}

void tk_ReadMagnet(void *argument){
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	for(;;){

		osMutexAcquire(mutexi2c1Handle, osWaitForever); //Pongo a esperar hasta que el token esté available
 8001984:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <tk_ReadMagnet+0xb4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	4618      	mov	r0, r3
 800198e:	f003 fc8a 	bl	80052a6 <osMutexAcquire>
		LSM303AGR_MagReadXYZ(magxyz);
 8001992:	4828      	ldr	r0, [pc, #160]	@ (8001a34 <tk_ReadMagnet+0xb8>)
 8001994:	f007 f801 	bl	800899a <LSM303AGR_MagReadXYZ>
		osMutexRelease(mutexi2c1Handle); //Pongo el token en available
 8001998:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <tk_ReadMagnet+0xb4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 fccd 	bl	800533c <osMutexRelease>
		printf("%d, %d, %d\n", magxyz[0], magxyz[1], magxyz[2]);
 80019a2:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <tk_ReadMagnet+0xb8>)
 80019a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <tk_ReadMagnet+0xb8>)
 80019ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <tk_ReadMagnet+0xb8>)
 80019b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019b8:	481f      	ldr	r0, [pc, #124]	@ (8001a38 <tk_ReadMagnet+0xbc>)
 80019ba:	f007 f9b3 	bl	8008d24 <iprintf>
		magcumxyz[0] += absolute(magxyz[0]);
 80019be:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <tk_ReadMagnet+0xb8>)
 80019c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff5f 	bl	8001888 <absolute>
 80019ca:	4601      	mov	r1, r0
 80019cc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <tk_ReadMagnet+0xc0>)
 80019ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	b28b      	uxth	r3, r1
 80019d6:	4413      	add	r3, r2
 80019d8:	b29b      	uxth	r3, r3
 80019da:	b21a      	sxth	r2, r3
 80019dc:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <tk_ReadMagnet+0xc0>)
 80019de:	801a      	strh	r2, [r3, #0]
		magcumxyz[1] += absolute(magxyz[1]);
 80019e0:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <tk_ReadMagnet+0xb8>)
 80019e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff4e 	bl	8001888 <absolute>
 80019ec:	4601      	mov	r1, r0
 80019ee:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <tk_ReadMagnet+0xc0>)
 80019f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	b28b      	uxth	r3, r1
 80019f8:	4413      	add	r3, r2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <tk_ReadMagnet+0xc0>)
 8001a00:	805a      	strh	r2, [r3, #2]
		magcumxyz[2] += absolute(magxyz[2]);
 8001a02:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <tk_ReadMagnet+0xb8>)
 8001a04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff3d 	bl	8001888 <absolute>
 8001a0e:	4601      	mov	r1, r0
 8001a10:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <tk_ReadMagnet+0xc0>)
 8001a12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	b28b      	uxth	r3, r1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <tk_ReadMagnet+0xc0>)
 8001a22:	809a      	strh	r2, [r3, #4]


		osDelay(10);
 8001a24:	200a      	movs	r0, #10
 8001a26:	f003 fb9d 	bl	8005164 <osDelay>
		osMutexAcquire(mutexi2c1Handle, osWaitForever); //Pongo a esperar hasta que el token esté available
 8001a2a:	bf00      	nop
 8001a2c:	e7aa      	b.n	8001984 <tk_ReadMagnet+0x8>
 8001a2e:	bf00      	nop
 8001a30:	20000260 	.word	0x20000260
 8001a34:	200002c4 	.word	0x200002c4
 8001a38:	08009a40 	.word	0x08009a40
 8001a3c:	200002d4 	.word	0x200002d4

08001a40 <tk_WriteLED>:
	}
}

void tk_WriteLED(void *argument){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	for(;;) {
		write_t* data = (write_t*)argument;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	61fb      	str	r3, [r7, #28]
		float modulo;
		if (data->channel == TIM_CHANNEL_1){
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d145      	bne.n	8001ae0 <tk_WriteLED+0xa0>
			arm_sqrt_f32(cumxyz[0]*cumxyz[0] + cumxyz[1]*cumxyz[1] + cumxyz[2]*cumxyz[2], &modulo);
 8001a54:	4b85      	ldr	r3, [pc, #532]	@ (8001c6c <tk_WriteLED+0x22c>)
 8001a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b83      	ldr	r3, [pc, #524]	@ (8001c6c <tk_WriteLED+0x22c>)
 8001a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a62:	fb03 f202 	mul.w	r2, r3, r2
 8001a66:	4b81      	ldr	r3, [pc, #516]	@ (8001c6c <tk_WriteLED+0x22c>)
 8001a68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c6c <tk_WriteLED+0x22c>)
 8001a70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	441a      	add	r2, r3
 8001a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c6c <tk_WriteLED+0x22c>)
 8001a7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a80:	4619      	mov	r1, r3
 8001a82:	4b7a      	ldr	r3, [pc, #488]	@ (8001c6c <tk_WriteLED+0x22c>)
 8001a84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a96:	edc7 7a06 	vstr	s15, [r7, #24]
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001aa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	db09      	blt.n	8001ac2 <tk_WriteLED+0x82>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001aae:	ed97 0a06 	vldr	s0, [r7, #24]
 8001ab2:	f007 ff5b 	bl	800996c <sqrtf>
 8001ab6:	eef0 7a40 	vmov.f32	s15, s0
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001ac0:	e004      	b.n	8001acc <tk_WriteLED+0x8c>
    }
    else
    {
      *pOut = 0.0f;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001aca:	bf00      	nop
			cumxyz[0] = 0; //Reseteo los valores del acumulado recién leído.
 8001acc:	4b67      	ldr	r3, [pc, #412]	@ (8001c6c <tk_WriteLED+0x22c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	801a      	strh	r2, [r3, #0]
			cumxyz[1] = 0;
 8001ad2:	4b66      	ldr	r3, [pc, #408]	@ (8001c6c <tk_WriteLED+0x22c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	805a      	strh	r2, [r3, #2]
			cumxyz[2] = 0;
 8001ad8:	4b64      	ldr	r3, [pc, #400]	@ (8001c6c <tk_WriteLED+0x22c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	809a      	strh	r2, [r3, #4]
 8001ade:	e048      	b.n	8001b72 <tk_WriteLED+0x132>
		}
		else if (data->channel == TIM_CHANNEL_3){
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d144      	bne.n	8001b72 <tk_WriteLED+0x132>
			arm_sqrt_f32(magcumxyz[0]*magcumxyz[0] + magcumxyz[1]*magcumxyz[1] + magcumxyz[2]*magcumxyz[2], &modulo);
 8001ae8:	4b61      	ldr	r3, [pc, #388]	@ (8001c70 <tk_WriteLED+0x230>)
 8001aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b5f      	ldr	r3, [pc, #380]	@ (8001c70 <tk_WriteLED+0x230>)
 8001af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af6:	fb03 f202 	mul.w	r2, r3, r2
 8001afa:	4b5d      	ldr	r3, [pc, #372]	@ (8001c70 <tk_WriteLED+0x230>)
 8001afc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b00:	4619      	mov	r1, r3
 8001b02:	4b5b      	ldr	r3, [pc, #364]	@ (8001c70 <tk_WriteLED+0x230>)
 8001b04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	441a      	add	r2, r3
 8001b0e:	4b58      	ldr	r3, [pc, #352]	@ (8001c70 <tk_WriteLED+0x230>)
 8001b10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4b56      	ldr	r3, [pc, #344]	@ (8001c70 <tk_WriteLED+0x230>)
 8001b18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2a:	edc7 7a04 	vstr	s15, [r7, #16]
 8001b2e:	f107 0308 	add.w	r3, r7, #8
 8001b32:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 8001b34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b40:	db09      	blt.n	8001b56 <tk_WriteLED+0x116>
      *pOut = sqrtf(in);
 8001b42:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b46:	f007 ff11 	bl	800996c <sqrtf>
 8001b4a:	eef0 7a40 	vmov.f32	s15, s0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001b54:	e004      	b.n	8001b60 <tk_WriteLED+0x120>
      *pOut = 0.0f;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001b5e:	bf00      	nop
			magcumxyz[0] = 0;
 8001b60:	4b43      	ldr	r3, [pc, #268]	@ (8001c70 <tk_WriteLED+0x230>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	801a      	strh	r2, [r3, #0]
			magcumxyz[1] = 0;
 8001b66:	4b42      	ldr	r3, [pc, #264]	@ (8001c70 <tk_WriteLED+0x230>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	805a      	strh	r2, [r3, #2]
			magcumxyz[2] = 0;
 8001b6c:	4b40      	ldr	r3, [pc, #256]	@ (8001c70 <tk_WriteLED+0x230>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	809a      	strh	r2, [r3, #4]
		}
		modulo /= 400; //Divido por 200^2 para promediar
 8001b72:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b76:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8001c74 <tk_WriteLED+0x234>
 8001b7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b7e:	edc7 7a02 	vstr	s15, [r7, #8]

		if (modulo >= data->warning && modulo < data->danger){
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	899b      	ldrh	r3, [r3, #12]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	d830      	bhi.n	8001bfe <tk_WriteLED+0x1be>
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	89db      	ldrh	r3, [r3, #14]
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	dd23      	ble.n	8001bfe <tk_WriteLED+0x1be>
			__HAL_TIM_SET_COMPARE(data->htim, data->channel, 50);
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <tk_WriteLED+0x18a>
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2232      	movs	r2, #50	@ 0x32
 8001bc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bc8:	e049      	b.n	8001c5e <tk_WriteLED+0x21e>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d105      	bne.n	8001bde <tk_WriteLED+0x19e>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2332      	movs	r3, #50	@ 0x32
 8001bda:	6393      	str	r3, [r2, #56]	@ 0x38
 8001bdc:	e03f      	b.n	8001c5e <tk_WriteLED+0x21e>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d105      	bne.n	8001bf2 <tk_WriteLED+0x1b2>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2332      	movs	r3, #50	@ 0x32
 8001bee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001bf0:	e035      	b.n	8001c5e <tk_WriteLED+0x21e>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2332      	movs	r3, #50	@ 0x32
 8001bfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfc:	e02f      	b.n	8001c5e <tk_WriteLED+0x21e>
		}
		else if (modulo >= data->danger){
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	89db      	ldrh	r3, [r3, #14]
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c16:	d822      	bhi.n	8001c5e <tk_WriteLED+0x21e>
			__HAL_TIM_SET_COMPARE(data->htim, data->channel, 90);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <tk_WriteLED+0x1ec>
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	225a      	movs	r2, #90	@ 0x5a
 8001c28:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c2a:	e018      	b.n	8001c5e <tk_WriteLED+0x21e>
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d105      	bne.n	8001c40 <tk_WriteLED+0x200>
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	235a      	movs	r3, #90	@ 0x5a
 8001c3c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c3e:	e00e      	b.n	8001c5e <tk_WriteLED+0x21e>
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d105      	bne.n	8001c54 <tk_WriteLED+0x214>
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	235a      	movs	r3, #90	@ 0x5a
 8001c50:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c52:	e004      	b.n	8001c5e <tk_WriteLED+0x21e>
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	235a      	movs	r3, #90	@ 0x5a
 8001c5c:	6413      	str	r3, [r2, #64]	@ 0x40
		}
		osDelay(data->timeout);
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 fa7e 	bl	8005164 <osDelay>
	for(;;) {
 8001c68:	e6ee      	b.n	8001a48 <tk_WriteLED+0x8>
 8001c6a:	bf00      	nop
 8001c6c:	200002cc 	.word	0x200002cc
 8001c70:	200002d4 	.word	0x200002d4
 8001c74:	43c80000 	.word	0x43c80000

08001c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c7c:	f7ff fdf2 	bl	8001864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c80:	480c      	ldr	r0, [pc, #48]	@ (8001cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c82:	490d      	ldr	r1, [pc, #52]	@ (8001cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c84:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c98:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f007 f94d 	bl	8008f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001caa:	f7ff f8b9 	bl	8000e20 <main>
  bx  lr    
 8001cae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8001cbc:	08009be0 	.word	0x08009be0
  ldr r2, =_sbss
 8001cc0:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8001cc4:	20004e6c 	.word	0x20004e6c

08001cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC_IRQHandler>
	...

08001ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d0c <HAL_Init+0x40>)
 8001cd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <HAL_Init+0x40>)
 8001ce2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <HAL_Init+0x40>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a07      	ldr	r2, [pc, #28]	@ (8001d0c <HAL_Init+0x40>)
 8001cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf4:	2003      	movs	r0, #3
 8001cf6:	f000 f8d8 	bl	8001eaa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfa:	200f      	movs	r0, #15
 8001cfc:	f7ff fc74 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d00:	f7ff fb38 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023c00 	.word	0x40023c00

08001d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_IncTick+0x20>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_IncTick+0x24>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	@ (8001d34 <HAL_IncTick+0x24>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	200000d0 	.word	0x200000d0
 8001d34:	200002dc 	.word	0x200002dc

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	@ (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	200002dc 	.word	0x200002dc

08001d50 <__NVIC_SetPriorityGrouping>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	@ (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	@ (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	@ (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	@ (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff4c 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed2:	f7ff ff61 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001ed6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	6978      	ldr	r0, [r7, #20]
 8001ede:	f7ff ffb1 	bl	8001e44 <NVIC_EncodePriority>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ff80 	bl	8001df0 <__NVIC_SetPriority>
}
 8001ef0:	bf00      	nop
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff54 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e159      	b.n	80021e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f040 8148 	bne.w	80021de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d005      	beq.n	8001f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d130      	bne.n	8001fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	2203      	movs	r2, #3
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 0201 	and.w	r2, r3, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d017      	beq.n	8002004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d123      	bne.n	8002058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	08da      	lsrs	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3208      	adds	r2, #8
 8002018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	220f      	movs	r2, #15
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	08da      	lsrs	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3208      	adds	r2, #8
 8002052:	69b9      	ldr	r1, [r7, #24]
 8002054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80a2 	beq.w	80021de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b57      	ldr	r3, [pc, #348]	@ (80021fc <HAL_GPIO_Init+0x2e8>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	4a56      	ldr	r2, [pc, #344]	@ (80021fc <HAL_GPIO_Init+0x2e8>)
 80020a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020aa:	4b54      	ldr	r3, [pc, #336]	@ (80021fc <HAL_GPIO_Init+0x2e8>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b6:	4a52      	ldr	r2, [pc, #328]	@ (8002200 <HAL_GPIO_Init+0x2ec>)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a49      	ldr	r2, [pc, #292]	@ (8002204 <HAL_GPIO_Init+0x2f0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d019      	beq.n	8002116 <HAL_GPIO_Init+0x202>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a48      	ldr	r2, [pc, #288]	@ (8002208 <HAL_GPIO_Init+0x2f4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d013      	beq.n	8002112 <HAL_GPIO_Init+0x1fe>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a47      	ldr	r2, [pc, #284]	@ (800220c <HAL_GPIO_Init+0x2f8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00d      	beq.n	800210e <HAL_GPIO_Init+0x1fa>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a46      	ldr	r2, [pc, #280]	@ (8002210 <HAL_GPIO_Init+0x2fc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <HAL_GPIO_Init+0x1f6>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a45      	ldr	r2, [pc, #276]	@ (8002214 <HAL_GPIO_Init+0x300>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_GPIO_Init+0x1f2>
 8002102:	2304      	movs	r3, #4
 8002104:	e008      	b.n	8002118 <HAL_GPIO_Init+0x204>
 8002106:	2307      	movs	r3, #7
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x204>
 800210a:	2303      	movs	r3, #3
 800210c:	e004      	b.n	8002118 <HAL_GPIO_Init+0x204>
 800210e:	2302      	movs	r3, #2
 8002110:	e002      	b.n	8002118 <HAL_GPIO_Init+0x204>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_GPIO_Init+0x204>
 8002116:	2300      	movs	r3, #0
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	f002 0203 	and.w	r2, r2, #3
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	4093      	lsls	r3, r2
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002128:	4935      	ldr	r1, [pc, #212]	@ (8002200 <HAL_GPIO_Init+0x2ec>)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	3302      	adds	r3, #2
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002136:	4b38      	ldr	r3, [pc, #224]	@ (8002218 <HAL_GPIO_Init+0x304>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800215a:	4a2f      	ldr	r2, [pc, #188]	@ (8002218 <HAL_GPIO_Init+0x304>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002160:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <HAL_GPIO_Init+0x304>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002184:	4a24      	ldr	r2, [pc, #144]	@ (8002218 <HAL_GPIO_Init+0x304>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800218a:	4b23      	ldr	r3, [pc, #140]	@ (8002218 <HAL_GPIO_Init+0x304>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002218 <HAL_GPIO_Init+0x304>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b4:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <HAL_GPIO_Init+0x304>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002218 <HAL_GPIO_Init+0x304>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3301      	adds	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	2b0f      	cmp	r3, #15
 80021e8:	f67f aea2 	bls.w	8001f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3724      	adds	r7, #36	@ 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40013800 	.word	0x40013800
 8002204:	40020000 	.word	0x40020000
 8002208:	40020400 	.word	0x40020400
 800220c:	40020800 	.word	0x40020800
 8002210:	40020c00 	.word	0x40020c00
 8002214:	40021000 	.word	0x40021000
 8002218:	40013c00 	.word	0x40013c00

0800221c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	e0bb      	b.n	80023b0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002238:	2201      	movs	r2, #1
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	429a      	cmp	r2, r3
 8002250:	f040 80ab 	bne.w	80023aa <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002254:	4a5c      	ldr	r2, [pc, #368]	@ (80023c8 <HAL_GPIO_DeInit+0x1ac>)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	3302      	adds	r3, #2
 800225c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002260:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	4013      	ands	r3, r2
 8002274:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a54      	ldr	r2, [pc, #336]	@ (80023cc <HAL_GPIO_DeInit+0x1b0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d019      	beq.n	80022b2 <HAL_GPIO_DeInit+0x96>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a53      	ldr	r2, [pc, #332]	@ (80023d0 <HAL_GPIO_DeInit+0x1b4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_GPIO_DeInit+0x92>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a52      	ldr	r2, [pc, #328]	@ (80023d4 <HAL_GPIO_DeInit+0x1b8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00d      	beq.n	80022aa <HAL_GPIO_DeInit+0x8e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a51      	ldr	r2, [pc, #324]	@ (80023d8 <HAL_GPIO_DeInit+0x1bc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d007      	beq.n	80022a6 <HAL_GPIO_DeInit+0x8a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a50      	ldr	r2, [pc, #320]	@ (80023dc <HAL_GPIO_DeInit+0x1c0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d101      	bne.n	80022a2 <HAL_GPIO_DeInit+0x86>
 800229e:	2304      	movs	r3, #4
 80022a0:	e008      	b.n	80022b4 <HAL_GPIO_DeInit+0x98>
 80022a2:	2307      	movs	r3, #7
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_DeInit+0x98>
 80022a6:	2303      	movs	r3, #3
 80022a8:	e004      	b.n	80022b4 <HAL_GPIO_DeInit+0x98>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_DeInit+0x98>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_DeInit+0x98>
 80022b2:	2300      	movs	r3, #0
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	f002 0203 	and.w	r2, r2, #3
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	4093      	lsls	r3, r2
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d132      	bne.n	800232a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80022c4:	4b46      	ldr	r3, [pc, #280]	@ (80023e0 <HAL_GPIO_DeInit+0x1c4>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	4944      	ldr	r1, [pc, #272]	@ (80023e0 <HAL_GPIO_DeInit+0x1c4>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80022d2:	4b43      	ldr	r3, [pc, #268]	@ (80023e0 <HAL_GPIO_DeInit+0x1c4>)
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43db      	mvns	r3, r3
 80022da:	4941      	ldr	r1, [pc, #260]	@ (80023e0 <HAL_GPIO_DeInit+0x1c4>)
 80022dc:	4013      	ands	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80022e0:	4b3f      	ldr	r3, [pc, #252]	@ (80023e0 <HAL_GPIO_DeInit+0x1c4>)
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	493d      	ldr	r1, [pc, #244]	@ (80023e0 <HAL_GPIO_DeInit+0x1c4>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80022ee:	4b3c      	ldr	r3, [pc, #240]	@ (80023e0 <HAL_GPIO_DeInit+0x1c4>)
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	493a      	ldr	r1, [pc, #232]	@ (80023e0 <HAL_GPIO_DeInit+0x1c4>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	220f      	movs	r2, #15
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800230c:	4a2e      	ldr	r2, [pc, #184]	@ (80023c8 <HAL_GPIO_DeInit+0x1ac>)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	43da      	mvns	r2, r3
 800231c:	482a      	ldr	r0, [pc, #168]	@ (80023c8 <HAL_GPIO_DeInit+0x1ac>)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	400a      	ands	r2, r1
 8002324:	3302      	adds	r3, #2
 8002326:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2103      	movs	r1, #3
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	401a      	ands	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	08da      	lsrs	r2, r3, #3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3208      	adds	r2, #8
 8002348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	08d2      	lsrs	r2, r2, #3
 8002360:	4019      	ands	r1, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3208      	adds	r2, #8
 8002366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	2103      	movs	r1, #3
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	401a      	ands	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	2101      	movs	r1, #1
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	401a      	ands	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2103      	movs	r1, #3
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	401a      	ands	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3301      	adds	r3, #1
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b0f      	cmp	r3, #15
 80023b4:	f67f af40 	bls.w	8002238 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40013800 	.word	0x40013800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40020400 	.word	0x40020400
 80023d4:	40020800 	.word	0x40020800
 80023d8:	40020c00 	.word	0x40020c00
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40013c00 	.word	0x40013c00

080023e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
 80023f0:	4613      	mov	r3, r2
 80023f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f4:	787b      	ldrb	r3, [r7, #1]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002400:	e003      	b.n	800240a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002402:	887b      	ldrh	r3, [r7, #2]
 8002404:	041a      	lsls	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	619a      	str	r2, [r3, #24]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002428:	887a      	ldrh	r2, [r7, #2]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4013      	ands	r3, r2
 800242e:	041a      	lsls	r2, r3, #16
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	43d9      	mvns	r1, r3
 8002434:	887b      	ldrh	r3, [r7, #2]
 8002436:	400b      	ands	r3, r1
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	619a      	str	r2, [r3, #24]
}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e12b      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe ffaa 	bl	80013cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	@ 0x24
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800249e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b0:	f001 fc9e 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 80024b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a81      	ldr	r2, [pc, #516]	@ (80026c0 <HAL_I2C_Init+0x274>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d807      	bhi.n	80024d0 <HAL_I2C_Init+0x84>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a80      	ldr	r2, [pc, #512]	@ (80026c4 <HAL_I2C_Init+0x278>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bf94      	ite	ls
 80024c8:	2301      	movls	r3, #1
 80024ca:	2300      	movhi	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e006      	b.n	80024de <HAL_I2C_Init+0x92>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a7d      	ldr	r2, [pc, #500]	@ (80026c8 <HAL_I2C_Init+0x27c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	bf94      	ite	ls
 80024d8:	2301      	movls	r3, #1
 80024da:	2300      	movhi	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0e7      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a78      	ldr	r2, [pc, #480]	@ (80026cc <HAL_I2C_Init+0x280>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9b      	lsrs	r3, r3, #18
 80024f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a6a      	ldr	r2, [pc, #424]	@ (80026c0 <HAL_I2C_Init+0x274>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d802      	bhi.n	8002520 <HAL_I2C_Init+0xd4>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3301      	adds	r3, #1
 800251e:	e009      	b.n	8002534 <HAL_I2C_Init+0xe8>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	4a69      	ldr	r2, [pc, #420]	@ (80026d0 <HAL_I2C_Init+0x284>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	3301      	adds	r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002546:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	495c      	ldr	r1, [pc, #368]	@ (80026c0 <HAL_I2C_Init+0x274>)
 8002550:	428b      	cmp	r3, r1
 8002552:	d819      	bhi.n	8002588 <HAL_I2C_Init+0x13c>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e59      	subs	r1, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002568:	400b      	ands	r3, r1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_I2C_Init+0x138>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1e59      	subs	r1, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fbb1 f3f3 	udiv	r3, r1, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002582:	e051      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002584:	2304      	movs	r3, #4
 8002586:	e04f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <HAL_I2C_Init+0x168>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e58      	subs	r0, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	440b      	add	r3, r1
 800259e:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e012      	b.n	80025da <HAL_I2C_Init+0x18e>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	0099      	lsls	r1, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Init+0x196>
 80025de:	2301      	movs	r3, #1
 80025e0:	e022      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10e      	bne.n	8002608 <HAL_I2C_Init+0x1bc>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1e58      	subs	r0, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	440b      	add	r3, r1
 80025f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002606:	e00f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	0099      	lsls	r1, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	6809      	ldr	r1, [r1, #0]
 800262c:	4313      	orrs	r3, r2
 800262e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002656:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6911      	ldr	r1, [r2, #16]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68d2      	ldr	r2, [r2, #12]
 8002662:	4311      	orrs	r1, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	430b      	orrs	r3, r1
 800266a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	000186a0 	.word	0x000186a0
 80026c4:	001e847f 	.word	0x001e847f
 80026c8:	003d08ff 	.word	0x003d08ff
 80026cc:	431bde83 	.word	0x431bde83
 80026d0:	10624dd3 	.word	0x10624dd3

080026d4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e021      	b.n	800272a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2224      	movs	r2, #36	@ 0x24
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe feac 	bl	800145c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	461a      	mov	r2, r3
 8002742:	4603      	mov	r3, r0
 8002744:	817b      	strh	r3, [r7, #10]
 8002746:	460b      	mov	r3, r1
 8002748:	813b      	strh	r3, [r7, #8]
 800274a:	4613      	mov	r3, r2
 800274c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800274e:	f7ff faf3 	bl	8001d38 <HAL_GetTick>
 8002752:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b20      	cmp	r3, #32
 800275e:	f040 80d9 	bne.w	8002914 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2319      	movs	r3, #25
 8002768:	2201      	movs	r2, #1
 800276a:	496d      	ldr	r1, [pc, #436]	@ (8002920 <HAL_I2C_Mem_Write+0x1ec>)
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fc99 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
 800277a:	e0cc      	b.n	8002916 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_I2C_Mem_Write+0x56>
 8002786:	2302      	movs	r3, #2
 8002788:	e0c5      	b.n	8002916 <HAL_I2C_Mem_Write+0x1e2>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d007      	beq.n	80027b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2221      	movs	r2, #33	@ 0x21
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2240      	movs	r2, #64	@ 0x40
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a3a      	ldr	r2, [r7, #32]
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80027e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002924 <HAL_I2C_Mem_Write+0x1f0>)
 80027f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027f2:	88f8      	ldrh	r0, [r7, #6]
 80027f4:	893a      	ldrh	r2, [r7, #8]
 80027f6:	8979      	ldrh	r1, [r7, #10]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	4603      	mov	r3, r0
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fad0 	bl	8002da8 <I2C_RequestMemoryWrite>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d052      	beq.n	80028b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e081      	b.n	8002916 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fd5e 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00d      	beq.n	800283e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	2b04      	cmp	r3, #4
 8002828:	d107      	bne.n	800283a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002838:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e06b      	b.n	8002916 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b04      	cmp	r3, #4
 800287a:	d11b      	bne.n	80028b4 <HAL_I2C_Mem_Write+0x180>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002880:	2b00      	cmp	r3, #0
 8002882:	d017      	beq.n	80028b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1aa      	bne.n	8002812 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fd51 	bl	8003368 <I2C_WaitOnBTFFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00d      	beq.n	80028e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d107      	bne.n	80028e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e016      	b.n	8002916 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002914:	2302      	movs	r3, #2
  }
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	00100002 	.word	0x00100002
 8002924:	ffff0000 	.word	0xffff0000

08002928 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	@ 0x30
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	817b      	strh	r3, [r7, #10]
 800293a:	460b      	mov	r3, r1
 800293c:	813b      	strh	r3, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002942:	f7ff f9f9 	bl	8001d38 <HAL_GetTick>
 8002946:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b20      	cmp	r3, #32
 8002952:	f040 8214 	bne.w	8002d7e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2319      	movs	r3, #25
 800295c:	2201      	movs	r2, #1
 800295e:	497b      	ldr	r1, [pc, #492]	@ (8002b4c <HAL_I2C_Mem_Read+0x224>)
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fb9f 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
 800296e:	e207      	b.n	8002d80 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_I2C_Mem_Read+0x56>
 800297a:	2302      	movs	r3, #2
 800297c:	e200      	b.n	8002d80 <HAL_I2C_Mem_Read+0x458>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d007      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2222      	movs	r2, #34	@ 0x22
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2240      	movs	r2, #64	@ 0x40
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80029d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002b50 <HAL_I2C_Mem_Read+0x228>)
 80029e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029e6:	88f8      	ldrh	r0, [r7, #6]
 80029e8:	893a      	ldrh	r2, [r7, #8]
 80029ea:	8979      	ldrh	r1, [r7, #10]
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	4603      	mov	r3, r0
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fa6c 	bl	8002ed4 <I2C_RequestMemoryRead>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e1bc      	b.n	8002d80 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d113      	bne.n	8002a36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	623b      	str	r3, [r7, #32]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	623b      	str	r3, [r7, #32]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	e190      	b.n	8002d58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d11b      	bne.n	8002a76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e170      	b.n	8002d58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d11b      	bne.n	8002ab6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	e150      	b.n	8002d58 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002acc:	e144      	b.n	8002d58 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	f200 80f1 	bhi.w	8002cba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d123      	bne.n	8002b28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 fc87 	bl	80033f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e145      	b.n	8002d80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b26:	e117      	b.n	8002d58 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d14e      	bne.n	8002bce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b36:	2200      	movs	r2, #0
 8002b38:	4906      	ldr	r1, [pc, #24]	@ (8002b54 <HAL_I2C_Mem_Read+0x22c>)
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fab2 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e11a      	b.n	8002d80 <HAL_I2C_Mem_Read+0x458>
 8002b4a:	bf00      	nop
 8002b4c:	00100002 	.word	0x00100002
 8002b50:	ffff0000 	.word	0xffff0000
 8002b54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bcc:	e0c4      	b.n	8002d58 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	496c      	ldr	r1, [pc, #432]	@ (8002d88 <HAL_I2C_Mem_Read+0x460>)
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fa63 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0cb      	b.n	8002d80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c30:	2200      	movs	r2, #0
 8002c32:	4955      	ldr	r1, [pc, #340]	@ (8002d88 <HAL_I2C_Mem_Read+0x460>)
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fa35 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e09d      	b.n	8002d80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cb8:	e04e      	b.n	8002d58 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cbc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fb9a 	bl	80033f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e058      	b.n	8002d80 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d124      	bne.n	8002d58 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d107      	bne.n	8002d26 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d24:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f47f aeb6 	bne.w	8002ace <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e000      	b.n	8002d80 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d7e:	2302      	movs	r3, #2
  }
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3728      	adds	r7, #40	@ 0x28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	00010004 	.word	0x00010004

08002d8c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d9a:	b2db      	uxtb	r3, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	4608      	mov	r0, r1
 8002db2:	4611      	mov	r1, r2
 8002db4:	461a      	mov	r2, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	817b      	strh	r3, [r7, #10]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	813b      	strh	r3, [r7, #8]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f960 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00d      	beq.n	8002e06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df8:	d103      	bne.n	8002e02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e05f      	b.n	8002ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e06:	897b      	ldrh	r3, [r7, #10]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	6a3a      	ldr	r2, [r7, #32]
 8002e1a:	492d      	ldr	r1, [pc, #180]	@ (8002ed0 <I2C_RequestMemoryWrite+0x128>)
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f9bb 	bl	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e04c      	b.n	8002ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e44:	6a39      	ldr	r1, [r7, #32]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fa46 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d107      	bne.n	8002e6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e02b      	b.n	8002ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e74:	893b      	ldrh	r3, [r7, #8]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	611a      	str	r2, [r3, #16]
 8002e7e:	e021      	b.n	8002ec4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e80:	893b      	ldrh	r3, [r7, #8]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e90:	6a39      	ldr	r1, [r7, #32]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fa20 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d107      	bne.n	8002eb6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e005      	b.n	8002ec6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eba:	893b      	ldrh	r3, [r7, #8]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	00010002 	.word	0x00010002

08002ed4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	4608      	mov	r0, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	817b      	strh	r3, [r7, #10]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	813b      	strh	r3, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002efc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f8c2 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f34:	d103      	bne.n	8002f3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e0aa      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f42:	897b      	ldrh	r3, [r7, #10]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	4952      	ldr	r1, [pc, #328]	@ (80030a0 <I2C_RequestMemoryRead+0x1cc>)
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f91d 	bl	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e097      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f80:	6a39      	ldr	r1, [r7, #32]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f9a8 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d107      	bne.n	8002fa6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e076      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb0:	893b      	ldrh	r3, [r7, #8]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	611a      	str	r2, [r3, #16]
 8002fba:	e021      	b.n	8003000 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fbc:	893b      	ldrh	r3, [r7, #8]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fcc:	6a39      	ldr	r1, [r7, #32]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f982 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00d      	beq.n	8002ff6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d107      	bne.n	8002ff2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e050      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff6:	893b      	ldrh	r3, [r7, #8]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003002:	6a39      	ldr	r1, [r7, #32]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f967 	bl	80032d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	2b04      	cmp	r3, #4
 8003016:	d107      	bne.n	8003028 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003026:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e035      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800303a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	2200      	movs	r2, #0
 8003044:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f82b 	bl	80030a4 <I2C_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00d      	beq.n	8003070 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003062:	d103      	bne.n	800306c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e013      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003070:	897b      	ldrh	r3, [r7, #10]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	6a3a      	ldr	r2, [r7, #32]
 8003084:	4906      	ldr	r1, [pc, #24]	@ (80030a0 <I2C_RequestMemoryRead+0x1cc>)
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f886 	bl	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	00010002 	.word	0x00010002

080030a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b4:	e048      	b.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d044      	beq.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030be:	f7fe fe3b 	bl	8001d38 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d139      	bne.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	0c1b      	lsrs	r3, r3, #16
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d10d      	bne.n	80030fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	e00c      	b.n	8003114 <I2C_WaitOnFlagUntilTimeout+0x70>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	43da      	mvns	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	429a      	cmp	r2, r3
 8003118:	d116      	bne.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e023      	b.n	8003190 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	0c1b      	lsrs	r3, r3, #16
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d10d      	bne.n	800316e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	43da      	mvns	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4013      	ands	r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	e00c      	b.n	8003188 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	43da      	mvns	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	4013      	ands	r3, r2
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	429a      	cmp	r2, r3
 800318c:	d093      	beq.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031a6:	e071      	b.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031b6:	d123      	bne.n	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	f043 0204 	orr.w	r2, r3, #4
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e067      	b.n	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003206:	d041      	beq.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003208:	f7fe fd96 	bl	8001d38 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d302      	bcc.n	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d136      	bne.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10c      	bne.n	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4013      	ands	r3, r2
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e00b      	b.n	800325a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	43da      	mvns	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4013      	ands	r3, r2
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e021      	b.n	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	0c1b      	lsrs	r3, r3, #16
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d10c      	bne.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	43da      	mvns	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4013      	ands	r3, r2
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e00b      	b.n	80032c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	43da      	mvns	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4013      	ands	r3, r2
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f47f af6d 	bne.w	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e4:	e034      	b.n	8003350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f8e3 	bl	80034b2 <I2C_IsAcknowledgeFailed>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e034      	b.n	8003360 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d028      	beq.n	8003350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fe:	f7fe fd1b 	bl	8001d38 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	429a      	cmp	r2, r3
 800330c:	d302      	bcc.n	8003314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d11d      	bne.n	8003350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331e:	2b80      	cmp	r3, #128	@ 0x80
 8003320:	d016      	beq.n	8003350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e007      	b.n	8003360 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335a:	2b80      	cmp	r3, #128	@ 0x80
 800335c:	d1c3      	bne.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003374:	e034      	b.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f89b 	bl	80034b2 <I2C_IsAcknowledgeFailed>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e034      	b.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d028      	beq.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338e:	f7fe fcd3 	bl	8001d38 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d11d      	bne.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d016      	beq.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e007      	b.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d1c3      	bne.n	8003376 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003404:	e049      	b.n	800349a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b10      	cmp	r3, #16
 8003412:	d119      	bne.n	8003448 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0210 	mvn.w	r2, #16
 800341c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e030      	b.n	80034aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003448:	f7fe fc76 	bl	8001d38 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	429a      	cmp	r2, r3
 8003456:	d302      	bcc.n	800345e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d11d      	bne.n	800349a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003468:	2b40      	cmp	r3, #64	@ 0x40
 800346a:	d016      	beq.n	800349a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	f043 0220 	orr.w	r2, r3, #32
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e007      	b.n	80034aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a4:	2b40      	cmp	r3, #64	@ 0x40
 80034a6:	d1ae      	bne.n	8003406 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c8:	d11b      	bne.n	8003502 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	f043 0204 	orr.w	r2, r3, #4
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e267      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d075      	beq.n	800361a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800352e:	4b88      	ldr	r3, [pc, #544]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b04      	cmp	r3, #4
 8003538:	d00c      	beq.n	8003554 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353a:	4b85      	ldr	r3, [pc, #532]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003542:	2b08      	cmp	r3, #8
 8003544:	d112      	bne.n	800356c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003546:	4b82      	ldr	r3, [pc, #520]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003552:	d10b      	bne.n	800356c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	4b7e      	ldr	r3, [pc, #504]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d05b      	beq.n	8003618 <HAL_RCC_OscConfig+0x108>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d157      	bne.n	8003618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e242      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003574:	d106      	bne.n	8003584 <HAL_RCC_OscConfig+0x74>
 8003576:	4b76      	ldr	r3, [pc, #472]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a75      	ldr	r2, [pc, #468]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e01d      	b.n	80035c0 <HAL_RCC_OscConfig+0xb0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x98>
 800358e:	4b70      	ldr	r3, [pc, #448]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a6f      	ldr	r2, [pc, #444]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b6d      	ldr	r3, [pc, #436]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6c      	ldr	r2, [pc, #432]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0xb0>
 80035a8:	4b69      	ldr	r3, [pc, #420]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a68      	ldr	r2, [pc, #416]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b66      	ldr	r3, [pc, #408]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a65      	ldr	r2, [pc, #404]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d013      	beq.n	80035f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe fbb6 	bl	8001d38 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fbb2 	bl	8001d38 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	@ 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e207      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0xc0>
 80035ee:	e014      	b.n	800361a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe fba2 	bl	8001d38 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fb9e 	bl	8001d38 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	@ 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1f3      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360a:	4b51      	ldr	r3, [pc, #324]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0xe8>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d063      	beq.n	80036ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003626:	4b4a      	ldr	r3, [pc, #296]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003632:	4b47      	ldr	r3, [pc, #284]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800363a:	2b08      	cmp	r3, #8
 800363c:	d11c      	bne.n	8003678 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363e:	4b44      	ldr	r3, [pc, #272]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d116      	bne.n	8003678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	4b41      	ldr	r3, [pc, #260]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_RCC_OscConfig+0x152>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e1c7      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003662:	4b3b      	ldr	r3, [pc, #236]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4937      	ldr	r1, [pc, #220]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003676:	e03a      	b.n	80036ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003680:	4b34      	ldr	r3, [pc, #208]	@ (8003754 <HAL_RCC_OscConfig+0x244>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7fe fb57 	bl	8001d38 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368e:	f7fe fb53 	bl	8001d38 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e1a8      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ac:	4b28      	ldr	r3, [pc, #160]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4925      	ldr	r1, [pc, #148]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]
 80036c0:	e015      	b.n	80036ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c2:	4b24      	ldr	r3, [pc, #144]	@ (8003754 <HAL_RCC_OscConfig+0x244>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe fb36 	bl	8001d38 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d0:	f7fe fb32 	bl	8001d38 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e187      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d036      	beq.n	8003768 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <HAL_RCC_OscConfig+0x248>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003708:	f7fe fb16 	bl	8001d38 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003710:	f7fe fb12 	bl	8001d38 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e167      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003722:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <HAL_RCC_OscConfig+0x240>)
 8003724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x200>
 800372e:	e01b      	b.n	8003768 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003730:	4b09      	ldr	r3, [pc, #36]	@ (8003758 <HAL_RCC_OscConfig+0x248>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003736:	f7fe faff 	bl	8001d38 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373c:	e00e      	b.n	800375c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373e:	f7fe fafb 	bl	8001d38 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d907      	bls.n	800375c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e150      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
 8003750:	40023800 	.word	0x40023800
 8003754:	42470000 	.word	0x42470000
 8003758:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	4b88      	ldr	r3, [pc, #544]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 800375e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1ea      	bne.n	800373e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8097 	beq.w	80038a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377a:	4b81      	ldr	r3, [pc, #516]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10f      	bne.n	80037a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	4b7d      	ldr	r3, [pc, #500]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378e:	4a7c      	ldr	r2, [pc, #496]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003794:	6413      	str	r3, [r2, #64]	@ 0x40
 8003796:	4b7a      	ldr	r3, [pc, #488]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a2:	2301      	movs	r3, #1
 80037a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a6:	4b77      	ldr	r3, [pc, #476]	@ (8003984 <HAL_RCC_OscConfig+0x474>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d118      	bne.n	80037e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b2:	4b74      	ldr	r3, [pc, #464]	@ (8003984 <HAL_RCC_OscConfig+0x474>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a73      	ldr	r2, [pc, #460]	@ (8003984 <HAL_RCC_OscConfig+0x474>)
 80037b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037be:	f7fe fabb 	bl	8001d38 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c6:	f7fe fab7 	bl	8001d38 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e10c      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003984 <HAL_RCC_OscConfig+0x474>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_OscConfig+0x2ea>
 80037ec:	4b64      	ldr	r3, [pc, #400]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	4a63      	ldr	r2, [pc, #396]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f8:	e01c      	b.n	8003834 <HAL_RCC_OscConfig+0x324>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b05      	cmp	r3, #5
 8003800:	d10c      	bne.n	800381c <HAL_RCC_OscConfig+0x30c>
 8003802:	4b5f      	ldr	r3, [pc, #380]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003806:	4a5e      	ldr	r2, [pc, #376]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	6713      	str	r3, [r2, #112]	@ 0x70
 800380e:	4b5c      	ldr	r3, [pc, #368]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003812:	4a5b      	ldr	r2, [pc, #364]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6713      	str	r3, [r2, #112]	@ 0x70
 800381a:	e00b      	b.n	8003834 <HAL_RCC_OscConfig+0x324>
 800381c:	4b58      	ldr	r3, [pc, #352]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003820:	4a57      	ldr	r2, [pc, #348]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	6713      	str	r3, [r2, #112]	@ 0x70
 8003828:	4b55      	ldr	r3, [pc, #340]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382c:	4a54      	ldr	r2, [pc, #336]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 800382e:	f023 0304 	bic.w	r3, r3, #4
 8003832:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d015      	beq.n	8003868 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7fe fa7c 	bl	8001d38 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003842:	e00a      	b.n	800385a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003844:	f7fe fa78 	bl	8001d38 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e0cb      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385a:	4b49      	ldr	r3, [pc, #292]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0ee      	beq.n	8003844 <HAL_RCC_OscConfig+0x334>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003868:	f7fe fa66 	bl	8001d38 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386e:	e00a      	b.n	8003886 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003870:	f7fe fa62 	bl	8001d38 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e0b5      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003886:	4b3e      	ldr	r3, [pc, #248]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1ee      	bne.n	8003870 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003898:	4b39      	ldr	r3, [pc, #228]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	4a38      	ldr	r2, [pc, #224]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 800389e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80a1 	beq.w	80039f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ae:	4b34      	ldr	r3, [pc, #208]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d05c      	beq.n	8003974 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d141      	bne.n	8003946 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c2:	4b31      	ldr	r3, [pc, #196]	@ (8003988 <HAL_RCC_OscConfig+0x478>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fe fa36 	bl	8001d38 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fe fa32 	bl	8001d38 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e087      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	4b27      	ldr	r3, [pc, #156]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	3b01      	subs	r3, #1
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	061b      	lsls	r3, r3, #24
 8003912:	491b      	ldr	r1, [pc, #108]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003918:	4b1b      	ldr	r3, [pc, #108]	@ (8003988 <HAL_RCC_OscConfig+0x478>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391e:	f7fe fa0b 	bl	8001d38 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003926:	f7fe fa07 	bl	8001d38 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e05c      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003938:	4b11      	ldr	r3, [pc, #68]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x416>
 8003944:	e054      	b.n	80039f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003946:	4b10      	ldr	r3, [pc, #64]	@ (8003988 <HAL_RCC_OscConfig+0x478>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fe f9f4 	bl	8001d38 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003954:	f7fe f9f0 	bl	8001d38 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e045      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <HAL_RCC_OscConfig+0x470>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x444>
 8003972:	e03d      	b.n	80039f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d107      	bne.n	800398c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e038      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
 8003980:	40023800 	.word	0x40023800
 8003984:	40007000 	.word	0x40007000
 8003988:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800398c:	4b1b      	ldr	r3, [pc, #108]	@ (80039fc <HAL_RCC_OscConfig+0x4ec>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d028      	beq.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d121      	bne.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d11a      	bne.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039bc:	4013      	ands	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d111      	bne.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	3b01      	subs	r3, #1
 80039d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d107      	bne.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800

08003a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0cc      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a14:	4b68      	ldr	r3, [pc, #416]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d90c      	bls.n	8003a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b65      	ldr	r3, [pc, #404]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b63      	ldr	r3, [pc, #396]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0b8      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d020      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a54:	4b59      	ldr	r3, [pc, #356]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a58      	ldr	r2, [pc, #352]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a6c:	4b53      	ldr	r3, [pc, #332]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4a52      	ldr	r2, [pc, #328]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a78:	4b50      	ldr	r3, [pc, #320]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	494d      	ldr	r1, [pc, #308]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d044      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	4b47      	ldr	r3, [pc, #284]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d119      	bne.n	8003ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e07f      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d003      	beq.n	8003abe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abe:	4b3f      	ldr	r3, [pc, #252]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e06f      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ace:	4b3b      	ldr	r3, [pc, #236]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e067      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ade:	4b37      	ldr	r3, [pc, #220]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f023 0203 	bic.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4934      	ldr	r1, [pc, #208]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af0:	f7fe f922 	bl	8001d38 <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af8:	f7fe f91e 	bl	8001d38 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e04f      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 020c 	and.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d1eb      	bne.n	8003af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b20:	4b25      	ldr	r3, [pc, #148]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d20c      	bcs.n	8003b48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b22      	ldr	r3, [pc, #136]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b20      	ldr	r3, [pc, #128]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e032      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b54:	4b19      	ldr	r3, [pc, #100]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4916      	ldr	r1, [pc, #88]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b72:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	490e      	ldr	r1, [pc, #56]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b86:	f000 f821 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	490a      	ldr	r1, [pc, #40]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b98:	5ccb      	ldrb	r3, [r1, r3]
 8003b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9e:	4a09      	ldr	r2, [pc, #36]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ba2:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd fd1e 	bl	80015e8 <HAL_InitTick>

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023c00 	.word	0x40023c00
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	08009b84 	.word	0x08009b84
 8003bc4:	200000c8 	.word	0x200000c8
 8003bc8:	200000cc 	.word	0x200000cc

08003bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd0:	b094      	sub	sp, #80	@ 0x50
 8003bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be4:	4b79      	ldr	r3, [pc, #484]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d00d      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0x40>
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	f200 80e1 	bhi.w	8003db8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x34>
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bfe:	e0db      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c00:	4b73      	ldr	r3, [pc, #460]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c04:	e0db      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c06:	4b73      	ldr	r3, [pc, #460]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c0a:	e0d8      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c16:	4b6d      	ldr	r3, [pc, #436]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d063      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c22:	4b6a      	ldr	r3, [pc, #424]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	099b      	lsrs	r3, r3, #6
 8003c28:	2200      	movs	r2, #0
 8003c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c34:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c36:	2300      	movs	r3, #0
 8003c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c3e:	4622      	mov	r2, r4
 8003c40:	462b      	mov	r3, r5
 8003c42:	f04f 0000 	mov.w	r0, #0
 8003c46:	f04f 0100 	mov.w	r1, #0
 8003c4a:	0159      	lsls	r1, r3, #5
 8003c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c50:	0150      	lsls	r0, r2, #5
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4621      	mov	r1, r4
 8003c58:	1a51      	subs	r1, r2, r1
 8003c5a:	6139      	str	r1, [r7, #16]
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c70:	4659      	mov	r1, fp
 8003c72:	018b      	lsls	r3, r1, #6
 8003c74:	4651      	mov	r1, sl
 8003c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	018a      	lsls	r2, r1, #6
 8003c7e:	4651      	mov	r1, sl
 8003c80:	ebb2 0801 	subs.w	r8, r2, r1
 8003c84:	4659      	mov	r1, fp
 8003c86:	eb63 0901 	sbc.w	r9, r3, r1
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c9e:	4690      	mov	r8, r2
 8003ca0:	4699      	mov	r9, r3
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	eb18 0303 	adds.w	r3, r8, r3
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	462b      	mov	r3, r5
 8003cac:	eb49 0303 	adc.w	r3, r9, r3
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	024b      	lsls	r3, r1, #9
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cc8:	4621      	mov	r1, r4
 8003cca:	024a      	lsls	r2, r1, #9
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cdc:	f7fc fad0 	bl	8000280 <__aeabi_uldivmod>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ce8:	e058      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cea:	4b38      	ldr	r3, [pc, #224]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	099b      	lsrs	r3, r3, #6
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cfa:	623b      	str	r3, [r7, #32]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d04:	4642      	mov	r2, r8
 8003d06:	464b      	mov	r3, r9
 8003d08:	f04f 0000 	mov.w	r0, #0
 8003d0c:	f04f 0100 	mov.w	r1, #0
 8003d10:	0159      	lsls	r1, r3, #5
 8003d12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d16:	0150      	lsls	r0, r2, #5
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d22:	4649      	mov	r1, r9
 8003d24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d40:	eb63 050b 	sbc.w	r5, r3, fp
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	00eb      	lsls	r3, r5, #3
 8003d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d52:	00e2      	lsls	r2, r4, #3
 8003d54:	4614      	mov	r4, r2
 8003d56:	461d      	mov	r5, r3
 8003d58:	4643      	mov	r3, r8
 8003d5a:	18e3      	adds	r3, r4, r3
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	464b      	mov	r3, r9
 8003d60:	eb45 0303 	adc.w	r3, r5, r3
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d72:	4629      	mov	r1, r5
 8003d74:	028b      	lsls	r3, r1, #10
 8003d76:	4621      	mov	r1, r4
 8003d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	028a      	lsls	r2, r1, #10
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d86:	2200      	movs	r2, #0
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	61fa      	str	r2, [r7, #28]
 8003d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d90:	f7fc fa76 	bl	8000280 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	3301      	adds	r3, #1
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003dac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003db6:	e002      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db8:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3750      	adds	r7, #80	@ 0x50
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	00f42400 	.word	0x00f42400
 8003dd4:	007a1200 	.word	0x007a1200

08003dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ddc:	4b03      	ldr	r3, [pc, #12]	@ (8003dec <HAL_RCC_GetHCLKFreq+0x14>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	200000c8 	.word	0x200000c8

08003df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003df4:	f7ff fff0 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	0a9b      	lsrs	r3, r3, #10
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	4903      	ldr	r1, [pc, #12]	@ (8003e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e06:	5ccb      	ldrb	r3, [r1, r3]
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40023800 	.word	0x40023800
 8003e14:	08009b94 	.word	0x08009b94

08003e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e1c:	f7ff ffdc 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003e20:	4602      	mov	r2, r0
 8003e22:	4b05      	ldr	r3, [pc, #20]	@ (8003e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	0b5b      	lsrs	r3, r3, #13
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	4903      	ldr	r1, [pc, #12]	@ (8003e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2e:	5ccb      	ldrb	r3, [r1, r3]
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	08009b94 	.word	0x08009b94

08003e40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	220f      	movs	r2, #15
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e50:	4b12      	ldr	r3, [pc, #72]	@ (8003e9c <HAL_RCC_GetClockConfig+0x5c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0203 	and.w	r2, r3, #3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e9c <HAL_RCC_GetClockConfig+0x5c>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e68:	4b0c      	ldr	r3, [pc, #48]	@ (8003e9c <HAL_RCC_GetClockConfig+0x5c>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e74:	4b09      	ldr	r3, [pc, #36]	@ (8003e9c <HAL_RCC_GetClockConfig+0x5c>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	08db      	lsrs	r3, r3, #3
 8003e7a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e82:	4b07      	ldr	r3, [pc, #28]	@ (8003ea0 <HAL_RCC_GetClockConfig+0x60>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0207 	and.w	r2, r3, #7
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	601a      	str	r2, [r3, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40023c00 	.word	0x40023c00

08003ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e07b      	b.n	8003fae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d108      	bne.n	8003ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ec6:	d009      	beq.n	8003edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61da      	str	r2, [r3, #28]
 8003ece:	e005      	b.n	8003edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd fad2 	bl	80014a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f60:	ea42 0103 	orr.w	r1, r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	f003 0104 	and.w	r1, r3, #4
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	f003 0210 	and.w	r2, r3, #16
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69da      	ldr	r2, [r3, #28]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e041      	b.n	800404c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7fd faa7 	bl	8001530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f000 fc3b 	bl	8004870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d001      	beq.n	800406c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e044      	b.n	80040f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1e      	ldr	r2, [pc, #120]	@ (8004104 <HAL_TIM_Base_Start_IT+0xb0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d018      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x6c>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004096:	d013      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x6c>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1a      	ldr	r2, [pc, #104]	@ (8004108 <HAL_TIM_Base_Start_IT+0xb4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00e      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x6c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a19      	ldr	r2, [pc, #100]	@ (800410c <HAL_TIM_Base_Start_IT+0xb8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d009      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x6c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a17      	ldr	r2, [pc, #92]	@ (8004110 <HAL_TIM_Base_Start_IT+0xbc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d004      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x6c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a16      	ldr	r2, [pc, #88]	@ (8004114 <HAL_TIM_Base_Start_IT+0xc0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d111      	bne.n	80040e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b06      	cmp	r3, #6
 80040d0:	d010      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	e007      	b.n	80040f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40010000 	.word	0x40010000
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	40000c00 	.word	0x40000c00
 8004114:	40014000 	.word	0x40014000

08004118 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e041      	b.n	80041ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f839 	bl	80041b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3304      	adds	r3, #4
 8004154:	4619      	mov	r1, r3
 8004156:	4610      	mov	r0, r2
 8004158:	f000 fb8a 	bl	8004870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <HAL_TIM_PWM_Start+0x24>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	bf14      	ite	ne
 80041e8:	2301      	movne	r3, #1
 80041ea:	2300      	moveq	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e022      	b.n	8004236 <HAL_TIM_PWM_Start+0x6a>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d109      	bne.n	800420a <HAL_TIM_PWM_Start+0x3e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b01      	cmp	r3, #1
 8004200:	bf14      	ite	ne
 8004202:	2301      	movne	r3, #1
 8004204:	2300      	moveq	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	e015      	b.n	8004236 <HAL_TIM_PWM_Start+0x6a>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b08      	cmp	r3, #8
 800420e:	d109      	bne.n	8004224 <HAL_TIM_PWM_Start+0x58>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	bf14      	ite	ne
 800421c:	2301      	movne	r3, #1
 800421e:	2300      	moveq	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	e008      	b.n	8004236 <HAL_TIM_PWM_Start+0x6a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b01      	cmp	r3, #1
 800422e:	bf14      	ite	ne
 8004230:	2301      	movne	r3, #1
 8004232:	2300      	moveq	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e068      	b.n	8004310 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <HAL_TIM_PWM_Start+0x82>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800424c:	e013      	b.n	8004276 <HAL_TIM_PWM_Start+0xaa>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b04      	cmp	r3, #4
 8004252:	d104      	bne.n	800425e <HAL_TIM_PWM_Start+0x92>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800425c:	e00b      	b.n	8004276 <HAL_TIM_PWM_Start+0xaa>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b08      	cmp	r3, #8
 8004262:	d104      	bne.n	800426e <HAL_TIM_PWM_Start+0xa2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800426c:	e003      	b.n	8004276 <HAL_TIM_PWM_Start+0xaa>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2202      	movs	r2, #2
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2201      	movs	r2, #1
 800427c:	6839      	ldr	r1, [r7, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fda8 	bl	8004dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a23      	ldr	r2, [pc, #140]	@ (8004318 <HAL_TIM_PWM_Start+0x14c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d107      	bne.n	800429e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800429c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004318 <HAL_TIM_PWM_Start+0x14c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d018      	beq.n	80042da <HAL_TIM_PWM_Start+0x10e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b0:	d013      	beq.n	80042da <HAL_TIM_PWM_Start+0x10e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a19      	ldr	r2, [pc, #100]	@ (800431c <HAL_TIM_PWM_Start+0x150>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00e      	beq.n	80042da <HAL_TIM_PWM_Start+0x10e>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a17      	ldr	r2, [pc, #92]	@ (8004320 <HAL_TIM_PWM_Start+0x154>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d009      	beq.n	80042da <HAL_TIM_PWM_Start+0x10e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a16      	ldr	r2, [pc, #88]	@ (8004324 <HAL_TIM_PWM_Start+0x158>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d004      	beq.n	80042da <HAL_TIM_PWM_Start+0x10e>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a14      	ldr	r2, [pc, #80]	@ (8004328 <HAL_TIM_PWM_Start+0x15c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d111      	bne.n	80042fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b06      	cmp	r3, #6
 80042ea:	d010      	beq.n	800430e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fc:	e007      	b.n	800430e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40010000 	.word	0x40010000
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00
 8004328:	40014000 	.word	0x40014000

0800432c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d020      	beq.n	8004390 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01b      	beq.n	8004390 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0202 	mvn.w	r2, #2
 8004360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa5b 	bl	8004832 <HAL_TIM_IC_CaptureCallback>
 800437c:	e005      	b.n	800438a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fa4d 	bl	800481e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fa5e 	bl	8004846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d020      	beq.n	80043dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01b      	beq.n	80043dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0204 	mvn.w	r2, #4
 80043ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fa35 	bl	8004832 <HAL_TIM_IC_CaptureCallback>
 80043c8:	e005      	b.n	80043d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fa27 	bl	800481e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fa38 	bl	8004846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d020      	beq.n	8004428 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01b      	beq.n	8004428 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0208 	mvn.w	r2, #8
 80043f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2204      	movs	r2, #4
 80043fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa0f 	bl	8004832 <HAL_TIM_IC_CaptureCallback>
 8004414:	e005      	b.n	8004422 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fa01 	bl	800481e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fa12 	bl	8004846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b00      	cmp	r3, #0
 8004430:	d020      	beq.n	8004474 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01b      	beq.n	8004474 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0210 	mvn.w	r2, #16
 8004444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2208      	movs	r2, #8
 800444a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f9e9 	bl	8004832 <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f9db 	bl	800481e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f9ec 	bl	8004846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00c      	beq.n	8004498 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0201 	mvn.w	r2, #1
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc ff56 	bl	8001344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00c      	beq.n	80044bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fd2a 	bl	8004f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00c      	beq.n	80044e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f9bd 	bl	800485a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00c      	beq.n	8004504 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d007      	beq.n	8004504 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0220 	mvn.w	r2, #32
 80044fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fcfc 	bl	8004efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004526:	2302      	movs	r3, #2
 8004528:	e0ae      	b.n	8004688 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b0c      	cmp	r3, #12
 8004536:	f200 809f 	bhi.w	8004678 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800453a:	a201      	add	r2, pc, #4	@ (adr r2, 8004540 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004575 	.word	0x08004575
 8004544:	08004679 	.word	0x08004679
 8004548:	08004679 	.word	0x08004679
 800454c:	08004679 	.word	0x08004679
 8004550:	080045b5 	.word	0x080045b5
 8004554:	08004679 	.word	0x08004679
 8004558:	08004679 	.word	0x08004679
 800455c:	08004679 	.word	0x08004679
 8004560:	080045f7 	.word	0x080045f7
 8004564:	08004679 	.word	0x08004679
 8004568:	08004679 	.word	0x08004679
 800456c:	08004679 	.word	0x08004679
 8004570:	08004637 	.word	0x08004637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fa04 	bl	8004988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0208 	orr.w	r2, r2, #8
 800458e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0204 	bic.w	r2, r2, #4
 800459e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6999      	ldr	r1, [r3, #24]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	619a      	str	r2, [r3, #24]
      break;
 80045b2:	e064      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fa4a 	bl	8004a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6999      	ldr	r1, [r3, #24]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	021a      	lsls	r2, r3, #8
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	619a      	str	r2, [r3, #24]
      break;
 80045f4:	e043      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fa95 	bl	8004b2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0208 	orr.w	r2, r2, #8
 8004610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0204 	bic.w	r2, r2, #4
 8004620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69d9      	ldr	r1, [r3, #28]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	61da      	str	r2, [r3, #28]
      break;
 8004634:	e023      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fadf 	bl	8004c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69d9      	ldr	r1, [r3, #28]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	021a      	lsls	r2, r3, #8
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	61da      	str	r2, [r3, #28]
      break;
 8004676:	e002      	b.n	800467e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	75fb      	strb	r3, [r7, #23]
      break;
 800467c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004686:	7dfb      	ldrb	r3, [r7, #23]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_TIM_ConfigClockSource+0x1c>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e0b4      	b.n	8004816 <HAL_TIM_ConfigClockSource+0x186>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046e4:	d03e      	beq.n	8004764 <HAL_TIM_ConfigClockSource+0xd4>
 80046e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ea:	f200 8087 	bhi.w	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f2:	f000 8086 	beq.w	8004802 <HAL_TIM_ConfigClockSource+0x172>
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046fa:	d87f      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 80046fc:	2b70      	cmp	r3, #112	@ 0x70
 80046fe:	d01a      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0xa6>
 8004700:	2b70      	cmp	r3, #112	@ 0x70
 8004702:	d87b      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 8004704:	2b60      	cmp	r3, #96	@ 0x60
 8004706:	d050      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0x11a>
 8004708:	2b60      	cmp	r3, #96	@ 0x60
 800470a:	d877      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 800470c:	2b50      	cmp	r3, #80	@ 0x50
 800470e:	d03c      	beq.n	800478a <HAL_TIM_ConfigClockSource+0xfa>
 8004710:	2b50      	cmp	r3, #80	@ 0x50
 8004712:	d873      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 8004714:	2b40      	cmp	r3, #64	@ 0x40
 8004716:	d058      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x13a>
 8004718:	2b40      	cmp	r3, #64	@ 0x40
 800471a:	d86f      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 800471c:	2b30      	cmp	r3, #48	@ 0x30
 800471e:	d064      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x15a>
 8004720:	2b30      	cmp	r3, #48	@ 0x30
 8004722:	d86b      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b20      	cmp	r3, #32
 8004726:	d060      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x15a>
 8004728:	2b20      	cmp	r3, #32
 800472a:	d867      	bhi.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b00      	cmp	r3, #0
 800472e:	d05c      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x15a>
 8004730:	2b10      	cmp	r3, #16
 8004732:	d05a      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x15a>
 8004734:	e062      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004746:	f000 fb25 	bl	8004d94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004758:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	609a      	str	r2, [r3, #8]
      break;
 8004762:	e04f      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004774:	f000 fb0e 	bl	8004d94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004786:	609a      	str	r2, [r3, #8]
      break;
 8004788:	e03c      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004796:	461a      	mov	r2, r3
 8004798:	f000 fa82 	bl	8004ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2150      	movs	r1, #80	@ 0x50
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fadb 	bl	8004d5e <TIM_ITRx_SetConfig>
      break;
 80047a8:	e02c      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047b6:	461a      	mov	r2, r3
 80047b8:	f000 faa1 	bl	8004cfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2160      	movs	r1, #96	@ 0x60
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 facb 	bl	8004d5e <TIM_ITRx_SetConfig>
      break;
 80047c8:	e01c      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d6:	461a      	mov	r2, r3
 80047d8:	f000 fa62 	bl	8004ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2140      	movs	r1, #64	@ 0x40
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fabb 	bl	8004d5e <TIM_ITRx_SetConfig>
      break;
 80047e8:	e00c      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f000 fab2 	bl	8004d5e <TIM_ITRx_SetConfig>
      break;
 80047fa:	e003      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004800:	e000      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004802:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004814:	7bfb      	ldrb	r3, [r7, #15]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a3a      	ldr	r2, [pc, #232]	@ (800496c <TIM_Base_SetConfig+0xfc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00f      	beq.n	80048a8 <TIM_Base_SetConfig+0x38>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800488e:	d00b      	beq.n	80048a8 <TIM_Base_SetConfig+0x38>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a37      	ldr	r2, [pc, #220]	@ (8004970 <TIM_Base_SetConfig+0x100>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d007      	beq.n	80048a8 <TIM_Base_SetConfig+0x38>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a36      	ldr	r2, [pc, #216]	@ (8004974 <TIM_Base_SetConfig+0x104>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d003      	beq.n	80048a8 <TIM_Base_SetConfig+0x38>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a35      	ldr	r2, [pc, #212]	@ (8004978 <TIM_Base_SetConfig+0x108>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d108      	bne.n	80048ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a2b      	ldr	r2, [pc, #172]	@ (800496c <TIM_Base_SetConfig+0xfc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01b      	beq.n	80048fa <TIM_Base_SetConfig+0x8a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c8:	d017      	beq.n	80048fa <TIM_Base_SetConfig+0x8a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a28      	ldr	r2, [pc, #160]	@ (8004970 <TIM_Base_SetConfig+0x100>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <TIM_Base_SetConfig+0x8a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a27      	ldr	r2, [pc, #156]	@ (8004974 <TIM_Base_SetConfig+0x104>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00f      	beq.n	80048fa <TIM_Base_SetConfig+0x8a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a26      	ldr	r2, [pc, #152]	@ (8004978 <TIM_Base_SetConfig+0x108>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00b      	beq.n	80048fa <TIM_Base_SetConfig+0x8a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a25      	ldr	r2, [pc, #148]	@ (800497c <TIM_Base_SetConfig+0x10c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d007      	beq.n	80048fa <TIM_Base_SetConfig+0x8a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a24      	ldr	r2, [pc, #144]	@ (8004980 <TIM_Base_SetConfig+0x110>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d003      	beq.n	80048fa <TIM_Base_SetConfig+0x8a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a23      	ldr	r2, [pc, #140]	@ (8004984 <TIM_Base_SetConfig+0x114>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d108      	bne.n	800490c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a0e      	ldr	r2, [pc, #56]	@ (800496c <TIM_Base_SetConfig+0xfc>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d103      	bne.n	8004940 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b01      	cmp	r3, #1
 8004950:	d105      	bne.n	800495e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f023 0201 	bic.w	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	611a      	str	r2, [r3, #16]
  }
}
 800495e:	bf00      	nop
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40010000 	.word	0x40010000
 8004970:	40000400 	.word	0x40000400
 8004974:	40000800 	.word	0x40000800
 8004978:	40000c00 	.word	0x40000c00
 800497c:	40014000 	.word	0x40014000
 8004980:	40014400 	.word	0x40014400
 8004984:	40014800 	.word	0x40014800

08004988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	f023 0201 	bic.w	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f023 0302 	bic.w	r3, r3, #2
 80049d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a1c      	ldr	r2, [pc, #112]	@ (8004a50 <TIM_OC1_SetConfig+0xc8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10c      	bne.n	80049fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0308 	bic.w	r3, r3, #8
 80049ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a13      	ldr	r2, [pc, #76]	@ (8004a50 <TIM_OC1_SetConfig+0xc8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d111      	bne.n	8004a2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	621a      	str	r2, [r3, #32]
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40010000 	.word	0x40010000

08004a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f023 0210 	bic.w	r2, r3, #16
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f023 0320 	bic.w	r3, r3, #32
 8004a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a1e      	ldr	r2, [pc, #120]	@ (8004b28 <TIM_OC2_SetConfig+0xd4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d10d      	bne.n	8004ad0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ace:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a15      	ldr	r2, [pc, #84]	@ (8004b28 <TIM_OC2_SetConfig+0xd4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d113      	bne.n	8004b00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40010000 	.word	0x40010000

08004b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0303 	bic.w	r3, r3, #3
 8004b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1d      	ldr	r2, [pc, #116]	@ (8004bfc <TIM_OC3_SetConfig+0xd0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d10d      	bne.n	8004ba6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a14      	ldr	r2, [pc, #80]	@ (8004bfc <TIM_OC3_SetConfig+0xd0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d113      	bne.n	8004bd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40010000 	.word	0x40010000

08004c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	031b      	lsls	r3, r3, #12
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a10      	ldr	r2, [pc, #64]	@ (8004c9c <TIM_OC4_SetConfig+0x9c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d109      	bne.n	8004c74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	019b      	lsls	r3, r3, #6
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	621a      	str	r2, [r3, #32]
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40010000 	.word	0x40010000

08004ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f023 0201 	bic.w	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f023 030a 	bic.w	r3, r3, #10
 8004cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b087      	sub	sp, #28
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f023 0210 	bic.w	r2, r3, #16
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	031b      	lsls	r3, r3, #12
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f043 0307 	orr.w	r3, r3, #7
 8004d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	609a      	str	r2, [r3, #8]
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	021a      	lsls	r2, r3, #8
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	609a      	str	r2, [r3, #8]
}
 8004dc8:	bf00      	nop
 8004dca:	371c      	adds	r7, #28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 031f 	and.w	r3, r3, #31
 8004de6:	2201      	movs	r2, #1
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a1a      	ldr	r2, [r3, #32]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	43db      	mvns	r3, r3
 8004df6:	401a      	ands	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1a      	ldr	r2, [r3, #32]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e050      	b.n	8004eda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d018      	beq.n	8004eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e84:	d013      	beq.n	8004eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a18      	ldr	r2, [pc, #96]	@ (8004eec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00e      	beq.n	8004eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a16      	ldr	r2, [pc, #88]	@ (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d009      	beq.n	8004eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a15      	ldr	r2, [pc, #84]	@ (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a13      	ldr	r2, [pc, #76]	@ (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d10c      	bne.n	8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	40000400 	.word	0x40000400
 8004ef0:	40000800 	.word	0x40000800
 8004ef4:	40000c00 	.word	0x40000c00
 8004ef8:	40014000 	.word	0x40014000

08004efc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <__NVIC_SetPriority>:
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	6039      	str	r1, [r7, #0]
 8004f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	db0a      	blt.n	8004f4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	490c      	ldr	r1, [pc, #48]	@ (8004f70 <__NVIC_SetPriority+0x4c>)
 8004f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f42:	0112      	lsls	r2, r2, #4
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	440b      	add	r3, r1
 8004f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004f4c:	e00a      	b.n	8004f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	4908      	ldr	r1, [pc, #32]	@ (8004f74 <__NVIC_SetPriority+0x50>)
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	3b04      	subs	r3, #4
 8004f5c:	0112      	lsls	r2, r2, #4
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	440b      	add	r3, r1
 8004f62:	761a      	strb	r2, [r3, #24]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	e000e100 	.word	0xe000e100
 8004f74:	e000ed00 	.word	0xe000ed00

08004f78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f7c:	4b05      	ldr	r3, [pc, #20]	@ (8004f94 <SysTick_Handler+0x1c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f80:	f002 faba 	bl	80074f8 <xTaskGetSchedulerState>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d001      	beq.n	8004f8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f8a:	f003 f9b5 	bl	80082f8 <xPortSysTickHandler>
  }
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	e000e010 	.word	0xe000e010

08004f98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	f06f 0004 	mvn.w	r0, #4
 8004fa2:	f7ff ffbf 	bl	8004f24 <__NVIC_SetPriority>
#endif
}
 8004fa6:	bf00      	nop
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb2:	f3ef 8305 	mrs	r3, IPSR
 8004fb6:	603b      	str	r3, [r7, #0]
  return(result);
 8004fb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004fbe:	f06f 0305 	mvn.w	r3, #5
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	e00c      	b.n	8004fe0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff0 <osKernelInitialize+0x44>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d105      	bne.n	8004fda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004fce:	4b08      	ldr	r3, [pc, #32]	@ (8004ff0 <osKernelInitialize+0x44>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	e002      	b.n	8004fe0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
 8004fde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fe0:	687b      	ldr	r3, [r7, #4]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	200002e0 	.word	0x200002e0

08004ff4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ffa:	f3ef 8305 	mrs	r3, IPSR
 8004ffe:	603b      	str	r3, [r7, #0]
  return(result);
 8005000:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005006:	f06f 0305 	mvn.w	r3, #5
 800500a:	607b      	str	r3, [r7, #4]
 800500c:	e010      	b.n	8005030 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800500e:	4b0b      	ldr	r3, [pc, #44]	@ (800503c <osKernelStart+0x48>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d109      	bne.n	800502a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005016:	f7ff ffbf 	bl	8004f98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800501a:	4b08      	ldr	r3, [pc, #32]	@ (800503c <osKernelStart+0x48>)
 800501c:	2202      	movs	r2, #2
 800501e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005020:	f001 fdda 	bl	8006bd8 <vTaskStartScheduler>
      stat = osOK;
 8005024:	2300      	movs	r3, #0
 8005026:	607b      	str	r3, [r7, #4]
 8005028:	e002      	b.n	8005030 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295
 800502e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005030:	687b      	ldr	r3, [r7, #4]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	200002e0 	.word	0x200002e0

08005040 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b08e      	sub	sp, #56	@ 0x38
 8005044:	af04      	add	r7, sp, #16
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005050:	f3ef 8305 	mrs	r3, IPSR
 8005054:	617b      	str	r3, [r7, #20]
  return(result);
 8005056:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005058:	2b00      	cmp	r3, #0
 800505a:	d17e      	bne.n	800515a <osThreadNew+0x11a>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d07b      	beq.n	800515a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005062:	2380      	movs	r3, #128	@ 0x80
 8005064:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005066:	2318      	movs	r3, #24
 8005068:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295
 8005072:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d045      	beq.n	8005106 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <osThreadNew+0x48>
        name = attr->name;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <osThreadNew+0x6e>
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b38      	cmp	r3, #56	@ 0x38
 80050a0:	d805      	bhi.n	80050ae <osThreadNew+0x6e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <osThreadNew+0x72>
        return (NULL);
 80050ae:	2300      	movs	r3, #0
 80050b0:	e054      	b.n	800515c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00e      	beq.n	80050e8 <osThreadNew+0xa8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2baf      	cmp	r3, #175	@ 0xaf
 80050d0:	d90a      	bls.n	80050e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d006      	beq.n	80050e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <osThreadNew+0xa8>
        mem = 1;
 80050e2:	2301      	movs	r3, #1
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	e010      	b.n	800510a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10c      	bne.n	800510a <osThreadNew+0xca>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d108      	bne.n	800510a <osThreadNew+0xca>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <osThreadNew+0xca>
          mem = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e001      	b.n	800510a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d110      	bne.n	8005132 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005118:	9202      	str	r2, [sp, #8]
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	6a3a      	ldr	r2, [r7, #32]
 8005124:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f001 fb5c 	bl	80067e4 <xTaskCreateStatic>
 800512c:	4603      	mov	r3, r0
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	e013      	b.n	800515a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d110      	bne.n	800515a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	b29a      	uxth	r2, r3
 800513c:	f107 0310 	add.w	r3, r7, #16
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f001 fbaa 	bl	80068a4 <xTaskCreate>
 8005150:	4603      	mov	r3, r0
 8005152:	2b01      	cmp	r3, #1
 8005154:	d001      	beq.n	800515a <osThreadNew+0x11a>
            hTask = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800515a:	693b      	ldr	r3, [r7, #16]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3728      	adds	r7, #40	@ 0x28
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800516c:	f3ef 8305 	mrs	r3, IPSR
 8005170:	60bb      	str	r3, [r7, #8]
  return(result);
 8005172:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <osDelay+0x1c>
    stat = osErrorISR;
 8005178:	f06f 0305 	mvn.w	r3, #5
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e007      	b.n	8005190 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <osDelay+0x2c>
      vTaskDelay(ticks);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 fcee 	bl	8006b6c <vTaskDelay>
    }
  }

  return (stat);
 8005190:	68fb      	ldr	r3, [r7, #12]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800519a:	b580      	push	{r7, lr}
 800519c:	b088      	sub	sp, #32
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051a6:	f3ef 8305 	mrs	r3, IPSR
 80051aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80051ac:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d174      	bne.n	800529c <osMutexNew+0x102>
    if (attr != NULL) {
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <osMutexNew+0x26>
      type = attr->attr_bits;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	e001      	b.n	80051c4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <osMutexNew+0x3a>
      rmtx = 1U;
 80051ce:	2301      	movs	r3, #1
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e001      	b.n	80051d8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d15c      	bne.n	800529c <osMutexNew+0x102>
      mem = -1;
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295
 80051e6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d015      	beq.n	800521a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <osMutexNew+0x6a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b4f      	cmp	r3, #79	@ 0x4f
 80051fc:	d902      	bls.n	8005204 <osMutexNew+0x6a>
          mem = 1;
 80051fe:	2301      	movs	r3, #1
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	e00c      	b.n	800521e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d108      	bne.n	800521e <osMutexNew+0x84>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <osMutexNew+0x84>
            mem = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	e001      	b.n	800521e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d112      	bne.n	800524a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d007      	beq.n	800523a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	4619      	mov	r1, r3
 8005230:	2004      	movs	r0, #4
 8005232:	f000 fbfa 	bl	8005a2a <xQueueCreateMutexStatic>
 8005236:	61f8      	str	r0, [r7, #28]
 8005238:	e016      	b.n	8005268 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	4619      	mov	r1, r3
 8005240:	2001      	movs	r0, #1
 8005242:	f000 fbf2 	bl	8005a2a <xQueueCreateMutexStatic>
 8005246:	61f8      	str	r0, [r7, #28]
 8005248:	e00e      	b.n	8005268 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005256:	2004      	movs	r0, #4
 8005258:	f000 fbcf 	bl	80059fa <xQueueCreateMutex>
 800525c:	61f8      	str	r0, [r7, #28]
 800525e:	e003      	b.n	8005268 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005260:	2001      	movs	r0, #1
 8005262:	f000 fbca 	bl	80059fa <xQueueCreateMutex>
 8005266:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <osMutexNew+0xee>
        if (attr != NULL) {
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <osMutexNew+0xe2>
          name = attr->name;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	e001      	b.n	8005280 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005280:	68f9      	ldr	r1, [r7, #12]
 8005282:	69f8      	ldr	r0, [r7, #28]
 8005284:	f001 fa26 	bl	80066d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d006      	beq.n	800529c <osMutexNew+0x102>
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800529c:	69fb      	ldr	r3, [r7, #28]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b086      	sub	sp, #24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052c4:	f3ef 8305 	mrs	r3, IPSR
 80052c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80052ca:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80052d0:	f06f 0305 	mvn.w	r3, #5
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	e02c      	b.n	8005332 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d103      	bne.n	80052e6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80052de:	f06f 0303 	mvn.w	r3, #3
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	e025      	b.n	8005332 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d011      	beq.n	8005310 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	6938      	ldr	r0, [r7, #16]
 80052f0:	f000 fbeb 	bl	8005aca <xQueueTakeMutexRecursive>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d01b      	beq.n	8005332 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005300:	f06f 0301 	mvn.w	r3, #1
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	e014      	b.n	8005332 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005308:	f06f 0302 	mvn.w	r3, #2
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	e010      	b.n	8005332 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6938      	ldr	r0, [r7, #16]
 8005314:	f000 ff00 	bl	8006118 <xQueueSemaphoreTake>
 8005318:	4603      	mov	r3, r0
 800531a:	2b01      	cmp	r3, #1
 800531c:	d009      	beq.n	8005332 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005324:	f06f 0301 	mvn.w	r3, #1
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e002      	b.n	8005332 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800532c:	f06f 0302 	mvn.w	r3, #2
 8005330:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005332:	697b      	ldr	r3, [r7, #20]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005358:	f3ef 8305 	mrs	r3, IPSR
 800535c:	60bb      	str	r3, [r7, #8]
  return(result);
 800535e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <osMutexRelease+0x30>
    stat = osErrorISR;
 8005364:	f06f 0305 	mvn.w	r3, #5
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e01f      	b.n	80053ac <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d103      	bne.n	800537a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005372:	f06f 0303 	mvn.w	r3, #3
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e018      	b.n	80053ac <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d009      	beq.n	8005394 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005380:	6938      	ldr	r0, [r7, #16]
 8005382:	f000 fb6d 	bl	8005a60 <xQueueGiveMutexRecursive>
 8005386:	4603      	mov	r3, r0
 8005388:	2b01      	cmp	r3, #1
 800538a:	d00f      	beq.n	80053ac <osMutexRelease+0x70>
        stat = osErrorResource;
 800538c:	f06f 0302 	mvn.w	r3, #2
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	e00b      	b.n	80053ac <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005394:	2300      	movs	r3, #0
 8005396:	2200      	movs	r2, #0
 8005398:	2100      	movs	r1, #0
 800539a:	6938      	ldr	r0, [r7, #16]
 800539c:	f000 fc3a 	bl	8005c14 <xQueueGenericSend>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d002      	beq.n	80053ac <osMutexRelease+0x70>
        stat = osErrorResource;
 80053a6:	f06f 0302 	mvn.w	r3, #2
 80053aa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80053ac:	697b      	ldr	r3, [r7, #20]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b08a      	sub	sp, #40	@ 0x28
 80053ba:	af02      	add	r7, sp, #8
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c6:	f3ef 8305 	mrs	r3, IPSR
 80053ca:	613b      	str	r3, [r7, #16]
  return(result);
 80053cc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d175      	bne.n	80054be <osSemaphoreNew+0x108>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d072      	beq.n	80054be <osSemaphoreNew+0x108>
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d86e      	bhi.n	80054be <osSemaphoreNew+0x108>
    mem = -1;
 80053e0:	f04f 33ff 	mov.w	r3, #4294967295
 80053e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d015      	beq.n	8005418 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d006      	beq.n	8005402 <osSemaphoreNew+0x4c>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	2b4f      	cmp	r3, #79	@ 0x4f
 80053fa:	d902      	bls.n	8005402 <osSemaphoreNew+0x4c>
        mem = 1;
 80053fc:	2301      	movs	r3, #1
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	e00c      	b.n	800541c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d108      	bne.n	800541c <osSemaphoreNew+0x66>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d104      	bne.n	800541c <osSemaphoreNew+0x66>
          mem = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	e001      	b.n	800541c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d04c      	beq.n	80054be <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d128      	bne.n	800547c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10a      	bne.n	8005446 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	2203      	movs	r2, #3
 8005436:	9200      	str	r2, [sp, #0]
 8005438:	2200      	movs	r2, #0
 800543a:	2100      	movs	r1, #0
 800543c:	2001      	movs	r0, #1
 800543e:	f000 f9e7 	bl	8005810 <xQueueGenericCreateStatic>
 8005442:	61f8      	str	r0, [r7, #28]
 8005444:	e005      	b.n	8005452 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005446:	2203      	movs	r2, #3
 8005448:	2100      	movs	r1, #0
 800544a:	2001      	movs	r0, #1
 800544c:	f000 fa5d 	bl	800590a <xQueueGenericCreate>
 8005450:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d022      	beq.n	800549e <osSemaphoreNew+0xe8>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d01f      	beq.n	800549e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800545e:	2300      	movs	r3, #0
 8005460:	2200      	movs	r2, #0
 8005462:	2100      	movs	r1, #0
 8005464:	69f8      	ldr	r0, [r7, #28]
 8005466:	f000 fbd5 	bl	8005c14 <xQueueGenericSend>
 800546a:	4603      	mov	r3, r0
 800546c:	2b01      	cmp	r3, #1
 800546e:	d016      	beq.n	800549e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005470:	69f8      	ldr	r0, [r7, #28]
 8005472:	f000 ffe3 	bl	800643c <vQueueDelete>
            hSemaphore = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
 800547a:	e010      	b.n	800549e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d108      	bne.n	8005494 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	461a      	mov	r2, r3
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 fb54 	bl	8005b38 <xQueueCreateCountingSemaphoreStatic>
 8005490:	61f8      	str	r0, [r7, #28]
 8005492:	e004      	b.n	800549e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005494:	68b9      	ldr	r1, [r7, #8]
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fb87 	bl	8005baa <xQueueCreateCountingSemaphore>
 800549c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00c      	beq.n	80054be <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e001      	b.n	80054b6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80054b6:	6979      	ldr	r1, [r7, #20]
 80054b8:	69f8      	ldr	r0, [r7, #28]
 80054ba:	f001 f90b 	bl	80066d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80054be:	69fb      	ldr	r3, [r7, #28]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3720      	adds	r7, #32
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d103      	bne.n	80054e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80054e0:	f06f 0303 	mvn.w	r3, #3
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	e039      	b.n	800555c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054e8:	f3ef 8305 	mrs	r3, IPSR
 80054ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80054ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d022      	beq.n	800553a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80054fa:	f06f 0303 	mvn.w	r3, #3
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e02c      	b.n	800555c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005502:	2300      	movs	r3, #0
 8005504:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005506:	f107 0308 	add.w	r3, r7, #8
 800550a:	461a      	mov	r2, r3
 800550c:	2100      	movs	r1, #0
 800550e:	6938      	ldr	r0, [r7, #16]
 8005510:	f000 ff12 	bl	8006338 <xQueueReceiveFromISR>
 8005514:	4603      	mov	r3, r0
 8005516:	2b01      	cmp	r3, #1
 8005518:	d003      	beq.n	8005522 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800551a:	f06f 0302 	mvn.w	r3, #2
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	e01c      	b.n	800555c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d019      	beq.n	800555c <osSemaphoreAcquire+0x94>
 8005528:	4b0f      	ldr	r3, [pc, #60]	@ (8005568 <osSemaphoreAcquire+0xa0>)
 800552a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	e010      	b.n	800555c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6938      	ldr	r0, [r7, #16]
 800553e:	f000 fdeb 	bl	8006118 <xQueueSemaphoreTake>
 8005542:	4603      	mov	r3, r0
 8005544:	2b01      	cmp	r3, #1
 8005546:	d009      	beq.n	800555c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800554e:	f06f 0301 	mvn.w	r3, #1
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	e002      	b.n	800555c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005556:	f06f 0302 	mvn.w	r3, #2
 800555a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800555c:	697b      	ldr	r3, [r7, #20]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4a07      	ldr	r2, [pc, #28]	@ (8005598 <vApplicationGetIdleTaskMemory+0x2c>)
 800557c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	4a06      	ldr	r2, [pc, #24]	@ (800559c <vApplicationGetIdleTaskMemory+0x30>)
 8005582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2280      	movs	r2, #128	@ 0x80
 8005588:	601a      	str	r2, [r3, #0]
}
 800558a:	bf00      	nop
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	200002e4 	.word	0x200002e4
 800559c:	20000394 	.word	0x20000394

080055a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a07      	ldr	r2, [pc, #28]	@ (80055cc <vApplicationGetTimerTaskMemory+0x2c>)
 80055b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4a06      	ldr	r2, [pc, #24]	@ (80055d0 <vApplicationGetTimerTaskMemory+0x30>)
 80055b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055be:	601a      	str	r2, [r3, #0]
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	20000594 	.word	0x20000594
 80055d0:	20000644 	.word	0x20000644

080055d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f103 0208 	add.w	r2, r3, #8
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f103 0208 	add.w	r2, r3, #8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f103 0208 	add.w	r2, r3, #8
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	601a      	str	r2, [r3, #0]
}
 800566a:	bf00      	nop
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d103      	bne.n	8005696 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	e00c      	b.n	80056b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3308      	adds	r3, #8
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e002      	b.n	80056a4 <vListInsert+0x2e>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d2f6      	bcs.n	800569e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	601a      	str	r2, [r3, #0]
}
 80056dc:	bf00      	nop
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6892      	ldr	r2, [r2, #8]
 80056fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6852      	ldr	r2, [r2, #4]
 8005708:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	429a      	cmp	r2, r3
 8005712:	d103      	bne.n	800571c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	1e5a      	subs	r2, r3, #1
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10b      	bne.n	8005768 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005762:	bf00      	nop
 8005764:	bf00      	nop
 8005766:	e7fd      	b.n	8005764 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005768:	f002 fd36 	bl	80081d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005774:	68f9      	ldr	r1, [r7, #12]
 8005776:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005778:	fb01 f303 	mul.w	r3, r1, r3
 800577c:	441a      	add	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005798:	3b01      	subs	r3, #1
 800579a:	68f9      	ldr	r1, [r7, #12]
 800579c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800579e:	fb01 f303 	mul.w	r3, r1, r3
 80057a2:	441a      	add	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	22ff      	movs	r2, #255	@ 0xff
 80057ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	22ff      	movs	r2, #255	@ 0xff
 80057b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d114      	bne.n	80057e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01a      	beq.n	80057fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3310      	adds	r3, #16
 80057ca:	4618      	mov	r0, r3
 80057cc:	f001 fcbe 	bl	800714c <xTaskRemoveFromEventList>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d012      	beq.n	80057fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057d6:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <xQueueGenericReset+0xd0>)
 80057d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	e009      	b.n	80057fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3310      	adds	r3, #16
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff fef1 	bl	80055d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3324      	adds	r3, #36	@ 0x24
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff feec 	bl	80055d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057fc:	f002 fd1e 	bl	800823c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005800:	2301      	movs	r3, #1
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	e000ed04 	.word	0xe000ed04

08005810 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08e      	sub	sp, #56	@ 0x38
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10b      	bne.n	800583c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005836:	bf00      	nop
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10b      	bne.n	800585a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	e7fd      	b.n	8005856 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <xQueueGenericCreateStatic+0x56>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <xQueueGenericCreateStatic+0x5a>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <xQueueGenericCreateStatic+0x5c>
 800586a:	2300      	movs	r3, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10b      	bne.n	8005888 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	623b      	str	r3, [r7, #32]
}
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d102      	bne.n	8005894 <xQueueGenericCreateStatic+0x84>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <xQueueGenericCreateStatic+0x88>
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <xQueueGenericCreateStatic+0x8a>
 8005898:	2300      	movs	r3, #0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10b      	bne.n	80058b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	61fb      	str	r3, [r7, #28]
}
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop
 80058b4:	e7fd      	b.n	80058b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058b6:	2350      	movs	r3, #80	@ 0x50
 80058b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b50      	cmp	r3, #80	@ 0x50
 80058be:	d00b      	beq.n	80058d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	61bb      	str	r3, [r7, #24]
}
 80058d2:	bf00      	nop
 80058d4:	bf00      	nop
 80058d6:	e7fd      	b.n	80058d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80058de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00d      	beq.n	8005900 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80058f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	4613      	mov	r3, r2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f840 	bl	8005980 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005902:	4618      	mov	r0, r3
 8005904:	3730      	adds	r7, #48	@ 0x30
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800590a:	b580      	push	{r7, lr}
 800590c:	b08a      	sub	sp, #40	@ 0x28
 800590e:	af02      	add	r7, sp, #8
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	4613      	mov	r3, r2
 8005916:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10b      	bne.n	8005936 <xQueueGenericCreate+0x2c>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	613b      	str	r3, [r7, #16]
}
 8005930:	bf00      	nop
 8005932:	bf00      	nop
 8005934:	e7fd      	b.n	8005932 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	3350      	adds	r3, #80	@ 0x50
 8005944:	4618      	mov	r0, r3
 8005946:	f002 fd69 	bl	800841c <pvPortMalloc>
 800594a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d011      	beq.n	8005976 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	3350      	adds	r3, #80	@ 0x50
 800595a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005964:	79fa      	ldrb	r2, [r7, #7]
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f805 	bl	8005980 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005976:	69bb      	ldr	r3, [r7, #24]
	}
 8005978:	4618      	mov	r0, r3
 800597a:	3720      	adds	r7, #32
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d103      	bne.n	800599c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	e002      	b.n	80059a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059ae:	2101      	movs	r1, #1
 80059b0:	69b8      	ldr	r0, [r7, #24]
 80059b2:	f7ff fec3 	bl	800573c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	78fa      	ldrb	r2, [r7, #3]
 80059ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059be:	bf00      	nop
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00e      	beq.n	80059f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80059e6:	2300      	movs	r3, #0
 80059e8:	2200      	movs	r2, #0
 80059ea:	2100      	movs	r1, #0
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f911 	bl	8005c14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b086      	sub	sp, #24
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	4603      	mov	r3, r0
 8005a02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a04:	2301      	movs	r3, #1
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6939      	ldr	r1, [r7, #16]
 8005a12:	6978      	ldr	r0, [r7, #20]
 8005a14:	f7ff ff79 	bl	800590a <xQueueGenericCreate>
 8005a18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7ff ffd3 	bl	80059c6 <prvInitialiseMutex>

		return xNewQueue;
 8005a20:	68fb      	ldr	r3, [r7, #12]
	}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b088      	sub	sp, #32
 8005a2e:	af02      	add	r7, sp, #8
 8005a30:	4603      	mov	r3, r0
 8005a32:	6039      	str	r1, [r7, #0]
 8005a34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a36:	2301      	movs	r3, #1
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2200      	movs	r2, #0
 8005a46:	6939      	ldr	r1, [r7, #16]
 8005a48:	6978      	ldr	r0, [r7, #20]
 8005a4a:	f7ff fee1 	bl	8005810 <xQueueGenericCreateStatic>
 8005a4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff ffb8 	bl	80059c6 <prvInitialiseMutex>

		return xNewQueue;
 8005a56:	68fb      	ldr	r3, [r7, #12]
	}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005a60:	b590      	push	{r4, r7, lr}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10b      	bne.n	8005a8a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	60fb      	str	r3, [r7, #12]
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	e7fd      	b.n	8005a86 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	689c      	ldr	r4, [r3, #8]
 8005a8e:	f001 fd23 	bl	80074d8 <xTaskGetCurrentTaskHandle>
 8005a92:	4603      	mov	r3, r0
 8005a94:	429c      	cmp	r4, r3
 8005a96:	d111      	bne.n	8005abc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	1e5a      	subs	r2, r3, #1
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d105      	bne.n	8005ab6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2200      	movs	r2, #0
 8005aae:	2100      	movs	r1, #0
 8005ab0:	6938      	ldr	r0, [r7, #16]
 8005ab2:	f000 f8af 	bl	8005c14 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	e001      	b.n	8005ac0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005ac0:	697b      	ldr	r3, [r7, #20]
	}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd90      	pop	{r4, r7, pc}

08005aca <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005aca:	b590      	push	{r4, r7, lr}
 8005acc:	b087      	sub	sp, #28
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10b      	bne.n	8005af6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	60fb      	str	r3, [r7, #12]
}
 8005af0:	bf00      	nop
 8005af2:	bf00      	nop
 8005af4:	e7fd      	b.n	8005af2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	689c      	ldr	r4, [r3, #8]
 8005afa:	f001 fced 	bl	80074d8 <xTaskGetCurrentTaskHandle>
 8005afe:	4603      	mov	r3, r0
 8005b00:	429c      	cmp	r4, r3
 8005b02:	d107      	bne.n	8005b14 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	e00c      	b.n	8005b2e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	6938      	ldr	r0, [r7, #16]
 8005b18:	f000 fafe 	bl	8006118 <xQueueSemaphoreTake>
 8005b1c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d004      	beq.n	8005b2e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005b2e:	697b      	ldr	r3, [r7, #20]
	}
 8005b30:	4618      	mov	r0, r3
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd90      	pop	{r4, r7, pc}

08005b38 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	@ 0x28
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	61bb      	str	r3, [r7, #24]
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	e7fd      	b.n	8005b5e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d90b      	bls.n	8005b82 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	617b      	str	r3, [r7, #20]
}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	e7fd      	b.n	8005b7e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005b82:	2302      	movs	r3, #2
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7ff fe3f 	bl	8005810 <xQueueGenericCreateStatic>
 8005b92:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
	}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10b      	bne.n	8005bd2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	613b      	str	r3, [r7, #16]
}
 8005bcc:	bf00      	nop
 8005bce:	bf00      	nop
 8005bd0:	e7fd      	b.n	8005bce <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d90b      	bls.n	8005bf2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	60fb      	str	r3, [r7, #12]
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	e7fd      	b.n	8005bee <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff fe87 	bl	800590a <xQueueGenericCreate>
 8005bfc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005c0a:	697b      	ldr	r3, [r7, #20]
	}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08e      	sub	sp, #56	@ 0x38
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c22:	2300      	movs	r3, #0
 8005c24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10b      	bne.n	8005c48 <xQueueGenericSend+0x34>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <xQueueGenericSend+0x42>
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <xQueueGenericSend+0x46>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <xQueueGenericSend+0x48>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <xQueueGenericSend+0x64>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d103      	bne.n	8005c86 <xQueueGenericSend+0x72>
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <xQueueGenericSend+0x76>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <xQueueGenericSend+0x78>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10b      	bne.n	8005ca8 <xQueueGenericSend+0x94>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	623b      	str	r3, [r7, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ca8:	f001 fc26 	bl	80074f8 <xTaskGetSchedulerState>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d102      	bne.n	8005cb8 <xQueueGenericSend+0xa4>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <xQueueGenericSend+0xa8>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e000      	b.n	8005cbe <xQueueGenericSend+0xaa>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10b      	bne.n	8005cda <xQueueGenericSend+0xc6>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	61fb      	str	r3, [r7, #28]
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	e7fd      	b.n	8005cd6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cda:	f002 fa7d 	bl	80081d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d302      	bcc.n	8005cf0 <xQueueGenericSend+0xdc>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d129      	bne.n	8005d44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cf6:	f000 fbdd 	bl	80064b4 <prvCopyDataToQueue>
 8005cfa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d010      	beq.n	8005d26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d06:	3324      	adds	r3, #36	@ 0x24
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 fa1f 	bl	800714c <xTaskRemoveFromEventList>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d013      	beq.n	8005d3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d14:	4b3f      	ldr	r3, [pc, #252]	@ (8005e14 <xQueueGenericSend+0x200>)
 8005d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	e00a      	b.n	8005d3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d007      	beq.n	8005d3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d2c:	4b39      	ldr	r3, [pc, #228]	@ (8005e14 <xQueueGenericSend+0x200>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d3c:	f002 fa7e 	bl	800823c <vPortExitCritical>
				return pdPASS;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e063      	b.n	8005e0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d103      	bne.n	8005d52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d4a:	f002 fa77 	bl	800823c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e05c      	b.n	8005e0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d58:	f107 0314 	add.w	r3, r7, #20
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 fa59 	bl	8007214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d62:	2301      	movs	r3, #1
 8005d64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d66:	f002 fa69 	bl	800823c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d6a:	f000 ffa7 	bl	8006cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d6e:	f002 fa33 	bl	80081d8 <vPortEnterCritical>
 8005d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d78:	b25b      	sxtb	r3, r3
 8005d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7e:	d103      	bne.n	8005d88 <xQueueGenericSend+0x174>
 8005d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d8e:	b25b      	sxtb	r3, r3
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d94:	d103      	bne.n	8005d9e <xQueueGenericSend+0x18a>
 8005d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d9e:	f002 fa4d 	bl	800823c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005da2:	1d3a      	adds	r2, r7, #4
 8005da4:	f107 0314 	add.w	r3, r7, #20
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 fa48 	bl	8007240 <xTaskCheckForTimeOut>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d124      	bne.n	8005e00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005db6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005db8:	f000 fc74 	bl	80066a4 <prvIsQueueFull>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d018      	beq.n	8005df4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc4:	3310      	adds	r3, #16
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f001 f96c 	bl	80070a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005dd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dd2:	f000 fbff 	bl	80065d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dd6:	f000 ff7f 	bl	8006cd8 <xTaskResumeAll>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f47f af7c 	bne.w	8005cda <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005de2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e14 <xQueueGenericSend+0x200>)
 8005de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	e772      	b.n	8005cda <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005df6:	f000 fbed 	bl	80065d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dfa:	f000 ff6d 	bl	8006cd8 <xTaskResumeAll>
 8005dfe:	e76c      	b.n	8005cda <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e02:	f000 fbe7 	bl	80065d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e06:	f000 ff67 	bl	8006cd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3738      	adds	r7, #56	@ 0x38
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	e000ed04 	.word	0xe000ed04

08005e18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b090      	sub	sp, #64	@ 0x40
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10b      	bne.n	8005e48 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	e7fd      	b.n	8005e44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d103      	bne.n	8005e56 <xQueueGenericSendFromISR+0x3e>
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <xQueueGenericSendFromISR+0x42>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <xQueueGenericSendFromISR+0x44>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10b      	bne.n	8005e78 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	e7fd      	b.n	8005e74 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d103      	bne.n	8005e86 <xQueueGenericSendFromISR+0x6e>
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <xQueueGenericSendFromISR+0x72>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <xQueueGenericSendFromISR+0x74>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10b      	bne.n	8005ea8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	623b      	str	r3, [r7, #32]
}
 8005ea2:	bf00      	nop
 8005ea4:	bf00      	nop
 8005ea6:	e7fd      	b.n	8005ea4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ea8:	f002 fa76 	bl	8008398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005eac:	f3ef 8211 	mrs	r2, BASEPRI
 8005eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	61fa      	str	r2, [r7, #28]
 8005ec2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ec6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d302      	bcc.n	8005eda <xQueueGenericSendFromISR+0xc2>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d12f      	bne.n	8005f3a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005edc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ee0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005ef0:	f000 fae0 	bl	80064b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ef4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d112      	bne.n	8005f24 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d016      	beq.n	8005f34 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f08:	3324      	adds	r3, #36	@ 0x24
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 f91e 	bl	800714c <xTaskRemoveFromEventList>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00e      	beq.n	8005f34 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00b      	beq.n	8005f34 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	e007      	b.n	8005f34 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f28:	3301      	adds	r3, #1
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	b25a      	sxtb	r2, r3
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f34:	2301      	movs	r3, #1
 8005f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005f38:	e001      	b.n	8005f3e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f40:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3740      	adds	r7, #64	@ 0x40
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08c      	sub	sp, #48	@ 0x30
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f60:	2300      	movs	r3, #0
 8005f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10b      	bne.n	8005f86 <xQueueReceive+0x32>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	623b      	str	r3, [r7, #32]
}
 8005f80:	bf00      	nop
 8005f82:	bf00      	nop
 8005f84:	e7fd      	b.n	8005f82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d103      	bne.n	8005f94 <xQueueReceive+0x40>
 8005f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <xQueueReceive+0x44>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <xQueueReceive+0x46>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <xQueueReceive+0x62>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	61fb      	str	r3, [r7, #28]
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	e7fd      	b.n	8005fb2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fb6:	f001 fa9f 	bl	80074f8 <xTaskGetSchedulerState>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d102      	bne.n	8005fc6 <xQueueReceive+0x72>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <xQueueReceive+0x76>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <xQueueReceive+0x78>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10b      	bne.n	8005fe8 <xQueueReceive+0x94>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	61bb      	str	r3, [r7, #24]
}
 8005fe2:	bf00      	nop
 8005fe4:	bf00      	nop
 8005fe6:	e7fd      	b.n	8005fe4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fe8:	f002 f8f6 	bl	80081d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01f      	beq.n	8006038 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ffc:	f000 fac4 	bl	8006588 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	1e5a      	subs	r2, r3, #1
 8006004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006006:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00f      	beq.n	8006030 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006012:	3310      	adds	r3, #16
 8006014:	4618      	mov	r0, r3
 8006016:	f001 f899 	bl	800714c <xTaskRemoveFromEventList>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d007      	beq.n	8006030 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006020:	4b3c      	ldr	r3, [pc, #240]	@ (8006114 <xQueueReceive+0x1c0>)
 8006022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006030:	f002 f904 	bl	800823c <vPortExitCritical>
				return pdPASS;
 8006034:	2301      	movs	r3, #1
 8006036:	e069      	b.n	800610c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d103      	bne.n	8006046 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800603e:	f002 f8fd 	bl	800823c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006042:	2300      	movs	r3, #0
 8006044:	e062      	b.n	800610c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800604c:	f107 0310 	add.w	r3, r7, #16
 8006050:	4618      	mov	r0, r3
 8006052:	f001 f8df 	bl	8007214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006056:	2301      	movs	r3, #1
 8006058:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800605a:	f002 f8ef 	bl	800823c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800605e:	f000 fe2d 	bl	8006cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006062:	f002 f8b9 	bl	80081d8 <vPortEnterCritical>
 8006066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006068:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800606c:	b25b      	sxtb	r3, r3
 800606e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006072:	d103      	bne.n	800607c <xQueueReceive+0x128>
 8006074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800607c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006082:	b25b      	sxtb	r3, r3
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d103      	bne.n	8006092 <xQueueReceive+0x13e>
 800608a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006092:	f002 f8d3 	bl	800823c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006096:	1d3a      	adds	r2, r7, #4
 8006098:	f107 0310 	add.w	r3, r7, #16
 800609c:	4611      	mov	r1, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 f8ce 	bl	8007240 <xTaskCheckForTimeOut>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d123      	bne.n	80060f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060ac:	f000 fae4 	bl	8006678 <prvIsQueueEmpty>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d017      	beq.n	80060e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b8:	3324      	adds	r3, #36	@ 0x24
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	4611      	mov	r1, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fff2 	bl	80070a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060c6:	f000 fa85 	bl	80065d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060ca:	f000 fe05 	bl	8006cd8 <xTaskResumeAll>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d189      	bne.n	8005fe8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80060d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006114 <xQueueReceive+0x1c0>)
 80060d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	e780      	b.n	8005fe8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060e8:	f000 fa74 	bl	80065d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ec:	f000 fdf4 	bl	8006cd8 <xTaskResumeAll>
 80060f0:	e77a      	b.n	8005fe8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060f4:	f000 fa6e 	bl	80065d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060f8:	f000 fdee 	bl	8006cd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060fe:	f000 fabb 	bl	8006678 <prvIsQueueEmpty>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	f43f af6f 	beq.w	8005fe8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800610a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800610c:	4618      	mov	r0, r3
 800610e:	3730      	adds	r7, #48	@ 0x30
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	e000ed04 	.word	0xe000ed04

08006118 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08e      	sub	sp, #56	@ 0x38
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006122:	2300      	movs	r3, #0
 8006124:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800612a:	2300      	movs	r3, #0
 800612c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800612e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10b      	bne.n	800614c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	623b      	str	r3, [r7, #32]
}
 8006146:	bf00      	nop
 8006148:	bf00      	nop
 800614a:	e7fd      	b.n	8006148 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800614c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00b      	beq.n	800616c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	61fb      	str	r3, [r7, #28]
}
 8006166:	bf00      	nop
 8006168:	bf00      	nop
 800616a:	e7fd      	b.n	8006168 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800616c:	f001 f9c4 	bl	80074f8 <xTaskGetSchedulerState>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d102      	bne.n	800617c <xQueueSemaphoreTake+0x64>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <xQueueSemaphoreTake+0x68>
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <xQueueSemaphoreTake+0x6a>
 8006180:	2300      	movs	r3, #0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10b      	bne.n	800619e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	61bb      	str	r3, [r7, #24]
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	e7fd      	b.n	800619a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800619e:	f002 f81b 	bl	80081d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d024      	beq.n	80061f8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b0:	1e5a      	subs	r2, r3, #1
 80061b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80061be:	f001 fb15 	bl	80077ec <pvTaskIncrementMutexHeldCount>
 80061c2:	4602      	mov	r2, r0
 80061c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00f      	beq.n	80061f0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d2:	3310      	adds	r3, #16
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 ffb9 	bl	800714c <xTaskRemoveFromEventList>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061e0:	4b54      	ldr	r3, [pc, #336]	@ (8006334 <xQueueSemaphoreTake+0x21c>)
 80061e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061f0:	f002 f824 	bl	800823c <vPortExitCritical>
				return pdPASS;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e098      	b.n	800632a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d112      	bne.n	8006224 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00b      	beq.n	800621c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	617b      	str	r3, [r7, #20]
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	e7fd      	b.n	8006218 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800621c:	f002 f80e 	bl	800823c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006220:	2300      	movs	r3, #0
 8006222:	e082      	b.n	800632a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800622a:	f107 030c 	add.w	r3, r7, #12
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fff0 	bl	8007214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006234:	2301      	movs	r3, #1
 8006236:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006238:	f002 f800 	bl	800823c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800623c:	f000 fd3e 	bl	8006cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006240:	f001 ffca 	bl	80081d8 <vPortEnterCritical>
 8006244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006246:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800624a:	b25b      	sxtb	r3, r3
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006250:	d103      	bne.n	800625a <xQueueSemaphoreTake+0x142>
 8006252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800625a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006260:	b25b      	sxtb	r3, r3
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d103      	bne.n	8006270 <xQueueSemaphoreTake+0x158>
 8006268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006270:	f001 ffe4 	bl	800823c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006274:	463a      	mov	r2, r7
 8006276:	f107 030c 	add.w	r3, r7, #12
 800627a:	4611      	mov	r1, r2
 800627c:	4618      	mov	r0, r3
 800627e:	f000 ffdf 	bl	8007240 <xTaskCheckForTimeOut>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d132      	bne.n	80062ee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006288:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800628a:	f000 f9f5 	bl	8006678 <prvIsQueueEmpty>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d026      	beq.n	80062e2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d109      	bne.n	80062b0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800629c:	f001 ff9c 	bl	80081d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f001 f945 	bl	8007534 <xTaskPriorityInherit>
 80062aa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80062ac:	f001 ffc6 	bl	800823c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b2:	3324      	adds	r3, #36	@ 0x24
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fef5 	bl	80070a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062c0:	f000 f988 	bl	80065d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062c4:	f000 fd08 	bl	8006cd8 <xTaskResumeAll>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f47f af67 	bne.w	800619e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80062d0:	4b18      	ldr	r3, [pc, #96]	@ (8006334 <xQueueSemaphoreTake+0x21c>)
 80062d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	e75d      	b.n	800619e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80062e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062e4:	f000 f976 	bl	80065d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062e8:	f000 fcf6 	bl	8006cd8 <xTaskResumeAll>
 80062ec:	e757      	b.n	800619e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80062ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062f0:	f000 f970 	bl	80065d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062f4:	f000 fcf0 	bl	8006cd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062fa:	f000 f9bd 	bl	8006678 <prvIsQueueEmpty>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	f43f af4c 	beq.w	800619e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00d      	beq.n	8006328 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800630c:	f001 ff64 	bl	80081d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006310:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006312:	f000 f8b7 	bl	8006484 <prvGetDisinheritPriorityAfterTimeout>
 8006316:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800631e:	4618      	mov	r0, r3
 8006320:	f001 f9e0 	bl	80076e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006324:	f001 ff8a 	bl	800823c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006328:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800632a:	4618      	mov	r0, r3
 800632c:	3738      	adds	r7, #56	@ 0x38
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	e000ed04 	.word	0xe000ed04

08006338 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08e      	sub	sp, #56	@ 0x38
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10b      	bne.n	8006366 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	623b      	str	r3, [r7, #32]
}
 8006360:	bf00      	nop
 8006362:	bf00      	nop
 8006364:	e7fd      	b.n	8006362 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <xQueueReceiveFromISR+0x3c>
 800636c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <xQueueReceiveFromISR+0x40>
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <xQueueReceiveFromISR+0x42>
 8006378:	2300      	movs	r3, #0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10b      	bne.n	8006396 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	61fb      	str	r3, [r7, #28]
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	e7fd      	b.n	8006392 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006396:	f001 ffff 	bl	8008398 <vPortValidateInterruptPriority>
	__asm volatile
 800639a:	f3ef 8211 	mrs	r2, BASEPRI
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	61ba      	str	r2, [r7, #24]
 80063b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80063b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d02f      	beq.n	8006422 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063d0:	f000 f8da 	bl	8006588 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	1e5a      	subs	r2, r3, #1
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80063dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e4:	d112      	bne.n	800640c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d016      	beq.n	800641c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	3310      	adds	r3, #16
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 feaa 	bl	800714c <xTaskRemoveFromEventList>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00e      	beq.n	800641c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00b      	beq.n	800641c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	e007      	b.n	800641c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800640c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006410:	3301      	adds	r3, #1
 8006412:	b2db      	uxtb	r3, r3
 8006414:	b25a      	sxtb	r2, r3
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800641c:	2301      	movs	r3, #1
 800641e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006420:	e001      	b.n	8006426 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006422:	2300      	movs	r3, #0
 8006424:	637b      	str	r3, [r7, #52]	@ 0x34
 8006426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006428:	613b      	str	r3, [r7, #16]
	__asm volatile
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f383 8811 	msr	BASEPRI, r3
}
 8006430:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006434:	4618      	mov	r0, r3
 8006436:	3738      	adds	r7, #56	@ 0x38
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10b      	bne.n	8006466 <vQueueDelete+0x2a>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	60bb      	str	r3, [r7, #8]
}
 8006460:	bf00      	nop
 8006462:	bf00      	nop
 8006464:	e7fd      	b.n	8006462 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 f95e 	bl	8006728 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006472:	2b00      	cmp	r3, #0
 8006474:	d102      	bne.n	800647c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f002 f816 	bl	80084a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006490:	2b00      	cmp	r3, #0
 8006492:	d006      	beq.n	80064a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	e001      	b.n	80064a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80064a6:	68fb      	ldr	r3, [r7, #12]
	}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10d      	bne.n	80064ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d14d      	bne.n	8006576 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 f890 	bl	8007604 <xTaskPriorityDisinherit>
 80064e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	609a      	str	r2, [r3, #8]
 80064ec:	e043      	b.n	8006576 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d119      	bne.n	8006528 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6858      	ldr	r0, [r3, #4]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fc:	461a      	mov	r2, r3
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	f002 fd47 	bl	8008f92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650c:	441a      	add	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	429a      	cmp	r2, r3
 800651c:	d32b      	bcc.n	8006576 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	e026      	b.n	8006576 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	68d8      	ldr	r0, [r3, #12]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006530:	461a      	mov	r2, r3
 8006532:	68b9      	ldr	r1, [r7, #8]
 8006534:	f002 fd2d 	bl	8008f92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006540:	425b      	negs	r3, r3
 8006542:	441a      	add	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	429a      	cmp	r2, r3
 8006552:	d207      	bcs.n	8006564 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655c:	425b      	negs	r3, r3
 800655e:	441a      	add	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b02      	cmp	r3, #2
 8006568:	d105      	bne.n	8006576 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	3b01      	subs	r3, #1
 8006574:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800657e:	697b      	ldr	r3, [r7, #20]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d018      	beq.n	80065cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	441a      	add	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d303      	bcc.n	80065bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68d9      	ldr	r1, [r3, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c4:	461a      	mov	r2, r3
 80065c6:	6838      	ldr	r0, [r7, #0]
 80065c8:	f002 fce3 	bl	8008f92 <memcpy>
	}
}
 80065cc:	bf00      	nop
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065dc:	f001 fdfc 	bl	80081d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065e8:	e011      	b.n	800660e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d012      	beq.n	8006618 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3324      	adds	r3, #36	@ 0x24
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fda8 	bl	800714c <xTaskRemoveFromEventList>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006602:	f000 fe81 	bl	8007308 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	3b01      	subs	r3, #1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800660e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006612:	2b00      	cmp	r3, #0
 8006614:	dce9      	bgt.n	80065ea <prvUnlockQueue+0x16>
 8006616:	e000      	b.n	800661a <prvUnlockQueue+0x46>
					break;
 8006618:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	22ff      	movs	r2, #255	@ 0xff
 800661e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006622:	f001 fe0b 	bl	800823c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006626:	f001 fdd7 	bl	80081d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006630:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006632:	e011      	b.n	8006658 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d012      	beq.n	8006662 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3310      	adds	r3, #16
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fd83 	bl	800714c <xTaskRemoveFromEventList>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800664c:	f000 fe5c 	bl	8007308 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006650:	7bbb      	ldrb	r3, [r7, #14]
 8006652:	3b01      	subs	r3, #1
 8006654:	b2db      	uxtb	r3, r3
 8006656:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800665c:	2b00      	cmp	r3, #0
 800665e:	dce9      	bgt.n	8006634 <prvUnlockQueue+0x60>
 8006660:	e000      	b.n	8006664 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006662:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	22ff      	movs	r2, #255	@ 0xff
 8006668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800666c:	f001 fde6 	bl	800823c <vPortExitCritical>
}
 8006670:	bf00      	nop
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006680:	f001 fdaa 	bl	80081d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800668c:	2301      	movs	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	e001      	b.n	8006696 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006696:	f001 fdd1 	bl	800823c <vPortExitCritical>

	return xReturn;
 800669a:	68fb      	ldr	r3, [r7, #12]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066ac:	f001 fd94 	bl	80081d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d102      	bne.n	80066c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066bc:	2301      	movs	r3, #1
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	e001      	b.n	80066c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066c6:	f001 fdb9 	bl	800823c <vPortExitCritical>

	return xReturn;
 80066ca:	68fb      	ldr	r3, [r7, #12]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	e014      	b.n	800670e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066e4:	4a0f      	ldr	r2, [pc, #60]	@ (8006724 <vQueueAddToRegistry+0x50>)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10b      	bne.n	8006708 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066f0:	490c      	ldr	r1, [pc, #48]	@ (8006724 <vQueueAddToRegistry+0x50>)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80066fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006724 <vQueueAddToRegistry+0x50>)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	4413      	add	r3, r2
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006706:	e006      	b.n	8006716 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3301      	adds	r3, #1
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b07      	cmp	r3, #7
 8006712:	d9e7      	bls.n	80066e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006714:	bf00      	nop
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20000a44 	.word	0x20000a44

08006728 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e016      	b.n	8006764 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006736:	4a10      	ldr	r2, [pc, #64]	@ (8006778 <vQueueUnregisterQueue+0x50>)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	4413      	add	r3, r2
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d10b      	bne.n	800675e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006746:	4a0c      	ldr	r2, [pc, #48]	@ (8006778 <vQueueUnregisterQueue+0x50>)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2100      	movs	r1, #0
 800674c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006750:	4a09      	ldr	r2, [pc, #36]	@ (8006778 <vQueueUnregisterQueue+0x50>)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	4413      	add	r3, r2
 8006758:	2200      	movs	r2, #0
 800675a:	605a      	str	r2, [r3, #4]
				break;
 800675c:	e006      	b.n	800676c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3301      	adds	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b07      	cmp	r3, #7
 8006768:	d9e5      	bls.n	8006736 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800676a:	bf00      	nop
 800676c:	bf00      	nop
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	20000a44 	.word	0x20000a44

0800677c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800678c:	f001 fd24 	bl	80081d8 <vPortEnterCritical>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006796:	b25b      	sxtb	r3, r3
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679c:	d103      	bne.n	80067a6 <vQueueWaitForMessageRestricted+0x2a>
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067ac:	b25b      	sxtb	r3, r3
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b2:	d103      	bne.n	80067bc <vQueueWaitForMessageRestricted+0x40>
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067bc:	f001 fd3e 	bl	800823c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	3324      	adds	r3, #36	@ 0x24
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fc8f 	bl	80070f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067d6:	6978      	ldr	r0, [r7, #20]
 80067d8:	f7ff fefc 	bl	80065d4 <prvUnlockQueue>
	}
 80067dc:	bf00      	nop
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08e      	sub	sp, #56	@ 0x38
 80067e8:	af04      	add	r7, sp, #16
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10b      	bne.n	8006810 <xTaskCreateStatic+0x2c>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	623b      	str	r3, [r7, #32]
}
 800680a:	bf00      	nop
 800680c:	bf00      	nop
 800680e:	e7fd      	b.n	800680c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10b      	bne.n	800682e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	61fb      	str	r3, [r7, #28]
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	e7fd      	b.n	800682a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800682e:	23b0      	movs	r3, #176	@ 0xb0
 8006830:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2bb0      	cmp	r3, #176	@ 0xb0
 8006836:	d00b      	beq.n	8006850 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	61bb      	str	r3, [r7, #24]
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	e7fd      	b.n	800684c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006850:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01e      	beq.n	8006896 <xTaskCreateStatic+0xb2>
 8006858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685a:	2b00      	cmp	r3, #0
 800685c:	d01b      	beq.n	8006896 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800685e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006860:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006866:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	2202      	movs	r2, #2
 800686c:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006870:	2300      	movs	r3, #0
 8006872:	9303      	str	r3, [sp, #12]
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	9302      	str	r3, [sp, #8]
 8006878:	f107 0314 	add.w	r3, r7, #20
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	68b9      	ldr	r1, [r7, #8]
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f851 	bl	8006930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800688e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006890:	f000 f8fc 	bl	8006a8c <prvAddNewTaskToReadyList>
 8006894:	e001      	b.n	800689a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800689a:	697b      	ldr	r3, [r7, #20]
	}
 800689c:	4618      	mov	r0, r3
 800689e:	3728      	adds	r7, #40	@ 0x28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b08c      	sub	sp, #48	@ 0x30
 80068a8:	af04      	add	r7, sp, #16
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	4613      	mov	r3, r2
 80068b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 fdaf 	bl	800841c <pvPortMalloc>
 80068be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00e      	beq.n	80068e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068c6:	20b0      	movs	r0, #176	@ 0xb0
 80068c8:	f001 fda8 	bl	800841c <pvPortMalloc>
 80068cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80068da:	e005      	b.n	80068e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068dc:	6978      	ldr	r0, [r7, #20]
 80068de:	f001 fde3 	bl	80084a8 <vPortFree>
 80068e2:	e001      	b.n	80068e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068e4:	2300      	movs	r3, #0
 80068e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d017      	beq.n	800691e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	2300      	movs	r3, #0
 80068fa:	9303      	str	r3, [sp, #12]
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	9302      	str	r3, [sp, #8]
 8006900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 f80f 	bl	8006930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006912:	69f8      	ldr	r0, [r7, #28]
 8006914:	f000 f8ba 	bl	8006a8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006918:	2301      	movs	r3, #1
 800691a:	61bb      	str	r3, [r7, #24]
 800691c:	e002      	b.n	8006924 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800691e:	f04f 33ff 	mov.w	r3, #4294967295
 8006922:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006924:	69bb      	ldr	r3, [r7, #24]
	}
 8006926:	4618      	mov	r0, r3
 8006928:	3720      	adds	r7, #32
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	461a      	mov	r2, r3
 8006948:	21a5      	movs	r1, #165	@ 0xa5
 800694a:	f002 fa40 	bl	8008dce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800694e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006958:	3b01      	subs	r3, #1
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	f023 0307 	bic.w	r3, r3, #7
 8006966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00b      	beq.n	800698a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	617b      	str	r3, [r7, #20]
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	e7fd      	b.n	8006986 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d01f      	beq.n	80069d6 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006996:	2300      	movs	r3, #0
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	e012      	b.n	80069c2 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	4413      	add	r3, r2
 80069a2:	7819      	ldrb	r1, [r3, #0]
 80069a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	3334      	adds	r3, #52	@ 0x34
 80069ac:	460a      	mov	r2, r1
 80069ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d006      	beq.n	80069ca <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	3301      	adds	r3, #1
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	2b0f      	cmp	r3, #15
 80069c6:	d9e9      	bls.n	800699c <prvInitialiseNewTask+0x6c>
 80069c8:	e000      	b.n	80069cc <prvInitialiseNewTask+0x9c>
			{
				break;
 80069ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069d4:	e003      	b.n	80069de <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e0:	2b37      	cmp	r3, #55	@ 0x37
 80069e2:	d901      	bls.n	80069e8 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069e4:	2337      	movs	r3, #55	@ 0x37
 80069e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069f2:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80069f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f6:	2200      	movs	r2, #0
 80069f8:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fc:	3304      	adds	r3, #4
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe fe08 	bl	8005614 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	3318      	adds	r3, #24
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe fe03 	bl	8005614 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a22:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	2200      	movs	r2, #0
 8006a28:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	335c      	adds	r3, #92	@ 0x5c
 8006a3e:	224c      	movs	r2, #76	@ 0x4c
 8006a40:	2100      	movs	r1, #0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f002 f9c3 	bl	8008dce <memset>
 8006a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8006a80 <prvInitialiseNewTask+0x150>)
 8006a4c:	661a      	str	r2, [r3, #96]	@ 0x60
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	4a0c      	ldr	r2, [pc, #48]	@ (8006a84 <prvInitialiseNewTask+0x154>)
 8006a52:	665a      	str	r2, [r3, #100]	@ 0x64
 8006a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a56:	4a0c      	ldr	r2, [pc, #48]	@ (8006a88 <prvInitialiseNewTask+0x158>)
 8006a58:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	68f9      	ldr	r1, [r7, #12]
 8006a5e:	69b8      	ldr	r0, [r7, #24]
 8006a60:	f001 fa86 	bl	8007f70 <pxPortInitialiseStack>
 8006a64:	4602      	mov	r2, r0
 8006a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a76:	bf00      	nop
 8006a78:	3720      	adds	r7, #32
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20004d28 	.word	0x20004d28
 8006a84:	20004d90 	.word	0x20004d90
 8006a88:	20004df8 	.word	0x20004df8

08006a8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a94:	f001 fba0 	bl	80081d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a98:	4b2d      	ldr	r3, [pc, #180]	@ (8006b50 <prvAddNewTaskToReadyList+0xc4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8006b50 <prvAddNewTaskToReadyList+0xc4>)
 8006aa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8006b54 <prvAddNewTaskToReadyList+0xc8>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d109      	bne.n	8006abe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8006b54 <prvAddNewTaskToReadyList+0xc8>)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ab0:	4b27      	ldr	r3, [pc, #156]	@ (8006b50 <prvAddNewTaskToReadyList+0xc4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d110      	bne.n	8006ada <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ab8:	f000 fc4a 	bl	8007350 <prvInitialiseTaskLists>
 8006abc:	e00d      	b.n	8006ada <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006abe:	4b26      	ldr	r3, [pc, #152]	@ (8006b58 <prvAddNewTaskToReadyList+0xcc>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d109      	bne.n	8006ada <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ac6:	4b23      	ldr	r3, [pc, #140]	@ (8006b54 <prvAddNewTaskToReadyList+0xc8>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d802      	bhi.n	8006ada <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8006b54 <prvAddNewTaskToReadyList+0xc8>)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ada:	4b20      	ldr	r3, [pc, #128]	@ (8006b5c <prvAddNewTaskToReadyList+0xd0>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8006b5c <prvAddNewTaskToReadyList+0xd0>)
 8006ae2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8006b5c <prvAddNewTaskToReadyList+0xd0>)
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b60 <prvAddNewTaskToReadyList+0xd4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d903      	bls.n	8006b00 <prvAddNewTaskToReadyList+0x74>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afc:	4a18      	ldr	r2, [pc, #96]	@ (8006b60 <prvAddNewTaskToReadyList+0xd4>)
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4a15      	ldr	r2, [pc, #84]	@ (8006b64 <prvAddNewTaskToReadyList+0xd8>)
 8006b0e:	441a      	add	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f7fe fd89 	bl	800562e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b1c:	f001 fb8e 	bl	800823c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b20:	4b0d      	ldr	r3, [pc, #52]	@ (8006b58 <prvAddNewTaskToReadyList+0xcc>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00e      	beq.n	8006b46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b28:	4b0a      	ldr	r3, [pc, #40]	@ (8006b54 <prvAddNewTaskToReadyList+0xc8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d207      	bcs.n	8006b46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b36:	4b0c      	ldr	r3, [pc, #48]	@ (8006b68 <prvAddNewTaskToReadyList+0xdc>)
 8006b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b46:	bf00      	nop
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000f58 	.word	0x20000f58
 8006b54:	20000a84 	.word	0x20000a84
 8006b58:	20000f64 	.word	0x20000f64
 8006b5c:	20000f74 	.word	0x20000f74
 8006b60:	20000f60 	.word	0x20000f60
 8006b64:	20000a88 	.word	0x20000a88
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d018      	beq.n	8006bb0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b7e:	4b14      	ldr	r3, [pc, #80]	@ (8006bd0 <vTaskDelay+0x64>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00b      	beq.n	8006b9e <vTaskDelay+0x32>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	60bb      	str	r3, [r7, #8]
}
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	e7fd      	b.n	8006b9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b9e:	f000 f88d 	bl	8006cbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fe35 	bl	8007814 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006baa:	f000 f895 	bl	8006cd8 <xTaskResumeAll>
 8006bae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d107      	bne.n	8006bc6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006bb6:	4b07      	ldr	r3, [pc, #28]	@ (8006bd4 <vTaskDelay+0x68>)
 8006bb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bc6:	bf00      	nop
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000f80 	.word	0x20000f80
 8006bd4:	e000ed04 	.word	0xe000ed04

08006bd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	@ 0x28
 8006bdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006be6:	463a      	mov	r2, r7
 8006be8:	1d39      	adds	r1, r7, #4
 8006bea:	f107 0308 	add.w	r3, r7, #8
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe fcbc 	bl	800556c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	9202      	str	r2, [sp, #8]
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	2300      	movs	r3, #0
 8006c04:	460a      	mov	r2, r1
 8006c06:	4925      	ldr	r1, [pc, #148]	@ (8006c9c <vTaskStartScheduler+0xc4>)
 8006c08:	4825      	ldr	r0, [pc, #148]	@ (8006ca0 <vTaskStartScheduler+0xc8>)
 8006c0a:	f7ff fdeb 	bl	80067e4 <xTaskCreateStatic>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	4a24      	ldr	r2, [pc, #144]	@ (8006ca4 <vTaskStartScheduler+0xcc>)
 8006c12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c14:	4b23      	ldr	r3, [pc, #140]	@ (8006ca4 <vTaskStartScheduler+0xcc>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	e001      	b.n	8006c26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d102      	bne.n	8006c32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c2c:	f000 fe46 	bl	80078bc <xTimerCreateTimerTask>
 8006c30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d11d      	bne.n	8006c74 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	613b      	str	r3, [r7, #16]
}
 8006c4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c4c:	4b16      	ldr	r3, [pc, #88]	@ (8006ca8 <vTaskStartScheduler+0xd0>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	335c      	adds	r3, #92	@ 0x5c
 8006c52:	4a16      	ldr	r2, [pc, #88]	@ (8006cac <vTaskStartScheduler+0xd4>)
 8006c54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c56:	4b16      	ldr	r3, [pc, #88]	@ (8006cb0 <vTaskStartScheduler+0xd8>)
 8006c58:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c5e:	4b15      	ldr	r3, [pc, #84]	@ (8006cb4 <vTaskStartScheduler+0xdc>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c64:	4b14      	ldr	r3, [pc, #80]	@ (8006cb8 <vTaskStartScheduler+0xe0>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8006c6a:	f7fa f825 	bl	8000cb8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c6e:	f001 fa0f 	bl	8008090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c72:	e00f      	b.n	8006c94 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d10b      	bne.n	8006c94 <vTaskStartScheduler+0xbc>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	60fb      	str	r3, [r7, #12]
}
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	e7fd      	b.n	8006c90 <vTaskStartScheduler+0xb8>
}
 8006c94:	bf00      	nop
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	08009a4c 	.word	0x08009a4c
 8006ca0:	08007321 	.word	0x08007321
 8006ca4:	20000f7c 	.word	0x20000f7c
 8006ca8:	20000a84 	.word	0x20000a84
 8006cac:	200000e8 	.word	0x200000e8
 8006cb0:	20000f78 	.word	0x20000f78
 8006cb4:	20000f64 	.word	0x20000f64
 8006cb8:	20000f5c 	.word	0x20000f5c

08006cbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006cc0:	4b04      	ldr	r3, [pc, #16]	@ (8006cd4 <vTaskSuspendAll+0x18>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	4a03      	ldr	r2, [pc, #12]	@ (8006cd4 <vTaskSuspendAll+0x18>)
 8006cc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006cca:	bf00      	nop
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	20000f80 	.word	0x20000f80

08006cd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ce6:	4b42      	ldr	r3, [pc, #264]	@ (8006df0 <xTaskResumeAll+0x118>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10b      	bne.n	8006d06 <xTaskResumeAll+0x2e>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	603b      	str	r3, [r7, #0]
}
 8006d00:	bf00      	nop
 8006d02:	bf00      	nop
 8006d04:	e7fd      	b.n	8006d02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d06:	f001 fa67 	bl	80081d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d0a:	4b39      	ldr	r3, [pc, #228]	@ (8006df0 <xTaskResumeAll+0x118>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	4a37      	ldr	r2, [pc, #220]	@ (8006df0 <xTaskResumeAll+0x118>)
 8006d12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d14:	4b36      	ldr	r3, [pc, #216]	@ (8006df0 <xTaskResumeAll+0x118>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d162      	bne.n	8006de2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d1c:	4b35      	ldr	r3, [pc, #212]	@ (8006df4 <xTaskResumeAll+0x11c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d05e      	beq.n	8006de2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d24:	e02f      	b.n	8006d86 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d26:	4b34      	ldr	r3, [pc, #208]	@ (8006df8 <xTaskResumeAll+0x120>)
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3318      	adds	r3, #24
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe fcd8 	bl	80056e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fe fcd3 	bl	80056e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d46:	4b2d      	ldr	r3, [pc, #180]	@ (8006dfc <xTaskResumeAll+0x124>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d903      	bls.n	8006d56 <xTaskResumeAll+0x7e>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d52:	4a2a      	ldr	r2, [pc, #168]	@ (8006dfc <xTaskResumeAll+0x124>)
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4a27      	ldr	r2, [pc, #156]	@ (8006e00 <xTaskResumeAll+0x128>)
 8006d64:	441a      	add	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f7fe fc5e 	bl	800562e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d76:	4b23      	ldr	r3, [pc, #140]	@ (8006e04 <xTaskResumeAll+0x12c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d302      	bcc.n	8006d86 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006d80:	4b21      	ldr	r3, [pc, #132]	@ (8006e08 <xTaskResumeAll+0x130>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d86:	4b1c      	ldr	r3, [pc, #112]	@ (8006df8 <xTaskResumeAll+0x120>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1cb      	bne.n	8006d26 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d94:	f000 fb80 	bl	8007498 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d98:	4b1c      	ldr	r3, [pc, #112]	@ (8006e0c <xTaskResumeAll+0x134>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d010      	beq.n	8006dc6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006da4:	f000 f846 	bl	8006e34 <xTaskIncrementTick>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006dae:	4b16      	ldr	r3, [pc, #88]	@ (8006e08 <xTaskResumeAll+0x130>)
 8006db0:	2201      	movs	r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1f1      	bne.n	8006da4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006dc0:	4b12      	ldr	r3, [pc, #72]	@ (8006e0c <xTaskResumeAll+0x134>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006dc6:	4b10      	ldr	r3, [pc, #64]	@ (8006e08 <xTaskResumeAll+0x130>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006e10 <xTaskResumeAll+0x138>)
 8006dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006de2:	f001 fa2b 	bl	800823c <vPortExitCritical>

	return xAlreadyYielded;
 8006de6:	68bb      	ldr	r3, [r7, #8]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	20000f80 	.word	0x20000f80
 8006df4:	20000f58 	.word	0x20000f58
 8006df8:	20000f18 	.word	0x20000f18
 8006dfc:	20000f60 	.word	0x20000f60
 8006e00:	20000a88 	.word	0x20000a88
 8006e04:	20000a84 	.word	0x20000a84
 8006e08:	20000f6c 	.word	0x20000f6c
 8006e0c:	20000f68 	.word	0x20000f68
 8006e10:	e000ed04 	.word	0xe000ed04

08006e14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e1a:	4b05      	ldr	r3, [pc, #20]	@ (8006e30 <xTaskGetTickCount+0x1c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e20:	687b      	ldr	r3, [r7, #4]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	20000f5c 	.word	0x20000f5c

08006e34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8006f7c <xTaskIncrementTick+0x148>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f040 8090 	bne.w	8006f68 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e48:	4b4d      	ldr	r3, [pc, #308]	@ (8006f80 <xTaskIncrementTick+0x14c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e50:	4a4b      	ldr	r2, [pc, #300]	@ (8006f80 <xTaskIncrementTick+0x14c>)
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d121      	bne.n	8006ea0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e5c:	4b49      	ldr	r3, [pc, #292]	@ (8006f84 <xTaskIncrementTick+0x150>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	603b      	str	r3, [r7, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	e7fd      	b.n	8006e7a <xTaskIncrementTick+0x46>
 8006e7e:	4b41      	ldr	r3, [pc, #260]	@ (8006f84 <xTaskIncrementTick+0x150>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	4b40      	ldr	r3, [pc, #256]	@ (8006f88 <xTaskIncrementTick+0x154>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a3e      	ldr	r2, [pc, #248]	@ (8006f84 <xTaskIncrementTick+0x150>)
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	4a3e      	ldr	r2, [pc, #248]	@ (8006f88 <xTaskIncrementTick+0x154>)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	4b3e      	ldr	r3, [pc, #248]	@ (8006f8c <xTaskIncrementTick+0x158>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3301      	adds	r3, #1
 8006e98:	4a3c      	ldr	r2, [pc, #240]	@ (8006f8c <xTaskIncrementTick+0x158>)
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	f000 fafc 	bl	8007498 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8006f90 <xTaskIncrementTick+0x15c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d349      	bcc.n	8006f3e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eaa:	4b36      	ldr	r3, [pc, #216]	@ (8006f84 <xTaskIncrementTick+0x150>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d104      	bne.n	8006ebe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb4:	4b36      	ldr	r3, [pc, #216]	@ (8006f90 <xTaskIncrementTick+0x15c>)
 8006eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eba:	601a      	str	r2, [r3, #0]
					break;
 8006ebc:	e03f      	b.n	8006f3e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ebe:	4b31      	ldr	r3, [pc, #196]	@ (8006f84 <xTaskIncrementTick+0x150>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d203      	bcs.n	8006ede <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8006f90 <xTaskIncrementTick+0x15c>)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006edc:	e02f      	b.n	8006f3e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fe fc00 	bl	80056e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	3318      	adds	r3, #24
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe fbf7 	bl	80056e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006efe:	4b25      	ldr	r3, [pc, #148]	@ (8006f94 <xTaskIncrementTick+0x160>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d903      	bls.n	8006f0e <xTaskIncrementTick+0xda>
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	4a22      	ldr	r2, [pc, #136]	@ (8006f94 <xTaskIncrementTick+0x160>)
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8006f98 <xTaskIncrementTick+0x164>)
 8006f1c:	441a      	add	r2, r3
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	3304      	adds	r3, #4
 8006f22:	4619      	mov	r1, r3
 8006f24:	4610      	mov	r0, r2
 8006f26:	f7fe fb82 	bl	800562e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8006f9c <xTaskIncrementTick+0x168>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d3b8      	bcc.n	8006eaa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f3c:	e7b5      	b.n	8006eaa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f3e:	4b17      	ldr	r3, [pc, #92]	@ (8006f9c <xTaskIncrementTick+0x168>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f44:	4914      	ldr	r1, [pc, #80]	@ (8006f98 <xTaskIncrementTick+0x164>)
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d901      	bls.n	8006f5a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006f56:	2301      	movs	r3, #1
 8006f58:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f5a:	4b11      	ldr	r3, [pc, #68]	@ (8006fa0 <xTaskIncrementTick+0x16c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d007      	beq.n	8006f72 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006f62:	2301      	movs	r3, #1
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	e004      	b.n	8006f72 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f68:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa4 <xTaskIncrementTick+0x170>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	4a0d      	ldr	r2, [pc, #52]	@ (8006fa4 <xTaskIncrementTick+0x170>)
 8006f70:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f72:	697b      	ldr	r3, [r7, #20]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20000f80 	.word	0x20000f80
 8006f80:	20000f5c 	.word	0x20000f5c
 8006f84:	20000f10 	.word	0x20000f10
 8006f88:	20000f14 	.word	0x20000f14
 8006f8c:	20000f70 	.word	0x20000f70
 8006f90:	20000f78 	.word	0x20000f78
 8006f94:	20000f60 	.word	0x20000f60
 8006f98:	20000a88 	.word	0x20000a88
 8006f9c:	20000a84 	.word	0x20000a84
 8006fa0:	20000f6c 	.word	0x20000f6c
 8006fa4:	20000f68 	.word	0x20000f68

08006fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fae:	4b36      	ldr	r3, [pc, #216]	@ (8007088 <vTaskSwitchContext+0xe0>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fb6:	4b35      	ldr	r3, [pc, #212]	@ (800708c <vTaskSwitchContext+0xe4>)
 8006fb8:	2201      	movs	r2, #1
 8006fba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fbc:	e060      	b.n	8007080 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8006fbe:	4b33      	ldr	r3, [pc, #204]	@ (800708c <vTaskSwitchContext+0xe4>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006fc4:	f7f9 fe92 	bl	8000cec <getRunTimeCounterValue>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	4a31      	ldr	r2, [pc, #196]	@ (8007090 <vTaskSwitchContext+0xe8>)
 8006fcc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006fce:	4b30      	ldr	r3, [pc, #192]	@ (8007090 <vTaskSwitchContext+0xe8>)
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	4b30      	ldr	r3, [pc, #192]	@ (8007094 <vTaskSwitchContext+0xec>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d909      	bls.n	8006fee <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006fda:	4b2f      	ldr	r3, [pc, #188]	@ (8007098 <vTaskSwitchContext+0xf0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8006fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8007090 <vTaskSwitchContext+0xe8>)
 8006fe2:	6810      	ldr	r0, [r2, #0]
 8006fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8007094 <vTaskSwitchContext+0xec>)
 8006fe6:	6812      	ldr	r2, [r2, #0]
 8006fe8:	1a82      	subs	r2, r0, r2
 8006fea:	440a      	add	r2, r1
 8006fec:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006fee:	4b28      	ldr	r3, [pc, #160]	@ (8007090 <vTaskSwitchContext+0xe8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a28      	ldr	r2, [pc, #160]	@ (8007094 <vTaskSwitchContext+0xec>)
 8006ff4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ff6:	4b29      	ldr	r3, [pc, #164]	@ (800709c <vTaskSwitchContext+0xf4>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	e011      	b.n	8007022 <vTaskSwitchContext+0x7a>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <vTaskSwitchContext+0x74>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	607b      	str	r3, [r7, #4]
}
 8007016:	bf00      	nop
 8007018:	bf00      	nop
 800701a:	e7fd      	b.n	8007018 <vTaskSwitchContext+0x70>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3b01      	subs	r3, #1
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	491f      	ldr	r1, [pc, #124]	@ (80070a0 <vTaskSwitchContext+0xf8>)
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0e3      	beq.n	8006ffe <vTaskSwitchContext+0x56>
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4a17      	ldr	r2, [pc, #92]	@ (80070a0 <vTaskSwitchContext+0xf8>)
 8007042:	4413      	add	r3, r2
 8007044:	60bb      	str	r3, [r7, #8]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	605a      	str	r2, [r3, #4]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	3308      	adds	r3, #8
 8007058:	429a      	cmp	r2, r3
 800705a:	d104      	bne.n	8007066 <vTaskSwitchContext+0xbe>
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	605a      	str	r2, [r3, #4]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	4a0a      	ldr	r2, [pc, #40]	@ (8007098 <vTaskSwitchContext+0xf0>)
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	4a0a      	ldr	r2, [pc, #40]	@ (800709c <vTaskSwitchContext+0xf4>)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007076:	4b08      	ldr	r3, [pc, #32]	@ (8007098 <vTaskSwitchContext+0xf0>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	335c      	adds	r3, #92	@ 0x5c
 800707c:	4a09      	ldr	r2, [pc, #36]	@ (80070a4 <vTaskSwitchContext+0xfc>)
 800707e:	6013      	str	r3, [r2, #0]
}
 8007080:	bf00      	nop
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	20000f80 	.word	0x20000f80
 800708c:	20000f6c 	.word	0x20000f6c
 8007090:	20000f88 	.word	0x20000f88
 8007094:	20000f84 	.word	0x20000f84
 8007098:	20000a84 	.word	0x20000a84
 800709c:	20000f60 	.word	0x20000f60
 80070a0:	20000a88 	.word	0x20000a88
 80070a4:	200000e8 	.word	0x200000e8

080070a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10b      	bne.n	80070d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80070b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	60fb      	str	r3, [r7, #12]
}
 80070ca:	bf00      	nop
 80070cc:	bf00      	nop
 80070ce:	e7fd      	b.n	80070cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070d0:	4b07      	ldr	r3, [pc, #28]	@ (80070f0 <vTaskPlaceOnEventList+0x48>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3318      	adds	r3, #24
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7fe facc 	bl	8005676 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070de:	2101      	movs	r1, #1
 80070e0:	6838      	ldr	r0, [r7, #0]
 80070e2:	f000 fb97 	bl	8007814 <prvAddCurrentTaskToDelayedList>
}
 80070e6:	bf00      	nop
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20000a84 	.word	0x20000a84

080070f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10b      	bne.n	800711e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	617b      	str	r3, [r7, #20]
}
 8007118:	bf00      	nop
 800711a:	bf00      	nop
 800711c:	e7fd      	b.n	800711a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800711e:	4b0a      	ldr	r3, [pc, #40]	@ (8007148 <vTaskPlaceOnEventListRestricted+0x54>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3318      	adds	r3, #24
 8007124:	4619      	mov	r1, r3
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7fe fa81 	bl	800562e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007132:	f04f 33ff 	mov.w	r3, #4294967295
 8007136:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	68b8      	ldr	r0, [r7, #8]
 800713c:	f000 fb6a 	bl	8007814 <prvAddCurrentTaskToDelayedList>
	}
 8007140:	bf00      	nop
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	20000a84 	.word	0x20000a84

0800714c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10b      	bne.n	800717a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	60fb      	str	r3, [r7, #12]
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop
 8007178:	e7fd      	b.n	8007176 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	3318      	adds	r3, #24
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fab2 	bl	80056e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007184:	4b1d      	ldr	r3, [pc, #116]	@ (80071fc <xTaskRemoveFromEventList+0xb0>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d11d      	bne.n	80071c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	3304      	adds	r3, #4
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe faa9 	bl	80056e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800719a:	4b19      	ldr	r3, [pc, #100]	@ (8007200 <xTaskRemoveFromEventList+0xb4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d903      	bls.n	80071aa <xTaskRemoveFromEventList+0x5e>
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a6:	4a16      	ldr	r2, [pc, #88]	@ (8007200 <xTaskRemoveFromEventList+0xb4>)
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ae:	4613      	mov	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4a13      	ldr	r2, [pc, #76]	@ (8007204 <xTaskRemoveFromEventList+0xb8>)
 80071b8:	441a      	add	r2, r3
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	3304      	adds	r3, #4
 80071be:	4619      	mov	r1, r3
 80071c0:	4610      	mov	r0, r2
 80071c2:	f7fe fa34 	bl	800562e <vListInsertEnd>
 80071c6:	e005      	b.n	80071d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	3318      	adds	r3, #24
 80071cc:	4619      	mov	r1, r3
 80071ce:	480e      	ldr	r0, [pc, #56]	@ (8007208 <xTaskRemoveFromEventList+0xbc>)
 80071d0:	f7fe fa2d 	bl	800562e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d8:	4b0c      	ldr	r3, [pc, #48]	@ (800720c <xTaskRemoveFromEventList+0xc0>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071de:	429a      	cmp	r2, r3
 80071e0:	d905      	bls.n	80071ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071e2:	2301      	movs	r3, #1
 80071e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007210 <xTaskRemoveFromEventList+0xc4>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	e001      	b.n	80071f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80071ee:	2300      	movs	r3, #0
 80071f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071f2:	697b      	ldr	r3, [r7, #20]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000f80 	.word	0x20000f80
 8007200:	20000f60 	.word	0x20000f60
 8007204:	20000a88 	.word	0x20000a88
 8007208:	20000f18 	.word	0x20000f18
 800720c:	20000a84 	.word	0x20000a84
 8007210:	20000f6c 	.word	0x20000f6c

08007214 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800721c:	4b06      	ldr	r3, [pc, #24]	@ (8007238 <vTaskInternalSetTimeOutState+0x24>)
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007224:	4b05      	ldr	r3, [pc, #20]	@ (800723c <vTaskInternalSetTimeOutState+0x28>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	605a      	str	r2, [r3, #4]
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	20000f70 	.word	0x20000f70
 800723c:	20000f5c 	.word	0x20000f5c

08007240 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10b      	bne.n	8007268 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	613b      	str	r3, [r7, #16]
}
 8007262:	bf00      	nop
 8007264:	bf00      	nop
 8007266:	e7fd      	b.n	8007264 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10b      	bne.n	8007286 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	60fb      	str	r3, [r7, #12]
}
 8007280:	bf00      	nop
 8007282:	bf00      	nop
 8007284:	e7fd      	b.n	8007282 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007286:	f000 ffa7 	bl	80081d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800728a:	4b1d      	ldr	r3, [pc, #116]	@ (8007300 <xTaskCheckForTimeOut+0xc0>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a2:	d102      	bne.n	80072aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072a4:	2300      	movs	r3, #0
 80072a6:	61fb      	str	r3, [r7, #28]
 80072a8:	e023      	b.n	80072f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	4b15      	ldr	r3, [pc, #84]	@ (8007304 <xTaskCheckForTimeOut+0xc4>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d007      	beq.n	80072c6 <xTaskCheckForTimeOut+0x86>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d302      	bcc.n	80072c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072c0:	2301      	movs	r3, #1
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	e015      	b.n	80072f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d20b      	bcs.n	80072e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	1ad2      	subs	r2, r2, r3
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff ff99 	bl	8007214 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	e004      	b.n	80072f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072ee:	2301      	movs	r3, #1
 80072f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072f2:	f000 ffa3 	bl	800823c <vPortExitCritical>

	return xReturn;
 80072f6:	69fb      	ldr	r3, [r7, #28]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000f5c 	.word	0x20000f5c
 8007304:	20000f70 	.word	0x20000f70

08007308 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800730c:	4b03      	ldr	r3, [pc, #12]	@ (800731c <vTaskMissedYield+0x14>)
 800730e:	2201      	movs	r2, #1
 8007310:	601a      	str	r2, [r3, #0]
}
 8007312:	bf00      	nop
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	20000f6c 	.word	0x20000f6c

08007320 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007328:	f000 f852 	bl	80073d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800732c:	4b06      	ldr	r3, [pc, #24]	@ (8007348 <prvIdleTask+0x28>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d9f9      	bls.n	8007328 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007334:	4b05      	ldr	r3, [pc, #20]	@ (800734c <prvIdleTask+0x2c>)
 8007336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007344:	e7f0      	b.n	8007328 <prvIdleTask+0x8>
 8007346:	bf00      	nop
 8007348:	20000a88 	.word	0x20000a88
 800734c:	e000ed04 	.word	0xe000ed04

08007350 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007356:	2300      	movs	r3, #0
 8007358:	607b      	str	r3, [r7, #4]
 800735a:	e00c      	b.n	8007376 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4a12      	ldr	r2, [pc, #72]	@ (80073b0 <prvInitialiseTaskLists+0x60>)
 8007368:	4413      	add	r3, r2
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe f932 	bl	80055d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3301      	adds	r3, #1
 8007374:	607b      	str	r3, [r7, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b37      	cmp	r3, #55	@ 0x37
 800737a:	d9ef      	bls.n	800735c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800737c:	480d      	ldr	r0, [pc, #52]	@ (80073b4 <prvInitialiseTaskLists+0x64>)
 800737e:	f7fe f929 	bl	80055d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007382:	480d      	ldr	r0, [pc, #52]	@ (80073b8 <prvInitialiseTaskLists+0x68>)
 8007384:	f7fe f926 	bl	80055d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007388:	480c      	ldr	r0, [pc, #48]	@ (80073bc <prvInitialiseTaskLists+0x6c>)
 800738a:	f7fe f923 	bl	80055d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800738e:	480c      	ldr	r0, [pc, #48]	@ (80073c0 <prvInitialiseTaskLists+0x70>)
 8007390:	f7fe f920 	bl	80055d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007394:	480b      	ldr	r0, [pc, #44]	@ (80073c4 <prvInitialiseTaskLists+0x74>)
 8007396:	f7fe f91d 	bl	80055d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800739a:	4b0b      	ldr	r3, [pc, #44]	@ (80073c8 <prvInitialiseTaskLists+0x78>)
 800739c:	4a05      	ldr	r2, [pc, #20]	@ (80073b4 <prvInitialiseTaskLists+0x64>)
 800739e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073a0:	4b0a      	ldr	r3, [pc, #40]	@ (80073cc <prvInitialiseTaskLists+0x7c>)
 80073a2:	4a05      	ldr	r2, [pc, #20]	@ (80073b8 <prvInitialiseTaskLists+0x68>)
 80073a4:	601a      	str	r2, [r3, #0]
}
 80073a6:	bf00      	nop
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000a88 	.word	0x20000a88
 80073b4:	20000ee8 	.word	0x20000ee8
 80073b8:	20000efc 	.word	0x20000efc
 80073bc:	20000f18 	.word	0x20000f18
 80073c0:	20000f2c 	.word	0x20000f2c
 80073c4:	20000f44 	.word	0x20000f44
 80073c8:	20000f10 	.word	0x20000f10
 80073cc:	20000f14 	.word	0x20000f14

080073d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073d6:	e019      	b.n	800740c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073d8:	f000 fefe 	bl	80081d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073dc:	4b10      	ldr	r3, [pc, #64]	@ (8007420 <prvCheckTasksWaitingTermination+0x50>)
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3304      	adds	r3, #4
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fe f97d 	bl	80056e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007424 <prvCheckTasksWaitingTermination+0x54>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	4a0b      	ldr	r2, [pc, #44]	@ (8007424 <prvCheckTasksWaitingTermination+0x54>)
 80073f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007428 <prvCheckTasksWaitingTermination+0x58>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007428 <prvCheckTasksWaitingTermination+0x58>)
 8007400:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007402:	f000 ff1b 	bl	800823c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f810 	bl	800742c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800740c:	4b06      	ldr	r3, [pc, #24]	@ (8007428 <prvCheckTasksWaitingTermination+0x58>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e1      	bne.n	80073d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000f2c 	.word	0x20000f2c
 8007424:	20000f58 	.word	0x20000f58
 8007428:	20000f40 	.word	0x20000f40

0800742c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	335c      	adds	r3, #92	@ 0x5c
 8007438:	4618      	mov	r0, r3
 800743a:	f001 fce1 	bl	8008e00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8007444:	2b00      	cmp	r3, #0
 8007446:	d108      	bne.n	800745a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744c:	4618      	mov	r0, r3
 800744e:	f001 f82b 	bl	80084a8 <vPortFree>
				vPortFree( pxTCB );
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 f828 	bl	80084a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007458:	e019      	b.n	800748e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8007460:	2b01      	cmp	r3, #1
 8007462:	d103      	bne.n	800746c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 f81f 	bl	80084a8 <vPortFree>
	}
 800746a:	e010      	b.n	800748e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8007472:	2b02      	cmp	r3, #2
 8007474:	d00b      	beq.n	800748e <prvDeleteTCB+0x62>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	60fb      	str	r3, [r7, #12]
}
 8007488:	bf00      	nop
 800748a:	bf00      	nop
 800748c:	e7fd      	b.n	800748a <prvDeleteTCB+0x5e>
	}
 800748e:	bf00      	nop
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800749e:	4b0c      	ldr	r3, [pc, #48]	@ (80074d0 <prvResetNextTaskUnblockTime+0x38>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d104      	bne.n	80074b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074a8:	4b0a      	ldr	r3, [pc, #40]	@ (80074d4 <prvResetNextTaskUnblockTime+0x3c>)
 80074aa:	f04f 32ff 	mov.w	r2, #4294967295
 80074ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074b0:	e008      	b.n	80074c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b2:	4b07      	ldr	r3, [pc, #28]	@ (80074d0 <prvResetNextTaskUnblockTime+0x38>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	4a04      	ldr	r2, [pc, #16]	@ (80074d4 <prvResetNextTaskUnblockTime+0x3c>)
 80074c2:	6013      	str	r3, [r2, #0]
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	20000f10 	.word	0x20000f10
 80074d4:	20000f78 	.word	0x20000f78

080074d8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80074de:	4b05      	ldr	r3, [pc, #20]	@ (80074f4 <xTaskGetCurrentTaskHandle+0x1c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80074e4:	687b      	ldr	r3, [r7, #4]
	}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20000a84 	.word	0x20000a84

080074f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074fe:	4b0b      	ldr	r3, [pc, #44]	@ (800752c <xTaskGetSchedulerState+0x34>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d102      	bne.n	800750c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007506:	2301      	movs	r3, #1
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	e008      	b.n	800751e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800750c:	4b08      	ldr	r3, [pc, #32]	@ (8007530 <xTaskGetSchedulerState+0x38>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007514:	2302      	movs	r3, #2
 8007516:	607b      	str	r3, [r7, #4]
 8007518:	e001      	b.n	800751e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800751a:	2300      	movs	r3, #0
 800751c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800751e:	687b      	ldr	r3, [r7, #4]
	}
 8007520:	4618      	mov	r0, r3
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	20000f64 	.word	0x20000f64
 8007530:	20000f80 	.word	0x20000f80

08007534 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d051      	beq.n	80075ee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800754e:	4b2a      	ldr	r3, [pc, #168]	@ (80075f8 <xTaskPriorityInherit+0xc4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	429a      	cmp	r2, r3
 8007556:	d241      	bcs.n	80075dc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	db06      	blt.n	800756e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007560:	4b25      	ldr	r3, [pc, #148]	@ (80075f8 <xTaskPriorityInherit+0xc4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007566:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	6959      	ldr	r1, [r3, #20]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007576:	4613      	mov	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4a1f      	ldr	r2, [pc, #124]	@ (80075fc <xTaskPriorityInherit+0xc8>)
 8007580:	4413      	add	r3, r2
 8007582:	4299      	cmp	r1, r3
 8007584:	d122      	bne.n	80075cc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	3304      	adds	r3, #4
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe f8ac 	bl	80056e8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007590:	4b19      	ldr	r3, [pc, #100]	@ (80075f8 <xTaskPriorityInherit+0xc4>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800759e:	4b18      	ldr	r3, [pc, #96]	@ (8007600 <xTaskPriorityInherit+0xcc>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d903      	bls.n	80075ae <xTaskPriorityInherit+0x7a>
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	4a15      	ldr	r2, [pc, #84]	@ (8007600 <xTaskPriorityInherit+0xcc>)
 80075ac:	6013      	str	r3, [r2, #0]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b2:	4613      	mov	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4a10      	ldr	r2, [pc, #64]	@ (80075fc <xTaskPriorityInherit+0xc8>)
 80075bc:	441a      	add	r2, r3
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	3304      	adds	r3, #4
 80075c2:	4619      	mov	r1, r3
 80075c4:	4610      	mov	r0, r2
 80075c6:	f7fe f832 	bl	800562e <vListInsertEnd>
 80075ca:	e004      	b.n	80075d6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80075cc:	4b0a      	ldr	r3, [pc, #40]	@ (80075f8 <xTaskPriorityInherit+0xc4>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80075d6:	2301      	movs	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	e008      	b.n	80075ee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075e0:	4b05      	ldr	r3, [pc, #20]	@ (80075f8 <xTaskPriorityInherit+0xc4>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d201      	bcs.n	80075ee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80075ea:	2301      	movs	r3, #1
 80075ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075ee:	68fb      	ldr	r3, [r7, #12]
	}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	20000a84 	.word	0x20000a84
 80075fc:	20000a88 	.word	0x20000a88
 8007600:	20000f60 	.word	0x20000f60

08007604 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007610:	2300      	movs	r3, #0
 8007612:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d058      	beq.n	80076cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800761a:	4b2f      	ldr	r3, [pc, #188]	@ (80076d8 <xTaskPriorityDisinherit+0xd4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	429a      	cmp	r2, r3
 8007622:	d00b      	beq.n	800763c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	60fb      	str	r3, [r7, #12]
}
 8007636:	bf00      	nop
 8007638:	bf00      	nop
 800763a:	e7fd      	b.n	8007638 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10b      	bne.n	800765c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	60bb      	str	r3, [r7, #8]
}
 8007656:	bf00      	nop
 8007658:	bf00      	nop
 800765a:	e7fd      	b.n	8007658 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007660:	1e5a      	subs	r2, r3, #1
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800766e:	429a      	cmp	r2, r3
 8007670:	d02c      	beq.n	80076cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007676:	2b00      	cmp	r3, #0
 8007678:	d128      	bne.n	80076cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	3304      	adds	r3, #4
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe f832 	bl	80056e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007690:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800769c:	4b0f      	ldr	r3, [pc, #60]	@ (80076dc <xTaskPriorityDisinherit+0xd8>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d903      	bls.n	80076ac <xTaskPriorityDisinherit+0xa8>
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a8:	4a0c      	ldr	r2, [pc, #48]	@ (80076dc <xTaskPriorityDisinherit+0xd8>)
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4a09      	ldr	r2, [pc, #36]	@ (80076e0 <xTaskPriorityDisinherit+0xdc>)
 80076ba:	441a      	add	r2, r3
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	3304      	adds	r3, #4
 80076c0:	4619      	mov	r1, r3
 80076c2:	4610      	mov	r0, r2
 80076c4:	f7fd ffb3 	bl	800562e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076c8:	2301      	movs	r3, #1
 80076ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076cc:	697b      	ldr	r3, [r7, #20]
	}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000a84 	.word	0x20000a84
 80076dc:	20000f60 	.word	0x20000f60
 80076e0:	20000a88 	.word	0x20000a88

080076e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80076f2:	2301      	movs	r3, #1
 80076f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d06c      	beq.n	80077d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10b      	bne.n	800771c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	60fb      	str	r3, [r7, #12]
}
 8007716:	bf00      	nop
 8007718:	bf00      	nop
 800771a:	e7fd      	b.n	8007718 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d902      	bls.n	800772c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	61fb      	str	r3, [r7, #28]
 800772a:	e002      	b.n	8007732 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007730:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007736:	69fa      	ldr	r2, [r7, #28]
 8007738:	429a      	cmp	r2, r3
 800773a:	d04c      	beq.n	80077d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	429a      	cmp	r2, r3
 8007744:	d147      	bne.n	80077d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007746:	4b26      	ldr	r3, [pc, #152]	@ (80077e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	429a      	cmp	r2, r3
 800774e:	d10b      	bne.n	8007768 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	60bb      	str	r3, [r7, #8]
}
 8007762:	bf00      	nop
 8007764:	bf00      	nop
 8007766:	e7fd      	b.n	8007764 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	db04      	blt.n	8007786 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	6959      	ldr	r1, [r3, #20]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	4613      	mov	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4a13      	ldr	r2, [pc, #76]	@ (80077e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007796:	4413      	add	r3, r2
 8007798:	4299      	cmp	r1, r3
 800779a:	d11c      	bne.n	80077d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	3304      	adds	r3, #4
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fd ffa1 	bl	80056e8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077aa:	4b0f      	ldr	r3, [pc, #60]	@ (80077e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d903      	bls.n	80077ba <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	4a0c      	ldr	r2, [pc, #48]	@ (80077e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4a07      	ldr	r2, [pc, #28]	@ (80077e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80077c8:	441a      	add	r2, r3
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	3304      	adds	r3, #4
 80077ce:	4619      	mov	r1, r3
 80077d0:	4610      	mov	r0, r2
 80077d2:	f7fd ff2c 	bl	800562e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077d6:	bf00      	nop
 80077d8:	3720      	adds	r7, #32
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000a84 	.word	0x20000a84
 80077e4:	20000a88 	.word	0x20000a88
 80077e8:	20000f60 	.word	0x20000f60

080077ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80077f0:	4b07      	ldr	r3, [pc, #28]	@ (8007810 <pvTaskIncrementMutexHeldCount+0x24>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d004      	beq.n	8007802 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80077f8:	4b05      	ldr	r3, [pc, #20]	@ (8007810 <pvTaskIncrementMutexHeldCount+0x24>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077fe:	3201      	adds	r2, #1
 8007800:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 8007802:	4b03      	ldr	r3, [pc, #12]	@ (8007810 <pvTaskIncrementMutexHeldCount+0x24>)
 8007804:	681b      	ldr	r3, [r3, #0]
	}
 8007806:	4618      	mov	r0, r3
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	20000a84 	.word	0x20000a84

08007814 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800781e:	4b21      	ldr	r3, [pc, #132]	@ (80078a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007824:	4b20      	ldr	r3, [pc, #128]	@ (80078a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3304      	adds	r3, #4
 800782a:	4618      	mov	r0, r3
 800782c:	f7fd ff5c 	bl	80056e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007836:	d10a      	bne.n	800784e <prvAddCurrentTaskToDelayedList+0x3a>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800783e:	4b1a      	ldr	r3, [pc, #104]	@ (80078a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4819      	ldr	r0, [pc, #100]	@ (80078ac <prvAddCurrentTaskToDelayedList+0x98>)
 8007848:	f7fd fef1 	bl	800562e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800784c:	e026      	b.n	800789c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4413      	add	r3, r2
 8007854:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007856:	4b14      	ldr	r3, [pc, #80]	@ (80078a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	429a      	cmp	r2, r3
 8007864:	d209      	bcs.n	800787a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007866:	4b12      	ldr	r3, [pc, #72]	@ (80078b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	4b0f      	ldr	r3, [pc, #60]	@ (80078a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3304      	adds	r3, #4
 8007870:	4619      	mov	r1, r3
 8007872:	4610      	mov	r0, r2
 8007874:	f7fd feff 	bl	8005676 <vListInsert>
}
 8007878:	e010      	b.n	800789c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800787a:	4b0e      	ldr	r3, [pc, #56]	@ (80078b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	4b0a      	ldr	r3, [pc, #40]	@ (80078a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3304      	adds	r3, #4
 8007884:	4619      	mov	r1, r3
 8007886:	4610      	mov	r0, r2
 8007888:	f7fd fef5 	bl	8005676 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800788c:	4b0a      	ldr	r3, [pc, #40]	@ (80078b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	429a      	cmp	r2, r3
 8007894:	d202      	bcs.n	800789c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007896:	4a08      	ldr	r2, [pc, #32]	@ (80078b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	6013      	str	r3, [r2, #0]
}
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	20000f5c 	.word	0x20000f5c
 80078a8:	20000a84 	.word	0x20000a84
 80078ac:	20000f44 	.word	0x20000f44
 80078b0:	20000f14 	.word	0x20000f14
 80078b4:	20000f10 	.word	0x20000f10
 80078b8:	20000f78 	.word	0x20000f78

080078bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08a      	sub	sp, #40	@ 0x28
 80078c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078c6:	f000 fb13 	bl	8007ef0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007940 <xTimerCreateTimerTask+0x84>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d021      	beq.n	8007916 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078da:	1d3a      	adds	r2, r7, #4
 80078dc:	f107 0108 	add.w	r1, r7, #8
 80078e0:	f107 030c 	add.w	r3, r7, #12
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fd fe5b 	bl	80055a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078ea:	6879      	ldr	r1, [r7, #4]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	9202      	str	r2, [sp, #8]
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	2302      	movs	r3, #2
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	2300      	movs	r3, #0
 80078fa:	460a      	mov	r2, r1
 80078fc:	4911      	ldr	r1, [pc, #68]	@ (8007944 <xTimerCreateTimerTask+0x88>)
 80078fe:	4812      	ldr	r0, [pc, #72]	@ (8007948 <xTimerCreateTimerTask+0x8c>)
 8007900:	f7fe ff70 	bl	80067e4 <xTaskCreateStatic>
 8007904:	4603      	mov	r3, r0
 8007906:	4a11      	ldr	r2, [pc, #68]	@ (800794c <xTimerCreateTimerTask+0x90>)
 8007908:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800790a:	4b10      	ldr	r3, [pc, #64]	@ (800794c <xTimerCreateTimerTask+0x90>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007912:	2301      	movs	r3, #1
 8007914:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10b      	bne.n	8007934 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	613b      	str	r3, [r7, #16]
}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	e7fd      	b.n	8007930 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007934:	697b      	ldr	r3, [r7, #20]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000fbc 	.word	0x20000fbc
 8007944:	08009a7c 	.word	0x08009a7c
 8007948:	08007a89 	.word	0x08007a89
 800794c:	20000fc0 	.word	0x20000fc0

08007950 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08a      	sub	sp, #40	@ 0x28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800795e:	2300      	movs	r3, #0
 8007960:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10b      	bne.n	8007980 <xTimerGenericCommand+0x30>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	623b      	str	r3, [r7, #32]
}
 800797a:	bf00      	nop
 800797c:	bf00      	nop
 800797e:	e7fd      	b.n	800797c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007980:	4b19      	ldr	r3, [pc, #100]	@ (80079e8 <xTimerGenericCommand+0x98>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d02a      	beq.n	80079de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b05      	cmp	r3, #5
 8007998:	dc18      	bgt.n	80079cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800799a:	f7ff fdad 	bl	80074f8 <xTaskGetSchedulerState>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d109      	bne.n	80079b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079a4:	4b10      	ldr	r3, [pc, #64]	@ (80079e8 <xTimerGenericCommand+0x98>)
 80079a6:	6818      	ldr	r0, [r3, #0]
 80079a8:	f107 0110 	add.w	r1, r7, #16
 80079ac:	2300      	movs	r3, #0
 80079ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b0:	f7fe f930 	bl	8005c14 <xQueueGenericSend>
 80079b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80079b6:	e012      	b.n	80079de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079b8:	4b0b      	ldr	r3, [pc, #44]	@ (80079e8 <xTimerGenericCommand+0x98>)
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	f107 0110 	add.w	r1, r7, #16
 80079c0:	2300      	movs	r3, #0
 80079c2:	2200      	movs	r2, #0
 80079c4:	f7fe f926 	bl	8005c14 <xQueueGenericSend>
 80079c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80079ca:	e008      	b.n	80079de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079cc:	4b06      	ldr	r3, [pc, #24]	@ (80079e8 <xTimerGenericCommand+0x98>)
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	f107 0110 	add.w	r1, r7, #16
 80079d4:	2300      	movs	r3, #0
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	f7fe fa1e 	bl	8005e18 <xQueueGenericSendFromISR>
 80079dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3728      	adds	r7, #40	@ 0x28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000fbc 	.word	0x20000fbc

080079ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f6:	4b23      	ldr	r3, [pc, #140]	@ (8007a84 <prvProcessExpiredTimer+0x98>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	3304      	adds	r3, #4
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fd fe6f 	bl	80056e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d023      	beq.n	8007a60 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	699a      	ldr	r2, [r3, #24]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	18d1      	adds	r1, r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	6978      	ldr	r0, [r7, #20]
 8007a26:	f000 f8d5 	bl	8007bd4 <prvInsertTimerInActiveList>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d020      	beq.n	8007a72 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a30:	2300      	movs	r3, #0
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	2300      	movs	r3, #0
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	2100      	movs	r1, #0
 8007a3a:	6978      	ldr	r0, [r7, #20]
 8007a3c:	f7ff ff88 	bl	8007950 <xTimerGenericCommand>
 8007a40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d114      	bne.n	8007a72 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	60fb      	str	r3, [r7, #12]
}
 8007a5a:	bf00      	nop
 8007a5c:	bf00      	nop
 8007a5e:	e7fd      	b.n	8007a5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a66:	f023 0301 	bic.w	r3, r3, #1
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	6978      	ldr	r0, [r7, #20]
 8007a78:	4798      	blx	r3
}
 8007a7a:	bf00      	nop
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000fb4 	.word	0x20000fb4

08007a88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a90:	f107 0308 	add.w	r3, r7, #8
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 f859 	bl	8007b4c <prvGetNextExpireTime>
 8007a9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 f805 	bl	8007ab0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007aa6:	f000 f8d7 	bl	8007c58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007aaa:	bf00      	nop
 8007aac:	e7f0      	b.n	8007a90 <prvTimerTask+0x8>
	...

08007ab0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007aba:	f7ff f8ff 	bl	8006cbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007abe:	f107 0308 	add.w	r3, r7, #8
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 f866 	bl	8007b94 <prvSampleTimeNow>
 8007ac8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d130      	bne.n	8007b32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <prvProcessTimerOrBlockTask+0x3c>
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d806      	bhi.n	8007aec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ade:	f7ff f8fb 	bl	8006cd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ae2:	68f9      	ldr	r1, [r7, #12]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff ff81 	bl	80079ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007aea:	e024      	b.n	8007b36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d008      	beq.n	8007b04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007af2:	4b13      	ldr	r3, [pc, #76]	@ (8007b40 <prvProcessTimerOrBlockTask+0x90>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <prvProcessTimerOrBlockTask+0x50>
 8007afc:	2301      	movs	r3, #1
 8007afe:	e000      	b.n	8007b02 <prvProcessTimerOrBlockTask+0x52>
 8007b00:	2300      	movs	r3, #0
 8007b02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b04:	4b0f      	ldr	r3, [pc, #60]	@ (8007b44 <prvProcessTimerOrBlockTask+0x94>)
 8007b06:	6818      	ldr	r0, [r3, #0]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	4619      	mov	r1, r3
 8007b12:	f7fe fe33 	bl	800677c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b16:	f7ff f8df 	bl	8006cd8 <xTaskResumeAll>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10a      	bne.n	8007b36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b20:	4b09      	ldr	r3, [pc, #36]	@ (8007b48 <prvProcessTimerOrBlockTask+0x98>)
 8007b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	f3bf 8f6f 	isb	sy
}
 8007b30:	e001      	b.n	8007b36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b32:	f7ff f8d1 	bl	8006cd8 <xTaskResumeAll>
}
 8007b36:	bf00      	nop
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000fb8 	.word	0x20000fb8
 8007b44:	20000fbc 	.word	0x20000fbc
 8007b48:	e000ed04 	.word	0xe000ed04

08007b4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b54:	4b0e      	ldr	r3, [pc, #56]	@ (8007b90 <prvGetNextExpireTime+0x44>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <prvGetNextExpireTime+0x16>
 8007b5e:	2201      	movs	r2, #1
 8007b60:	e000      	b.n	8007b64 <prvGetNextExpireTime+0x18>
 8007b62:	2200      	movs	r2, #0
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d105      	bne.n	8007b7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b70:	4b07      	ldr	r3, [pc, #28]	@ (8007b90 <prvGetNextExpireTime+0x44>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	e001      	b.n	8007b80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b80:	68fb      	ldr	r3, [r7, #12]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	20000fb4 	.word	0x20000fb4

08007b94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b9c:	f7ff f93a 	bl	8006e14 <xTaskGetTickCount>
 8007ba0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd0 <prvSampleTimeNow+0x3c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d205      	bcs.n	8007bb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007bac:	f000 f93a 	bl	8007e24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	e002      	b.n	8007bbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007bbe:	4a04      	ldr	r2, [pc, #16]	@ (8007bd0 <prvSampleTimeNow+0x3c>)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000fc4 	.word	0x20000fc4

08007bd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007be2:	2300      	movs	r3, #0
 8007be4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d812      	bhi.n	8007c20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	1ad2      	subs	r2, r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d302      	bcc.n	8007c0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	e01b      	b.n	8007c46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c0e:	4b10      	ldr	r3, [pc, #64]	@ (8007c50 <prvInsertTimerInActiveList+0x7c>)
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	3304      	adds	r3, #4
 8007c16:	4619      	mov	r1, r3
 8007c18:	4610      	mov	r0, r2
 8007c1a:	f7fd fd2c 	bl	8005676 <vListInsert>
 8007c1e:	e012      	b.n	8007c46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d206      	bcs.n	8007c36 <prvInsertTimerInActiveList+0x62>
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d302      	bcc.n	8007c36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c30:	2301      	movs	r3, #1
 8007c32:	617b      	str	r3, [r7, #20]
 8007c34:	e007      	b.n	8007c46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c36:	4b07      	ldr	r3, [pc, #28]	@ (8007c54 <prvInsertTimerInActiveList+0x80>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4610      	mov	r0, r2
 8007c42:	f7fd fd18 	bl	8005676 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c46:	697b      	ldr	r3, [r7, #20]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	20000fb8 	.word	0x20000fb8
 8007c54:	20000fb4 	.word	0x20000fb4

08007c58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08e      	sub	sp, #56	@ 0x38
 8007c5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c5e:	e0ce      	b.n	8007dfe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	da19      	bge.n	8007c9a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c66:	1d3b      	adds	r3, r7, #4
 8007c68:	3304      	adds	r3, #4
 8007c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10b      	bne.n	8007c8a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	61fb      	str	r3, [r7, #28]
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	e7fd      	b.n	8007c86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c90:	6850      	ldr	r0, [r2, #4]
 8007c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c94:	6892      	ldr	r2, [r2, #8]
 8007c96:	4611      	mov	r1, r2
 8007c98:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f2c0 80ae 	blt.w	8007dfe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d004      	beq.n	8007cb8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fd fd18 	bl	80056e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cb8:	463b      	mov	r3, r7
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff ff6a 	bl	8007b94 <prvSampleTimeNow>
 8007cc0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b09      	cmp	r3, #9
 8007cc6:	f200 8097 	bhi.w	8007df8 <prvProcessReceivedCommands+0x1a0>
 8007cca:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd0 <prvProcessReceivedCommands+0x78>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007cf9 	.word	0x08007cf9
 8007cd4:	08007cf9 	.word	0x08007cf9
 8007cd8:	08007cf9 	.word	0x08007cf9
 8007cdc:	08007d6f 	.word	0x08007d6f
 8007ce0:	08007d83 	.word	0x08007d83
 8007ce4:	08007dcf 	.word	0x08007dcf
 8007ce8:	08007cf9 	.word	0x08007cf9
 8007cec:	08007cf9 	.word	0x08007cf9
 8007cf0:	08007d6f 	.word	0x08007d6f
 8007cf4:	08007d83 	.word	0x08007d83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cfe:	f043 0301 	orr.w	r3, r3, #1
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	18d1      	adds	r1, r2, r3
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d18:	f7ff ff5c 	bl	8007bd4 <prvInsertTimerInActiveList>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d06c      	beq.n	8007dfc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d061      	beq.n	8007dfc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	441a      	add	r2, r3
 8007d40:	2300      	movs	r3, #0
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	2100      	movs	r1, #0
 8007d48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d4a:	f7ff fe01 	bl	8007950 <xTimerGenericCommand>
 8007d4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d152      	bne.n	8007dfc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	61bb      	str	r3, [r7, #24]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d74:	f023 0301 	bic.w	r3, r3, #1
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d80:	e03d      	b.n	8007dfe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d88:	f043 0301 	orr.w	r3, r3, #1
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10b      	bne.n	8007dba <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	617b      	str	r3, [r7, #20]
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop
 8007db8:	e7fd      	b.n	8007db6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbc:	699a      	ldr	r2, [r3, #24]
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	18d1      	adds	r1, r2, r3
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dc8:	f7ff ff04 	bl	8007bd4 <prvInsertTimerInActiveList>
					break;
 8007dcc:	e017      	b.n	8007dfe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dd4:	f003 0302 	and.w	r3, r3, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d103      	bne.n	8007de4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007ddc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dde:	f000 fb63 	bl	80084a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007de2:	e00c      	b.n	8007dfe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dea:	f023 0301 	bic.w	r3, r3, #1
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007df6:	e002      	b.n	8007dfe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007df8:	bf00      	nop
 8007dfa:	e000      	b.n	8007dfe <prvProcessReceivedCommands+0x1a6>
					break;
 8007dfc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dfe:	4b08      	ldr	r3, [pc, #32]	@ (8007e20 <prvProcessReceivedCommands+0x1c8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	1d39      	adds	r1, r7, #4
 8007e04:	2200      	movs	r2, #0
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe f8a4 	bl	8005f54 <xQueueReceive>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f47f af26 	bne.w	8007c60 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop
 8007e18:	3730      	adds	r7, #48	@ 0x30
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000fbc 	.word	0x20000fbc

08007e24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e2a:	e049      	b.n	8007ec0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e36:	4b2c      	ldr	r3, [pc, #176]	@ (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3304      	adds	r3, #4
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fd fc4f 	bl	80056e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d02f      	beq.n	8007ec0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4413      	add	r3, r2
 8007e68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d90e      	bls.n	8007e90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3304      	adds	r3, #4
 8007e86:	4619      	mov	r1, r3
 8007e88:	4610      	mov	r0, r2
 8007e8a:	f7fd fbf4 	bl	8005676 <vListInsert>
 8007e8e:	e017      	b.n	8007ec0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e90:	2300      	movs	r3, #0
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	2300      	movs	r3, #0
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7ff fd58 	bl	8007950 <xTimerGenericCommand>
 8007ea0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10b      	bne.n	8007ec0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	603b      	str	r3, [r7, #0]
}
 8007eba:	bf00      	nop
 8007ebc:	bf00      	nop
 8007ebe:	e7fd      	b.n	8007ebc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ec0:	4b09      	ldr	r3, [pc, #36]	@ (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1b0      	bne.n	8007e2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007eca:	4b07      	ldr	r3, [pc, #28]	@ (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ed0:	4b06      	ldr	r3, [pc, #24]	@ (8007eec <prvSwitchTimerLists+0xc8>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a04      	ldr	r2, [pc, #16]	@ (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007ed6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ed8:	4a04      	ldr	r2, [pc, #16]	@ (8007eec <prvSwitchTimerLists+0xc8>)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	6013      	str	r3, [r2, #0]
}
 8007ede:	bf00      	nop
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000fb4 	.word	0x20000fb4
 8007eec:	20000fb8 	.word	0x20000fb8

08007ef0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ef6:	f000 f96f 	bl	80081d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007efa:	4b15      	ldr	r3, [pc, #84]	@ (8007f50 <prvCheckForValidListAndQueue+0x60>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d120      	bne.n	8007f44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f02:	4814      	ldr	r0, [pc, #80]	@ (8007f54 <prvCheckForValidListAndQueue+0x64>)
 8007f04:	f7fd fb66 	bl	80055d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f08:	4813      	ldr	r0, [pc, #76]	@ (8007f58 <prvCheckForValidListAndQueue+0x68>)
 8007f0a:	f7fd fb63 	bl	80055d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f0e:	4b13      	ldr	r3, [pc, #76]	@ (8007f5c <prvCheckForValidListAndQueue+0x6c>)
 8007f10:	4a10      	ldr	r2, [pc, #64]	@ (8007f54 <prvCheckForValidListAndQueue+0x64>)
 8007f12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f14:	4b12      	ldr	r3, [pc, #72]	@ (8007f60 <prvCheckForValidListAndQueue+0x70>)
 8007f16:	4a10      	ldr	r2, [pc, #64]	@ (8007f58 <prvCheckForValidListAndQueue+0x68>)
 8007f18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	4b11      	ldr	r3, [pc, #68]	@ (8007f64 <prvCheckForValidListAndQueue+0x74>)
 8007f20:	4a11      	ldr	r2, [pc, #68]	@ (8007f68 <prvCheckForValidListAndQueue+0x78>)
 8007f22:	2110      	movs	r1, #16
 8007f24:	200a      	movs	r0, #10
 8007f26:	f7fd fc73 	bl	8005810 <xQueueGenericCreateStatic>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	4a08      	ldr	r2, [pc, #32]	@ (8007f50 <prvCheckForValidListAndQueue+0x60>)
 8007f2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f30:	4b07      	ldr	r3, [pc, #28]	@ (8007f50 <prvCheckForValidListAndQueue+0x60>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d005      	beq.n	8007f44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f38:	4b05      	ldr	r3, [pc, #20]	@ (8007f50 <prvCheckForValidListAndQueue+0x60>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	490b      	ldr	r1, [pc, #44]	@ (8007f6c <prvCheckForValidListAndQueue+0x7c>)
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe fbc8 	bl	80066d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f44:	f000 f97a 	bl	800823c <vPortExitCritical>
}
 8007f48:	bf00      	nop
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000fbc 	.word	0x20000fbc
 8007f54:	20000f8c 	.word	0x20000f8c
 8007f58:	20000fa0 	.word	0x20000fa0
 8007f5c:	20000fb4 	.word	0x20000fb4
 8007f60:	20000fb8 	.word	0x20000fb8
 8007f64:	20001068 	.word	0x20001068
 8007f68:	20000fc8 	.word	0x20000fc8
 8007f6c:	08009a84 	.word	0x08009a84

08007f70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3b04      	subs	r3, #4
 8007f80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3b04      	subs	r3, #4
 8007f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	f023 0201 	bic.w	r2, r3, #1
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3b04      	subs	r3, #4
 8007f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8007fd4 <pxPortInitialiseStack+0x64>)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	3b14      	subs	r3, #20
 8007faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3b04      	subs	r3, #4
 8007fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f06f 0202 	mvn.w	r2, #2
 8007fbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	3b20      	subs	r3, #32
 8007fc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	08007fd9 	.word	0x08007fd9

08007fd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fe2:	4b13      	ldr	r3, [pc, #76]	@ (8008030 <prvTaskExitError+0x58>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fea:	d00b      	beq.n	8008004 <prvTaskExitError+0x2c>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	60fb      	str	r3, [r7, #12]
}
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	e7fd      	b.n	8008000 <prvTaskExitError+0x28>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	60bb      	str	r3, [r7, #8]
}
 8008016:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008018:	bf00      	nop
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d0fc      	beq.n	800801a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	200000d4 	.word	0x200000d4
	...

08008040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008040:	4b07      	ldr	r3, [pc, #28]	@ (8008060 <pxCurrentTCBConst2>)
 8008042:	6819      	ldr	r1, [r3, #0]
 8008044:	6808      	ldr	r0, [r1, #0]
 8008046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804a:	f380 8809 	msr	PSP, r0
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f04f 0000 	mov.w	r0, #0
 8008056:	f380 8811 	msr	BASEPRI, r0
 800805a:	4770      	bx	lr
 800805c:	f3af 8000 	nop.w

08008060 <pxCurrentTCBConst2>:
 8008060:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008064:	bf00      	nop
 8008066:	bf00      	nop

08008068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008068:	4808      	ldr	r0, [pc, #32]	@ (800808c <prvPortStartFirstTask+0x24>)
 800806a:	6800      	ldr	r0, [r0, #0]
 800806c:	6800      	ldr	r0, [r0, #0]
 800806e:	f380 8808 	msr	MSP, r0
 8008072:	f04f 0000 	mov.w	r0, #0
 8008076:	f380 8814 	msr	CONTROL, r0
 800807a:	b662      	cpsie	i
 800807c:	b661      	cpsie	f
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	df00      	svc	0
 8008088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800808a:	bf00      	nop
 800808c:	e000ed08 	.word	0xe000ed08

08008090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008096:	4b47      	ldr	r3, [pc, #284]	@ (80081b4 <xPortStartScheduler+0x124>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a47      	ldr	r2, [pc, #284]	@ (80081b8 <xPortStartScheduler+0x128>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d10b      	bne.n	80080b8 <xPortStartScheduler+0x28>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	613b      	str	r3, [r7, #16]
}
 80080b2:	bf00      	nop
 80080b4:	bf00      	nop
 80080b6:	e7fd      	b.n	80080b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080b8:	4b3e      	ldr	r3, [pc, #248]	@ (80081b4 <xPortStartScheduler+0x124>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a3f      	ldr	r2, [pc, #252]	@ (80081bc <xPortStartScheduler+0x12c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d10b      	bne.n	80080da <xPortStartScheduler+0x4a>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	60fb      	str	r3, [r7, #12]
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop
 80080d8:	e7fd      	b.n	80080d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080da:	4b39      	ldr	r3, [pc, #228]	@ (80081c0 <xPortStartScheduler+0x130>)
 80080dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	22ff      	movs	r2, #255	@ 0xff
 80080ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	4b31      	ldr	r3, [pc, #196]	@ (80081c4 <xPortStartScheduler+0x134>)
 8008100:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008102:	4b31      	ldr	r3, [pc, #196]	@ (80081c8 <xPortStartScheduler+0x138>)
 8008104:	2207      	movs	r2, #7
 8008106:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008108:	e009      	b.n	800811e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800810a:	4b2f      	ldr	r3, [pc, #188]	@ (80081c8 <xPortStartScheduler+0x138>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3b01      	subs	r3, #1
 8008110:	4a2d      	ldr	r2, [pc, #180]	@ (80081c8 <xPortStartScheduler+0x138>)
 8008112:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008114:	78fb      	ldrb	r3, [r7, #3]
 8008116:	b2db      	uxtb	r3, r3
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	b2db      	uxtb	r3, r3
 800811c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800811e:	78fb      	ldrb	r3, [r7, #3]
 8008120:	b2db      	uxtb	r3, r3
 8008122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008126:	2b80      	cmp	r3, #128	@ 0x80
 8008128:	d0ef      	beq.n	800810a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800812a:	4b27      	ldr	r3, [pc, #156]	@ (80081c8 <xPortStartScheduler+0x138>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f1c3 0307 	rsb	r3, r3, #7
 8008132:	2b04      	cmp	r3, #4
 8008134:	d00b      	beq.n	800814e <xPortStartScheduler+0xbe>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	60bb      	str	r3, [r7, #8]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800814e:	4b1e      	ldr	r3, [pc, #120]	@ (80081c8 <xPortStartScheduler+0x138>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	4a1c      	ldr	r2, [pc, #112]	@ (80081c8 <xPortStartScheduler+0x138>)
 8008156:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008158:	4b1b      	ldr	r3, [pc, #108]	@ (80081c8 <xPortStartScheduler+0x138>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008160:	4a19      	ldr	r2, [pc, #100]	@ (80081c8 <xPortStartScheduler+0x138>)
 8008162:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	b2da      	uxtb	r2, r3
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800816c:	4b17      	ldr	r3, [pc, #92]	@ (80081cc <xPortStartScheduler+0x13c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a16      	ldr	r2, [pc, #88]	@ (80081cc <xPortStartScheduler+0x13c>)
 8008172:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008176:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008178:	4b14      	ldr	r3, [pc, #80]	@ (80081cc <xPortStartScheduler+0x13c>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a13      	ldr	r2, [pc, #76]	@ (80081cc <xPortStartScheduler+0x13c>)
 800817e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008182:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008184:	f000 f8da 	bl	800833c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008188:	4b11      	ldr	r3, [pc, #68]	@ (80081d0 <xPortStartScheduler+0x140>)
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800818e:	f000 f8f9 	bl	8008384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008192:	4b10      	ldr	r3, [pc, #64]	@ (80081d4 <xPortStartScheduler+0x144>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a0f      	ldr	r2, [pc, #60]	@ (80081d4 <xPortStartScheduler+0x144>)
 8008198:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800819c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800819e:	f7ff ff63 	bl	8008068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081a2:	f7fe ff01 	bl	8006fa8 <vTaskSwitchContext>
	prvTaskExitError();
 80081a6:	f7ff ff17 	bl	8007fd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	e000ed00 	.word	0xe000ed00
 80081b8:	410fc271 	.word	0x410fc271
 80081bc:	410fc270 	.word	0x410fc270
 80081c0:	e000e400 	.word	0xe000e400
 80081c4:	200010b8 	.word	0x200010b8
 80081c8:	200010bc 	.word	0x200010bc
 80081cc:	e000ed20 	.word	0xe000ed20
 80081d0:	200000d4 	.word	0x200000d4
 80081d4:	e000ef34 	.word	0xe000ef34

080081d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	607b      	str	r3, [r7, #4]
}
 80081f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081f2:	4b10      	ldr	r3, [pc, #64]	@ (8008234 <vPortEnterCritical+0x5c>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3301      	adds	r3, #1
 80081f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008234 <vPortEnterCritical+0x5c>)
 80081fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008234 <vPortEnterCritical+0x5c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d110      	bne.n	8008226 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008204:	4b0c      	ldr	r3, [pc, #48]	@ (8008238 <vPortEnterCritical+0x60>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00b      	beq.n	8008226 <vPortEnterCritical+0x4e>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	603b      	str	r3, [r7, #0]
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	e7fd      	b.n	8008222 <vPortEnterCritical+0x4a>
	}
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	200000d4 	.word	0x200000d4
 8008238:	e000ed04 	.word	0xe000ed04

0800823c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008242:	4b12      	ldr	r3, [pc, #72]	@ (800828c <vPortExitCritical+0x50>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10b      	bne.n	8008262 <vPortExitCritical+0x26>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	607b      	str	r3, [r7, #4]
}
 800825c:	bf00      	nop
 800825e:	bf00      	nop
 8008260:	e7fd      	b.n	800825e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008262:	4b0a      	ldr	r3, [pc, #40]	@ (800828c <vPortExitCritical+0x50>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3b01      	subs	r3, #1
 8008268:	4a08      	ldr	r2, [pc, #32]	@ (800828c <vPortExitCritical+0x50>)
 800826a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800826c:	4b07      	ldr	r3, [pc, #28]	@ (800828c <vPortExitCritical+0x50>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d105      	bne.n	8008280 <vPortExitCritical+0x44>
 8008274:	2300      	movs	r3, #0
 8008276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	f383 8811 	msr	BASEPRI, r3
}
 800827e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	200000d4 	.word	0x200000d4

08008290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008290:	f3ef 8009 	mrs	r0, PSP
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	4b15      	ldr	r3, [pc, #84]	@ (80082f0 <pxCurrentTCBConst>)
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	f01e 0f10 	tst.w	lr, #16
 80082a0:	bf08      	it	eq
 80082a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082aa:	6010      	str	r0, [r2, #0]
 80082ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80082b4:	f380 8811 	msr	BASEPRI, r0
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f7fe fe72 	bl	8006fa8 <vTaskSwitchContext>
 80082c4:	f04f 0000 	mov.w	r0, #0
 80082c8:	f380 8811 	msr	BASEPRI, r0
 80082cc:	bc09      	pop	{r0, r3}
 80082ce:	6819      	ldr	r1, [r3, #0]
 80082d0:	6808      	ldr	r0, [r1, #0]
 80082d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d6:	f01e 0f10 	tst.w	lr, #16
 80082da:	bf08      	it	eq
 80082dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082e0:	f380 8809 	msr	PSP, r0
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	f3af 8000 	nop.w

080082f0 <pxCurrentTCBConst>:
 80082f0:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082f4:	bf00      	nop
 80082f6:	bf00      	nop

080082f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	607b      	str	r3, [r7, #4]
}
 8008310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008312:	f7fe fd8f 	bl	8006e34 <xTaskIncrementTick>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d003      	beq.n	8008324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800831c:	4b06      	ldr	r3, [pc, #24]	@ (8008338 <xPortSysTickHandler+0x40>)
 800831e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	2300      	movs	r3, #0
 8008326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	f383 8811 	msr	BASEPRI, r3
}
 800832e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	e000ed04 	.word	0xe000ed04

0800833c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008340:	4b0b      	ldr	r3, [pc, #44]	@ (8008370 <vPortSetupTimerInterrupt+0x34>)
 8008342:	2200      	movs	r2, #0
 8008344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008346:	4b0b      	ldr	r3, [pc, #44]	@ (8008374 <vPortSetupTimerInterrupt+0x38>)
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800834c:	4b0a      	ldr	r3, [pc, #40]	@ (8008378 <vPortSetupTimerInterrupt+0x3c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a0a      	ldr	r2, [pc, #40]	@ (800837c <vPortSetupTimerInterrupt+0x40>)
 8008352:	fba2 2303 	umull	r2, r3, r2, r3
 8008356:	099b      	lsrs	r3, r3, #6
 8008358:	4a09      	ldr	r2, [pc, #36]	@ (8008380 <vPortSetupTimerInterrupt+0x44>)
 800835a:	3b01      	subs	r3, #1
 800835c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800835e:	4b04      	ldr	r3, [pc, #16]	@ (8008370 <vPortSetupTimerInterrupt+0x34>)
 8008360:	2207      	movs	r2, #7
 8008362:	601a      	str	r2, [r3, #0]
}
 8008364:	bf00      	nop
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	e000e010 	.word	0xe000e010
 8008374:	e000e018 	.word	0xe000e018
 8008378:	200000c8 	.word	0x200000c8
 800837c:	10624dd3 	.word	0x10624dd3
 8008380:	e000e014 	.word	0xe000e014

08008384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008384:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008394 <vPortEnableVFP+0x10>
 8008388:	6801      	ldr	r1, [r0, #0]
 800838a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800838e:	6001      	str	r1, [r0, #0]
 8008390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008392:	bf00      	nop
 8008394:	e000ed88 	.word	0xe000ed88

08008398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800839e:	f3ef 8305 	mrs	r3, IPSR
 80083a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b0f      	cmp	r3, #15
 80083a8:	d915      	bls.n	80083d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083aa:	4a18      	ldr	r2, [pc, #96]	@ (800840c <vPortValidateInterruptPriority+0x74>)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4413      	add	r3, r2
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083b4:	4b16      	ldr	r3, [pc, #88]	@ (8008410 <vPortValidateInterruptPriority+0x78>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	7afa      	ldrb	r2, [r7, #11]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d20b      	bcs.n	80083d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	607b      	str	r3, [r7, #4]
}
 80083d0:	bf00      	nop
 80083d2:	bf00      	nop
 80083d4:	e7fd      	b.n	80083d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008414 <vPortValidateInterruptPriority+0x7c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80083de:	4b0e      	ldr	r3, [pc, #56]	@ (8008418 <vPortValidateInterruptPriority+0x80>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d90b      	bls.n	80083fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	603b      	str	r3, [r7, #0]
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	e7fd      	b.n	80083fa <vPortValidateInterruptPriority+0x62>
	}
 80083fe:	bf00      	nop
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	e000e3f0 	.word	0xe000e3f0
 8008410:	200010b8 	.word	0x200010b8
 8008414:	e000ed0c 	.word	0xe000ed0c
 8008418:	200010bc 	.word	0x200010bc

0800841c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8008424:	2300      	movs	r3, #0
 8008426:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f003 0307 	and.w	r3, r3, #7
 800842e:	2b00      	cmp	r3, #0
 8008430:	d004      	beq.n	800843c <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f023 0307 	bic.w	r3, r3, #7
 8008438:	3308      	adds	r3, #8
 800843a:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800843c:	f7fe fc3e 	bl	8006cbc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8008440:	4b16      	ldr	r3, [pc, #88]	@ (800849c <pvPortMalloc+0x80>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d105      	bne.n	8008454 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8008448:	4b15      	ldr	r3, [pc, #84]	@ (80084a0 <pvPortMalloc+0x84>)
 800844a:	f023 0307 	bic.w	r3, r3, #7
 800844e:	461a      	mov	r2, r3
 8008450:	4b12      	ldr	r3, [pc, #72]	@ (800849c <pvPortMalloc+0x80>)
 8008452:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8008454:	4b13      	ldr	r3, [pc, #76]	@ (80084a4 <pvPortMalloc+0x88>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4413      	add	r3, r2
 800845c:	f643 32f7 	movw	r2, #15351	@ 0x3bf7
 8008460:	4293      	cmp	r3, r2
 8008462:	d813      	bhi.n	800848c <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8008464:	4b0f      	ldr	r3, [pc, #60]	@ (80084a4 <pvPortMalloc+0x88>)
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	441a      	add	r2, r3
 800846c:	4b0d      	ldr	r3, [pc, #52]	@ (80084a4 <pvPortMalloc+0x88>)
 800846e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8008470:	429a      	cmp	r2, r3
 8008472:	d90b      	bls.n	800848c <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8008474:	4b09      	ldr	r3, [pc, #36]	@ (800849c <pvPortMalloc+0x80>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	4b0a      	ldr	r3, [pc, #40]	@ (80084a4 <pvPortMalloc+0x88>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4413      	add	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8008480:	4b08      	ldr	r3, [pc, #32]	@ (80084a4 <pvPortMalloc+0x88>)
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4413      	add	r3, r2
 8008488:	4a06      	ldr	r2, [pc, #24]	@ (80084a4 <pvPortMalloc+0x88>)
 800848a:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800848c:	f7fe fc24 	bl	8006cd8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8008490:	68fb      	ldr	r3, [r7, #12]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	20004cc4 	.word	0x20004cc4
 80084a0:	200010c8 	.word	0x200010c8
 80084a4:	20004cc0 	.word	0x20004cc0

080084a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00b      	beq.n	80084ce <vPortFree+0x26>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	60fb      	str	r3, [r7, #12]
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	e7fd      	b.n	80084ca <vPortFree+0x22>
}
 80084ce:	bf00      	nop
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
	...

080084dc <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80084e0:	4814      	ldr	r0, [pc, #80]	@ (8008534 <I2Cx_Init+0x58>)
 80084e2:	f7fa fc53 	bl	8002d8c <HAL_I2C_GetState>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d121      	bne.n	8008530 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 80084ec:	4b11      	ldr	r3, [pc, #68]	@ (8008534 <I2Cx_Init+0x58>)
 80084ee:	4a12      	ldr	r2, [pc, #72]	@ (8008538 <I2Cx_Init+0x5c>)
 80084f0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80084f2:	4b10      	ldr	r3, [pc, #64]	@ (8008534 <I2Cx_Init+0x58>)
 80084f4:	2243      	movs	r2, #67	@ 0x43
 80084f6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80084f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008534 <I2Cx_Init+0x58>)
 80084fa:	4a10      	ldr	r2, [pc, #64]	@ (800853c <I2Cx_Init+0x60>)
 80084fc:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80084fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008534 <I2Cx_Init+0x58>)
 8008500:	2200      	movs	r2, #0
 8008502:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008504:	4b0b      	ldr	r3, [pc, #44]	@ (8008534 <I2Cx_Init+0x58>)
 8008506:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800850a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800850c:	4b09      	ldr	r3, [pc, #36]	@ (8008534 <I2Cx_Init+0x58>)
 800850e:	2200      	movs	r2, #0
 8008510:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8008512:	4b08      	ldr	r3, [pc, #32]	@ (8008534 <I2Cx_Init+0x58>)
 8008514:	2200      	movs	r2, #0
 8008516:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8008518:	4b06      	ldr	r3, [pc, #24]	@ (8008534 <I2Cx_Init+0x58>)
 800851a:	2200      	movs	r2, #0
 800851c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800851e:	4b05      	ldr	r3, [pc, #20]	@ (8008534 <I2Cx_Init+0x58>)
 8008520:	2200      	movs	r2, #0
 8008522:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8008524:	4803      	ldr	r0, [pc, #12]	@ (8008534 <I2Cx_Init+0x58>)
 8008526:	f000 f86b 	bl	8008600 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800852a:	4802      	ldr	r0, [pc, #8]	@ (8008534 <I2Cx_Init+0x58>)
 800852c:	f7f9 ff8e 	bl	800244c <HAL_I2C_Init>
  }
}
 8008530:	bf00      	nop
 8008532:	bd80      	pop	{r7, pc}
 8008534:	20004cc8 	.word	0x20004cc8
 8008538:	40005400 	.word	0x40005400
 800853c:	000186a0 	.word	0x000186a0

08008540 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af04      	add	r7, sp, #16
 8008546:	4603      	mov	r3, r0
 8008548:	80fb      	strh	r3, [r7, #6]
 800854a:	460b      	mov	r3, r1
 800854c:	717b      	strb	r3, [r7, #5]
 800854e:	4613      	mov	r3, r2
 8008550:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8008556:	797b      	ldrb	r3, [r7, #5]
 8008558:	b29a      	uxth	r2, r3
 800855a:	4b0b      	ldr	r3, [pc, #44]	@ (8008588 <I2Cx_WriteData+0x48>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	88f9      	ldrh	r1, [r7, #6]
 8008560:	9302      	str	r3, [sp, #8]
 8008562:	2301      	movs	r3, #1
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	1d3b      	adds	r3, r7, #4
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	2301      	movs	r3, #1
 800856c:	4807      	ldr	r0, [pc, #28]	@ (800858c <I2Cx_WriteData+0x4c>)
 800856e:	f7fa f8e1 	bl	8002734 <HAL_I2C_Mem_Write>
 8008572:	4603      	mov	r3, r0
 8008574:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800857c:	f000 f834 	bl	80085e8 <I2Cx_Error>
  }
}
 8008580:	bf00      	nop
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	200000d8 	.word	0x200000d8
 800858c:	20004cc8 	.word	0x20004cc8

08008590 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af04      	add	r7, sp, #16
 8008596:	4603      	mov	r3, r0
 8008598:	460a      	mov	r2, r1
 800859a:	80fb      	strh	r3, [r7, #6]
 800859c:	4613      	mov	r3, r2
 800859e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80085a8:	797b      	ldrb	r3, [r7, #5]
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	4b0c      	ldr	r3, [pc, #48]	@ (80085e0 <I2Cx_ReadData+0x50>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	88f9      	ldrh	r1, [r7, #6]
 80085b2:	9302      	str	r3, [sp, #8]
 80085b4:	2301      	movs	r3, #1
 80085b6:	9301      	str	r3, [sp, #4]
 80085b8:	f107 030e 	add.w	r3, r7, #14
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	2301      	movs	r3, #1
 80085c0:	4808      	ldr	r0, [pc, #32]	@ (80085e4 <I2Cx_ReadData+0x54>)
 80085c2:	f7fa f9b1 	bl	8002928 <HAL_I2C_Mem_Read>
 80085c6:	4603      	mov	r3, r0
 80085c8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80085d0:	f000 f80a 	bl	80085e8 <I2Cx_Error>
  }
  return value;
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	200000d8 	.word	0x200000d8
 80085e4:	20004cc8 	.word	0x20004cc8

080085e8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80085ec:	4803      	ldr	r0, [pc, #12]	@ (80085fc <I2Cx_Error+0x14>)
 80085ee:	f7fa f871 	bl	80026d4 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C communication BUS */
  I2Cx_Init();
 80085f2:	f7ff ff73 	bl	80084dc <I2Cx_Init>
}
 80085f6:	bf00      	nop
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20004cc8 	.word	0x20004cc8

08008600 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	@ 0x28
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8008608:	2300      	movs	r3, #0
 800860a:	613b      	str	r3, [r7, #16]
 800860c:	4b25      	ldr	r3, [pc, #148]	@ (80086a4 <I2Cx_MspInit+0xa4>)
 800860e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008610:	4a24      	ldr	r2, [pc, #144]	@ (80086a4 <I2Cx_MspInit+0xa4>)
 8008612:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008616:	6413      	str	r3, [r2, #64]	@ 0x40
 8008618:	4b22      	ldr	r3, [pc, #136]	@ (80086a4 <I2Cx_MspInit+0xa4>)
 800861a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800861c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008620:	613b      	str	r3, [r7, #16]
 8008622:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8008624:	2300      	movs	r3, #0
 8008626:	60fb      	str	r3, [r7, #12]
 8008628:	4b1e      	ldr	r3, [pc, #120]	@ (80086a4 <I2Cx_MspInit+0xa4>)
 800862a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800862c:	4a1d      	ldr	r2, [pc, #116]	@ (80086a4 <I2Cx_MspInit+0xa4>)
 800862e:	f043 0302 	orr.w	r3, r3, #2
 8008632:	6313      	str	r3, [r2, #48]	@ 0x30
 8008634:	4b1b      	ldr	r3, [pc, #108]	@ (80086a4 <I2Cx_MspInit+0xa4>)
 8008636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	60fb      	str	r3, [r7, #12]
 800863e:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8008640:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8008644:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8008646:	2312      	movs	r3, #18
 8008648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800864a:	2300      	movs	r3, #0
 800864c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800864e:	2302      	movs	r3, #2
 8008650:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8008652:	2304      	movs	r3, #4
 8008654:	627b      	str	r3, [r7, #36]	@ 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8008656:	f107 0314 	add.w	r3, r7, #20
 800865a:	4619      	mov	r1, r3
 800865c:	4812      	ldr	r0, [pc, #72]	@ (80086a8 <I2Cx_MspInit+0xa8>)
 800865e:	f7f9 fc59 	bl	8001f14 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8008662:	4b10      	ldr	r3, [pc, #64]	@ (80086a4 <I2Cx_MspInit+0xa4>)
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	4a0f      	ldr	r2, [pc, #60]	@ (80086a4 <I2Cx_MspInit+0xa4>)
 8008668:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800866c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800866e:	4b0d      	ldr	r3, [pc, #52]	@ (80086a4 <I2Cx_MspInit+0xa4>)
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	4a0c      	ldr	r2, [pc, #48]	@ (80086a4 <I2Cx_MspInit+0xa4>)
 8008674:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008678:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800867a:	2200      	movs	r2, #0
 800867c:	210f      	movs	r1, #15
 800867e:	201f      	movs	r0, #31
 8008680:	f7f9 fc1e 	bl	8001ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8008684:	201f      	movs	r0, #31
 8008686:	f7f9 fc37 	bl	8001ef8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800868a:	2200      	movs	r2, #0
 800868c:	210f      	movs	r1, #15
 800868e:	2020      	movs	r0, #32
 8008690:	f7f9 fc16 	bl	8001ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8008694:	2020      	movs	r0, #32
 8008696:	f7f9 fc2f 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
}
 800869a:	bf00      	nop
 800869c:	3728      	adds	r7, #40	@ 0x28
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40023800 	.word	0x40023800
 80086a8:	40020400 	.word	0x40020400

080086ac <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80086b2:	2300      	movs	r3, #0
 80086b4:	603b      	str	r3, [r7, #0]
 80086b6:	4b0f      	ldr	r3, [pc, #60]	@ (80086f4 <COMPASSACCELERO_IO_Init+0x48>)
 80086b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ba:	4a0e      	ldr	r2, [pc, #56]	@ (80086f4 <COMPASSACCELERO_IO_Init+0x48>)
 80086bc:	f043 0310 	orr.w	r3, r3, #16
 80086c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80086c2:	4b0c      	ldr	r3, [pc, #48]	@ (80086f4 <COMPASSACCELERO_IO_Init+0x48>)
 80086c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c6:	f003 0310 	and.w	r3, r3, #16
 80086ca:	603b      	str	r3, [r7, #0]
 80086cc:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 80086ce:	2304      	movs	r3, #4
 80086d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80086d2:	2300      	movs	r3, #0
 80086d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80086da:	2302      	movs	r3, #2
 80086dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80086de:	1d3b      	adds	r3, r7, #4
 80086e0:	4619      	mov	r1, r3
 80086e2:	4805      	ldr	r0, [pc, #20]	@ (80086f8 <COMPASSACCELERO_IO_Init+0x4c>)
 80086e4:	f7f9 fc16 	bl	8001f14 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80086e8:	f7ff fef8 	bl	80084dc <I2Cx_Init>
}
 80086ec:	bf00      	nop
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	40023800 	.word	0x40023800
 80086f8:	40021000 	.word	0x40021000

080086fc <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8008702:	2300      	movs	r3, #0
 8008704:	603b      	str	r3, [r7, #0]
 8008706:	4b13      	ldr	r3, [pc, #76]	@ (8008754 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8008708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800870a:	4a12      	ldr	r2, [pc, #72]	@ (8008754 <COMPASSACCELERO_IO_ITConfig+0x58>)
 800870c:	f043 0310 	orr.w	r3, r3, #16
 8008710:	6313      	str	r3, [r2, #48]	@ 0x30
 8008712:	4b10      	ldr	r3, [pc, #64]	@ (8008754 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8008714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008716:	f003 0310 	and.w	r3, r3, #16
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800871e:	2330      	movs	r3, #48	@ 0x30
 8008720:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8008722:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8008726:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8008728:	2302      	movs	r3, #2
 800872a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8008730:	1d3b      	adds	r3, r7, #4
 8008732:	4619      	mov	r1, r3
 8008734:	4808      	ldr	r0, [pc, #32]	@ (8008758 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8008736:	f7f9 fbed 	bl	8001f14 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 800873a:	2200      	movs	r2, #0
 800873c:	210f      	movs	r1, #15
 800873e:	200a      	movs	r0, #10
 8008740:	f7f9 fbbe 	bl	8001ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8008744:	200a      	movs	r0, #10
 8008746:	f7f9 fbd7 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
}
 800874a:	bf00      	nop
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	40023800 	.word	0x40023800
 8008758:	40021000 	.word	0x40021000

0800875c <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	80fb      	strh	r3, [r7, #6]
 8008766:	460b      	mov	r3, r1
 8008768:	717b      	strb	r3, [r7, #5]
 800876a:	4613      	mov	r3, r2
 800876c:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 800876e:	793a      	ldrb	r2, [r7, #4]
 8008770:	7979      	ldrb	r1, [r7, #5]
 8008772:	88fb      	ldrh	r3, [r7, #6]
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff fee3 	bl	8008540 <I2Cx_WriteData>
}
 800877a:	bf00      	nop
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b082      	sub	sp, #8
 8008786:	af00      	add	r7, sp, #0
 8008788:	4603      	mov	r3, r0
 800878a:	460a      	mov	r2, r1
 800878c:	80fb      	strh	r3, [r7, #6]
 800878e:	4613      	mov	r3, r2
 8008790:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8008792:	797a      	ldrb	r2, [r7, #5]
 8008794:	88fb      	ldrh	r3, [r7, #6]
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff fef9 	bl	8008590 <I2Cx_ReadData>
 800879e:	4603      	mov	r3, r0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 80087b2:	2300      	movs	r3, #0
 80087b4:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 80087b6:	1d3b      	adds	r3, r7, #4
 80087b8:	2200      	movs	r2, #0
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 80087be:	4b58      	ldr	r3, [pc, #352]	@ (8008920 <BSP_ACCELERO_Init+0x178>)
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	4798      	blx	r3
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b33      	cmp	r3, #51	@ 0x33
 80087c8:	d14f      	bne.n	800886a <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 80087ca:	4b56      	ldr	r3, [pc, #344]	@ (8008924 <BSP_ACCELERO_Init+0x17c>)
 80087cc:	4a54      	ldr	r2, [pc, #336]	@ (8008920 <BSP_ACCELERO_Init+0x178>)
 80087ce:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 80087d0:	2300      	movs	r3, #0
 80087d2:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_200_HZ;
 80087d4:	2360      	movs	r3, #96	@ 0x60
 80087d6:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 80087d8:	2307      	movs	r3, #7
 80087da:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 80087dc:	2300      	movs	r3, #0
 80087de:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 80087e0:	2300      	movs	r3, #0
 80087e2:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 80087e4:	2300      	movs	r3, #0
 80087e6:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 80087e8:	2308      	movs	r3, #8
 80087ea:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80087ec:	7b3a      	ldrb	r2, [r7, #12]
 80087ee:	7b7b      	ldrb	r3, [r7, #13]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80087f6:	4313      	orrs	r3, r2
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	461a      	mov	r2, r3
 80087fc:	8abb      	ldrh	r3, [r7, #20]
 80087fe:	4313      	orrs	r3, r2
 8008800:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8008802:	7c3a      	ldrb	r2, [r7, #16]
 8008804:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8008806:	4313      	orrs	r3, r2
 8008808:	b2da      	uxtb	r2, r3
 800880a:	7cbb      	ldrb	r3, [r7, #18]
 800880c:	4313      	orrs	r3, r2
 800880e:	b2da      	uxtb	r2, r3
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	4313      	orrs	r3, r2
 8008814:	b2db      	uxtb	r3, r3
 8008816:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8008818:	b21a      	sxth	r2, r3
 800881a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800881e:	4313      	orrs	r3, r2
 8008820:	b21b      	sxth	r3, r3
 8008822:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8008824:	4b3f      	ldr	r3, [pc, #252]	@ (8008924 <BSP_ACCELERO_Init+0x17c>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	8aba      	ldrh	r2, [r7, #20]
 800882c:	4610      	mov	r0, r2
 800882e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8008830:	2380      	movs	r3, #128	@ 0x80
 8008832:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8008834:	2310      	movs	r3, #16
 8008836:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8008838:	2300      	movs	r3, #0
 800883a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 800883c:	2300      	movs	r3, #0
 800883e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8008840:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8008842:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8008844:	4313      	orrs	r3, r2
 8008846:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8008848:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800884a:	4313      	orrs	r3, r2
 800884c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800884e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8008850:	4313      	orrs	r3, r2
 8008852:	b2db      	uxtb	r3, r3
 8008854:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8008856:	4b33      	ldr	r3, [pc, #204]	@ (8008924 <BSP_ACCELERO_Init+0x17c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800885c:	8aba      	ldrh	r2, [r7, #20]
 800885e:	b2d2      	uxtb	r2, r2
 8008860:	4610      	mov	r0, r2
 8008862:	4798      	blx	r3

    ret = ACCELERO_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	75fb      	strb	r3, [r7, #23]
 8008868:	e054      	b.n	8008914 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800886a:	4b2f      	ldr	r3, [pc, #188]	@ (8008928 <BSP_ACCELERO_Init+0x180>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	4798      	blx	r3
 8008870:	4603      	mov	r3, r0
 8008872:	2b33      	cmp	r3, #51	@ 0x33
 8008874:	d14e      	bne.n	8008914 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8008876:	4b2b      	ldr	r3, [pc, #172]	@ (8008924 <BSP_ACCELERO_Init+0x17c>)
 8008878:	4a2b      	ldr	r2, [pc, #172]	@ (8008928 <BSP_ACCELERO_Init+0x180>)
 800887a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 800887c:	2300      	movs	r3, #0
 800887e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_200_HZ;
 8008880:	2360      	movs	r3, #96	@ 0x60
 8008882:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8008884:	2307      	movs	r3, #7
 8008886:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8008888:	2300      	movs	r3, #0
 800888a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 800888c:	2300      	movs	r3, #0
 800888e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8008890:	2300      	movs	r3, #0
 8008892:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8008894:	2308      	movs	r3, #8
 8008896:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8008898:	7b3a      	ldrb	r2, [r7, #12]
 800889a:	7b7b      	ldrb	r3, [r7, #13]
 800889c:	4313      	orrs	r3, r2
 800889e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80088a0:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80088a2:	4313      	orrs	r3, r2
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	8abb      	ldrh	r3, [r7, #20]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80088ae:	7c3a      	ldrb	r2, [r7, #16]
 80088b0:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 80088b2:	4313      	orrs	r3, r2
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	7cbb      	ldrb	r3, [r7, #18]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	4313      	orrs	r3, r2
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80088c4:	b21a      	sxth	r2, r3
 80088c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	b21b      	sxth	r3, r3
 80088ce:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80088d0:	4b14      	ldr	r3, [pc, #80]	@ (8008924 <BSP_ACCELERO_Init+0x17c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	8aba      	ldrh	r2, [r7, #20]
 80088d8:	4610      	mov	r0, r2
 80088da:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 80088dc:	2380      	movs	r3, #128	@ 0x80
 80088de:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 80088e0:	2310      	movs	r3, #16
 80088e2:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 80088e4:	2300      	movs	r3, #0
 80088e6:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 80088e8:	2300      	movs	r3, #0
 80088ea:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80088ec:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80088ee:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80088f0:	4313      	orrs	r3, r2
 80088f2:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80088f4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80088f6:	4313      	orrs	r3, r2
 80088f8:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80088fa:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80088fc:	4313      	orrs	r3, r2
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8008902:	4b08      	ldr	r3, [pc, #32]	@ (8008924 <BSP_ACCELERO_Init+0x17c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008908:	8aba      	ldrh	r2, [r7, #20]
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008914:	7dfb      	ldrb	r3, [r7, #23]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20000034 	.word	0x20000034
 8008924:	20004d1c 	.word	0x20004d1c
 8008928:	20000000 	.word	0x20000000

0800892c <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8008934:	2300      	movs	r3, #0
 8008936:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8008938:	4b10      	ldr	r3, [pc, #64]	@ (800897c <BSP_ACCELERO_GetXYZ+0x50>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893e:	2b00      	cmp	r3, #0
 8008940:	d018      	beq.n	8008974 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8008942:	4b0e      	ldr	r3, [pc, #56]	@ (800897c <BSP_ACCELERO_GetXYZ+0x50>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 800894c:	4b0b      	ldr	r3, [pc, #44]	@ (800897c <BSP_ACCELERO_GetXYZ+0x50>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a0b      	ldr	r2, [pc, #44]	@ (8008980 <BSP_ACCELERO_GetXYZ+0x54>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d10e      	bne.n	8008974 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8008966:	89fb      	ldrh	r3, [r7, #14]
 8008968:	425b      	negs	r3, r3
 800896a:	b29a      	uxth	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	3302      	adds	r3, #2
 8008970:	b212      	sxth	r2, r2
 8008972:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8008974:	bf00      	nop
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	20004d1c 	.word	0x20004d1c
 8008980:	20000034 	.word	0x20000034

08008984 <LSM303AGR_MagInit>:

/**
 * @brief Initialize LSM303_AGR magnetic sensor in 100Hz continuous mode
 * @retval None
 */
void LSM303AGR_MagInit(void) {
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
  COMPASSACCELERO_IO_Init();
 8008988:	f7ff fe90 	bl	80086ac <COMPASSACCELERO_IO_Init>

  COMPASSACCELERO_IO_Write(MAG_I2C_ADDRESS, LSM303AGR_CFG_REG_A_M, 0x0C); // 100Hz
 800898c:	220c      	movs	r2, #12
 800898e:	2160      	movs	r1, #96	@ 0x60
 8008990:	203c      	movs	r0, #60	@ 0x3c
 8008992:	f7ff fee3 	bl	800875c <COMPASSACCELERO_IO_Write>
}
 8008996:	bf00      	nop
 8008998:	bd80      	pop	{r7, pc}

0800899a <LSM303AGR_MagReadXYZ>:
/**
 * @brief Read X, Y & Z Magnetic values
 * @param pData: Data out pointer, storing raw values from sensor
 * @retval None
 */
void LSM303AGR_MagReadXYZ(int16_t *pData) {
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  uint16_t H = 0x00;
 80089a2:	2300      	movs	r3, #0
 80089a4:	81fb      	strh	r3, [r7, #14]
  uint16_t L = 0x00;
 80089a6:	2300      	movs	r3, #0
 80089a8:	81bb      	strh	r3, [r7, #12]

  /* Read registers */
  H = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTX_H_REG_M);
 80089aa:	2169      	movs	r1, #105	@ 0x69
 80089ac:	203c      	movs	r0, #60	@ 0x3c
 80089ae:	f7ff fee8 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80089b2:	4603      	mov	r3, r0
 80089b4:	81fb      	strh	r3, [r7, #14]
  L = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTX_L_REG_M);
 80089b6:	2168      	movs	r1, #104	@ 0x68
 80089b8:	203c      	movs	r0, #60	@ 0x3c
 80089ba:	f7ff fee2 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80089be:	4603      	mov	r3, r0
 80089c0:	81bb      	strh	r3, [r7, #12]

  pData[0] = (H << 8) | L;
 80089c2:	89fb      	ldrh	r3, [r7, #14]
 80089c4:	021b      	lsls	r3, r3, #8
 80089c6:	b21a      	sxth	r2, r3
 80089c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	b21a      	sxth	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	801a      	strh	r2, [r3, #0]

  H = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTY_H_REG_M);
 80089d4:	216b      	movs	r1, #107	@ 0x6b
 80089d6:	203c      	movs	r0, #60	@ 0x3c
 80089d8:	f7ff fed3 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80089dc:	4603      	mov	r3, r0
 80089de:	81fb      	strh	r3, [r7, #14]
  L = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTY_L_REG_M);
 80089e0:	216a      	movs	r1, #106	@ 0x6a
 80089e2:	203c      	movs	r0, #60	@ 0x3c
 80089e4:	f7ff fecd 	bl	8008782 <COMPASSACCELERO_IO_Read>
 80089e8:	4603      	mov	r3, r0
 80089ea:	81bb      	strh	r3, [r7, #12]

  pData[1] = (H << 8) | L;
 80089ec:	89fb      	ldrh	r3, [r7, #14]
 80089ee:	021b      	lsls	r3, r3, #8
 80089f0:	b219      	sxth	r1, r3
 80089f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	3302      	adds	r3, #2
 80089fa:	430a      	orrs	r2, r1
 80089fc:	b212      	sxth	r2, r2
 80089fe:	801a      	strh	r2, [r3, #0]

  H = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTZ_H_REG_M);
 8008a00:	216d      	movs	r1, #109	@ 0x6d
 8008a02:	203c      	movs	r0, #60	@ 0x3c
 8008a04:	f7ff febd 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	81fb      	strh	r3, [r7, #14]
  L = COMPASSACCELERO_IO_Read(MAG_I2C_ADDRESS, LSM303AGR_OUTZ_L_REG_M);
 8008a0c:	216c      	movs	r1, #108	@ 0x6c
 8008a0e:	203c      	movs	r0, #60	@ 0x3c
 8008a10:	f7ff feb7 	bl	8008782 <COMPASSACCELERO_IO_Read>
 8008a14:	4603      	mov	r3, r0
 8008a16:	81bb      	strh	r3, [r7, #12]

  pData[2] = (H << 8) | L;
 8008a18:	89fb      	ldrh	r3, [r7, #14]
 8008a1a:	021b      	lsls	r3, r3, #8
 8008a1c:	b219      	sxth	r1, r3
 8008a1e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	3304      	adds	r3, #4
 8008a26:	430a      	orrs	r2, r1
 8008a28:	b212      	sxth	r2, r2
 8008a2a:	801a      	strh	r2, [r3, #0]
}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <malloc>:
 8008a34:	4b02      	ldr	r3, [pc, #8]	@ (8008a40 <malloc+0xc>)
 8008a36:	4601      	mov	r1, r0
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	f000 b825 	b.w	8008a88 <_malloc_r>
 8008a3e:	bf00      	nop
 8008a40:	200000e8 	.word	0x200000e8

08008a44 <sbrk_aligned>:
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	4e0f      	ldr	r6, [pc, #60]	@ (8008a84 <sbrk_aligned+0x40>)
 8008a48:	460c      	mov	r4, r1
 8008a4a:	6831      	ldr	r1, [r6, #0]
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	b911      	cbnz	r1, 8008a56 <sbrk_aligned+0x12>
 8008a50:	f000 fa50 	bl	8008ef4 <_sbrk_r>
 8008a54:	6030      	str	r0, [r6, #0]
 8008a56:	4621      	mov	r1, r4
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 fa4b 	bl	8008ef4 <_sbrk_r>
 8008a5e:	1c43      	adds	r3, r0, #1
 8008a60:	d103      	bne.n	8008a6a <sbrk_aligned+0x26>
 8008a62:	f04f 34ff 	mov.w	r4, #4294967295
 8008a66:	4620      	mov	r0, r4
 8008a68:	bd70      	pop	{r4, r5, r6, pc}
 8008a6a:	1cc4      	adds	r4, r0, #3
 8008a6c:	f024 0403 	bic.w	r4, r4, #3
 8008a70:	42a0      	cmp	r0, r4
 8008a72:	d0f8      	beq.n	8008a66 <sbrk_aligned+0x22>
 8008a74:	1a21      	subs	r1, r4, r0
 8008a76:	4628      	mov	r0, r5
 8008a78:	f000 fa3c 	bl	8008ef4 <_sbrk_r>
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d1f2      	bne.n	8008a66 <sbrk_aligned+0x22>
 8008a80:	e7ef      	b.n	8008a62 <sbrk_aligned+0x1e>
 8008a82:	bf00      	nop
 8008a84:	20004d20 	.word	0x20004d20

08008a88 <_malloc_r>:
 8008a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a8c:	1ccd      	adds	r5, r1, #3
 8008a8e:	f025 0503 	bic.w	r5, r5, #3
 8008a92:	3508      	adds	r5, #8
 8008a94:	2d0c      	cmp	r5, #12
 8008a96:	bf38      	it	cc
 8008a98:	250c      	movcc	r5, #12
 8008a9a:	2d00      	cmp	r5, #0
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	db01      	blt.n	8008aa4 <_malloc_r+0x1c>
 8008aa0:	42a9      	cmp	r1, r5
 8008aa2:	d904      	bls.n	8008aae <_malloc_r+0x26>
 8008aa4:	230c      	movs	r3, #12
 8008aa6:	6033      	str	r3, [r6, #0]
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b84 <_malloc_r+0xfc>
 8008ab2:	f000 f869 	bl	8008b88 <__malloc_lock>
 8008ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8008aba:	461c      	mov	r4, r3
 8008abc:	bb44      	cbnz	r4, 8008b10 <_malloc_r+0x88>
 8008abe:	4629      	mov	r1, r5
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f7ff ffbf 	bl	8008a44 <sbrk_aligned>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	4604      	mov	r4, r0
 8008aca:	d158      	bne.n	8008b7e <_malloc_r+0xf6>
 8008acc:	f8d8 4000 	ldr.w	r4, [r8]
 8008ad0:	4627      	mov	r7, r4
 8008ad2:	2f00      	cmp	r7, #0
 8008ad4:	d143      	bne.n	8008b5e <_malloc_r+0xd6>
 8008ad6:	2c00      	cmp	r4, #0
 8008ad8:	d04b      	beq.n	8008b72 <_malloc_r+0xea>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	4639      	mov	r1, r7
 8008ade:	4630      	mov	r0, r6
 8008ae0:	eb04 0903 	add.w	r9, r4, r3
 8008ae4:	f000 fa06 	bl	8008ef4 <_sbrk_r>
 8008ae8:	4581      	cmp	r9, r0
 8008aea:	d142      	bne.n	8008b72 <_malloc_r+0xea>
 8008aec:	6821      	ldr	r1, [r4, #0]
 8008aee:	1a6d      	subs	r5, r5, r1
 8008af0:	4629      	mov	r1, r5
 8008af2:	4630      	mov	r0, r6
 8008af4:	f7ff ffa6 	bl	8008a44 <sbrk_aligned>
 8008af8:	3001      	adds	r0, #1
 8008afa:	d03a      	beq.n	8008b72 <_malloc_r+0xea>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	442b      	add	r3, r5
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	f8d8 3000 	ldr.w	r3, [r8]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	bb62      	cbnz	r2, 8008b64 <_malloc_r+0xdc>
 8008b0a:	f8c8 7000 	str.w	r7, [r8]
 8008b0e:	e00f      	b.n	8008b30 <_malloc_r+0xa8>
 8008b10:	6822      	ldr	r2, [r4, #0]
 8008b12:	1b52      	subs	r2, r2, r5
 8008b14:	d420      	bmi.n	8008b58 <_malloc_r+0xd0>
 8008b16:	2a0b      	cmp	r2, #11
 8008b18:	d917      	bls.n	8008b4a <_malloc_r+0xc2>
 8008b1a:	1961      	adds	r1, r4, r5
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	6025      	str	r5, [r4, #0]
 8008b20:	bf18      	it	ne
 8008b22:	6059      	strne	r1, [r3, #4]
 8008b24:	6863      	ldr	r3, [r4, #4]
 8008b26:	bf08      	it	eq
 8008b28:	f8c8 1000 	streq.w	r1, [r8]
 8008b2c:	5162      	str	r2, [r4, r5]
 8008b2e:	604b      	str	r3, [r1, #4]
 8008b30:	4630      	mov	r0, r6
 8008b32:	f000 f82f 	bl	8008b94 <__malloc_unlock>
 8008b36:	f104 000b 	add.w	r0, r4, #11
 8008b3a:	1d23      	adds	r3, r4, #4
 8008b3c:	f020 0007 	bic.w	r0, r0, #7
 8008b40:	1ac2      	subs	r2, r0, r3
 8008b42:	bf1c      	itt	ne
 8008b44:	1a1b      	subne	r3, r3, r0
 8008b46:	50a3      	strne	r3, [r4, r2]
 8008b48:	e7af      	b.n	8008aaa <_malloc_r+0x22>
 8008b4a:	6862      	ldr	r2, [r4, #4]
 8008b4c:	42a3      	cmp	r3, r4
 8008b4e:	bf0c      	ite	eq
 8008b50:	f8c8 2000 	streq.w	r2, [r8]
 8008b54:	605a      	strne	r2, [r3, #4]
 8008b56:	e7eb      	b.n	8008b30 <_malloc_r+0xa8>
 8008b58:	4623      	mov	r3, r4
 8008b5a:	6864      	ldr	r4, [r4, #4]
 8008b5c:	e7ae      	b.n	8008abc <_malloc_r+0x34>
 8008b5e:	463c      	mov	r4, r7
 8008b60:	687f      	ldr	r7, [r7, #4]
 8008b62:	e7b6      	b.n	8008ad2 <_malloc_r+0x4a>
 8008b64:	461a      	mov	r2, r3
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	42a3      	cmp	r3, r4
 8008b6a:	d1fb      	bne.n	8008b64 <_malloc_r+0xdc>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	6053      	str	r3, [r2, #4]
 8008b70:	e7de      	b.n	8008b30 <_malloc_r+0xa8>
 8008b72:	230c      	movs	r3, #12
 8008b74:	6033      	str	r3, [r6, #0]
 8008b76:	4630      	mov	r0, r6
 8008b78:	f000 f80c 	bl	8008b94 <__malloc_unlock>
 8008b7c:	e794      	b.n	8008aa8 <_malloc_r+0x20>
 8008b7e:	6005      	str	r5, [r0, #0]
 8008b80:	e7d6      	b.n	8008b30 <_malloc_r+0xa8>
 8008b82:	bf00      	nop
 8008b84:	20004d24 	.word	0x20004d24

08008b88 <__malloc_lock>:
 8008b88:	4801      	ldr	r0, [pc, #4]	@ (8008b90 <__malloc_lock+0x8>)
 8008b8a:	f000 ba00 	b.w	8008f8e <__retarget_lock_acquire_recursive>
 8008b8e:	bf00      	nop
 8008b90:	20004e68 	.word	0x20004e68

08008b94 <__malloc_unlock>:
 8008b94:	4801      	ldr	r0, [pc, #4]	@ (8008b9c <__malloc_unlock+0x8>)
 8008b96:	f000 b9fb 	b.w	8008f90 <__retarget_lock_release_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	20004e68 	.word	0x20004e68

08008ba0 <std>:
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	b510      	push	{r4, lr}
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8008baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bae:	6083      	str	r3, [r0, #8]
 8008bb0:	8181      	strh	r1, [r0, #12]
 8008bb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008bb4:	81c2      	strh	r2, [r0, #14]
 8008bb6:	6183      	str	r3, [r0, #24]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	2208      	movs	r2, #8
 8008bbc:	305c      	adds	r0, #92	@ 0x5c
 8008bbe:	f000 f906 	bl	8008dce <memset>
 8008bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf8 <std+0x58>)
 8008bc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bfc <std+0x5c>)
 8008bc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008bca:	4b0d      	ldr	r3, [pc, #52]	@ (8008c00 <std+0x60>)
 8008bcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008bce:	4b0d      	ldr	r3, [pc, #52]	@ (8008c04 <std+0x64>)
 8008bd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c08 <std+0x68>)
 8008bd4:	6224      	str	r4, [r4, #32]
 8008bd6:	429c      	cmp	r4, r3
 8008bd8:	d006      	beq.n	8008be8 <std+0x48>
 8008bda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008bde:	4294      	cmp	r4, r2
 8008be0:	d002      	beq.n	8008be8 <std+0x48>
 8008be2:	33d0      	adds	r3, #208	@ 0xd0
 8008be4:	429c      	cmp	r4, r3
 8008be6:	d105      	bne.n	8008bf4 <std+0x54>
 8008be8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf0:	f000 b9cc 	b.w	8008f8c <__retarget_lock_init_recursive>
 8008bf4:	bd10      	pop	{r4, pc}
 8008bf6:	bf00      	nop
 8008bf8:	08008d49 	.word	0x08008d49
 8008bfc:	08008d6b 	.word	0x08008d6b
 8008c00:	08008da3 	.word	0x08008da3
 8008c04:	08008dc7 	.word	0x08008dc7
 8008c08:	20004d28 	.word	0x20004d28

08008c0c <stdio_exit_handler>:
 8008c0c:	4a02      	ldr	r2, [pc, #8]	@ (8008c18 <stdio_exit_handler+0xc>)
 8008c0e:	4903      	ldr	r1, [pc, #12]	@ (8008c1c <stdio_exit_handler+0x10>)
 8008c10:	4803      	ldr	r0, [pc, #12]	@ (8008c20 <stdio_exit_handler+0x14>)
 8008c12:	f000 b869 	b.w	8008ce8 <_fwalk_sglue>
 8008c16:	bf00      	nop
 8008c18:	200000dc 	.word	0x200000dc
 8008c1c:	080096ed 	.word	0x080096ed
 8008c20:	200000ec 	.word	0x200000ec

08008c24 <cleanup_stdio>:
 8008c24:	6841      	ldr	r1, [r0, #4]
 8008c26:	4b0c      	ldr	r3, [pc, #48]	@ (8008c58 <cleanup_stdio+0x34>)
 8008c28:	4299      	cmp	r1, r3
 8008c2a:	b510      	push	{r4, lr}
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	d001      	beq.n	8008c34 <cleanup_stdio+0x10>
 8008c30:	f000 fd5c 	bl	80096ec <_fflush_r>
 8008c34:	68a1      	ldr	r1, [r4, #8]
 8008c36:	4b09      	ldr	r3, [pc, #36]	@ (8008c5c <cleanup_stdio+0x38>)
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d002      	beq.n	8008c42 <cleanup_stdio+0x1e>
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 fd55 	bl	80096ec <_fflush_r>
 8008c42:	68e1      	ldr	r1, [r4, #12]
 8008c44:	4b06      	ldr	r3, [pc, #24]	@ (8008c60 <cleanup_stdio+0x3c>)
 8008c46:	4299      	cmp	r1, r3
 8008c48:	d004      	beq.n	8008c54 <cleanup_stdio+0x30>
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c50:	f000 bd4c 	b.w	80096ec <_fflush_r>
 8008c54:	bd10      	pop	{r4, pc}
 8008c56:	bf00      	nop
 8008c58:	20004d28 	.word	0x20004d28
 8008c5c:	20004d90 	.word	0x20004d90
 8008c60:	20004df8 	.word	0x20004df8

08008c64 <global_stdio_init.part.0>:
 8008c64:	b510      	push	{r4, lr}
 8008c66:	4b0b      	ldr	r3, [pc, #44]	@ (8008c94 <global_stdio_init.part.0+0x30>)
 8008c68:	4c0b      	ldr	r4, [pc, #44]	@ (8008c98 <global_stdio_init.part.0+0x34>)
 8008c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8008c9c <global_stdio_init.part.0+0x38>)
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	4620      	mov	r0, r4
 8008c70:	2200      	movs	r2, #0
 8008c72:	2104      	movs	r1, #4
 8008c74:	f7ff ff94 	bl	8008ba0 <std>
 8008c78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	2109      	movs	r1, #9
 8008c80:	f7ff ff8e 	bl	8008ba0 <std>
 8008c84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c88:	2202      	movs	r2, #2
 8008c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c8e:	2112      	movs	r1, #18
 8008c90:	f7ff bf86 	b.w	8008ba0 <std>
 8008c94:	20004e60 	.word	0x20004e60
 8008c98:	20004d28 	.word	0x20004d28
 8008c9c:	08008c0d 	.word	0x08008c0d

08008ca0 <__sfp_lock_acquire>:
 8008ca0:	4801      	ldr	r0, [pc, #4]	@ (8008ca8 <__sfp_lock_acquire+0x8>)
 8008ca2:	f000 b974 	b.w	8008f8e <__retarget_lock_acquire_recursive>
 8008ca6:	bf00      	nop
 8008ca8:	20004e69 	.word	0x20004e69

08008cac <__sfp_lock_release>:
 8008cac:	4801      	ldr	r0, [pc, #4]	@ (8008cb4 <__sfp_lock_release+0x8>)
 8008cae:	f000 b96f 	b.w	8008f90 <__retarget_lock_release_recursive>
 8008cb2:	bf00      	nop
 8008cb4:	20004e69 	.word	0x20004e69

08008cb8 <__sinit>:
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	4604      	mov	r4, r0
 8008cbc:	f7ff fff0 	bl	8008ca0 <__sfp_lock_acquire>
 8008cc0:	6a23      	ldr	r3, [r4, #32]
 8008cc2:	b11b      	cbz	r3, 8008ccc <__sinit+0x14>
 8008cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc8:	f7ff bff0 	b.w	8008cac <__sfp_lock_release>
 8008ccc:	4b04      	ldr	r3, [pc, #16]	@ (8008ce0 <__sinit+0x28>)
 8008cce:	6223      	str	r3, [r4, #32]
 8008cd0:	4b04      	ldr	r3, [pc, #16]	@ (8008ce4 <__sinit+0x2c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1f5      	bne.n	8008cc4 <__sinit+0xc>
 8008cd8:	f7ff ffc4 	bl	8008c64 <global_stdio_init.part.0>
 8008cdc:	e7f2      	b.n	8008cc4 <__sinit+0xc>
 8008cde:	bf00      	nop
 8008ce0:	08008c25 	.word	0x08008c25
 8008ce4:	20004e60 	.word	0x20004e60

08008ce8 <_fwalk_sglue>:
 8008ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cec:	4607      	mov	r7, r0
 8008cee:	4688      	mov	r8, r1
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	2600      	movs	r6, #0
 8008cf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cf8:	f1b9 0901 	subs.w	r9, r9, #1
 8008cfc:	d505      	bpl.n	8008d0a <_fwalk_sglue+0x22>
 8008cfe:	6824      	ldr	r4, [r4, #0]
 8008d00:	2c00      	cmp	r4, #0
 8008d02:	d1f7      	bne.n	8008cf4 <_fwalk_sglue+0xc>
 8008d04:	4630      	mov	r0, r6
 8008d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d0a:	89ab      	ldrh	r3, [r5, #12]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d907      	bls.n	8008d20 <_fwalk_sglue+0x38>
 8008d10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d14:	3301      	adds	r3, #1
 8008d16:	d003      	beq.n	8008d20 <_fwalk_sglue+0x38>
 8008d18:	4629      	mov	r1, r5
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	47c0      	blx	r8
 8008d1e:	4306      	orrs	r6, r0
 8008d20:	3568      	adds	r5, #104	@ 0x68
 8008d22:	e7e9      	b.n	8008cf8 <_fwalk_sglue+0x10>

08008d24 <iprintf>:
 8008d24:	b40f      	push	{r0, r1, r2, r3}
 8008d26:	b507      	push	{r0, r1, r2, lr}
 8008d28:	4906      	ldr	r1, [pc, #24]	@ (8008d44 <iprintf+0x20>)
 8008d2a:	ab04      	add	r3, sp, #16
 8008d2c:	6808      	ldr	r0, [r1, #0]
 8008d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d32:	6881      	ldr	r1, [r0, #8]
 8008d34:	9301      	str	r3, [sp, #4]
 8008d36:	f000 f9af 	bl	8009098 <_vfiprintf_r>
 8008d3a:	b003      	add	sp, #12
 8008d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d40:	b004      	add	sp, #16
 8008d42:	4770      	bx	lr
 8008d44:	200000e8 	.word	0x200000e8

08008d48 <__sread>:
 8008d48:	b510      	push	{r4, lr}
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d50:	f000 f8be 	bl	8008ed0 <_read_r>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	bfab      	itete	ge
 8008d58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d5c:	181b      	addge	r3, r3, r0
 8008d5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d62:	bfac      	ite	ge
 8008d64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d66:	81a3      	strhlt	r3, [r4, #12]
 8008d68:	bd10      	pop	{r4, pc}

08008d6a <__swrite>:
 8008d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6e:	461f      	mov	r7, r3
 8008d70:	898b      	ldrh	r3, [r1, #12]
 8008d72:	05db      	lsls	r3, r3, #23
 8008d74:	4605      	mov	r5, r0
 8008d76:	460c      	mov	r4, r1
 8008d78:	4616      	mov	r6, r2
 8008d7a:	d505      	bpl.n	8008d88 <__swrite+0x1e>
 8008d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d80:	2302      	movs	r3, #2
 8008d82:	2200      	movs	r2, #0
 8008d84:	f000 f892 	bl	8008eac <_lseek_r>
 8008d88:	89a3      	ldrh	r3, [r4, #12]
 8008d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d92:	81a3      	strh	r3, [r4, #12]
 8008d94:	4632      	mov	r2, r6
 8008d96:	463b      	mov	r3, r7
 8008d98:	4628      	mov	r0, r5
 8008d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9e:	f000 b8b9 	b.w	8008f14 <_write_r>

08008da2 <__sseek>:
 8008da2:	b510      	push	{r4, lr}
 8008da4:	460c      	mov	r4, r1
 8008da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008daa:	f000 f87f 	bl	8008eac <_lseek_r>
 8008dae:	1c43      	adds	r3, r0, #1
 8008db0:	89a3      	ldrh	r3, [r4, #12]
 8008db2:	bf15      	itete	ne
 8008db4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008db6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008dba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008dbe:	81a3      	strheq	r3, [r4, #12]
 8008dc0:	bf18      	it	ne
 8008dc2:	81a3      	strhne	r3, [r4, #12]
 8008dc4:	bd10      	pop	{r4, pc}

08008dc6 <__sclose>:
 8008dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dca:	f000 b809 	b.w	8008de0 <_close_r>

08008dce <memset>:
 8008dce:	4402      	add	r2, r0
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d100      	bne.n	8008dd8 <memset+0xa>
 8008dd6:	4770      	bx	lr
 8008dd8:	f803 1b01 	strb.w	r1, [r3], #1
 8008ddc:	e7f9      	b.n	8008dd2 <memset+0x4>
	...

08008de0 <_close_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d06      	ldr	r5, [pc, #24]	@ (8008dfc <_close_r+0x1c>)
 8008de4:	2300      	movs	r3, #0
 8008de6:	4604      	mov	r4, r0
 8008de8:	4608      	mov	r0, r1
 8008dea:	602b      	str	r3, [r5, #0]
 8008dec:	f7f8 fccf 	bl	800178e <_close>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d102      	bne.n	8008dfa <_close_r+0x1a>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	b103      	cbz	r3, 8008dfa <_close_r+0x1a>
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	20004e64 	.word	0x20004e64

08008e00 <_reclaim_reent>:
 8008e00:	4b29      	ldr	r3, [pc, #164]	@ (8008ea8 <_reclaim_reent+0xa8>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4283      	cmp	r3, r0
 8008e06:	b570      	push	{r4, r5, r6, lr}
 8008e08:	4604      	mov	r4, r0
 8008e0a:	d04b      	beq.n	8008ea4 <_reclaim_reent+0xa4>
 8008e0c:	69c3      	ldr	r3, [r0, #28]
 8008e0e:	b1ab      	cbz	r3, 8008e3c <_reclaim_reent+0x3c>
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	b16b      	cbz	r3, 8008e30 <_reclaim_reent+0x30>
 8008e14:	2500      	movs	r5, #0
 8008e16:	69e3      	ldr	r3, [r4, #28]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	5959      	ldr	r1, [r3, r5]
 8008e1c:	2900      	cmp	r1, #0
 8008e1e:	d13b      	bne.n	8008e98 <_reclaim_reent+0x98>
 8008e20:	3504      	adds	r5, #4
 8008e22:	2d80      	cmp	r5, #128	@ 0x80
 8008e24:	d1f7      	bne.n	8008e16 <_reclaim_reent+0x16>
 8008e26:	69e3      	ldr	r3, [r4, #28]
 8008e28:	4620      	mov	r0, r4
 8008e2a:	68d9      	ldr	r1, [r3, #12]
 8008e2c:	f000 f8c0 	bl	8008fb0 <_free_r>
 8008e30:	69e3      	ldr	r3, [r4, #28]
 8008e32:	6819      	ldr	r1, [r3, #0]
 8008e34:	b111      	cbz	r1, 8008e3c <_reclaim_reent+0x3c>
 8008e36:	4620      	mov	r0, r4
 8008e38:	f000 f8ba 	bl	8008fb0 <_free_r>
 8008e3c:	6961      	ldr	r1, [r4, #20]
 8008e3e:	b111      	cbz	r1, 8008e46 <_reclaim_reent+0x46>
 8008e40:	4620      	mov	r0, r4
 8008e42:	f000 f8b5 	bl	8008fb0 <_free_r>
 8008e46:	69e1      	ldr	r1, [r4, #28]
 8008e48:	b111      	cbz	r1, 8008e50 <_reclaim_reent+0x50>
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f000 f8b0 	bl	8008fb0 <_free_r>
 8008e50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008e52:	b111      	cbz	r1, 8008e5a <_reclaim_reent+0x5a>
 8008e54:	4620      	mov	r0, r4
 8008e56:	f000 f8ab 	bl	8008fb0 <_free_r>
 8008e5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e5c:	b111      	cbz	r1, 8008e64 <_reclaim_reent+0x64>
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f000 f8a6 	bl	8008fb0 <_free_r>
 8008e64:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008e66:	b111      	cbz	r1, 8008e6e <_reclaim_reent+0x6e>
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f000 f8a1 	bl	8008fb0 <_free_r>
 8008e6e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008e70:	b111      	cbz	r1, 8008e78 <_reclaim_reent+0x78>
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 f89c 	bl	8008fb0 <_free_r>
 8008e78:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008e7a:	b111      	cbz	r1, 8008e82 <_reclaim_reent+0x82>
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f000 f897 	bl	8008fb0 <_free_r>
 8008e82:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008e84:	b111      	cbz	r1, 8008e8c <_reclaim_reent+0x8c>
 8008e86:	4620      	mov	r0, r4
 8008e88:	f000 f892 	bl	8008fb0 <_free_r>
 8008e8c:	6a23      	ldr	r3, [r4, #32]
 8008e8e:	b14b      	cbz	r3, 8008ea4 <_reclaim_reent+0xa4>
 8008e90:	4620      	mov	r0, r4
 8008e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e96:	4718      	bx	r3
 8008e98:	680e      	ldr	r6, [r1, #0]
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 f888 	bl	8008fb0 <_free_r>
 8008ea0:	4631      	mov	r1, r6
 8008ea2:	e7bb      	b.n	8008e1c <_reclaim_reent+0x1c>
 8008ea4:	bd70      	pop	{r4, r5, r6, pc}
 8008ea6:	bf00      	nop
 8008ea8:	200000e8 	.word	0x200000e8

08008eac <_lseek_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4d07      	ldr	r5, [pc, #28]	@ (8008ecc <_lseek_r+0x20>)
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	4608      	mov	r0, r1
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	602a      	str	r2, [r5, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f7f8 fc8e 	bl	80017dc <_lseek>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_lseek_r+0x1e>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_lseek_r+0x1e>
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	20004e64 	.word	0x20004e64

08008ed0 <_read_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4d07      	ldr	r5, [pc, #28]	@ (8008ef0 <_read_r+0x20>)
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	4608      	mov	r0, r1
 8008ed8:	4611      	mov	r1, r2
 8008eda:	2200      	movs	r2, #0
 8008edc:	602a      	str	r2, [r5, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f7f8 fc1c 	bl	800171c <_read>
 8008ee4:	1c43      	adds	r3, r0, #1
 8008ee6:	d102      	bne.n	8008eee <_read_r+0x1e>
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	b103      	cbz	r3, 8008eee <_read_r+0x1e>
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	20004e64 	.word	0x20004e64

08008ef4 <_sbrk_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d06      	ldr	r5, [pc, #24]	@ (8008f10 <_sbrk_r+0x1c>)
 8008ef8:	2300      	movs	r3, #0
 8008efa:	4604      	mov	r4, r0
 8008efc:	4608      	mov	r0, r1
 8008efe:	602b      	str	r3, [r5, #0]
 8008f00:	f7f8 fc7a 	bl	80017f8 <_sbrk>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_sbrk_r+0x1a>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_sbrk_r+0x1a>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	20004e64 	.word	0x20004e64

08008f14 <_write_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4d07      	ldr	r5, [pc, #28]	@ (8008f34 <_write_r+0x20>)
 8008f18:	4604      	mov	r4, r0
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	602a      	str	r2, [r5, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f7f8 fc17 	bl	8001756 <_write>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_write_r+0x1e>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_write_r+0x1e>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20004e64 	.word	0x20004e64

08008f38 <__errno>:
 8008f38:	4b01      	ldr	r3, [pc, #4]	@ (8008f40 <__errno+0x8>)
 8008f3a:	6818      	ldr	r0, [r3, #0]
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	200000e8 	.word	0x200000e8

08008f44 <__libc_init_array>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	4d0d      	ldr	r5, [pc, #52]	@ (8008f7c <__libc_init_array+0x38>)
 8008f48:	4c0d      	ldr	r4, [pc, #52]	@ (8008f80 <__libc_init_array+0x3c>)
 8008f4a:	1b64      	subs	r4, r4, r5
 8008f4c:	10a4      	asrs	r4, r4, #2
 8008f4e:	2600      	movs	r6, #0
 8008f50:	42a6      	cmp	r6, r4
 8008f52:	d109      	bne.n	8008f68 <__libc_init_array+0x24>
 8008f54:	4d0b      	ldr	r5, [pc, #44]	@ (8008f84 <__libc_init_array+0x40>)
 8008f56:	4c0c      	ldr	r4, [pc, #48]	@ (8008f88 <__libc_init_array+0x44>)
 8008f58:	f000 fd2a 	bl	80099b0 <_init>
 8008f5c:	1b64      	subs	r4, r4, r5
 8008f5e:	10a4      	asrs	r4, r4, #2
 8008f60:	2600      	movs	r6, #0
 8008f62:	42a6      	cmp	r6, r4
 8008f64:	d105      	bne.n	8008f72 <__libc_init_array+0x2e>
 8008f66:	bd70      	pop	{r4, r5, r6, pc}
 8008f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f6c:	4798      	blx	r3
 8008f6e:	3601      	adds	r6, #1
 8008f70:	e7ee      	b.n	8008f50 <__libc_init_array+0xc>
 8008f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f76:	4798      	blx	r3
 8008f78:	3601      	adds	r6, #1
 8008f7a:	e7f2      	b.n	8008f62 <__libc_init_array+0x1e>
 8008f7c:	08009bd8 	.word	0x08009bd8
 8008f80:	08009bd8 	.word	0x08009bd8
 8008f84:	08009bd8 	.word	0x08009bd8
 8008f88:	08009bdc 	.word	0x08009bdc

08008f8c <__retarget_lock_init_recursive>:
 8008f8c:	4770      	bx	lr

08008f8e <__retarget_lock_acquire_recursive>:
 8008f8e:	4770      	bx	lr

08008f90 <__retarget_lock_release_recursive>:
 8008f90:	4770      	bx	lr

08008f92 <memcpy>:
 8008f92:	440a      	add	r2, r1
 8008f94:	4291      	cmp	r1, r2
 8008f96:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f9a:	d100      	bne.n	8008f9e <memcpy+0xc>
 8008f9c:	4770      	bx	lr
 8008f9e:	b510      	push	{r4, lr}
 8008fa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fa8:	4291      	cmp	r1, r2
 8008faa:	d1f9      	bne.n	8008fa0 <memcpy+0xe>
 8008fac:	bd10      	pop	{r4, pc}
	...

08008fb0 <_free_r>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	2900      	cmp	r1, #0
 8008fb6:	d041      	beq.n	800903c <_free_r+0x8c>
 8008fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fbc:	1f0c      	subs	r4, r1, #4
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	bfb8      	it	lt
 8008fc2:	18e4      	addlt	r4, r4, r3
 8008fc4:	f7ff fde0 	bl	8008b88 <__malloc_lock>
 8008fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8009040 <_free_r+0x90>)
 8008fca:	6813      	ldr	r3, [r2, #0]
 8008fcc:	b933      	cbnz	r3, 8008fdc <_free_r+0x2c>
 8008fce:	6063      	str	r3, [r4, #4]
 8008fd0:	6014      	str	r4, [r2, #0]
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fd8:	f7ff bddc 	b.w	8008b94 <__malloc_unlock>
 8008fdc:	42a3      	cmp	r3, r4
 8008fde:	d908      	bls.n	8008ff2 <_free_r+0x42>
 8008fe0:	6820      	ldr	r0, [r4, #0]
 8008fe2:	1821      	adds	r1, r4, r0
 8008fe4:	428b      	cmp	r3, r1
 8008fe6:	bf01      	itttt	eq
 8008fe8:	6819      	ldreq	r1, [r3, #0]
 8008fea:	685b      	ldreq	r3, [r3, #4]
 8008fec:	1809      	addeq	r1, r1, r0
 8008fee:	6021      	streq	r1, [r4, #0]
 8008ff0:	e7ed      	b.n	8008fce <_free_r+0x1e>
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	b10b      	cbz	r3, 8008ffc <_free_r+0x4c>
 8008ff8:	42a3      	cmp	r3, r4
 8008ffa:	d9fa      	bls.n	8008ff2 <_free_r+0x42>
 8008ffc:	6811      	ldr	r1, [r2, #0]
 8008ffe:	1850      	adds	r0, r2, r1
 8009000:	42a0      	cmp	r0, r4
 8009002:	d10b      	bne.n	800901c <_free_r+0x6c>
 8009004:	6820      	ldr	r0, [r4, #0]
 8009006:	4401      	add	r1, r0
 8009008:	1850      	adds	r0, r2, r1
 800900a:	4283      	cmp	r3, r0
 800900c:	6011      	str	r1, [r2, #0]
 800900e:	d1e0      	bne.n	8008fd2 <_free_r+0x22>
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	6053      	str	r3, [r2, #4]
 8009016:	4408      	add	r0, r1
 8009018:	6010      	str	r0, [r2, #0]
 800901a:	e7da      	b.n	8008fd2 <_free_r+0x22>
 800901c:	d902      	bls.n	8009024 <_free_r+0x74>
 800901e:	230c      	movs	r3, #12
 8009020:	602b      	str	r3, [r5, #0]
 8009022:	e7d6      	b.n	8008fd2 <_free_r+0x22>
 8009024:	6820      	ldr	r0, [r4, #0]
 8009026:	1821      	adds	r1, r4, r0
 8009028:	428b      	cmp	r3, r1
 800902a:	bf04      	itt	eq
 800902c:	6819      	ldreq	r1, [r3, #0]
 800902e:	685b      	ldreq	r3, [r3, #4]
 8009030:	6063      	str	r3, [r4, #4]
 8009032:	bf04      	itt	eq
 8009034:	1809      	addeq	r1, r1, r0
 8009036:	6021      	streq	r1, [r4, #0]
 8009038:	6054      	str	r4, [r2, #4]
 800903a:	e7ca      	b.n	8008fd2 <_free_r+0x22>
 800903c:	bd38      	pop	{r3, r4, r5, pc}
 800903e:	bf00      	nop
 8009040:	20004d24 	.word	0x20004d24

08009044 <__sfputc_r>:
 8009044:	6893      	ldr	r3, [r2, #8]
 8009046:	3b01      	subs	r3, #1
 8009048:	2b00      	cmp	r3, #0
 800904a:	b410      	push	{r4}
 800904c:	6093      	str	r3, [r2, #8]
 800904e:	da08      	bge.n	8009062 <__sfputc_r+0x1e>
 8009050:	6994      	ldr	r4, [r2, #24]
 8009052:	42a3      	cmp	r3, r4
 8009054:	db01      	blt.n	800905a <__sfputc_r+0x16>
 8009056:	290a      	cmp	r1, #10
 8009058:	d103      	bne.n	8009062 <__sfputc_r+0x1e>
 800905a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800905e:	f000 bb6d 	b.w	800973c <__swbuf_r>
 8009062:	6813      	ldr	r3, [r2, #0]
 8009064:	1c58      	adds	r0, r3, #1
 8009066:	6010      	str	r0, [r2, #0]
 8009068:	7019      	strb	r1, [r3, #0]
 800906a:	4608      	mov	r0, r1
 800906c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009070:	4770      	bx	lr

08009072 <__sfputs_r>:
 8009072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009074:	4606      	mov	r6, r0
 8009076:	460f      	mov	r7, r1
 8009078:	4614      	mov	r4, r2
 800907a:	18d5      	adds	r5, r2, r3
 800907c:	42ac      	cmp	r4, r5
 800907e:	d101      	bne.n	8009084 <__sfputs_r+0x12>
 8009080:	2000      	movs	r0, #0
 8009082:	e007      	b.n	8009094 <__sfputs_r+0x22>
 8009084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009088:	463a      	mov	r2, r7
 800908a:	4630      	mov	r0, r6
 800908c:	f7ff ffda 	bl	8009044 <__sfputc_r>
 8009090:	1c43      	adds	r3, r0, #1
 8009092:	d1f3      	bne.n	800907c <__sfputs_r+0xa>
 8009094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009098 <_vfiprintf_r>:
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909c:	460d      	mov	r5, r1
 800909e:	b09d      	sub	sp, #116	@ 0x74
 80090a0:	4614      	mov	r4, r2
 80090a2:	4698      	mov	r8, r3
 80090a4:	4606      	mov	r6, r0
 80090a6:	b118      	cbz	r0, 80090b0 <_vfiprintf_r+0x18>
 80090a8:	6a03      	ldr	r3, [r0, #32]
 80090aa:	b90b      	cbnz	r3, 80090b0 <_vfiprintf_r+0x18>
 80090ac:	f7ff fe04 	bl	8008cb8 <__sinit>
 80090b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090b2:	07d9      	lsls	r1, r3, #31
 80090b4:	d405      	bmi.n	80090c2 <_vfiprintf_r+0x2a>
 80090b6:	89ab      	ldrh	r3, [r5, #12]
 80090b8:	059a      	lsls	r2, r3, #22
 80090ba:	d402      	bmi.n	80090c2 <_vfiprintf_r+0x2a>
 80090bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090be:	f7ff ff66 	bl	8008f8e <__retarget_lock_acquire_recursive>
 80090c2:	89ab      	ldrh	r3, [r5, #12]
 80090c4:	071b      	lsls	r3, r3, #28
 80090c6:	d501      	bpl.n	80090cc <_vfiprintf_r+0x34>
 80090c8:	692b      	ldr	r3, [r5, #16]
 80090ca:	b99b      	cbnz	r3, 80090f4 <_vfiprintf_r+0x5c>
 80090cc:	4629      	mov	r1, r5
 80090ce:	4630      	mov	r0, r6
 80090d0:	f000 fb72 	bl	80097b8 <__swsetup_r>
 80090d4:	b170      	cbz	r0, 80090f4 <_vfiprintf_r+0x5c>
 80090d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090d8:	07dc      	lsls	r4, r3, #31
 80090da:	d504      	bpl.n	80090e6 <_vfiprintf_r+0x4e>
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
 80090e0:	b01d      	add	sp, #116	@ 0x74
 80090e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e6:	89ab      	ldrh	r3, [r5, #12]
 80090e8:	0598      	lsls	r0, r3, #22
 80090ea:	d4f7      	bmi.n	80090dc <_vfiprintf_r+0x44>
 80090ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090ee:	f7ff ff4f 	bl	8008f90 <__retarget_lock_release_recursive>
 80090f2:	e7f3      	b.n	80090dc <_vfiprintf_r+0x44>
 80090f4:	2300      	movs	r3, #0
 80090f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80090f8:	2320      	movs	r3, #32
 80090fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009102:	2330      	movs	r3, #48	@ 0x30
 8009104:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80092b4 <_vfiprintf_r+0x21c>
 8009108:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800910c:	f04f 0901 	mov.w	r9, #1
 8009110:	4623      	mov	r3, r4
 8009112:	469a      	mov	sl, r3
 8009114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009118:	b10a      	cbz	r2, 800911e <_vfiprintf_r+0x86>
 800911a:	2a25      	cmp	r2, #37	@ 0x25
 800911c:	d1f9      	bne.n	8009112 <_vfiprintf_r+0x7a>
 800911e:	ebba 0b04 	subs.w	fp, sl, r4
 8009122:	d00b      	beq.n	800913c <_vfiprintf_r+0xa4>
 8009124:	465b      	mov	r3, fp
 8009126:	4622      	mov	r2, r4
 8009128:	4629      	mov	r1, r5
 800912a:	4630      	mov	r0, r6
 800912c:	f7ff ffa1 	bl	8009072 <__sfputs_r>
 8009130:	3001      	adds	r0, #1
 8009132:	f000 80a7 	beq.w	8009284 <_vfiprintf_r+0x1ec>
 8009136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009138:	445a      	add	r2, fp
 800913a:	9209      	str	r2, [sp, #36]	@ 0x24
 800913c:	f89a 3000 	ldrb.w	r3, [sl]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f000 809f 	beq.w	8009284 <_vfiprintf_r+0x1ec>
 8009146:	2300      	movs	r3, #0
 8009148:	f04f 32ff 	mov.w	r2, #4294967295
 800914c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009150:	f10a 0a01 	add.w	sl, sl, #1
 8009154:	9304      	str	r3, [sp, #16]
 8009156:	9307      	str	r3, [sp, #28]
 8009158:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800915c:	931a      	str	r3, [sp, #104]	@ 0x68
 800915e:	4654      	mov	r4, sl
 8009160:	2205      	movs	r2, #5
 8009162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009166:	4853      	ldr	r0, [pc, #332]	@ (80092b4 <_vfiprintf_r+0x21c>)
 8009168:	f7f7 f83a 	bl	80001e0 <memchr>
 800916c:	9a04      	ldr	r2, [sp, #16]
 800916e:	b9d8      	cbnz	r0, 80091a8 <_vfiprintf_r+0x110>
 8009170:	06d1      	lsls	r1, r2, #27
 8009172:	bf44      	itt	mi
 8009174:	2320      	movmi	r3, #32
 8009176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800917a:	0713      	lsls	r3, r2, #28
 800917c:	bf44      	itt	mi
 800917e:	232b      	movmi	r3, #43	@ 0x2b
 8009180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009184:	f89a 3000 	ldrb.w	r3, [sl]
 8009188:	2b2a      	cmp	r3, #42	@ 0x2a
 800918a:	d015      	beq.n	80091b8 <_vfiprintf_r+0x120>
 800918c:	9a07      	ldr	r2, [sp, #28]
 800918e:	4654      	mov	r4, sl
 8009190:	2000      	movs	r0, #0
 8009192:	f04f 0c0a 	mov.w	ip, #10
 8009196:	4621      	mov	r1, r4
 8009198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800919c:	3b30      	subs	r3, #48	@ 0x30
 800919e:	2b09      	cmp	r3, #9
 80091a0:	d94b      	bls.n	800923a <_vfiprintf_r+0x1a2>
 80091a2:	b1b0      	cbz	r0, 80091d2 <_vfiprintf_r+0x13a>
 80091a4:	9207      	str	r2, [sp, #28]
 80091a6:	e014      	b.n	80091d2 <_vfiprintf_r+0x13a>
 80091a8:	eba0 0308 	sub.w	r3, r0, r8
 80091ac:	fa09 f303 	lsl.w	r3, r9, r3
 80091b0:	4313      	orrs	r3, r2
 80091b2:	9304      	str	r3, [sp, #16]
 80091b4:	46a2      	mov	sl, r4
 80091b6:	e7d2      	b.n	800915e <_vfiprintf_r+0xc6>
 80091b8:	9b03      	ldr	r3, [sp, #12]
 80091ba:	1d19      	adds	r1, r3, #4
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	9103      	str	r1, [sp, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	bfbb      	ittet	lt
 80091c4:	425b      	neglt	r3, r3
 80091c6:	f042 0202 	orrlt.w	r2, r2, #2
 80091ca:	9307      	strge	r3, [sp, #28]
 80091cc:	9307      	strlt	r3, [sp, #28]
 80091ce:	bfb8      	it	lt
 80091d0:	9204      	strlt	r2, [sp, #16]
 80091d2:	7823      	ldrb	r3, [r4, #0]
 80091d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80091d6:	d10a      	bne.n	80091ee <_vfiprintf_r+0x156>
 80091d8:	7863      	ldrb	r3, [r4, #1]
 80091da:	2b2a      	cmp	r3, #42	@ 0x2a
 80091dc:	d132      	bne.n	8009244 <_vfiprintf_r+0x1ac>
 80091de:	9b03      	ldr	r3, [sp, #12]
 80091e0:	1d1a      	adds	r2, r3, #4
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	9203      	str	r2, [sp, #12]
 80091e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091ea:	3402      	adds	r4, #2
 80091ec:	9305      	str	r3, [sp, #20]
 80091ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80092c4 <_vfiprintf_r+0x22c>
 80091f2:	7821      	ldrb	r1, [r4, #0]
 80091f4:	2203      	movs	r2, #3
 80091f6:	4650      	mov	r0, sl
 80091f8:	f7f6 fff2 	bl	80001e0 <memchr>
 80091fc:	b138      	cbz	r0, 800920e <_vfiprintf_r+0x176>
 80091fe:	9b04      	ldr	r3, [sp, #16]
 8009200:	eba0 000a 	sub.w	r0, r0, sl
 8009204:	2240      	movs	r2, #64	@ 0x40
 8009206:	4082      	lsls	r2, r0
 8009208:	4313      	orrs	r3, r2
 800920a:	3401      	adds	r4, #1
 800920c:	9304      	str	r3, [sp, #16]
 800920e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009212:	4829      	ldr	r0, [pc, #164]	@ (80092b8 <_vfiprintf_r+0x220>)
 8009214:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009218:	2206      	movs	r2, #6
 800921a:	f7f6 ffe1 	bl	80001e0 <memchr>
 800921e:	2800      	cmp	r0, #0
 8009220:	d03f      	beq.n	80092a2 <_vfiprintf_r+0x20a>
 8009222:	4b26      	ldr	r3, [pc, #152]	@ (80092bc <_vfiprintf_r+0x224>)
 8009224:	bb1b      	cbnz	r3, 800926e <_vfiprintf_r+0x1d6>
 8009226:	9b03      	ldr	r3, [sp, #12]
 8009228:	3307      	adds	r3, #7
 800922a:	f023 0307 	bic.w	r3, r3, #7
 800922e:	3308      	adds	r3, #8
 8009230:	9303      	str	r3, [sp, #12]
 8009232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009234:	443b      	add	r3, r7
 8009236:	9309      	str	r3, [sp, #36]	@ 0x24
 8009238:	e76a      	b.n	8009110 <_vfiprintf_r+0x78>
 800923a:	fb0c 3202 	mla	r2, ip, r2, r3
 800923e:	460c      	mov	r4, r1
 8009240:	2001      	movs	r0, #1
 8009242:	e7a8      	b.n	8009196 <_vfiprintf_r+0xfe>
 8009244:	2300      	movs	r3, #0
 8009246:	3401      	adds	r4, #1
 8009248:	9305      	str	r3, [sp, #20]
 800924a:	4619      	mov	r1, r3
 800924c:	f04f 0c0a 	mov.w	ip, #10
 8009250:	4620      	mov	r0, r4
 8009252:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009256:	3a30      	subs	r2, #48	@ 0x30
 8009258:	2a09      	cmp	r2, #9
 800925a:	d903      	bls.n	8009264 <_vfiprintf_r+0x1cc>
 800925c:	2b00      	cmp	r3, #0
 800925e:	d0c6      	beq.n	80091ee <_vfiprintf_r+0x156>
 8009260:	9105      	str	r1, [sp, #20]
 8009262:	e7c4      	b.n	80091ee <_vfiprintf_r+0x156>
 8009264:	fb0c 2101 	mla	r1, ip, r1, r2
 8009268:	4604      	mov	r4, r0
 800926a:	2301      	movs	r3, #1
 800926c:	e7f0      	b.n	8009250 <_vfiprintf_r+0x1b8>
 800926e:	ab03      	add	r3, sp, #12
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	462a      	mov	r2, r5
 8009274:	4b12      	ldr	r3, [pc, #72]	@ (80092c0 <_vfiprintf_r+0x228>)
 8009276:	a904      	add	r1, sp, #16
 8009278:	4630      	mov	r0, r6
 800927a:	f3af 8000 	nop.w
 800927e:	4607      	mov	r7, r0
 8009280:	1c78      	adds	r0, r7, #1
 8009282:	d1d6      	bne.n	8009232 <_vfiprintf_r+0x19a>
 8009284:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009286:	07d9      	lsls	r1, r3, #31
 8009288:	d405      	bmi.n	8009296 <_vfiprintf_r+0x1fe>
 800928a:	89ab      	ldrh	r3, [r5, #12]
 800928c:	059a      	lsls	r2, r3, #22
 800928e:	d402      	bmi.n	8009296 <_vfiprintf_r+0x1fe>
 8009290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009292:	f7ff fe7d 	bl	8008f90 <__retarget_lock_release_recursive>
 8009296:	89ab      	ldrh	r3, [r5, #12]
 8009298:	065b      	lsls	r3, r3, #25
 800929a:	f53f af1f 	bmi.w	80090dc <_vfiprintf_r+0x44>
 800929e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092a0:	e71e      	b.n	80090e0 <_vfiprintf_r+0x48>
 80092a2:	ab03      	add	r3, sp, #12
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	462a      	mov	r2, r5
 80092a8:	4b05      	ldr	r3, [pc, #20]	@ (80092c0 <_vfiprintf_r+0x228>)
 80092aa:	a904      	add	r1, sp, #16
 80092ac:	4630      	mov	r0, r6
 80092ae:	f000 f879 	bl	80093a4 <_printf_i>
 80092b2:	e7e4      	b.n	800927e <_vfiprintf_r+0x1e6>
 80092b4:	08009b9c 	.word	0x08009b9c
 80092b8:	08009ba6 	.word	0x08009ba6
 80092bc:	00000000 	.word	0x00000000
 80092c0:	08009073 	.word	0x08009073
 80092c4:	08009ba2 	.word	0x08009ba2

080092c8 <_printf_common>:
 80092c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092cc:	4616      	mov	r6, r2
 80092ce:	4698      	mov	r8, r3
 80092d0:	688a      	ldr	r2, [r1, #8]
 80092d2:	690b      	ldr	r3, [r1, #16]
 80092d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80092d8:	4293      	cmp	r3, r2
 80092da:	bfb8      	it	lt
 80092dc:	4613      	movlt	r3, r2
 80092de:	6033      	str	r3, [r6, #0]
 80092e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80092e4:	4607      	mov	r7, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	b10a      	cbz	r2, 80092ee <_printf_common+0x26>
 80092ea:	3301      	adds	r3, #1
 80092ec:	6033      	str	r3, [r6, #0]
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	0699      	lsls	r1, r3, #26
 80092f2:	bf42      	ittt	mi
 80092f4:	6833      	ldrmi	r3, [r6, #0]
 80092f6:	3302      	addmi	r3, #2
 80092f8:	6033      	strmi	r3, [r6, #0]
 80092fa:	6825      	ldr	r5, [r4, #0]
 80092fc:	f015 0506 	ands.w	r5, r5, #6
 8009300:	d106      	bne.n	8009310 <_printf_common+0x48>
 8009302:	f104 0a19 	add.w	sl, r4, #25
 8009306:	68e3      	ldr	r3, [r4, #12]
 8009308:	6832      	ldr	r2, [r6, #0]
 800930a:	1a9b      	subs	r3, r3, r2
 800930c:	42ab      	cmp	r3, r5
 800930e:	dc26      	bgt.n	800935e <_printf_common+0x96>
 8009310:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009314:	6822      	ldr	r2, [r4, #0]
 8009316:	3b00      	subs	r3, #0
 8009318:	bf18      	it	ne
 800931a:	2301      	movne	r3, #1
 800931c:	0692      	lsls	r2, r2, #26
 800931e:	d42b      	bmi.n	8009378 <_printf_common+0xb0>
 8009320:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009324:	4641      	mov	r1, r8
 8009326:	4638      	mov	r0, r7
 8009328:	47c8      	blx	r9
 800932a:	3001      	adds	r0, #1
 800932c:	d01e      	beq.n	800936c <_printf_common+0xa4>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	6922      	ldr	r2, [r4, #16]
 8009332:	f003 0306 	and.w	r3, r3, #6
 8009336:	2b04      	cmp	r3, #4
 8009338:	bf02      	ittt	eq
 800933a:	68e5      	ldreq	r5, [r4, #12]
 800933c:	6833      	ldreq	r3, [r6, #0]
 800933e:	1aed      	subeq	r5, r5, r3
 8009340:	68a3      	ldr	r3, [r4, #8]
 8009342:	bf0c      	ite	eq
 8009344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009348:	2500      	movne	r5, #0
 800934a:	4293      	cmp	r3, r2
 800934c:	bfc4      	itt	gt
 800934e:	1a9b      	subgt	r3, r3, r2
 8009350:	18ed      	addgt	r5, r5, r3
 8009352:	2600      	movs	r6, #0
 8009354:	341a      	adds	r4, #26
 8009356:	42b5      	cmp	r5, r6
 8009358:	d11a      	bne.n	8009390 <_printf_common+0xc8>
 800935a:	2000      	movs	r0, #0
 800935c:	e008      	b.n	8009370 <_printf_common+0xa8>
 800935e:	2301      	movs	r3, #1
 8009360:	4652      	mov	r2, sl
 8009362:	4641      	mov	r1, r8
 8009364:	4638      	mov	r0, r7
 8009366:	47c8      	blx	r9
 8009368:	3001      	adds	r0, #1
 800936a:	d103      	bne.n	8009374 <_printf_common+0xac>
 800936c:	f04f 30ff 	mov.w	r0, #4294967295
 8009370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009374:	3501      	adds	r5, #1
 8009376:	e7c6      	b.n	8009306 <_printf_common+0x3e>
 8009378:	18e1      	adds	r1, r4, r3
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	2030      	movs	r0, #48	@ 0x30
 800937e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009382:	4422      	add	r2, r4
 8009384:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009388:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800938c:	3302      	adds	r3, #2
 800938e:	e7c7      	b.n	8009320 <_printf_common+0x58>
 8009390:	2301      	movs	r3, #1
 8009392:	4622      	mov	r2, r4
 8009394:	4641      	mov	r1, r8
 8009396:	4638      	mov	r0, r7
 8009398:	47c8      	blx	r9
 800939a:	3001      	adds	r0, #1
 800939c:	d0e6      	beq.n	800936c <_printf_common+0xa4>
 800939e:	3601      	adds	r6, #1
 80093a0:	e7d9      	b.n	8009356 <_printf_common+0x8e>
	...

080093a4 <_printf_i>:
 80093a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093a8:	7e0f      	ldrb	r7, [r1, #24]
 80093aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093ac:	2f78      	cmp	r7, #120	@ 0x78
 80093ae:	4691      	mov	r9, r2
 80093b0:	4680      	mov	r8, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	469a      	mov	sl, r3
 80093b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80093ba:	d807      	bhi.n	80093cc <_printf_i+0x28>
 80093bc:	2f62      	cmp	r7, #98	@ 0x62
 80093be:	d80a      	bhi.n	80093d6 <_printf_i+0x32>
 80093c0:	2f00      	cmp	r7, #0
 80093c2:	f000 80d2 	beq.w	800956a <_printf_i+0x1c6>
 80093c6:	2f58      	cmp	r7, #88	@ 0x58
 80093c8:	f000 80b9 	beq.w	800953e <_printf_i+0x19a>
 80093cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80093d4:	e03a      	b.n	800944c <_printf_i+0xa8>
 80093d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80093da:	2b15      	cmp	r3, #21
 80093dc:	d8f6      	bhi.n	80093cc <_printf_i+0x28>
 80093de:	a101      	add	r1, pc, #4	@ (adr r1, 80093e4 <_printf_i+0x40>)
 80093e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093e4:	0800943d 	.word	0x0800943d
 80093e8:	08009451 	.word	0x08009451
 80093ec:	080093cd 	.word	0x080093cd
 80093f0:	080093cd 	.word	0x080093cd
 80093f4:	080093cd 	.word	0x080093cd
 80093f8:	080093cd 	.word	0x080093cd
 80093fc:	08009451 	.word	0x08009451
 8009400:	080093cd 	.word	0x080093cd
 8009404:	080093cd 	.word	0x080093cd
 8009408:	080093cd 	.word	0x080093cd
 800940c:	080093cd 	.word	0x080093cd
 8009410:	08009551 	.word	0x08009551
 8009414:	0800947b 	.word	0x0800947b
 8009418:	0800950b 	.word	0x0800950b
 800941c:	080093cd 	.word	0x080093cd
 8009420:	080093cd 	.word	0x080093cd
 8009424:	08009573 	.word	0x08009573
 8009428:	080093cd 	.word	0x080093cd
 800942c:	0800947b 	.word	0x0800947b
 8009430:	080093cd 	.word	0x080093cd
 8009434:	080093cd 	.word	0x080093cd
 8009438:	08009513 	.word	0x08009513
 800943c:	6833      	ldr	r3, [r6, #0]
 800943e:	1d1a      	adds	r2, r3, #4
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6032      	str	r2, [r6, #0]
 8009444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009448:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800944c:	2301      	movs	r3, #1
 800944e:	e09d      	b.n	800958c <_printf_i+0x1e8>
 8009450:	6833      	ldr	r3, [r6, #0]
 8009452:	6820      	ldr	r0, [r4, #0]
 8009454:	1d19      	adds	r1, r3, #4
 8009456:	6031      	str	r1, [r6, #0]
 8009458:	0606      	lsls	r6, r0, #24
 800945a:	d501      	bpl.n	8009460 <_printf_i+0xbc>
 800945c:	681d      	ldr	r5, [r3, #0]
 800945e:	e003      	b.n	8009468 <_printf_i+0xc4>
 8009460:	0645      	lsls	r5, r0, #25
 8009462:	d5fb      	bpl.n	800945c <_printf_i+0xb8>
 8009464:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009468:	2d00      	cmp	r5, #0
 800946a:	da03      	bge.n	8009474 <_printf_i+0xd0>
 800946c:	232d      	movs	r3, #45	@ 0x2d
 800946e:	426d      	negs	r5, r5
 8009470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009474:	4859      	ldr	r0, [pc, #356]	@ (80095dc <_printf_i+0x238>)
 8009476:	230a      	movs	r3, #10
 8009478:	e011      	b.n	800949e <_printf_i+0xfa>
 800947a:	6821      	ldr	r1, [r4, #0]
 800947c:	6833      	ldr	r3, [r6, #0]
 800947e:	0608      	lsls	r0, r1, #24
 8009480:	f853 5b04 	ldr.w	r5, [r3], #4
 8009484:	d402      	bmi.n	800948c <_printf_i+0xe8>
 8009486:	0649      	lsls	r1, r1, #25
 8009488:	bf48      	it	mi
 800948a:	b2ad      	uxthmi	r5, r5
 800948c:	2f6f      	cmp	r7, #111	@ 0x6f
 800948e:	4853      	ldr	r0, [pc, #332]	@ (80095dc <_printf_i+0x238>)
 8009490:	6033      	str	r3, [r6, #0]
 8009492:	bf14      	ite	ne
 8009494:	230a      	movne	r3, #10
 8009496:	2308      	moveq	r3, #8
 8009498:	2100      	movs	r1, #0
 800949a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800949e:	6866      	ldr	r6, [r4, #4]
 80094a0:	60a6      	str	r6, [r4, #8]
 80094a2:	2e00      	cmp	r6, #0
 80094a4:	bfa2      	ittt	ge
 80094a6:	6821      	ldrge	r1, [r4, #0]
 80094a8:	f021 0104 	bicge.w	r1, r1, #4
 80094ac:	6021      	strge	r1, [r4, #0]
 80094ae:	b90d      	cbnz	r5, 80094b4 <_printf_i+0x110>
 80094b0:	2e00      	cmp	r6, #0
 80094b2:	d04b      	beq.n	800954c <_printf_i+0x1a8>
 80094b4:	4616      	mov	r6, r2
 80094b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80094ba:	fb03 5711 	mls	r7, r3, r1, r5
 80094be:	5dc7      	ldrb	r7, [r0, r7]
 80094c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094c4:	462f      	mov	r7, r5
 80094c6:	42bb      	cmp	r3, r7
 80094c8:	460d      	mov	r5, r1
 80094ca:	d9f4      	bls.n	80094b6 <_printf_i+0x112>
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	d10b      	bne.n	80094e8 <_printf_i+0x144>
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	07df      	lsls	r7, r3, #31
 80094d4:	d508      	bpl.n	80094e8 <_printf_i+0x144>
 80094d6:	6923      	ldr	r3, [r4, #16]
 80094d8:	6861      	ldr	r1, [r4, #4]
 80094da:	4299      	cmp	r1, r3
 80094dc:	bfde      	ittt	le
 80094de:	2330      	movle	r3, #48	@ 0x30
 80094e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094e8:	1b92      	subs	r2, r2, r6
 80094ea:	6122      	str	r2, [r4, #16]
 80094ec:	f8cd a000 	str.w	sl, [sp]
 80094f0:	464b      	mov	r3, r9
 80094f2:	aa03      	add	r2, sp, #12
 80094f4:	4621      	mov	r1, r4
 80094f6:	4640      	mov	r0, r8
 80094f8:	f7ff fee6 	bl	80092c8 <_printf_common>
 80094fc:	3001      	adds	r0, #1
 80094fe:	d14a      	bne.n	8009596 <_printf_i+0x1f2>
 8009500:	f04f 30ff 	mov.w	r0, #4294967295
 8009504:	b004      	add	sp, #16
 8009506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	f043 0320 	orr.w	r3, r3, #32
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	4833      	ldr	r0, [pc, #204]	@ (80095e0 <_printf_i+0x23c>)
 8009514:	2778      	movs	r7, #120	@ 0x78
 8009516:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	6831      	ldr	r1, [r6, #0]
 800951e:	061f      	lsls	r7, r3, #24
 8009520:	f851 5b04 	ldr.w	r5, [r1], #4
 8009524:	d402      	bmi.n	800952c <_printf_i+0x188>
 8009526:	065f      	lsls	r7, r3, #25
 8009528:	bf48      	it	mi
 800952a:	b2ad      	uxthmi	r5, r5
 800952c:	6031      	str	r1, [r6, #0]
 800952e:	07d9      	lsls	r1, r3, #31
 8009530:	bf44      	itt	mi
 8009532:	f043 0320 	orrmi.w	r3, r3, #32
 8009536:	6023      	strmi	r3, [r4, #0]
 8009538:	b11d      	cbz	r5, 8009542 <_printf_i+0x19e>
 800953a:	2310      	movs	r3, #16
 800953c:	e7ac      	b.n	8009498 <_printf_i+0xf4>
 800953e:	4827      	ldr	r0, [pc, #156]	@ (80095dc <_printf_i+0x238>)
 8009540:	e7e9      	b.n	8009516 <_printf_i+0x172>
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	f023 0320 	bic.w	r3, r3, #32
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	e7f6      	b.n	800953a <_printf_i+0x196>
 800954c:	4616      	mov	r6, r2
 800954e:	e7bd      	b.n	80094cc <_printf_i+0x128>
 8009550:	6833      	ldr	r3, [r6, #0]
 8009552:	6825      	ldr	r5, [r4, #0]
 8009554:	6961      	ldr	r1, [r4, #20]
 8009556:	1d18      	adds	r0, r3, #4
 8009558:	6030      	str	r0, [r6, #0]
 800955a:	062e      	lsls	r6, r5, #24
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	d501      	bpl.n	8009564 <_printf_i+0x1c0>
 8009560:	6019      	str	r1, [r3, #0]
 8009562:	e002      	b.n	800956a <_printf_i+0x1c6>
 8009564:	0668      	lsls	r0, r5, #25
 8009566:	d5fb      	bpl.n	8009560 <_printf_i+0x1bc>
 8009568:	8019      	strh	r1, [r3, #0]
 800956a:	2300      	movs	r3, #0
 800956c:	6123      	str	r3, [r4, #16]
 800956e:	4616      	mov	r6, r2
 8009570:	e7bc      	b.n	80094ec <_printf_i+0x148>
 8009572:	6833      	ldr	r3, [r6, #0]
 8009574:	1d1a      	adds	r2, r3, #4
 8009576:	6032      	str	r2, [r6, #0]
 8009578:	681e      	ldr	r6, [r3, #0]
 800957a:	6862      	ldr	r2, [r4, #4]
 800957c:	2100      	movs	r1, #0
 800957e:	4630      	mov	r0, r6
 8009580:	f7f6 fe2e 	bl	80001e0 <memchr>
 8009584:	b108      	cbz	r0, 800958a <_printf_i+0x1e6>
 8009586:	1b80      	subs	r0, r0, r6
 8009588:	6060      	str	r0, [r4, #4]
 800958a:	6863      	ldr	r3, [r4, #4]
 800958c:	6123      	str	r3, [r4, #16]
 800958e:	2300      	movs	r3, #0
 8009590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009594:	e7aa      	b.n	80094ec <_printf_i+0x148>
 8009596:	6923      	ldr	r3, [r4, #16]
 8009598:	4632      	mov	r2, r6
 800959a:	4649      	mov	r1, r9
 800959c:	4640      	mov	r0, r8
 800959e:	47d0      	blx	sl
 80095a0:	3001      	adds	r0, #1
 80095a2:	d0ad      	beq.n	8009500 <_printf_i+0x15c>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	079b      	lsls	r3, r3, #30
 80095a8:	d413      	bmi.n	80095d2 <_printf_i+0x22e>
 80095aa:	68e0      	ldr	r0, [r4, #12]
 80095ac:	9b03      	ldr	r3, [sp, #12]
 80095ae:	4298      	cmp	r0, r3
 80095b0:	bfb8      	it	lt
 80095b2:	4618      	movlt	r0, r3
 80095b4:	e7a6      	b.n	8009504 <_printf_i+0x160>
 80095b6:	2301      	movs	r3, #1
 80095b8:	4632      	mov	r2, r6
 80095ba:	4649      	mov	r1, r9
 80095bc:	4640      	mov	r0, r8
 80095be:	47d0      	blx	sl
 80095c0:	3001      	adds	r0, #1
 80095c2:	d09d      	beq.n	8009500 <_printf_i+0x15c>
 80095c4:	3501      	adds	r5, #1
 80095c6:	68e3      	ldr	r3, [r4, #12]
 80095c8:	9903      	ldr	r1, [sp, #12]
 80095ca:	1a5b      	subs	r3, r3, r1
 80095cc:	42ab      	cmp	r3, r5
 80095ce:	dcf2      	bgt.n	80095b6 <_printf_i+0x212>
 80095d0:	e7eb      	b.n	80095aa <_printf_i+0x206>
 80095d2:	2500      	movs	r5, #0
 80095d4:	f104 0619 	add.w	r6, r4, #25
 80095d8:	e7f5      	b.n	80095c6 <_printf_i+0x222>
 80095da:	bf00      	nop
 80095dc:	08009bad 	.word	0x08009bad
 80095e0:	08009bbe 	.word	0x08009bbe

080095e4 <__sflush_r>:
 80095e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ec:	0716      	lsls	r6, r2, #28
 80095ee:	4605      	mov	r5, r0
 80095f0:	460c      	mov	r4, r1
 80095f2:	d454      	bmi.n	800969e <__sflush_r+0xba>
 80095f4:	684b      	ldr	r3, [r1, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	dc02      	bgt.n	8009600 <__sflush_r+0x1c>
 80095fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	dd48      	ble.n	8009692 <__sflush_r+0xae>
 8009600:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009602:	2e00      	cmp	r6, #0
 8009604:	d045      	beq.n	8009692 <__sflush_r+0xae>
 8009606:	2300      	movs	r3, #0
 8009608:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800960c:	682f      	ldr	r7, [r5, #0]
 800960e:	6a21      	ldr	r1, [r4, #32]
 8009610:	602b      	str	r3, [r5, #0]
 8009612:	d030      	beq.n	8009676 <__sflush_r+0x92>
 8009614:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	0759      	lsls	r1, r3, #29
 800961a:	d505      	bpl.n	8009628 <__sflush_r+0x44>
 800961c:	6863      	ldr	r3, [r4, #4]
 800961e:	1ad2      	subs	r2, r2, r3
 8009620:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009622:	b10b      	cbz	r3, 8009628 <__sflush_r+0x44>
 8009624:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009626:	1ad2      	subs	r2, r2, r3
 8009628:	2300      	movs	r3, #0
 800962a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800962c:	6a21      	ldr	r1, [r4, #32]
 800962e:	4628      	mov	r0, r5
 8009630:	47b0      	blx	r6
 8009632:	1c43      	adds	r3, r0, #1
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	d106      	bne.n	8009646 <__sflush_r+0x62>
 8009638:	6829      	ldr	r1, [r5, #0]
 800963a:	291d      	cmp	r1, #29
 800963c:	d82b      	bhi.n	8009696 <__sflush_r+0xb2>
 800963e:	4a2a      	ldr	r2, [pc, #168]	@ (80096e8 <__sflush_r+0x104>)
 8009640:	410a      	asrs	r2, r1
 8009642:	07d6      	lsls	r6, r2, #31
 8009644:	d427      	bmi.n	8009696 <__sflush_r+0xb2>
 8009646:	2200      	movs	r2, #0
 8009648:	6062      	str	r2, [r4, #4]
 800964a:	04d9      	lsls	r1, r3, #19
 800964c:	6922      	ldr	r2, [r4, #16]
 800964e:	6022      	str	r2, [r4, #0]
 8009650:	d504      	bpl.n	800965c <__sflush_r+0x78>
 8009652:	1c42      	adds	r2, r0, #1
 8009654:	d101      	bne.n	800965a <__sflush_r+0x76>
 8009656:	682b      	ldr	r3, [r5, #0]
 8009658:	b903      	cbnz	r3, 800965c <__sflush_r+0x78>
 800965a:	6560      	str	r0, [r4, #84]	@ 0x54
 800965c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800965e:	602f      	str	r7, [r5, #0]
 8009660:	b1b9      	cbz	r1, 8009692 <__sflush_r+0xae>
 8009662:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009666:	4299      	cmp	r1, r3
 8009668:	d002      	beq.n	8009670 <__sflush_r+0x8c>
 800966a:	4628      	mov	r0, r5
 800966c:	f7ff fca0 	bl	8008fb0 <_free_r>
 8009670:	2300      	movs	r3, #0
 8009672:	6363      	str	r3, [r4, #52]	@ 0x34
 8009674:	e00d      	b.n	8009692 <__sflush_r+0xae>
 8009676:	2301      	movs	r3, #1
 8009678:	4628      	mov	r0, r5
 800967a:	47b0      	blx	r6
 800967c:	4602      	mov	r2, r0
 800967e:	1c50      	adds	r0, r2, #1
 8009680:	d1c9      	bne.n	8009616 <__sflush_r+0x32>
 8009682:	682b      	ldr	r3, [r5, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d0c6      	beq.n	8009616 <__sflush_r+0x32>
 8009688:	2b1d      	cmp	r3, #29
 800968a:	d001      	beq.n	8009690 <__sflush_r+0xac>
 800968c:	2b16      	cmp	r3, #22
 800968e:	d11e      	bne.n	80096ce <__sflush_r+0xea>
 8009690:	602f      	str	r7, [r5, #0]
 8009692:	2000      	movs	r0, #0
 8009694:	e022      	b.n	80096dc <__sflush_r+0xf8>
 8009696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800969a:	b21b      	sxth	r3, r3
 800969c:	e01b      	b.n	80096d6 <__sflush_r+0xf2>
 800969e:	690f      	ldr	r7, [r1, #16]
 80096a0:	2f00      	cmp	r7, #0
 80096a2:	d0f6      	beq.n	8009692 <__sflush_r+0xae>
 80096a4:	0793      	lsls	r3, r2, #30
 80096a6:	680e      	ldr	r6, [r1, #0]
 80096a8:	bf08      	it	eq
 80096aa:	694b      	ldreq	r3, [r1, #20]
 80096ac:	600f      	str	r7, [r1, #0]
 80096ae:	bf18      	it	ne
 80096b0:	2300      	movne	r3, #0
 80096b2:	eba6 0807 	sub.w	r8, r6, r7
 80096b6:	608b      	str	r3, [r1, #8]
 80096b8:	f1b8 0f00 	cmp.w	r8, #0
 80096bc:	dde9      	ble.n	8009692 <__sflush_r+0xae>
 80096be:	6a21      	ldr	r1, [r4, #32]
 80096c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80096c2:	4643      	mov	r3, r8
 80096c4:	463a      	mov	r2, r7
 80096c6:	4628      	mov	r0, r5
 80096c8:	47b0      	blx	r6
 80096ca:	2800      	cmp	r0, #0
 80096cc:	dc08      	bgt.n	80096e0 <__sflush_r+0xfc>
 80096ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096d6:	81a3      	strh	r3, [r4, #12]
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e0:	4407      	add	r7, r0
 80096e2:	eba8 0800 	sub.w	r8, r8, r0
 80096e6:	e7e7      	b.n	80096b8 <__sflush_r+0xd4>
 80096e8:	dfbffffe 	.word	0xdfbffffe

080096ec <_fflush_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	690b      	ldr	r3, [r1, #16]
 80096f0:	4605      	mov	r5, r0
 80096f2:	460c      	mov	r4, r1
 80096f4:	b913      	cbnz	r3, 80096fc <_fflush_r+0x10>
 80096f6:	2500      	movs	r5, #0
 80096f8:	4628      	mov	r0, r5
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	b118      	cbz	r0, 8009706 <_fflush_r+0x1a>
 80096fe:	6a03      	ldr	r3, [r0, #32]
 8009700:	b90b      	cbnz	r3, 8009706 <_fflush_r+0x1a>
 8009702:	f7ff fad9 	bl	8008cb8 <__sinit>
 8009706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0f3      	beq.n	80096f6 <_fflush_r+0xa>
 800970e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009710:	07d0      	lsls	r0, r2, #31
 8009712:	d404      	bmi.n	800971e <_fflush_r+0x32>
 8009714:	0599      	lsls	r1, r3, #22
 8009716:	d402      	bmi.n	800971e <_fflush_r+0x32>
 8009718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800971a:	f7ff fc38 	bl	8008f8e <__retarget_lock_acquire_recursive>
 800971e:	4628      	mov	r0, r5
 8009720:	4621      	mov	r1, r4
 8009722:	f7ff ff5f 	bl	80095e4 <__sflush_r>
 8009726:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009728:	07da      	lsls	r2, r3, #31
 800972a:	4605      	mov	r5, r0
 800972c:	d4e4      	bmi.n	80096f8 <_fflush_r+0xc>
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	059b      	lsls	r3, r3, #22
 8009732:	d4e1      	bmi.n	80096f8 <_fflush_r+0xc>
 8009734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009736:	f7ff fc2b 	bl	8008f90 <__retarget_lock_release_recursive>
 800973a:	e7dd      	b.n	80096f8 <_fflush_r+0xc>

0800973c <__swbuf_r>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	460e      	mov	r6, r1
 8009740:	4614      	mov	r4, r2
 8009742:	4605      	mov	r5, r0
 8009744:	b118      	cbz	r0, 800974e <__swbuf_r+0x12>
 8009746:	6a03      	ldr	r3, [r0, #32]
 8009748:	b90b      	cbnz	r3, 800974e <__swbuf_r+0x12>
 800974a:	f7ff fab5 	bl	8008cb8 <__sinit>
 800974e:	69a3      	ldr	r3, [r4, #24]
 8009750:	60a3      	str	r3, [r4, #8]
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	071a      	lsls	r2, r3, #28
 8009756:	d501      	bpl.n	800975c <__swbuf_r+0x20>
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	b943      	cbnz	r3, 800976e <__swbuf_r+0x32>
 800975c:	4621      	mov	r1, r4
 800975e:	4628      	mov	r0, r5
 8009760:	f000 f82a 	bl	80097b8 <__swsetup_r>
 8009764:	b118      	cbz	r0, 800976e <__swbuf_r+0x32>
 8009766:	f04f 37ff 	mov.w	r7, #4294967295
 800976a:	4638      	mov	r0, r7
 800976c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	6922      	ldr	r2, [r4, #16]
 8009772:	1a98      	subs	r0, r3, r2
 8009774:	6963      	ldr	r3, [r4, #20]
 8009776:	b2f6      	uxtb	r6, r6
 8009778:	4283      	cmp	r3, r0
 800977a:	4637      	mov	r7, r6
 800977c:	dc05      	bgt.n	800978a <__swbuf_r+0x4e>
 800977e:	4621      	mov	r1, r4
 8009780:	4628      	mov	r0, r5
 8009782:	f7ff ffb3 	bl	80096ec <_fflush_r>
 8009786:	2800      	cmp	r0, #0
 8009788:	d1ed      	bne.n	8009766 <__swbuf_r+0x2a>
 800978a:	68a3      	ldr	r3, [r4, #8]
 800978c:	3b01      	subs	r3, #1
 800978e:	60a3      	str	r3, [r4, #8]
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	1c5a      	adds	r2, r3, #1
 8009794:	6022      	str	r2, [r4, #0]
 8009796:	701e      	strb	r6, [r3, #0]
 8009798:	6962      	ldr	r2, [r4, #20]
 800979a:	1c43      	adds	r3, r0, #1
 800979c:	429a      	cmp	r2, r3
 800979e:	d004      	beq.n	80097aa <__swbuf_r+0x6e>
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	07db      	lsls	r3, r3, #31
 80097a4:	d5e1      	bpl.n	800976a <__swbuf_r+0x2e>
 80097a6:	2e0a      	cmp	r6, #10
 80097a8:	d1df      	bne.n	800976a <__swbuf_r+0x2e>
 80097aa:	4621      	mov	r1, r4
 80097ac:	4628      	mov	r0, r5
 80097ae:	f7ff ff9d 	bl	80096ec <_fflush_r>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d0d9      	beq.n	800976a <__swbuf_r+0x2e>
 80097b6:	e7d6      	b.n	8009766 <__swbuf_r+0x2a>

080097b8 <__swsetup_r>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	4b29      	ldr	r3, [pc, #164]	@ (8009860 <__swsetup_r+0xa8>)
 80097bc:	4605      	mov	r5, r0
 80097be:	6818      	ldr	r0, [r3, #0]
 80097c0:	460c      	mov	r4, r1
 80097c2:	b118      	cbz	r0, 80097cc <__swsetup_r+0x14>
 80097c4:	6a03      	ldr	r3, [r0, #32]
 80097c6:	b90b      	cbnz	r3, 80097cc <__swsetup_r+0x14>
 80097c8:	f7ff fa76 	bl	8008cb8 <__sinit>
 80097cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097d0:	0719      	lsls	r1, r3, #28
 80097d2:	d422      	bmi.n	800981a <__swsetup_r+0x62>
 80097d4:	06da      	lsls	r2, r3, #27
 80097d6:	d407      	bmi.n	80097e8 <__swsetup_r+0x30>
 80097d8:	2209      	movs	r2, #9
 80097da:	602a      	str	r2, [r5, #0]
 80097dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097e0:	81a3      	strh	r3, [r4, #12]
 80097e2:	f04f 30ff 	mov.w	r0, #4294967295
 80097e6:	e033      	b.n	8009850 <__swsetup_r+0x98>
 80097e8:	0758      	lsls	r0, r3, #29
 80097ea:	d512      	bpl.n	8009812 <__swsetup_r+0x5a>
 80097ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097ee:	b141      	cbz	r1, 8009802 <__swsetup_r+0x4a>
 80097f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097f4:	4299      	cmp	r1, r3
 80097f6:	d002      	beq.n	80097fe <__swsetup_r+0x46>
 80097f8:	4628      	mov	r0, r5
 80097fa:	f7ff fbd9 	bl	8008fb0 <_free_r>
 80097fe:	2300      	movs	r3, #0
 8009800:	6363      	str	r3, [r4, #52]	@ 0x34
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009808:	81a3      	strh	r3, [r4, #12]
 800980a:	2300      	movs	r3, #0
 800980c:	6063      	str	r3, [r4, #4]
 800980e:	6923      	ldr	r3, [r4, #16]
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	f043 0308 	orr.w	r3, r3, #8
 8009818:	81a3      	strh	r3, [r4, #12]
 800981a:	6923      	ldr	r3, [r4, #16]
 800981c:	b94b      	cbnz	r3, 8009832 <__swsetup_r+0x7a>
 800981e:	89a3      	ldrh	r3, [r4, #12]
 8009820:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009828:	d003      	beq.n	8009832 <__swsetup_r+0x7a>
 800982a:	4621      	mov	r1, r4
 800982c:	4628      	mov	r0, r5
 800982e:	f000 f83f 	bl	80098b0 <__smakebuf_r>
 8009832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009836:	f013 0201 	ands.w	r2, r3, #1
 800983a:	d00a      	beq.n	8009852 <__swsetup_r+0x9a>
 800983c:	2200      	movs	r2, #0
 800983e:	60a2      	str	r2, [r4, #8]
 8009840:	6962      	ldr	r2, [r4, #20]
 8009842:	4252      	negs	r2, r2
 8009844:	61a2      	str	r2, [r4, #24]
 8009846:	6922      	ldr	r2, [r4, #16]
 8009848:	b942      	cbnz	r2, 800985c <__swsetup_r+0xa4>
 800984a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800984e:	d1c5      	bne.n	80097dc <__swsetup_r+0x24>
 8009850:	bd38      	pop	{r3, r4, r5, pc}
 8009852:	0799      	lsls	r1, r3, #30
 8009854:	bf58      	it	pl
 8009856:	6962      	ldrpl	r2, [r4, #20]
 8009858:	60a2      	str	r2, [r4, #8]
 800985a:	e7f4      	b.n	8009846 <__swsetup_r+0x8e>
 800985c:	2000      	movs	r0, #0
 800985e:	e7f7      	b.n	8009850 <__swsetup_r+0x98>
 8009860:	200000e8 	.word	0x200000e8

08009864 <__swhatbuf_r>:
 8009864:	b570      	push	{r4, r5, r6, lr}
 8009866:	460c      	mov	r4, r1
 8009868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986c:	2900      	cmp	r1, #0
 800986e:	b096      	sub	sp, #88	@ 0x58
 8009870:	4615      	mov	r5, r2
 8009872:	461e      	mov	r6, r3
 8009874:	da0d      	bge.n	8009892 <__swhatbuf_r+0x2e>
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800987c:	f04f 0100 	mov.w	r1, #0
 8009880:	bf14      	ite	ne
 8009882:	2340      	movne	r3, #64	@ 0x40
 8009884:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009888:	2000      	movs	r0, #0
 800988a:	6031      	str	r1, [r6, #0]
 800988c:	602b      	str	r3, [r5, #0]
 800988e:	b016      	add	sp, #88	@ 0x58
 8009890:	bd70      	pop	{r4, r5, r6, pc}
 8009892:	466a      	mov	r2, sp
 8009894:	f000 f848 	bl	8009928 <_fstat_r>
 8009898:	2800      	cmp	r0, #0
 800989a:	dbec      	blt.n	8009876 <__swhatbuf_r+0x12>
 800989c:	9901      	ldr	r1, [sp, #4]
 800989e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80098a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80098a6:	4259      	negs	r1, r3
 80098a8:	4159      	adcs	r1, r3
 80098aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098ae:	e7eb      	b.n	8009888 <__swhatbuf_r+0x24>

080098b0 <__smakebuf_r>:
 80098b0:	898b      	ldrh	r3, [r1, #12]
 80098b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098b4:	079d      	lsls	r5, r3, #30
 80098b6:	4606      	mov	r6, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	d507      	bpl.n	80098cc <__smakebuf_r+0x1c>
 80098bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	6123      	str	r3, [r4, #16]
 80098c4:	2301      	movs	r3, #1
 80098c6:	6163      	str	r3, [r4, #20]
 80098c8:	b003      	add	sp, #12
 80098ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098cc:	ab01      	add	r3, sp, #4
 80098ce:	466a      	mov	r2, sp
 80098d0:	f7ff ffc8 	bl	8009864 <__swhatbuf_r>
 80098d4:	9f00      	ldr	r7, [sp, #0]
 80098d6:	4605      	mov	r5, r0
 80098d8:	4639      	mov	r1, r7
 80098da:	4630      	mov	r0, r6
 80098dc:	f7ff f8d4 	bl	8008a88 <_malloc_r>
 80098e0:	b948      	cbnz	r0, 80098f6 <__smakebuf_r+0x46>
 80098e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e6:	059a      	lsls	r2, r3, #22
 80098e8:	d4ee      	bmi.n	80098c8 <__smakebuf_r+0x18>
 80098ea:	f023 0303 	bic.w	r3, r3, #3
 80098ee:	f043 0302 	orr.w	r3, r3, #2
 80098f2:	81a3      	strh	r3, [r4, #12]
 80098f4:	e7e2      	b.n	80098bc <__smakebuf_r+0xc>
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	6020      	str	r0, [r4, #0]
 80098fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098fe:	81a3      	strh	r3, [r4, #12]
 8009900:	9b01      	ldr	r3, [sp, #4]
 8009902:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009906:	b15b      	cbz	r3, 8009920 <__smakebuf_r+0x70>
 8009908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800990c:	4630      	mov	r0, r6
 800990e:	f000 f81d 	bl	800994c <_isatty_r>
 8009912:	b128      	cbz	r0, 8009920 <__smakebuf_r+0x70>
 8009914:	89a3      	ldrh	r3, [r4, #12]
 8009916:	f023 0303 	bic.w	r3, r3, #3
 800991a:	f043 0301 	orr.w	r3, r3, #1
 800991e:	81a3      	strh	r3, [r4, #12]
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	431d      	orrs	r5, r3
 8009924:	81a5      	strh	r5, [r4, #12]
 8009926:	e7cf      	b.n	80098c8 <__smakebuf_r+0x18>

08009928 <_fstat_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4d07      	ldr	r5, [pc, #28]	@ (8009948 <_fstat_r+0x20>)
 800992c:	2300      	movs	r3, #0
 800992e:	4604      	mov	r4, r0
 8009930:	4608      	mov	r0, r1
 8009932:	4611      	mov	r1, r2
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	f7f7 ff36 	bl	80017a6 <_fstat>
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	d102      	bne.n	8009944 <_fstat_r+0x1c>
 800993e:	682b      	ldr	r3, [r5, #0]
 8009940:	b103      	cbz	r3, 8009944 <_fstat_r+0x1c>
 8009942:	6023      	str	r3, [r4, #0]
 8009944:	bd38      	pop	{r3, r4, r5, pc}
 8009946:	bf00      	nop
 8009948:	20004e64 	.word	0x20004e64

0800994c <_isatty_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d06      	ldr	r5, [pc, #24]	@ (8009968 <_isatty_r+0x1c>)
 8009950:	2300      	movs	r3, #0
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	602b      	str	r3, [r5, #0]
 8009958:	f7f7 ff35 	bl	80017c6 <_isatty>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d102      	bne.n	8009966 <_isatty_r+0x1a>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	b103      	cbz	r3, 8009966 <_isatty_r+0x1a>
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	bd38      	pop	{r3, r4, r5, pc}
 8009968:	20004e64 	.word	0x20004e64

0800996c <sqrtf>:
 800996c:	b508      	push	{r3, lr}
 800996e:	ed2d 8b02 	vpush	{d8}
 8009972:	eeb0 8a40 	vmov.f32	s16, s0
 8009976:	f000 f817 	bl	80099a8 <__ieee754_sqrtf>
 800997a:	eeb4 8a48 	vcmp.f32	s16, s16
 800997e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009982:	d60c      	bvs.n	800999e <sqrtf+0x32>
 8009984:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80099a4 <sqrtf+0x38>
 8009988:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800998c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009990:	d505      	bpl.n	800999e <sqrtf+0x32>
 8009992:	f7ff fad1 	bl	8008f38 <__errno>
 8009996:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800999a:	2321      	movs	r3, #33	@ 0x21
 800999c:	6003      	str	r3, [r0, #0]
 800999e:	ecbd 8b02 	vpop	{d8}
 80099a2:	bd08      	pop	{r3, pc}
 80099a4:	00000000 	.word	0x00000000

080099a8 <__ieee754_sqrtf>:
 80099a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80099ac:	4770      	bx	lr
	...

080099b0 <_init>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	bf00      	nop
 80099b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b6:	bc08      	pop	{r3}
 80099b8:	469e      	mov	lr, r3
 80099ba:	4770      	bx	lr

080099bc <_fini>:
 80099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099be:	bf00      	nop
 80099c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c2:	bc08      	pop	{r3}
 80099c4:	469e      	mov	lr, r3
 80099c6:	4770      	bx	lr
