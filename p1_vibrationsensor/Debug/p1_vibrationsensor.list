
p1_vibrationsensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a84  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004c1c  08004c1c  00005c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c34  08004c34  0000612c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c34  08004c34  00005c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c3c  08004c3c  0000612c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c3c  08004c3c  00005c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c40  08004c40  00005c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000012c  20000000  08004c44  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  2000012c  08004d70  0000612c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08004d70  0000649c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000612c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010139  00000000  00000000  0000615c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b8  00000000  00000000  00016295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00018a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d70  00000000  00000000  00019ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001661b  00000000  00000000  0001a910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133d7  00000000  00000000  00030f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094775  00000000  00000000  00044302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8a77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be8  00000000  00000000  000d8abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000dd6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000012c 	.word	0x2000012c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004c04 	.word	0x08004c04

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000130 	.word	0x20000130
 80001d4:	08004c04 	.word	0x08004c04

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80004d6:	f004 f92f 	bl	8004738 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	461a      	mov	r2, r3
 80004e2:	2120      	movs	r1, #32
 80004e4:	2032      	movs	r0, #50	@ 0x32
 80004e6:	f004 f97f 	bl	80047e8 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80004ea:	2300      	movs	r3, #0
 80004ec:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	461a      	mov	r2, r3
 80004f2:	2123      	movs	r1, #35	@ 0x23
 80004f4:	2032      	movs	r0, #50	@ 0x32
 80004f6:	f004 f977 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 80004fa:	bf00      	nop
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800051a:	f004 f90d 	bl	8004738 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 800051e:	210f      	movs	r1, #15
 8000520:	2032      	movs	r0, #50	@ 0x32
 8000522:	f004 f974 	bl	800480e <COMPASSACCELERO_IO_Read>
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 800052a:	79fb      	ldrb	r3, [r7, #7]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800053a:	2124      	movs	r1, #36	@ 0x24
 800053c:	2032      	movs	r0, #50	@ 0x32
 800053e:	f004 f966 	bl	800480e <COMPASSACCELERO_IO_Read>
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800054c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	461a      	mov	r2, r3
 8000552:	2124      	movs	r1, #36	@ 0x24
 8000554:	2032      	movs	r0, #50	@ 0x32
 8000556:	f004 f947 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b084      	sub	sp, #16
 8000566:	af00      	add	r7, sp, #0
 8000568:	4603      	mov	r3, r0
 800056a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800056c:	2121      	movs	r1, #33	@ 0x21
 800056e:	2032      	movs	r0, #50	@ 0x32
 8000570:	f004 f94d 	bl	800480e <COMPASSACCELERO_IO_Read>
 8000574:	4603      	mov	r3, r0
 8000576:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	f003 030c 	and.w	r3, r3, #12
 800057e:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000580:	7bfa      	ldrb	r2, [r7, #15]
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4313      	orrs	r3, r2
 8000586:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	461a      	mov	r2, r3
 800058c:	2121      	movs	r1, #33	@ 0x21
 800058e:	2032      	movs	r0, #50	@ 0x32
 8000590:	f004 f92a 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80005a6:	2121      	movs	r1, #33	@ 0x21
 80005a8:	2032      	movs	r0, #50	@ 0x32
 80005aa:	f004 f930 	bl	800480e <COMPASSACCELERO_IO_Read>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	f023 0308 	bic.w	r3, r3, #8
 80005b8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80005ba:	7bfa      	ldrb	r2, [r7, #15]
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	4313      	orrs	r3, r2
 80005c0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	461a      	mov	r2, r3
 80005c6:	2121      	movs	r1, #33	@ 0x21
 80005c8:	2032      	movs	r0, #50	@ 0x32
 80005ca:	f004 f90d 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b088      	sub	sp, #32
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80005de:	2300      	movs	r3, #0
 80005e0:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80005e6:	2301      	movs	r3, #1
 80005e8:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80005ea:	2123      	movs	r1, #35	@ 0x23
 80005ec:	2032      	movs	r0, #50	@ 0x32
 80005ee:	f004 f90e 	bl	800480e <COMPASSACCELERO_IO_Read>
 80005f2:	4603      	mov	r3, r0
 80005f4:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80005f6:	2124      	movs	r1, #36	@ 0x24
 80005f8:	2032      	movs	r0, #50	@ 0x32
 80005fa:	f004 f908 	bl	800480e <COMPASSACCELERO_IO_Read>
 80005fe:	4603      	mov	r3, r0
 8000600:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8000602:	2128      	movs	r1, #40	@ 0x28
 8000604:	2032      	movs	r0, #50	@ 0x32
 8000606:	f004 f902 	bl	800480e <COMPASSACCELERO_IO_Read>
 800060a:	4603      	mov	r3, r0
 800060c:	b25b      	sxtb	r3, r3
 800060e:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8000610:	2129      	movs	r1, #41	@ 0x29
 8000612:	2032      	movs	r0, #50	@ 0x32
 8000614:	f004 f8fb 	bl	800480e <COMPASSACCELERO_IO_Read>
 8000618:	4603      	mov	r3, r0
 800061a:	b25b      	sxtb	r3, r3
 800061c:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800061e:	212a      	movs	r1, #42	@ 0x2a
 8000620:	2032      	movs	r0, #50	@ 0x32
 8000622:	f004 f8f4 	bl	800480e <COMPASSACCELERO_IO_Read>
 8000626:	4603      	mov	r3, r0
 8000628:	b25b      	sxtb	r3, r3
 800062a:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800062c:	212b      	movs	r1, #43	@ 0x2b
 800062e:	2032      	movs	r0, #50	@ 0x32
 8000630:	f004 f8ed 	bl	800480e <COMPASSACCELERO_IO_Read>
 8000634:	4603      	mov	r3, r0
 8000636:	b25b      	sxtb	r3, r3
 8000638:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800063a:	212c      	movs	r1, #44	@ 0x2c
 800063c:	2032      	movs	r0, #50	@ 0x32
 800063e:	f004 f8e6 	bl	800480e <COMPASSACCELERO_IO_Read>
 8000642:	4603      	mov	r3, r0
 8000644:	b25b      	sxtb	r3, r3
 8000646:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8000648:	212d      	movs	r1, #45	@ 0x2d
 800064a:	2032      	movs	r0, #50	@ 0x32
 800064c:	f004 f8df 	bl	800480e <COMPASSACCELERO_IO_Read>
 8000650:	4603      	mov	r3, r0
 8000652:	b25b      	sxtb	r3, r3
 8000654:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8000656:	7d3b      	ldrb	r3, [r7, #20]
 8000658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800065c:	2b00      	cmp	r3, #0
 800065e:	d123      	bne.n	80006a8 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	77fb      	strb	r3, [r7, #31]
 8000664:	e01c      	b.n	80006a0 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000666:	7ffb      	ldrb	r3, [r7, #31]
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	3301      	adds	r3, #1
 800066c:	3320      	adds	r3, #32
 800066e:	443b      	add	r3, r7
 8000670:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000674:	b29b      	uxth	r3, r3
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b29a      	uxth	r2, r3
 800067a:	7ffb      	ldrb	r3, [r7, #31]
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	3320      	adds	r3, #32
 8000680:	443b      	add	r3, r7
 8000682:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000686:	b29b      	uxth	r3, r3
 8000688:	4413      	add	r3, r2
 800068a:	b29a      	uxth	r2, r3
 800068c:	7ffb      	ldrb	r3, [r7, #31]
 800068e:	b212      	sxth	r2, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	3320      	adds	r3, #32
 8000694:	443b      	add	r3, r7
 8000696:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800069a:	7ffb      	ldrb	r3, [r7, #31]
 800069c:	3301      	adds	r3, #1
 800069e:	77fb      	strb	r3, [r7, #31]
 80006a0:	7ffb      	ldrb	r3, [r7, #31]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d9df      	bls.n	8000666 <LSM303AGR_AccReadXYZ+0x90>
 80006a6:	e022      	b.n	80006ee <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	77fb      	strb	r3, [r7, #31]
 80006ac:	e01c      	b.n	80006e8 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80006ae:	7ffb      	ldrb	r3, [r7, #31]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	3320      	adds	r3, #32
 80006b4:	443b      	add	r3, r7
 80006b6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	021b      	lsls	r3, r3, #8
 80006be:	b29a      	uxth	r2, r3
 80006c0:	7ffb      	ldrb	r3, [r7, #31]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	3301      	adds	r3, #1
 80006c6:	3320      	adds	r3, #32
 80006c8:	443b      	add	r3, r7
 80006ca:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	4413      	add	r3, r2
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	7ffb      	ldrb	r3, [r7, #31]
 80006d6:	b212      	sxth	r2, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	3320      	adds	r3, #32
 80006dc:	443b      	add	r3, r7
 80006de:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80006e2:	7ffb      	ldrb	r3, [r7, #31]
 80006e4:	3301      	adds	r3, #1
 80006e6:	77fb      	strb	r3, [r7, #31]
 80006e8:	7ffb      	ldrb	r3, [r7, #31]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d9df      	bls.n	80006ae <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 80006ee:	7d3b      	ldrb	r3, [r7, #20]
 80006f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006f4:	2b30      	cmp	r3, #48	@ 0x30
 80006f6:	d013      	beq.n	8000720 <LSM303AGR_AccReadXYZ+0x14a>
 80006f8:	2b30      	cmp	r3, #48	@ 0x30
 80006fa:	dc14      	bgt.n	8000726 <LSM303AGR_AccReadXYZ+0x150>
 80006fc:	2b20      	cmp	r3, #32
 80006fe:	d00c      	beq.n	800071a <LSM303AGR_AccReadXYZ+0x144>
 8000700:	2b20      	cmp	r3, #32
 8000702:	dc10      	bgt.n	8000726 <LSM303AGR_AccReadXYZ+0x150>
 8000704:	2b00      	cmp	r3, #0
 8000706:	d002      	beq.n	800070e <LSM303AGR_AccReadXYZ+0x138>
 8000708:	2b10      	cmp	r3, #16
 800070a:	d003      	beq.n	8000714 <LSM303AGR_AccReadXYZ+0x13e>
 800070c:	e00b      	b.n	8000726 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 800070e:	2301      	movs	r3, #1
 8000710:	77bb      	strb	r3, [r7, #30]
    break;
 8000712:	e008      	b.n	8000726 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8000714:	2302      	movs	r3, #2
 8000716:	77bb      	strb	r3, [r7, #30]
    break;
 8000718:	e005      	b.n	8000726 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800071a:	2304      	movs	r3, #4
 800071c:	77bb      	strb	r3, [r7, #30]
    break;
 800071e:	e002      	b.n	8000726 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8000720:	230c      	movs	r3, #12
 8000722:	77bb      	strb	r3, [r7, #30]
    break;
 8000724:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	77fb      	strb	r3, [r7, #31]
 800072a:	e014      	b.n	8000756 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800072c:	7ffb      	ldrb	r3, [r7, #31]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	3320      	adds	r3, #32
 8000732:	443b      	add	r3, r7
 8000734:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000738:	b29a      	uxth	r2, r3
 800073a:	7fbb      	ldrb	r3, [r7, #30]
 800073c:	b29b      	uxth	r3, r3
 800073e:	fb12 f303 	smulbb	r3, r2, r3
 8000742:	b299      	uxth	r1, r3
 8000744:	7ffb      	ldrb	r3, [r7, #31]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4413      	add	r3, r2
 800074c:	b20a      	sxth	r2, r1
 800074e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000750:	7ffb      	ldrb	r3, [r7, #31]
 8000752:	3301      	adds	r3, #1
 8000754:	77fb      	strb	r3, [r7, #31]
 8000756:	7ffb      	ldrb	r3, [r7, #31]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d9e7      	bls.n	800072c <LSM303AGR_AccReadXYZ+0x156>
  }
}
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b084      	sub	sp, #16
 800076a:	af00      	add	r7, sp, #0
 800076c:	4603      	mov	r3, r0
 800076e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000774:	2121      	movs	r1, #33	@ 0x21
 8000776:	2032      	movs	r0, #50	@ 0x32
 8000778:	f004 f849 	bl	800480e <COMPASSACCELERO_IO_Read>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f023 0304 	bic.w	r3, r3, #4
 8000786:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000788:	7bfa      	ldrb	r2, [r7, #15]
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	4313      	orrs	r3, r2
 800078e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	461a      	mov	r2, r3
 8000794:	2121      	movs	r1, #33	@ 0x21
 8000796:	2032      	movs	r0, #50	@ 0x32
 8000798:	f004 f826 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80007ae:	2300      	movs	r3, #0
 80007b0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 80007b2:	2122      	movs	r1, #34	@ 0x22
 80007b4:	2032      	movs	r0, #50	@ 0x32
 80007b6:	f004 f82a 	bl	800480e <COMPASSACCELERO_IO_Read>
 80007ba:	4603      	mov	r3, r0
 80007bc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	461a      	mov	r2, r3
 80007ca:	2122      	movs	r1, #34	@ 0x22
 80007cc:	2032      	movs	r0, #50	@ 0x32
 80007ce:	f004 f80b 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80007da:	b580      	push	{r7, lr}
 80007dc:	b084      	sub	sp, #16
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80007e8:	2138      	movs	r1, #56	@ 0x38
 80007ea:	2032      	movs	r0, #50	@ 0x32
 80007ec:	f004 f80f 	bl	800480e <COMPASSACCELERO_IO_Read>
 80007f0:	4603      	mov	r3, r0
 80007f2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80007f4:	7bfa      	ldrb	r2, [r7, #15]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	461a      	mov	r2, r3
 8000800:	2138      	movs	r1, #56	@ 0x38
 8000802:	2032      	movs	r0, #50	@ 0x32
 8000804:	f003 fff0 	bl	80047e8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000808:	230a      	movs	r3, #10
 800080a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	461a      	mov	r2, r3
 8000810:	213a      	movs	r1, #58	@ 0x3a
 8000812:	2032      	movs	r0, #50	@ 0x32
 8000814:	f003 ffe8 	bl	80047e8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000818:	2305      	movs	r3, #5
 800081a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	461a      	mov	r2, r3
 8000820:	213b      	movs	r1, #59	@ 0x3b
 8000822:	2032      	movs	r0, #50	@ 0x32
 8000824:	f003 ffe0 	bl	80047e8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	461a      	mov	r2, r3
 800082c:	213c      	movs	r1, #60	@ 0x3c
 800082e:	2032      	movs	r0, #50	@ 0x32
 8000830:	f003 ffda 	bl	80047e8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000834:	2332      	movs	r3, #50	@ 0x32
 8000836:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	213d      	movs	r1, #61	@ 0x3d
 800083e:	2032      	movs	r0, #50	@ 0x32
 8000840:	f003 ffd2 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000850:	f003 ff9a 	bl	8004788 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8000854:	2080      	movs	r0, #128	@ 0x80
 8000856:	f7ff ffa5 	bl	80007a4 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 800085a:	2004      	movs	r0, #4
 800085c:	f7ff ff83 	bl	8000766 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8000860:	2010      	movs	r0, #16
 8000862:	f7ff ffba 	bl	80007da <LSM303AGR_AccClickITEnable>
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}

0800086a <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 800086a:	b580      	push	{r7, lr}
 800086c:	b084      	sub	sp, #16
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000878:	f003 ff5e 	bl	8004738 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	461a      	mov	r2, r3
 8000884:	2120      	movs	r1, #32
 8000886:	2032      	movs	r0, #50	@ 0x32
 8000888:	f003 ffae 	bl	80047e8 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct >> 8);
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	0a1b      	lsrs	r3, r3, #8
 8000890:	b29b      	uxth	r3, r3
 8000892:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	461a      	mov	r2, r3
 8000898:	2123      	movs	r1, #35	@ 0x23
 800089a:	2032      	movs	r0, #50	@ 0x32
 800089c:	f003 ffa4 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80008bc:	2300      	movs	r3, #0
 80008be:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80008c0:	f003 ff3a 	bl	8004738 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80008c4:	210f      	movs	r1, #15
 80008c6:	2032      	movs	r0, #50	@ 0x32
 80008c8:	f003 ffa1 	bl	800480e <COMPASSACCELERO_IO_Read>
 80008cc:	4603      	mov	r3, r0
 80008ce:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80008e0:	2124      	movs	r1, #36	@ 0x24
 80008e2:	2032      	movs	r0, #50	@ 0x32
 80008e4:	f003 ff93 	bl	800480e <COMPASSACCELERO_IO_Read>
 80008e8:	4603      	mov	r3, r0
 80008ea:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008f2:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	461a      	mov	r2, r3
 80008f8:	2124      	movs	r1, #36	@ 0x24
 80008fa:	2032      	movs	r0, #50	@ 0x32
 80008fc:	f003 ff74 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000912:	2121      	movs	r1, #33	@ 0x21
 8000914:	2032      	movs	r0, #50	@ 0x32
 8000916:	f003 ff7a 	bl	800480e <COMPASSACCELERO_IO_Read>
 800091a:	4603      	mov	r3, r0
 800091c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	f003 030c 	and.w	r3, r3, #12
 8000924:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000926:	7bfa      	ldrb	r2, [r7, #15]
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4313      	orrs	r3, r2
 800092c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	461a      	mov	r2, r3
 8000932:	2121      	movs	r1, #33	@ 0x21
 8000934:	2032      	movs	r0, #50	@ 0x32
 8000936:	f003 ff57 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b084      	sub	sp, #16
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800094c:	2121      	movs	r1, #33	@ 0x21
 800094e:	2032      	movs	r0, #50	@ 0x32
 8000950:	f003 ff5d 	bl	800480e <COMPASSACCELERO_IO_Read>
 8000954:	4603      	mov	r3, r0
 8000956:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	f023 0308 	bic.w	r3, r3, #8
 800095e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000960:	7bfa      	ldrb	r2, [r7, #15]
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	4313      	orrs	r3, r2
 8000966:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	461a      	mov	r2, r3
 800096c:	2121      	movs	r1, #33	@ 0x21
 800096e:	2032      	movs	r0, #50	@ 0x32
 8000970:	f003 ff3a 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000984:	2300      	movs	r3, #0
 8000986:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800098c:	2301      	movs	r3, #1
 800098e:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000990:	2123      	movs	r1, #35	@ 0x23
 8000992:	2032      	movs	r0, #50	@ 0x32
 8000994:	f003 ff3b 	bl	800480e <COMPASSACCELERO_IO_Read>
 8000998:	4603      	mov	r3, r0
 800099a:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800099c:	2124      	movs	r1, #36	@ 0x24
 800099e:	2032      	movs	r0, #50	@ 0x32
 80009a0:	f003 ff35 	bl	800480e <COMPASSACCELERO_IO_Read>
 80009a4:	4603      	mov	r3, r0
 80009a6:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80009a8:	2128      	movs	r1, #40	@ 0x28
 80009aa:	2032      	movs	r0, #50	@ 0x32
 80009ac:	f003 ff2f 	bl	800480e <COMPASSACCELERO_IO_Read>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80009b6:	2129      	movs	r1, #41	@ 0x29
 80009b8:	2032      	movs	r0, #50	@ 0x32
 80009ba:	f003 ff28 	bl	800480e <COMPASSACCELERO_IO_Read>
 80009be:	4603      	mov	r3, r0
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80009c4:	212a      	movs	r1, #42	@ 0x2a
 80009c6:	2032      	movs	r0, #50	@ 0x32
 80009c8:	f003 ff21 	bl	800480e <COMPASSACCELERO_IO_Read>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80009d2:	212b      	movs	r1, #43	@ 0x2b
 80009d4:	2032      	movs	r0, #50	@ 0x32
 80009d6:	f003 ff1a 	bl	800480e <COMPASSACCELERO_IO_Read>
 80009da:	4603      	mov	r3, r0
 80009dc:	b25b      	sxtb	r3, r3
 80009de:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80009e0:	212c      	movs	r1, #44	@ 0x2c
 80009e2:	2032      	movs	r0, #50	@ 0x32
 80009e4:	f003 ff13 	bl	800480e <COMPASSACCELERO_IO_Read>
 80009e8:	4603      	mov	r3, r0
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80009ee:	212d      	movs	r1, #45	@ 0x2d
 80009f0:	2032      	movs	r0, #50	@ 0x32
 80009f2:	f003 ff0c 	bl	800480e <COMPASSACCELERO_IO_Read>
 80009f6:	4603      	mov	r3, r0
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 80009fc:	7d3b      	ldrb	r3, [r7, #20]
 80009fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d123      	bne.n	8000a4e <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	77fb      	strb	r3, [r7, #31]
 8000a0a:	e01c      	b.n	8000a46 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000a0c:	7ffb      	ldrb	r3, [r7, #31]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	3301      	adds	r3, #1
 8000a12:	3320      	adds	r3, #32
 8000a14:	443b      	add	r3, r7
 8000a16:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	021b      	lsls	r3, r3, #8
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	7ffb      	ldrb	r3, [r7, #31]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	3320      	adds	r3, #32
 8000a26:	443b      	add	r3, r7
 8000a28:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	4413      	add	r3, r2
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	7ffb      	ldrb	r3, [r7, #31]
 8000a34:	b212      	sxth	r2, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	3320      	adds	r3, #32
 8000a3a:	443b      	add	r3, r7
 8000a3c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000a40:	7ffb      	ldrb	r3, [r7, #31]
 8000a42:	3301      	adds	r3, #1
 8000a44:	77fb      	strb	r3, [r7, #31]
 8000a46:	7ffb      	ldrb	r3, [r7, #31]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d9df      	bls.n	8000a0c <LSM303DLHC_AccReadXYZ+0x90>
 8000a4c:	e022      	b.n	8000a94 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	77fb      	strb	r3, [r7, #31]
 8000a52:	e01c      	b.n	8000a8e <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000a54:	7ffb      	ldrb	r3, [r7, #31]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	3320      	adds	r3, #32
 8000a5a:	443b      	add	r3, r7
 8000a5c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	3320      	adds	r3, #32
 8000a6e:	443b      	add	r3, r7
 8000a70:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	4413      	add	r3, r2
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	7ffb      	ldrb	r3, [r7, #31]
 8000a7c:	b212      	sxth	r2, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	3320      	adds	r3, #32
 8000a82:	443b      	add	r3, r7
 8000a84:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000a88:	7ffb      	ldrb	r3, [r7, #31]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	77fb      	strb	r3, [r7, #31]
 8000a8e:	7ffb      	ldrb	r3, [r7, #31]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d9df      	bls.n	8000a54 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000a94:	7d3b      	ldrb	r3, [r7, #20]
 8000a96:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000a9a:	2b30      	cmp	r3, #48	@ 0x30
 8000a9c:	d013      	beq.n	8000ac6 <LSM303DLHC_AccReadXYZ+0x14a>
 8000a9e:	2b30      	cmp	r3, #48	@ 0x30
 8000aa0:	dc14      	bgt.n	8000acc <LSM303DLHC_AccReadXYZ+0x150>
 8000aa2:	2b20      	cmp	r3, #32
 8000aa4:	d00c      	beq.n	8000ac0 <LSM303DLHC_AccReadXYZ+0x144>
 8000aa6:	2b20      	cmp	r3, #32
 8000aa8:	dc10      	bgt.n	8000acc <LSM303DLHC_AccReadXYZ+0x150>
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d002      	beq.n	8000ab4 <LSM303DLHC_AccReadXYZ+0x138>
 8000aae:	2b10      	cmp	r3, #16
 8000ab0:	d003      	beq.n	8000aba <LSM303DLHC_AccReadXYZ+0x13e>
 8000ab2:	e00b      	b.n	8000acc <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	77bb      	strb	r3, [r7, #30]
    break;
 8000ab8:	e008      	b.n	8000acc <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8000aba:	2302      	movs	r3, #2
 8000abc:	77bb      	strb	r3, [r7, #30]
    break;
 8000abe:	e005      	b.n	8000acc <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	77bb      	strb	r3, [r7, #30]
    break;
 8000ac4:	e002      	b.n	8000acc <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8000ac6:	230c      	movs	r3, #12
 8000ac8:	77bb      	strb	r3, [r7, #30]
    break;
 8000aca:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	77fb      	strb	r3, [r7, #31]
 8000ad0:	e014      	b.n	8000afc <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000ad2:	7ffb      	ldrb	r3, [r7, #31]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	3320      	adds	r3, #32
 8000ad8:	443b      	add	r3, r7
 8000ada:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	7fbb      	ldrb	r3, [r7, #30]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	fb12 f303 	smulbb	r3, r2, r3
 8000ae8:	b299      	uxth	r1, r3
 8000aea:	7ffb      	ldrb	r3, [r7, #31]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	b20a      	sxth	r2, r1
 8000af4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000af6:	7ffb      	ldrb	r3, [r7, #31]
 8000af8:	3301      	adds	r3, #1
 8000afa:	77fb      	strb	r3, [r7, #31]
 8000afc:	7ffb      	ldrb	r3, [r7, #31]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d9e7      	bls.n	8000ad2 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	3720      	adds	r7, #32
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000b16:	2300      	movs	r3, #0
 8000b18:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000b1a:	2121      	movs	r1, #33	@ 0x21
 8000b1c:	2032      	movs	r0, #50	@ 0x32
 8000b1e:	f003 fe76 	bl	800480e <COMPASSACCELERO_IO_Read>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	f023 0304 	bic.w	r3, r3, #4
 8000b2c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000b2e:	7bfa      	ldrb	r2, [r7, #15]
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	2121      	movs	r1, #33	@ 0x21
 8000b3c:	2032      	movs	r0, #50	@ 0x32
 8000b3e:	f003 fe53 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b084      	sub	sp, #16
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8000b58:	2122      	movs	r1, #34	@ 0x22
 8000b5a:	2032      	movs	r0, #50	@ 0x32
 8000b5c:	f003 fe57 	bl	800480e <COMPASSACCELERO_IO_Read>
 8000b60:	4603      	mov	r3, r0
 8000b62:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8000b64:	7bfa      	ldrb	r2, [r7, #15]
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	2122      	movs	r1, #34	@ 0x22
 8000b72:	2032      	movs	r0, #50	@ 0x32
 8000b74:	f003 fe38 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8000b8e:	2138      	movs	r1, #56	@ 0x38
 8000b90:	2032      	movs	r0, #50	@ 0x32
 8000b92:	f003 fe3c 	bl	800480e <COMPASSACCELERO_IO_Read>
 8000b96:	4603      	mov	r3, r0
 8000b98:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000b9a:	7bfa      	ldrb	r2, [r7, #15]
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	2138      	movs	r1, #56	@ 0x38
 8000ba8:	2032      	movs	r0, #50	@ 0x32
 8000baa:	f003 fe1d 	bl	80047e8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000bae:	230a      	movs	r3, #10
 8000bb0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	213a      	movs	r1, #58	@ 0x3a
 8000bb8:	2032      	movs	r0, #50	@ 0x32
 8000bba:	f003 fe15 	bl	80047e8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	213b      	movs	r1, #59	@ 0x3b
 8000bc8:	2032      	movs	r0, #50	@ 0x32
 8000bca:	f003 fe0d 	bl	80047e8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	213c      	movs	r1, #60	@ 0x3c
 8000bd4:	2032      	movs	r0, #50	@ 0x32
 8000bd6:	f003 fe07 	bl	80047e8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000bda:	2332      	movs	r3, #50	@ 0x32
 8000bdc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	461a      	mov	r2, r3
 8000be2:	213d      	movs	r1, #61	@ 0x3d
 8000be4:	2032      	movs	r0, #50	@ 0x32
 8000be6:	f003 fdff 	bl	80047e8 <COMPASSACCELERO_IO_Write>
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000bf6:	f003 fdc7 	bl	8004788 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8000bfa:	2080      	movs	r0, #128	@ 0x80
 8000bfc:	f7ff ffa5 	bl	8000b4a <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8000c00:	2004      	movs	r0, #4
 8000c02:	f7ff ff83 	bl	8000b0c <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8000c06:	2010      	movs	r0, #16
 8000c08:	f7ff ffba 	bl	8000b80 <LSM303DLHC_AccClickITEnable>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <fsm_new>:
#include <stdlib.h>
#include "fsm.h"

fsm_t*
fsm_new (fsm_trans_t* tt)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  fsm_t* this = (fsm_t*) malloc (sizeof (fsm_t));
 8000c18:	2008      	movs	r0, #8
 8000c1a:	f003 fef9 	bl	8004a10 <malloc>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	60fb      	str	r3, [r7, #12]
  fsm_init (this, tt);
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f000 f805 	bl	8000c34 <fsm_init>
  return this;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <fsm_init>:

void
fsm_init (fsm_t* this, fsm_trans_t* tt)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  this->tt = tt;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	605a      	str	r2, [r3, #4]
  this->current_state = tt[0].orig_state;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	601a      	str	r2, [r3, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <fsm_fire>:

void
fsm_fire (fsm_t* this)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  fsm_trans_t* t;
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	e01c      	b.n	8000ca2 <fsm_fire+0x4a>
    if ((this->current_state == t->orig_state) && t->in(this)) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d113      	bne.n	8000c9c <fsm_fire+0x44>
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	4798      	blx	r3
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00c      	beq.n	8000c9c <fsm_fire+0x44>
      this->current_state = t->dest_state;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
      if (t->out)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00c      	beq.n	8000cac <fsm_fire+0x54>
        t->out(this);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	4798      	blx	r3
      break;
 8000c9a:	e007      	b.n	8000cac <fsm_fire+0x54>
  for (t = this->tt; t->orig_state >= 0; ++t) {
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3310      	adds	r3, #16
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	dade      	bge.n	8000c68 <fsm_fire+0x10>
    }
  }
}
 8000caa:	e000      	b.n	8000cae <fsm_fire+0x56>
      break;
 8000cac:	bf00      	nop
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <absolute>:
static void MX_TIM3_Init(void);
static void MX_TIM10_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
int absolute(int16_t value){
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	80fb      	strh	r3, [r7, #6]
	if (value >= 0) return value;
 8000cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db02      	blt.n	8000cce <absolute+0x18>
 8000cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ccc:	e002      	b.n	8000cd4 <absolute+0x1e>
	else return -value;
 8000cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd2:	425b      	negs	r3, r3
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <read_Accel>:
void read_Accel(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	tim10finished = 0;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <read_Accel+0x68>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
	BSP_ACCELERO_GetXYZ(xyz);
 8000cea:	4818      	ldr	r0, [pc, #96]	@ (8000d4c <read_Accel+0x6c>)
 8000cec:	f003 fe64 	bl	80049b8 <BSP_ACCELERO_GetXYZ>

	if (absolute(xyz[0]) > threshold_x){
 8000cf0:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <read_Accel+0x6c>)
 8000cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ffdd 	bl	8000cb6 <absolute>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d02:	4293      	cmp	r3, r2
 8000d04:	dd02      	ble.n	8000d0c <read_Accel+0x2c>
		Green_Led_state = 1;
 8000d06:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <read_Accel+0x70>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]
	}
	if (absolute(xyz[1]) > threshold_y){
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <read_Accel+0x6c>)
 8000d0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ffcf 	bl	8000cb6 <absolute>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	dd02      	ble.n	8000d28 <read_Accel+0x48>
			Orange_Led_state = 1;
 8000d22:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <read_Accel+0x74>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
	}
	if (absolute(xyz[2]) > threshold_z){
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <read_Accel+0x6c>)
 8000d2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ffc1 	bl	8000cb6 <absolute>
 8000d34:	4603      	mov	r3, r0
 8000d36:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	dd02      	ble.n	8000d44 <read_Accel+0x64>
			Red_Led_state = 1;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <read_Accel+0x78>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
	}

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200002d4 	.word	0x200002d4
 8000d4c:	200002ec 	.word	0x200002ec
 8000d50:	200002e4 	.word	0x200002e4
 8000d54:	200002e8 	.word	0x200002e8
 8000d58:	200002e0 	.word	0x200002e0

08000d5c <func_LED_ENCENDIDO>:

//Funciones de salida de transiciones ledfsm
static void func_LED_ENCENDIDO (fsm_t* this){
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
    Blue_Led_state = 1;
 8000d64:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <func_LED_ENCENDIDO+0x20>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	601a      	str	r2, [r3, #0]
    blueledflag = 0;
 8000d6a:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <func_LED_ENCENDIDO+0x24>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	200002dc 	.word	0x200002dc
 8000d80:	200002cc 	.word	0x200002cc

08000d84 <func_LED_APAGADO>:

static void func_LED_APAGADO (fsm_t* this){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    Blue_Led_state = 0;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <func_LED_APAGADO+0x20>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
    blueledflag = 0;
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <func_LED_APAGADO+0x24>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]

}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	200002dc 	.word	0x200002dc
 8000da8:	200002cc 	.word	0x200002cc

08000dac <blueLED_timer_finished>:

//Funciones de entrada de transiciones ledfsm
static int blueLED_timer_finished (fsm_t* this) { //Función que pasa el valor de timer para el estado de una fsm
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
    return blueledflag;
 8000db4:	4b03      	ldr	r3, [pc, #12]	@ (8000dc4 <blueLED_timer_finished+0x18>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	200002cc 	.word	0x200002cc

08000dc8 <func_INACTIVO>:

//Funciones de salida de transiciones btnfsm

static void func_INACTIVO (fsm_t* this){
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	activoflag = 0;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <func_INACTIVO+0x34>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]

	Trigger_state = 0;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <func_INACTIVO+0x38>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]

	Red_Led_state = 0;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <func_INACTIVO+0x3c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
	Green_Led_state = 0;
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <func_INACTIVO+0x40>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
	Orange_Led_state = 0;
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <func_INACTIVO+0x44>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]

}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200002d0 	.word	0x200002d0
 8000e00:	200002d8 	.word	0x200002d8
 8000e04:	200002e0 	.word	0x200002e0
 8000e08:	200002e4 	.word	0x200002e4
 8000e0c:	200002e8 	.word	0x200002e8

08000e10 <func_ACTIVO>:

static void func_ACTIVO (fsm_t* this){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	activoflag = 1;
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <func_ACTIVO+0x20>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
	Trigger_state = 0;
 8000e1e:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <func_ACTIVO+0x24>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	200002d0 	.word	0x200002d0
 8000e34:	200002d8 	.word	0x200002d8

08000e38 <read_BTN>:


//Funciones de entrada de transiciones btnfsm
static int read_BTN(fsm_t* this){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	int readbtn = HAL_GPIO_ReadPin(User_BTN_GPIO_Port, User_BTN_Pin);
 8000e40:	2101      	movs	r1, #1
 8000e42:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <read_BTN+0x3c>)
 8000e44:	f001 f8d8 	bl	8001ff8 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60fb      	str	r3, [r7, #12]
	if (available && readbtn){
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <read_BTN+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00a      	beq.n	8000e6a <read_BTN+0x32>
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <read_BTN+0x32>
			available = 0;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	@ (8000e78 <read_BTN+0x40>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
			Trigger_state = 1;
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <read_BTN+0x44>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	601a      	str	r2, [r3, #0]
			return 1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <read_BTN+0x34>
	}
	else return 0;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40020000 	.word	0x40020000
 8000e78:	20000068 	.word	0x20000068
 8000e7c:	200002d8 	.word	0x200002d8

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e86:	f000 fccb 	bl	8001820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8a:	f000 f879 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8e:	f000 fa21 	bl	80012d4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000e92:	f000 f9ad 	bl	80011f0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000e96:	f000 f93f 	bl	8001118 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000e9a:	f000 f9f7 	bl	800128c <MX_TIM10_Init>
  MX_I2C1_Init();
 8000e9e:	f000 f8d7 	bl	8001050 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ea2:	f000 f903 	bl	80010ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4); //Inicializo el timer 4.
 8000ea6:	4829      	ldr	r0, [pc, #164]	@ (8000f4c <main+0xcc>)
 8000ea8:	f002 fe96 	bl	8003bd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); //También el 3.
 8000eac:	4828      	ldr	r0, [pc, #160]	@ (8000f50 <main+0xd0>)
 8000eae:	f002 fe93 	bl	8003bd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8000eb2:	4828      	ldr	r0, [pc, #160]	@ (8000f54 <main+0xd4>)
 8000eb4:	f002 fe90 	bl	8003bd8 <HAL_TIM_Base_Start_IT>

  fsm_t* maquinaLED = fsm_new(ledfsm);
 8000eb8:	4827      	ldr	r0, [pc, #156]	@ (8000f58 <main+0xd8>)
 8000eba:	f7ff fea9 	bl	8000c10 <fsm_new>
 8000ebe:	6078      	str	r0, [r7, #4]
  fsm_t* maquinaBTN = fsm_new(btnfsm);
 8000ec0:	4826      	ldr	r0, [pc, #152]	@ (8000f5c <main+0xdc>)
 8000ec2:	f7ff fea5 	bl	8000c10 <fsm_new>
 8000ec6:	6038      	str	r0, [r7, #0]
  BSP_ACCELERO_Init(); //Inicializo el acelerómetro
 8000ec8:	f003 fcb4 	bl	8004834 <BSP_ACCELERO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_fire(maquinaBTN);
 8000ecc:	6838      	ldr	r0, [r7, #0]
 8000ece:	f7ff fec3 	bl	8000c58 <fsm_fire>
	  fsm_fire(maquinaLED);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff fec0 	bl	8000c58 <fsm_fire>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (activoflag && tim10finished){
 8000ed8:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <main+0xe0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d008      	beq.n	8000ef2 <main+0x72>
 8000ee0:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <main+0xe4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d004      	beq.n	8000ef2 <main+0x72>
		  tim10finished = 0;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <main+0xe4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
		 // printf("Tim10 va acabar, llegint accelerometre");
		  read_Accel();
 8000eee:	f7ff fef7 	bl	8000ce0 <read_Accel>
	  }


	  HAL_GPIO_WritePin(BTN_Trigger_GPIO_Port, BTN_Trigger_Pin, Trigger_state);
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <main+0xe8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2104      	movs	r1, #4
 8000efc:	481b      	ldr	r0, [pc, #108]	@ (8000f6c <main+0xec>)
 8000efe:	f001 f893 	bl	8002028 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, Blue_Led_state);
 8000f02:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <main+0xf0>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f0e:	4817      	ldr	r0, [pc, #92]	@ (8000f6c <main+0xec>)
 8000f10:	f001 f88a 	bl	8002028 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, Red_Led_state);
 8000f14:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <main+0xf4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f20:	4812      	ldr	r0, [pc, #72]	@ (8000f6c <main+0xec>)
 8000f22:	f001 f881 	bl	8002028 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, Green_Led_state);
 8000f26:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <main+0xf8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f32:	480e      	ldr	r0, [pc, #56]	@ (8000f6c <main+0xec>)
 8000f34:	f001 f878 	bl	8002028 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Orange_Led_GPIO_Port, Orange_Led_Pin, Orange_Led_state);
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <main+0xfc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	461a      	mov	r2, r3
 8000f40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f44:	4809      	ldr	r0, [pc, #36]	@ (8000f6c <main+0xec>)
 8000f46:	f001 f86f 	bl	8002028 <HAL_GPIO_WritePin>
	  fsm_fire(maquinaBTN);
 8000f4a:	e7bf      	b.n	8000ecc <main+0x4c>
 8000f4c:	2000023c 	.word	0x2000023c
 8000f50:	200001f4 	.word	0x200001f4
 8000f54:	20000284 	.word	0x20000284
 8000f58:	2000006c 	.word	0x2000006c
 8000f5c:	2000009c 	.word	0x2000009c
 8000f60:	200002d0 	.word	0x200002d0
 8000f64:	200002d4 	.word	0x200002d4
 8000f68:	200002d8 	.word	0x200002d8
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	200002dc 	.word	0x200002dc
 8000f74:	200002e0 	.word	0x200002e0
 8000f78:	200002e4 	.word	0x200002e4
 8000f7c:	200002e8 	.word	0x200002e8

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b094      	sub	sp, #80	@ 0x50
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	2230      	movs	r2, #48	@ 0x30
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 fdf4 	bl	8004b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	4b27      	ldr	r3, [pc, #156]	@ (8001048 <SystemClock_Config+0xc8>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fac:	4a26      	ldr	r2, [pc, #152]	@ (8001048 <SystemClock_Config+0xc8>)
 8000fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb4:	4b24      	ldr	r3, [pc, #144]	@ (8001048 <SystemClock_Config+0xc8>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	4b21      	ldr	r3, [pc, #132]	@ (800104c <SystemClock_Config+0xcc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a20      	ldr	r2, [pc, #128]	@ (800104c <SystemClock_Config+0xcc>)
 8000fca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <SystemClock_Config+0xcc>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ff4:	23c0      	movs	r3, #192	@ 0xc0
 8000ff6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001000:	f107 0320 	add.w	r3, r7, #32
 8001004:	4618      	mov	r0, r3
 8001006:	f002 f88b 	bl	8003120 <HAL_RCC_OscConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001010:	f000 f9ce 	bl	80013b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001014:	230f      	movs	r3, #15
 8001016:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001018:	2302      	movs	r3, #2
 800101a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001020:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001024:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2103      	movs	r1, #3
 8001030:	4618      	mov	r0, r3
 8001032:	f002 faed 	bl	8003610 <HAL_RCC_ClockConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800103c:	f000 f9b8 	bl	80013b0 <Error_Handler>
  }
}
 8001040:	bf00      	nop
 8001042:	3750      	adds	r7, #80	@ 0x50
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40023800 	.word	0x40023800
 800104c:	40007000 	.word	0x40007000

08001050 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <MX_I2C1_Init+0x50>)
 8001056:	4a13      	ldr	r2, [pc, #76]	@ (80010a4 <MX_I2C1_Init+0x54>)
 8001058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800105a:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_I2C1_Init+0x50>)
 800105c:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <MX_I2C1_Init+0x58>)
 800105e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <MX_I2C1_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <MX_I2C1_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <MX_I2C1_Init+0x50>)
 800106e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001072:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001074:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <MX_I2C1_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <MX_I2C1_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001080:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	@ (80010a0 <MX_I2C1_Init+0x50>)
 800108e:	f000 ffe5 	bl	800205c <HAL_I2C_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001098:	f000 f98a 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000148 	.word	0x20000148
 80010a4:	40005400 	.word	0x40005400
 80010a8:	000186a0 	.word	0x000186a0

080010ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010b0:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <MX_SPI1_Init+0x64>)
 80010b2:	4a18      	ldr	r2, [pc, #96]	@ (8001114 <MX_SPI1_Init+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010b6:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <MX_SPI1_Init+0x64>)
 80010b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <MX_SPI1_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <MX_SPI1_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_SPI1_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_SPI1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_SPI1_Init+0x64>)
 80010d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_SPI1_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <MX_SPI1_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_SPI1_Init+0x64>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <MX_SPI1_Init+0x64>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_SPI1_Init+0x64>)
 80010f8:	220a      	movs	r2, #10
 80010fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <MX_SPI1_Init+0x64>)
 80010fe:	f002 fc93 	bl	8003a28 <HAL_SPI_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001108:	f000 f952 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000019c 	.word	0x2000019c
 8001114:	40013000 	.word	0x40013000

08001118 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	@ 0x30
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001144:	4b28      	ldr	r3, [pc, #160]	@ (80011e8 <MX_TIM3_Init+0xd0>)
 8001146:	4a29      	ldr	r2, [pc, #164]	@ (80011ec <MX_TIM3_Init+0xd4>)
 8001148:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 800114a:	4b27      	ldr	r3, [pc, #156]	@ (80011e8 <MX_TIM3_Init+0xd0>)
 800114c:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8001150:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b25      	ldr	r3, [pc, #148]	@ (80011e8 <MX_TIM3_Init+0xd0>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001158:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <MX_TIM3_Init+0xd0>)
 800115a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800115e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <MX_TIM3_Init+0xd0>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <MX_TIM3_Init+0xd0>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800116c:	481e      	ldr	r0, [pc, #120]	@ (80011e8 <MX_TIM3_Init+0xd0>)
 800116e:	f002 fce4 	bl	8003b3a <HAL_TIM_Base_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001178:	f000 f91a 	bl	80013b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001180:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	4619      	mov	r1, r3
 8001188:	4817      	ldr	r0, [pc, #92]	@ (80011e8 <MX_TIM3_Init+0xd0>)
 800118a:	f002 fe77 	bl	8003e7c <HAL_TIM_ConfigClockSource>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001194:	f000 f90c 	bl	80013b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001198:	2304      	movs	r3, #4
 800119a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800119c:	2370      	movs	r3, #112	@ 0x70
 800119e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4619      	mov	r1, r3
 80011b2:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <MX_TIM3_Init+0xd0>)
 80011b4:	f002 ff29 	bl	800400a <HAL_TIM_SlaveConfigSynchro>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80011be:	f000 f8f7 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	@ (80011e8 <MX_TIM3_Init+0xd0>)
 80011d0:	f003 f948 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 80011da:	f000 f8e9 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	@ 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001f4 	.word	0x200001f4
 80011ec:	40000400 	.word	0x40000400

080011f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <MX_TIM4_Init+0x94>)
 800120e:	4a1e      	ldr	r2, [pc, #120]	@ (8001288 <MX_TIM4_Init+0x98>)
 8001210:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4799;
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <MX_TIM4_Init+0x94>)
 8001214:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8001218:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_TIM4_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <MX_TIM4_Init+0x94>)
 8001222:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001226:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001228:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_TIM4_Init+0x94>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <MX_TIM4_Init+0x94>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001234:	4813      	ldr	r0, [pc, #76]	@ (8001284 <MX_TIM4_Init+0x94>)
 8001236:	f002 fc80 	bl	8003b3a <HAL_TIM_Base_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001240:	f000 f8b6 	bl	80013b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	4619      	mov	r1, r3
 8001250:	480c      	ldr	r0, [pc, #48]	@ (8001284 <MX_TIM4_Init+0x94>)
 8001252:	f002 fe13 	bl	8003e7c <HAL_TIM_ConfigClockSource>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800125c:	f000 f8a8 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_TIM4_Init+0x94>)
 800126e:	f003 f8f9 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001278:	f000 f89a 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000023c 	.word	0x2000023c
 8001288:	40000800 	.word	0x40000800

0800128c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_TIM10_Init+0x40>)
 8001292:	4a0f      	ldr	r2, [pc, #60]	@ (80012d0 <MX_TIM10_Init+0x44>)
 8001294:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4799;
 8001296:	4b0d      	ldr	r3, [pc, #52]	@ (80012cc <MX_TIM10_Init+0x40>)
 8001298:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 800129c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <MX_TIM10_Init+0x40>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80012a4:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_TIM10_Init+0x40>)
 80012a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012aa:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <MX_TIM10_Init+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_TIM10_Init+0x40>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	@ (80012cc <MX_TIM10_Init+0x40>)
 80012ba:	f002 fc3e 	bl	8003b3a <HAL_TIM_Base_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80012c4:	f000 f874 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000284 	.word	0x20000284
 80012d0:	40014400 	.word	0x40014400

080012d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	@ 0x28
 80012d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b2d      	ldr	r3, [pc, #180]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a2c      	ldr	r2, [pc, #176]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 80012f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b26      	ldr	r3, [pc, #152]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a25      	ldr	r2, [pc, #148]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_Led_Pin|Orange_Led_Pin|Red_Led_Pin|Blue_Led_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001360:	4811      	ldr	r0, [pc, #68]	@ (80013a8 <MX_GPIO_Init+0xd4>)
 8001362:	f000 fe61 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_BTN_Pin */
  GPIO_InitStruct.Pin = User_BTN_Pin;
 8001366:	2301      	movs	r3, #1
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_BTN_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <MX_GPIO_Init+0xd8>)
 800137a:	f000 fbd5 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_Led_Pin Orange_Led_Pin Red_Led_Pin Blue_Led_Pin */
  GPIO_InitStruct.Pin = Green_Led_Pin|Orange_Led_Pin|Red_Led_Pin|Blue_Led_Pin;
 800137e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <MX_GPIO_Init+0xd4>)
 8001398:	f000 fbc6 	bl	8001b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	@ 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40020000 	.word	0x40020000

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <Error_Handler+0x8>

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <HAL_MspInit+0x4c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001408 <HAL_MspInit+0x4c>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <HAL_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	4a08      	ldr	r2, [pc, #32]	@ (8001408 <HAL_MspInit+0x4c>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_MspInit+0x4c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013fa:	2007      	movs	r0, #7
 80013fc:	f000 fb52 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800

0800140c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a19      	ldr	r2, [pc, #100]	@ (8001490 <HAL_I2C_MspInit+0x84>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d12c      	bne.n	8001488 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <HAL_I2C_MspInit+0x88>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a17      	ldr	r2, [pc, #92]	@ (8001494 <HAL_I2C_MspInit+0x88>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <HAL_I2C_MspInit+0x88>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ACCEL_SCL_Pin|ACCEL_SDA_Pin;
 800144a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001450:	2312      	movs	r3, #18
 8001452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800145c:	2304      	movs	r3, #4
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	480c      	ldr	r0, [pc, #48]	@ (8001498 <HAL_I2C_MspInit+0x8c>)
 8001468:	f000 fb5e 	bl	8001b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <HAL_I2C_MspInit+0x88>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	4a07      	ldr	r2, [pc, #28]	@ (8001494 <HAL_I2C_MspInit+0x88>)
 8001476:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800147a:	6413      	str	r3, [r2, #64]	@ 0x40
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <HAL_I2C_MspInit+0x88>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	@ 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40005400 	.word	0x40005400
 8001494:	40023800 	.word	0x40023800
 8001498:	40020400 	.word	0x40020400

0800149c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <HAL_I2C_MspDeInit+0x38>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10e      	bne.n	80014cc <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <HAL_I2C_MspDeInit+0x3c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	4a09      	ldr	r2, [pc, #36]	@ (80014d8 <HAL_I2C_MspDeInit+0x3c>)
 80014b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ACCEL_SCL_GPIO_Port, ACCEL_SCL_Pin);
 80014ba:	2140      	movs	r1, #64	@ 0x40
 80014bc:	4807      	ldr	r0, [pc, #28]	@ (80014dc <HAL_I2C_MspDeInit+0x40>)
 80014be:	f000 fcb7 	bl	8001e30 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ACCEL_SDA_GPIO_Port, ACCEL_SDA_Pin);
 80014c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014c6:	4805      	ldr	r0, [pc, #20]	@ (80014dc <HAL_I2C_MspDeInit+0x40>)
 80014c8:	f000 fcb2 	bl	8001e30 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40005400 	.word	0x40005400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400

080014e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	@ 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a19      	ldr	r2, [pc, #100]	@ (8001564 <HAL_SPI_MspInit+0x84>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d12b      	bne.n	800155a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_SPI_MspInit+0x88>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	4a17      	ldr	r2, [pc, #92]	@ (8001568 <HAL_SPI_MspInit+0x88>)
 800150c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001510:	6453      	str	r3, [r2, #68]	@ 0x44
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <HAL_SPI_MspInit+0x88>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <HAL_SPI_MspInit+0x88>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a10      	ldr	r2, [pc, #64]	@ (8001568 <HAL_SPI_MspInit+0x88>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <HAL_SPI_MspInit+0x88>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800153a:	23e0      	movs	r3, #224	@ 0xe0
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800154a:	2305      	movs	r3, #5
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	@ (800156c <HAL_SPI_MspInit+0x8c>)
 8001556:	f000 fae7 	bl	8001b28 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800155a:	bf00      	nop
 800155c:	3728      	adds	r7, #40	@ 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40013000 	.word	0x40013000
 8001568:	40023800 	.word	0x40023800
 800156c:	40020000 	.word	0x40020000

08001570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	@ 0x30
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a39      	ldr	r2, [pc, #228]	@ (8001674 <HAL_TIM_Base_MspInit+0x104>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d134      	bne.n	80015fc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <HAL_TIM_Base_MspInit+0x108>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	4a37      	ldr	r2, [pc, #220]	@ (8001678 <HAL_TIM_Base_MspInit+0x108>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a2:	4b35      	ldr	r3, [pc, #212]	@ (8001678 <HAL_TIM_Base_MspInit+0x108>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	4b31      	ldr	r3, [pc, #196]	@ (8001678 <HAL_TIM_Base_MspInit+0x108>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a30      	ldr	r2, [pc, #192]	@ (8001678 <HAL_TIM_Base_MspInit+0x108>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b2e      	ldr	r3, [pc, #184]	@ (8001678 <HAL_TIM_Base_MspInit+0x108>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PD2     ------> TIM3_ETR
    */
    GPIO_InitStruct.Pin = BTN_Trigger_Pin;
 80015ca:	2304      	movs	r3, #4
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015da:	2302      	movs	r3, #2
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BTN_Trigger_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4825      	ldr	r0, [pc, #148]	@ (800167c <HAL_TIM_Base_MspInit+0x10c>)
 80015e6:	f000 fa9f 	bl	8001b28 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	201d      	movs	r0, #29
 80015f0:	f000 fa63 	bl	8001aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015f4:	201d      	movs	r0, #29
 80015f6:	f000 fa7c 	bl	8001af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80015fa:	e036      	b.n	800166a <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1f      	ldr	r2, [pc, #124]	@ (8001680 <HAL_TIM_Base_MspInit+0x110>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d116      	bne.n	8001634 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <HAL_TIM_Base_MspInit+0x108>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	4a1a      	ldr	r2, [pc, #104]	@ (8001678 <HAL_TIM_Base_MspInit+0x108>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6413      	str	r3, [r2, #64]	@ 0x40
 8001616:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <HAL_TIM_Base_MspInit+0x108>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	201e      	movs	r0, #30
 8001628:	f000 fa47 	bl	8001aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800162c:	201e      	movs	r0, #30
 800162e:	f000 fa60 	bl	8001af2 <HAL_NVIC_EnableIRQ>
}
 8001632:	e01a      	b.n	800166a <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM10)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <HAL_TIM_Base_MspInit+0x114>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d115      	bne.n	800166a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <HAL_TIM_Base_MspInit+0x108>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	4a0c      	ldr	r2, [pc, #48]	@ (8001678 <HAL_TIM_Base_MspInit+0x108>)
 8001648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800164c:	6453      	str	r3, [r2, #68]	@ 0x44
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <HAL_TIM_Base_MspInit+0x108>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2019      	movs	r0, #25
 8001660:	f000 fa2b 	bl	8001aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001664:	2019      	movs	r0, #25
 8001666:	f000 fa44 	bl	8001af2 <HAL_NVIC_EnableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3730      	adds	r7, #48	@ 0x30
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40000400 	.word	0x40000400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020c00 	.word	0x40020c00
 8001680:	40000800 	.word	0x40000800
 8001684:	40014400 	.word	0x40014400

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <NMI_Handler+0x4>

08001690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <MemManage_Handler+0x4>

080016a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <BusFault_Handler+0x4>

080016a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <UsageFault_Handler+0x4>

080016b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016de:	f000 f8f1 	bl	80018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  tim10finished = 1;
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80016f2:	4803      	ldr	r0, [pc, #12]	@ (8001700 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80016f4:	f002 fad2 	bl	8003c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200002d4 	.word	0x200002d4
 8001700:	20000284 	.word	0x20000284

08001704 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  available = 1;
 8001708:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <TIM3_IRQHandler+0x14>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800170e:	4803      	ldr	r0, [pc, #12]	@ (800171c <TIM3_IRQHandler+0x18>)
 8001710:	f002 fac4 	bl	8003c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000068 	.word	0x20000068
 800171c:	200001f4 	.word	0x200001f4

08001720 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  blueledflag = 1;
 8001724:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <TIM4_IRQHandler+0x14>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800172a:	4803      	ldr	r0, [pc, #12]	@ (8001738 <TIM4_IRQHandler+0x18>)
 800172c:	f002 fab6 	bl	8003c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200002cc 	.word	0x200002cc
 8001738:	2000023c 	.word	0x2000023c

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	@ (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f003 fa1e 	bl	8004bac <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	@ (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20020000 	.word	0x20020000
 800179c:	00000400 	.word	0x00000400
 80017a0:	200002f4 	.word	0x200002f4
 80017a4:	200004a0 	.word	0x200004a0

080017a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <SystemInit+0x20>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017b2:	4a05      	ldr	r2, [pc, #20]	@ (80017c8 <SystemInit+0x20>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001804 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d0:	f7ff ffea 	bl	80017a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d4:	480c      	ldr	r0, [pc, #48]	@ (8001808 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017d6:	490d      	ldr	r1, [pc, #52]	@ (800180c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001818 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fa:	f003 f9dd 	bl	8004bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fe:	f7ff fb3f 	bl	8000e80 <main>
  bx  lr    
 8001802:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001804:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8001810:	08004c44 	.word	0x08004c44
  ldr r2, =_sbss
 8001814:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8001818:	2000049c 	.word	0x2000049c

0800181c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC_IRQHandler>
	...

08001820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001824:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0d      	ldr	r2, [pc, #52]	@ (8001860 <HAL_Init+0x40>)
 800182a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800182e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <HAL_Init+0x40>)
 8001836:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800183a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800183c:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a07      	ldr	r2, [pc, #28]	@ (8001860 <HAL_Init+0x40>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f000 f92b 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f808 	bl	8001864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001854:	f7ff fdb2 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023c00 	.word	0x40023c00

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800186c:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <HAL_InitTick+0x54>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_InitTick+0x58>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800187a:	fbb3 f3f1 	udiv	r3, r3, r1
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f943 	bl	8001b0e <HAL_SYSTICK_Config>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e00e      	b.n	80018b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b0f      	cmp	r3, #15
 8001896:	d80a      	bhi.n	80018ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001898:	2200      	movs	r2, #0
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f000 f90b 	bl	8001aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a4:	4a06      	ldr	r2, [pc, #24]	@ (80018c0 <HAL_InitTick+0x5c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200000cc 	.word	0x200000cc
 80018bc:	200000d4 	.word	0x200000d4
 80018c0:	200000d0 	.word	0x200000d0

080018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	200000d4 	.word	0x200000d4
 80018e8:	200002f8 	.word	0x200002f8

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	200002f8 	.word	0x200002f8

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800192c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	@ (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4907      	ldr	r1, [pc, #28]	@ (80019a0 <__NVIC_EnableIRQ+0x38>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	@ (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	@ (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	@ 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f7ff ff8e 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff29 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001acc:	f7ff ff3e 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f7ff ff8e 	bl	80019f8 <NVIC_EncodePriority>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff5d 	bl	80019a4 <__NVIC_SetPriority>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff31 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffa2 	bl	8001a60 <SysTick_Config>
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	@ 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	e159      	b.n	8001df8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b44:	2201      	movs	r2, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f040 8148 	bne.w	8001df2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d005      	beq.n	8001b7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d130      	bne.n	8001bdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 0201 	and.w	r2, r3, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d017      	beq.n	8001c18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d123      	bne.n	8001c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	08da      	lsrs	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3208      	adds	r2, #8
 8001c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	69b9      	ldr	r1, [r7, #24]
 8001c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80a2 	beq.w	8001df2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b57      	ldr	r3, [pc, #348]	@ (8001e10 <HAL_GPIO_Init+0x2e8>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	4a56      	ldr	r2, [pc, #344]	@ (8001e10 <HAL_GPIO_Init+0x2e8>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cbe:	4b54      	ldr	r3, [pc, #336]	@ (8001e10 <HAL_GPIO_Init+0x2e8>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cca:	4a52      	ldr	r2, [pc, #328]	@ (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a49      	ldr	r2, [pc, #292]	@ (8001e18 <HAL_GPIO_Init+0x2f0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d019      	beq.n	8001d2a <HAL_GPIO_Init+0x202>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a48      	ldr	r2, [pc, #288]	@ (8001e1c <HAL_GPIO_Init+0x2f4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0x1fe>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a47      	ldr	r2, [pc, #284]	@ (8001e20 <HAL_GPIO_Init+0x2f8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00d      	beq.n	8001d22 <HAL_GPIO_Init+0x1fa>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a46      	ldr	r2, [pc, #280]	@ (8001e24 <HAL_GPIO_Init+0x2fc>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d007      	beq.n	8001d1e <HAL_GPIO_Init+0x1f6>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a45      	ldr	r2, [pc, #276]	@ (8001e28 <HAL_GPIO_Init+0x300>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_GPIO_Init+0x1f2>
 8001d16:	2304      	movs	r3, #4
 8001d18:	e008      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e004      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	f002 0203 	and.w	r2, r2, #3
 8001d32:	0092      	lsls	r2, r2, #2
 8001d34:	4093      	lsls	r3, r2
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d3c:	4935      	ldr	r1, [pc, #212]	@ (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4a:	4b38      	ldr	r3, [pc, #224]	@ (8001e2c <HAL_GPIO_Init+0x304>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8001e2c <HAL_GPIO_Init+0x304>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d74:	4b2d      	ldr	r3, [pc, #180]	@ (8001e2c <HAL_GPIO_Init+0x304>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d98:	4a24      	ldr	r2, [pc, #144]	@ (8001e2c <HAL_GPIO_Init+0x304>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d9e:	4b23      	ldr	r3, [pc, #140]	@ (8001e2c <HAL_GPIO_Init+0x304>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8001e2c <HAL_GPIO_Init+0x304>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <HAL_GPIO_Init+0x304>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dec:	4a0f      	ldr	r2, [pc, #60]	@ (8001e2c <HAL_GPIO_Init+0x304>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b0f      	cmp	r3, #15
 8001dfc:	f67f aea2 	bls.w	8001b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3724      	adds	r7, #36	@ 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40013800 	.word	0x40013800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020c00 	.word	0x40020c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e0bb      	b.n	8001fc4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	f040 80ab 	bne.w	8001fbe <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001e68:	4a5c      	ldr	r2, [pc, #368]	@ (8001fdc <HAL_GPIO_DeInit+0x1ac>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e74:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	4013      	ands	r3, r2
 8001e88:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a54      	ldr	r2, [pc, #336]	@ (8001fe0 <HAL_GPIO_DeInit+0x1b0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d019      	beq.n	8001ec6 <HAL_GPIO_DeInit+0x96>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a53      	ldr	r2, [pc, #332]	@ (8001fe4 <HAL_GPIO_DeInit+0x1b4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_DeInit+0x92>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a52      	ldr	r2, [pc, #328]	@ (8001fe8 <HAL_GPIO_DeInit+0x1b8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00d      	beq.n	8001ebe <HAL_GPIO_DeInit+0x8e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a51      	ldr	r2, [pc, #324]	@ (8001fec <HAL_GPIO_DeInit+0x1bc>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <HAL_GPIO_DeInit+0x8a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a50      	ldr	r2, [pc, #320]	@ (8001ff0 <HAL_GPIO_DeInit+0x1c0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_GPIO_DeInit+0x86>
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	e008      	b.n	8001ec8 <HAL_GPIO_DeInit+0x98>
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_DeInit+0x98>
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e004      	b.n	8001ec8 <HAL_GPIO_DeInit+0x98>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_DeInit+0x98>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_DeInit+0x98>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	f002 0203 	and.w	r2, r2, #3
 8001ece:	0092      	lsls	r2, r2, #2
 8001ed0:	4093      	lsls	r3, r2
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d132      	bne.n	8001f3e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001ed8:	4b46      	ldr	r3, [pc, #280]	@ (8001ff4 <HAL_GPIO_DeInit+0x1c4>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	4944      	ldr	r1, [pc, #272]	@ (8001ff4 <HAL_GPIO_DeInit+0x1c4>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001ee6:	4b43      	ldr	r3, [pc, #268]	@ (8001ff4 <HAL_GPIO_DeInit+0x1c4>)
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	4941      	ldr	r1, [pc, #260]	@ (8001ff4 <HAL_GPIO_DeInit+0x1c4>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff4 <HAL_GPIO_DeInit+0x1c4>)
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	493d      	ldr	r1, [pc, #244]	@ (8001ff4 <HAL_GPIO_DeInit+0x1c4>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001f02:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff4 <HAL_GPIO_DeInit+0x1c4>)
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	493a      	ldr	r1, [pc, #232]	@ (8001ff4 <HAL_GPIO_DeInit+0x1c4>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	220f      	movs	r2, #15
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001f20:	4a2e      	ldr	r2, [pc, #184]	@ (8001fdc <HAL_GPIO_DeInit+0x1ac>)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	482a      	ldr	r0, [pc, #168]	@ (8001fdc <HAL_GPIO_DeInit+0x1ac>)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	400a      	ands	r2, r1
 8001f38:	3302      	adds	r3, #2
 8001f3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2103      	movs	r1, #3
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	4019      	ands	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2103      	movs	r1, #3
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	401a      	ands	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	2101      	movs	r1, #1
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2103      	movs	r1, #3
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	401a      	ands	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b0f      	cmp	r3, #15
 8001fc8:	f67f af40 	bls.w	8001e4c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	371c      	adds	r7, #28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020c00 	.word	0x40020c00
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40013c00 	.word	0x40013c00

08001ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	887b      	ldrh	r3, [r7, #2]
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e001      	b.n	800201a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002044:	e003      	b.n	800204e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	619a      	str	r2, [r3, #24]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e12b      	b.n	80022c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff f9c2 	bl	800140c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2224      	movs	r2, #36	@ 0x24
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020c0:	f001 fc9e 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 80020c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4a81      	ldr	r2, [pc, #516]	@ (80022d0 <HAL_I2C_Init+0x274>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d807      	bhi.n	80020e0 <HAL_I2C_Init+0x84>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4a80      	ldr	r2, [pc, #512]	@ (80022d4 <HAL_I2C_Init+0x278>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	bf94      	ite	ls
 80020d8:	2301      	movls	r3, #1
 80020da:	2300      	movhi	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	e006      	b.n	80020ee <HAL_I2C_Init+0x92>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4a7d      	ldr	r2, [pc, #500]	@ (80022d8 <HAL_I2C_Init+0x27c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	bf94      	ite	ls
 80020e8:	2301      	movls	r3, #1
 80020ea:	2300      	movhi	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0e7      	b.n	80022c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4a78      	ldr	r2, [pc, #480]	@ (80022dc <HAL_I2C_Init+0x280>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	0c9b      	lsrs	r3, r3, #18
 8002100:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a6a      	ldr	r2, [pc, #424]	@ (80022d0 <HAL_I2C_Init+0x274>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d802      	bhi.n	8002130 <HAL_I2C_Init+0xd4>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	3301      	adds	r3, #1
 800212e:	e009      	b.n	8002144 <HAL_I2C_Init+0xe8>
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	4a69      	ldr	r2, [pc, #420]	@ (80022e0 <HAL_I2C_Init+0x284>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	099b      	lsrs	r3, r3, #6
 8002142:	3301      	adds	r3, #1
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	430b      	orrs	r3, r1
 800214a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002156:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	495c      	ldr	r1, [pc, #368]	@ (80022d0 <HAL_I2C_Init+0x274>)
 8002160:	428b      	cmp	r3, r1
 8002162:	d819      	bhi.n	8002198 <HAL_I2C_Init+0x13c>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1e59      	subs	r1, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002172:	1c59      	adds	r1, r3, #1
 8002174:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002178:	400b      	ands	r3, r1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_I2C_Init+0x138>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1e59      	subs	r1, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fbb1 f3f3 	udiv	r3, r1, r3
 800218c:	3301      	adds	r3, #1
 800218e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002192:	e051      	b.n	8002238 <HAL_I2C_Init+0x1dc>
 8002194:	2304      	movs	r3, #4
 8002196:	e04f      	b.n	8002238 <HAL_I2C_Init+0x1dc>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d111      	bne.n	80021c4 <HAL_I2C_Init+0x168>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1e58      	subs	r0, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	440b      	add	r3, r1
 80021ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e012      	b.n	80021ea <HAL_I2C_Init+0x18e>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1e58      	subs	r0, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	0099      	lsls	r1, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Init+0x196>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e022      	b.n	8002238 <HAL_I2C_Init+0x1dc>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10e      	bne.n	8002218 <HAL_I2C_Init+0x1bc>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1e58      	subs	r0, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	440b      	add	r3, r1
 8002208:	fbb0 f3f3 	udiv	r3, r0, r3
 800220c:	3301      	adds	r3, #1
 800220e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002216:	e00f      	b.n	8002238 <HAL_I2C_Init+0x1dc>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1e58      	subs	r0, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	0099      	lsls	r1, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	fbb0 f3f3 	udiv	r3, r0, r3
 800222e:	3301      	adds	r3, #1
 8002230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002234:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	6809      	ldr	r1, [r1, #0]
 800223c:	4313      	orrs	r3, r2
 800223e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002266:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6911      	ldr	r1, [r2, #16]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68d2      	ldr	r2, [r2, #12]
 8002272:	4311      	orrs	r1, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	430b      	orrs	r3, r1
 800227a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	000186a0 	.word	0x000186a0
 80022d4:	001e847f 	.word	0x001e847f
 80022d8:	003d08ff 	.word	0x003d08ff
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	10624dd3 	.word	0x10624dd3

080022e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e021      	b.n	800233a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2224      	movs	r2, #36	@ 0x24
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0201 	bic.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff f8c4 	bl	800149c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	4608      	mov	r0, r1
 800234e:	4611      	mov	r1, r2
 8002350:	461a      	mov	r2, r3
 8002352:	4603      	mov	r3, r0
 8002354:	817b      	strh	r3, [r7, #10]
 8002356:	460b      	mov	r3, r1
 8002358:	813b      	strh	r3, [r7, #8]
 800235a:	4613      	mov	r3, r2
 800235c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800235e:	f7ff fac5 	bl	80018ec <HAL_GetTick>
 8002362:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b20      	cmp	r3, #32
 800236e:	f040 80d9 	bne.w	8002524 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2319      	movs	r3, #25
 8002378:	2201      	movs	r2, #1
 800237a:	496d      	ldr	r1, [pc, #436]	@ (8002530 <HAL_I2C_Mem_Write+0x1ec>)
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fc99 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002388:	2302      	movs	r3, #2
 800238a:	e0cc      	b.n	8002526 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_I2C_Mem_Write+0x56>
 8002396:	2302      	movs	r3, #2
 8002398:	e0c5      	b.n	8002526 <HAL_I2C_Mem_Write+0x1e2>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d007      	beq.n	80023c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2221      	movs	r2, #33	@ 0x21
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2240      	movs	r2, #64	@ 0x40
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a3a      	ldr	r2, [r7, #32]
 80023ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a4d      	ldr	r2, [pc, #308]	@ (8002534 <HAL_I2C_Mem_Write+0x1f0>)
 8002400:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002402:	88f8      	ldrh	r0, [r7, #6]
 8002404:	893a      	ldrh	r2, [r7, #8]
 8002406:	8979      	ldrh	r1, [r7, #10]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	4603      	mov	r3, r0
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 fad0 	bl	80029b8 <I2C_RequestMemoryWrite>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d052      	beq.n	80024c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e081      	b.n	8002526 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fd5e 	bl	8002ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00d      	beq.n	800244e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	2b04      	cmp	r3, #4
 8002438:	d107      	bne.n	800244a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002448:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e06b      	b.n	8002526 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	781a      	ldrb	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b04      	cmp	r3, #4
 800248a:	d11b      	bne.n	80024c4 <HAL_I2C_Mem_Write+0x180>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	d017      	beq.n	80024c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1aa      	bne.n	8002422 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fd51 	bl	8002f78 <I2C_WaitOnBTFFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00d      	beq.n	80024f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d107      	bne.n	80024f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e016      	b.n	8002526 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	e000      	b.n	8002526 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002524:	2302      	movs	r3, #2
  }
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	00100002 	.word	0x00100002
 8002534:	ffff0000 	.word	0xffff0000

08002538 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	@ 0x30
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	4608      	mov	r0, r1
 8002542:	4611      	mov	r1, r2
 8002544:	461a      	mov	r2, r3
 8002546:	4603      	mov	r3, r0
 8002548:	817b      	strh	r3, [r7, #10]
 800254a:	460b      	mov	r3, r1
 800254c:	813b      	strh	r3, [r7, #8]
 800254e:	4613      	mov	r3, r2
 8002550:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002552:	f7ff f9cb 	bl	80018ec <HAL_GetTick>
 8002556:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b20      	cmp	r3, #32
 8002562:	f040 8214 	bne.w	800298e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2319      	movs	r3, #25
 800256c:	2201      	movs	r2, #1
 800256e:	497b      	ldr	r1, [pc, #492]	@ (800275c <HAL_I2C_Mem_Read+0x224>)
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 fb9f 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
 800257e:	e207      	b.n	8002990 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_I2C_Mem_Read+0x56>
 800258a:	2302      	movs	r3, #2
 800258c:	e200      	b.n	8002990 <HAL_I2C_Mem_Read+0x458>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d007      	beq.n	80025b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2222      	movs	r2, #34	@ 0x22
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2240      	movs	r2, #64	@ 0x40
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80025e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002760 <HAL_I2C_Mem_Read+0x228>)
 80025f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025f6:	88f8      	ldrh	r0, [r7, #6]
 80025f8:	893a      	ldrh	r2, [r7, #8]
 80025fa:	8979      	ldrh	r1, [r7, #10]
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	4603      	mov	r3, r0
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fa6c 	bl	8002ae4 <I2C_RequestMemoryRead>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e1bc      	b.n	8002990 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	d113      	bne.n	8002646 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	623b      	str	r3, [r7, #32]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	623b      	str	r3, [r7, #32]
 8002632:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e190      	b.n	8002968 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264a:	2b01      	cmp	r3, #1
 800264c:	d11b      	bne.n	8002686 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800265c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e170      	b.n	8002968 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268a:	2b02      	cmp	r3, #2
 800268c:	d11b      	bne.n	80026c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800269c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	e150      	b.n	8002968 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026dc:	e144      	b.n	8002968 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	f200 80f1 	bhi.w	80028ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d123      	bne.n	8002738 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fc87 	bl	8003008 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e145      	b.n	8002990 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002736:	e117      	b.n	8002968 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273c:	2b02      	cmp	r3, #2
 800273e:	d14e      	bne.n	80027de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002746:	2200      	movs	r2, #0
 8002748:	4906      	ldr	r1, [pc, #24]	@ (8002764 <HAL_I2C_Mem_Read+0x22c>)
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fab2 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e11a      	b.n	8002990 <HAL_I2C_Mem_Read+0x458>
 800275a:	bf00      	nop
 800275c:	00100002 	.word	0x00100002
 8002760:	ffff0000 	.word	0xffff0000
 8002764:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027dc:	e0c4      	b.n	8002968 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e4:	2200      	movs	r2, #0
 80027e6:	496c      	ldr	r1, [pc, #432]	@ (8002998 <HAL_I2C_Mem_Read+0x460>)
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fa63 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0cb      	b.n	8002990 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002840:	2200      	movs	r2, #0
 8002842:	4955      	ldr	r1, [pc, #340]	@ (8002998 <HAL_I2C_Mem_Read+0x460>)
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fa35 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e09d      	b.n	8002990 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002862:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028c8:	e04e      	b.n	8002968 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fb9a 	bl	8003008 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e058      	b.n	8002990 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b04      	cmp	r3, #4
 800291c:	d124      	bne.n	8002968 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002922:	2b03      	cmp	r3, #3
 8002924:	d107      	bne.n	8002936 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002934:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296c:	2b00      	cmp	r3, #0
 800296e:	f47f aeb6 	bne.w	80026de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e000      	b.n	8002990 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800298e:	2302      	movs	r3, #2
  }
}
 8002990:	4618      	mov	r0, r3
 8002992:	3728      	adds	r7, #40	@ 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	00010004 	.word	0x00010004

0800299c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029aa:	b2db      	uxtb	r3, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	4608      	mov	r0, r1
 80029c2:	4611      	mov	r1, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	817b      	strh	r3, [r7, #10]
 80029ca:	460b      	mov	r3, r1
 80029cc:	813b      	strh	r3, [r7, #8]
 80029ce:	4613      	mov	r3, r2
 80029d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f960 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a08:	d103      	bne.n	8002a12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e05f      	b.n	8002ad6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a16:	897b      	ldrh	r3, [r7, #10]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	492d      	ldr	r1, [pc, #180]	@ (8002ae0 <I2C_RequestMemoryWrite+0x128>)
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f9bb 	bl	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e04c      	b.n	8002ad6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fa46 	bl	8002ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e02b      	b.n	8002ad6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d105      	bne.n	8002a90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a84:	893b      	ldrh	r3, [r7, #8]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	611a      	str	r2, [r3, #16]
 8002a8e:	e021      	b.n	8002ad4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a90:	893b      	ldrh	r3, [r7, #8]
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa0:	6a39      	ldr	r1, [r7, #32]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fa20 	bl	8002ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00d      	beq.n	8002aca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d107      	bne.n	8002ac6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e005      	b.n	8002ad6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aca:	893b      	ldrh	r3, [r7, #8]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	00010002 	.word	0x00010002

08002ae4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	4608      	mov	r0, r1
 8002aee:	4611      	mov	r1, r2
 8002af0:	461a      	mov	r2, r3
 8002af2:	4603      	mov	r3, r0
 8002af4:	817b      	strh	r3, [r7, #10]
 8002af6:	460b      	mov	r3, r1
 8002af8:	813b      	strh	r3, [r7, #8]
 8002afa:	4613      	mov	r3, r2
 8002afc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f8c2 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00d      	beq.n	8002b52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b44:	d103      	bne.n	8002b4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0aa      	b.n	8002ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b52:	897b      	ldrh	r3, [r7, #10]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	6a3a      	ldr	r2, [r7, #32]
 8002b66:	4952      	ldr	r1, [pc, #328]	@ (8002cb0 <I2C_RequestMemoryRead+0x1cc>)
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f91d 	bl	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e097      	b.n	8002ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b90:	6a39      	ldr	r1, [r7, #32]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f9a8 	bl	8002ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00d      	beq.n	8002bba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d107      	bne.n	8002bb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e076      	b.n	8002ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d105      	bne.n	8002bcc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc0:	893b      	ldrh	r3, [r7, #8]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	611a      	str	r2, [r3, #16]
 8002bca:	e021      	b.n	8002c10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bcc:	893b      	ldrh	r3, [r7, #8]
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bdc:	6a39      	ldr	r1, [r7, #32]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f982 	bl	8002ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d107      	bne.n	8002c02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e050      	b.n	8002ca8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c06:	893b      	ldrh	r3, [r7, #8]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c12:	6a39      	ldr	r1, [r7, #32]
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 f967 	bl	8002ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00d      	beq.n	8002c3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d107      	bne.n	8002c38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e035      	b.n	8002ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f82b 	bl	8002cb4 <I2C_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00d      	beq.n	8002c80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c72:	d103      	bne.n	8002c7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e013      	b.n	8002ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c80:	897b      	ldrh	r3, [r7, #10]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	6a3a      	ldr	r2, [r7, #32]
 8002c94:	4906      	ldr	r1, [pc, #24]	@ (8002cb0 <I2C_RequestMemoryRead+0x1cc>)
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f886 	bl	8002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	00010002 	.word	0x00010002

08002cb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cc4:	e048      	b.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d044      	beq.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cce:	f7fe fe0d 	bl	80018ec <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d139      	bne.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	0c1b      	lsrs	r3, r3, #16
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d10d      	bne.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	e00c      	b.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	43da      	mvns	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4013      	ands	r3, r2
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d116      	bne.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	f043 0220 	orr.w	r2, r3, #32
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e023      	b.n	8002da0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	0c1b      	lsrs	r3, r3, #16
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d10d      	bne.n	8002d7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	43da      	mvns	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	e00c      	b.n	8002d98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	43da      	mvns	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d093      	beq.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002db6:	e071      	b.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc6:	d123      	bne.n	8002e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002de0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	f043 0204 	orr.w	r2, r3, #4
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e067      	b.n	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d041      	beq.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e18:	f7fe fd68 	bl	80018ec <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d302      	bcc.n	8002e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d136      	bne.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d10c      	bne.n	8002e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4013      	ands	r3, r2
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bf14      	ite	ne
 8002e4a:	2301      	movne	r3, #1
 8002e4c:	2300      	moveq	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	e00b      	b.n	8002e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d016      	beq.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e021      	b.n	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	0c1b      	lsrs	r3, r3, #16
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d10c      	bne.n	8002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	43da      	mvns	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e00b      	b.n	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf14      	ite	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	2300      	moveq	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f47f af6d 	bne.w	8002db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef4:	e034      	b.n	8002f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f8e3 	bl	80030c2 <I2C_IsAcknowledgeFailed>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e034      	b.n	8002f70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d028      	beq.n	8002f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7fe fced 	bl	80018ec <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d11d      	bne.n	8002f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2e:	2b80      	cmp	r3, #128	@ 0x80
 8002f30:	d016      	beq.n	8002f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	f043 0220 	orr.w	r2, r3, #32
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e007      	b.n	8002f70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f6a:	2b80      	cmp	r3, #128	@ 0x80
 8002f6c:	d1c3      	bne.n	8002ef6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f84:	e034      	b.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f89b 	bl	80030c2 <I2C_IsAcknowledgeFailed>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e034      	b.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d028      	beq.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe fca5 	bl	80018ec <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11d      	bne.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d016      	beq.n	8002ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e007      	b.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d1c3      	bne.n	8002f86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003014:	e049      	b.n	80030aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b10      	cmp	r3, #16
 8003022:	d119      	bne.n	8003058 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0210 	mvn.w	r2, #16
 800302c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e030      	b.n	80030ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003058:	f7fe fc48 	bl	80018ec <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	429a      	cmp	r2, r3
 8003066:	d302      	bcc.n	800306e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d11d      	bne.n	80030aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003078:	2b40      	cmp	r3, #64	@ 0x40
 800307a:	d016      	beq.n	80030aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e007      	b.n	80030ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b4:	2b40      	cmp	r3, #64	@ 0x40
 80030b6:	d1ae      	bne.n	8003016 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d8:	d11b      	bne.n	8003112 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	f043 0204 	orr.w	r2, r3, #4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e267      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d075      	beq.n	800322a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800313e:	4b88      	ldr	r3, [pc, #544]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b04      	cmp	r3, #4
 8003148:	d00c      	beq.n	8003164 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800314a:	4b85      	ldr	r3, [pc, #532]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003152:	2b08      	cmp	r3, #8
 8003154:	d112      	bne.n	800317c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003156:	4b82      	ldr	r3, [pc, #520]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003162:	d10b      	bne.n	800317c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003164:	4b7e      	ldr	r3, [pc, #504]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d05b      	beq.n	8003228 <HAL_RCC_OscConfig+0x108>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d157      	bne.n	8003228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e242      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003184:	d106      	bne.n	8003194 <HAL_RCC_OscConfig+0x74>
 8003186:	4b76      	ldr	r3, [pc, #472]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a75      	ldr	r2, [pc, #468]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e01d      	b.n	80031d0 <HAL_RCC_OscConfig+0xb0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x98>
 800319e:	4b70      	ldr	r3, [pc, #448]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a6f      	ldr	r2, [pc, #444]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 80031a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0xb0>
 80031b8:	4b69      	ldr	r3, [pc, #420]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a68      	ldr	r2, [pc, #416]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 80031be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b66      	ldr	r3, [pc, #408]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a65      	ldr	r2, [pc, #404]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 80031ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d013      	beq.n	8003200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fe fb88 	bl	80018ec <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e0:	f7fe fb84 	bl	80018ec <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	@ 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e207      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0xc0>
 80031fe:	e014      	b.n	800322a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe fb74 	bl	80018ec <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003208:	f7fe fb70 	bl	80018ec <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	@ 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e1f3      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	4b51      	ldr	r3, [pc, #324]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0xe8>
 8003226:	e000      	b.n	800322a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d063      	beq.n	80032fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003236:	4b4a      	ldr	r3, [pc, #296]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003242:	4b47      	ldr	r3, [pc, #284]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800324a:	2b08      	cmp	r3, #8
 800324c:	d11c      	bne.n	8003288 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324e:	4b44      	ldr	r3, [pc, #272]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d116      	bne.n	8003288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325a:	4b41      	ldr	r3, [pc, #260]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_RCC_OscConfig+0x152>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d001      	beq.n	8003272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e1c7      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003272:	4b3b      	ldr	r3, [pc, #236]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4937      	ldr	r1, [pc, #220]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003286:	e03a      	b.n	80032fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d020      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003290:	4b34      	ldr	r3, [pc, #208]	@ (8003364 <HAL_RCC_OscConfig+0x244>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003296:	f7fe fb29 	bl	80018ec <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329e:	f7fe fb25 	bl	80018ec <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e1a8      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032bc:	4b28      	ldr	r3, [pc, #160]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4925      	ldr	r1, [pc, #148]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]
 80032d0:	e015      	b.n	80032fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d2:	4b24      	ldr	r3, [pc, #144]	@ (8003364 <HAL_RCC_OscConfig+0x244>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe fb08 	bl	80018ec <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e0:	f7fe fb04 	bl	80018ec <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e187      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d036      	beq.n	8003378 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003312:	4b15      	ldr	r3, [pc, #84]	@ (8003368 <HAL_RCC_OscConfig+0x248>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fe fae8 	bl	80018ec <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003320:	f7fe fae4 	bl	80018ec <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e167      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	4b0b      	ldr	r3, [pc, #44]	@ (8003360 <HAL_RCC_OscConfig+0x240>)
 8003334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x200>
 800333e:	e01b      	b.n	8003378 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003340:	4b09      	ldr	r3, [pc, #36]	@ (8003368 <HAL_RCC_OscConfig+0x248>)
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003346:	f7fe fad1 	bl	80018ec <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334c:	e00e      	b.n	800336c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334e:	f7fe facd 	bl	80018ec <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d907      	bls.n	800336c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e150      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
 8003360:	40023800 	.word	0x40023800
 8003364:	42470000 	.word	0x42470000
 8003368:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800336c:	4b88      	ldr	r3, [pc, #544]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 800336e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1ea      	bne.n	800334e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8097 	beq.w	80034b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003386:	2300      	movs	r3, #0
 8003388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338a:	4b81      	ldr	r3, [pc, #516]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10f      	bne.n	80033b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	4b7d      	ldr	r3, [pc, #500]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	4a7c      	ldr	r2, [pc, #496]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 80033a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b6:	4b77      	ldr	r3, [pc, #476]	@ (8003594 <HAL_RCC_OscConfig+0x474>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d118      	bne.n	80033f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c2:	4b74      	ldr	r3, [pc, #464]	@ (8003594 <HAL_RCC_OscConfig+0x474>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a73      	ldr	r2, [pc, #460]	@ (8003594 <HAL_RCC_OscConfig+0x474>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ce:	f7fe fa8d 	bl	80018ec <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d6:	f7fe fa89 	bl	80018ec <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e10c      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003594 <HAL_RCC_OscConfig+0x474>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d106      	bne.n	800340a <HAL_RCC_OscConfig+0x2ea>
 80033fc:	4b64      	ldr	r3, [pc, #400]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003400:	4a63      	ldr	r2, [pc, #396]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6713      	str	r3, [r2, #112]	@ 0x70
 8003408:	e01c      	b.n	8003444 <HAL_RCC_OscConfig+0x324>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b05      	cmp	r3, #5
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x30c>
 8003412:	4b5f      	ldr	r3, [pc, #380]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003416:	4a5e      	ldr	r2, [pc, #376]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 8003418:	f043 0304 	orr.w	r3, r3, #4
 800341c:	6713      	str	r3, [r2, #112]	@ 0x70
 800341e:	4b5c      	ldr	r3, [pc, #368]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003422:	4a5b      	ldr	r2, [pc, #364]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6713      	str	r3, [r2, #112]	@ 0x70
 800342a:	e00b      	b.n	8003444 <HAL_RCC_OscConfig+0x324>
 800342c:	4b58      	ldr	r3, [pc, #352]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003430:	4a57      	ldr	r2, [pc, #348]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	6713      	str	r3, [r2, #112]	@ 0x70
 8003438:	4b55      	ldr	r3, [pc, #340]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343c:	4a54      	ldr	r2, [pc, #336]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 800343e:	f023 0304 	bic.w	r3, r3, #4
 8003442:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d015      	beq.n	8003478 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fe fa4e 	bl	80018ec <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003452:	e00a      	b.n	800346a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003454:	f7fe fa4a 	bl	80018ec <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e0cb      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346a:	4b49      	ldr	r3, [pc, #292]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0ee      	beq.n	8003454 <HAL_RCC_OscConfig+0x334>
 8003476:	e014      	b.n	80034a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003478:	f7fe fa38 	bl	80018ec <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347e:	e00a      	b.n	8003496 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003480:	f7fe fa34 	bl	80018ec <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e0b5      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003496:	4b3e      	ldr	r3, [pc, #248]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1ee      	bne.n	8003480 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d105      	bne.n	80034b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a8:	4b39      	ldr	r3, [pc, #228]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	4a38      	ldr	r2, [pc, #224]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 80034ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80a1 	beq.w	8003600 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034be:	4b34      	ldr	r3, [pc, #208]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d05c      	beq.n	8003584 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d141      	bne.n	8003556 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	4b31      	ldr	r3, [pc, #196]	@ (8003598 <HAL_RCC_OscConfig+0x478>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fe fa08 	bl	80018ec <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fe fa04 	bl	80018ec <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e087      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	4b27      	ldr	r3, [pc, #156]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	019b      	lsls	r3, r3, #6
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	3b01      	subs	r3, #1
 8003518:	041b      	lsls	r3, r3, #16
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003520:	061b      	lsls	r3, r3, #24
 8003522:	491b      	ldr	r1, [pc, #108]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003528:	4b1b      	ldr	r3, [pc, #108]	@ (8003598 <HAL_RCC_OscConfig+0x478>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352e:	f7fe f9dd 	bl	80018ec <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003536:	f7fe f9d9 	bl	80018ec <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e05c      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003548:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x416>
 8003554:	e054      	b.n	8003600 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	4b10      	ldr	r3, [pc, #64]	@ (8003598 <HAL_RCC_OscConfig+0x478>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fe f9c6 	bl	80018ec <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003564:	f7fe f9c2 	bl	80018ec <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e045      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <HAL_RCC_OscConfig+0x470>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x444>
 8003582:	e03d      	b.n	8003600 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d107      	bne.n	800359c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e038      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
 8003590:	40023800 	.word	0x40023800
 8003594:	40007000 	.word	0x40007000
 8003598:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800359c:	4b1b      	ldr	r3, [pc, #108]	@ (800360c <HAL_RCC_OscConfig+0x4ec>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d028      	beq.n	80035fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d121      	bne.n	80035fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d11a      	bne.n	80035fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035cc:	4013      	ands	r3, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d111      	bne.n	80035fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	3b01      	subs	r3, #1
 80035e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800

08003610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0cc      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b68      	ldr	r3, [pc, #416]	@ (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d90c      	bls.n	800364c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b65      	ldr	r3, [pc, #404]	@ (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b63      	ldr	r3, [pc, #396]	@ (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0b8      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003664:	4b59      	ldr	r3, [pc, #356]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a58      	ldr	r2, [pc, #352]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800366e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800367c:	4b53      	ldr	r3, [pc, #332]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a52      	ldr	r2, [pc, #328]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003688:	4b50      	ldr	r3, [pc, #320]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	494d      	ldr	r1, [pc, #308]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	4313      	orrs	r3, r2
 8003698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d044      	beq.n	8003730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	4b47      	ldr	r3, [pc, #284]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d119      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e07f      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d003      	beq.n	80036ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	4b3f      	ldr	r3, [pc, #252]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e06f      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036de:	4b3b      	ldr	r3, [pc, #236]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e067      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ee:	4b37      	ldr	r3, [pc, #220]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f023 0203 	bic.w	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4934      	ldr	r1, [pc, #208]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003700:	f7fe f8f4 	bl	80018ec <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	e00a      	b.n	800371e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003708:	f7fe f8f0 	bl	80018ec <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e04f      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	4b2b      	ldr	r3, [pc, #172]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 020c 	and.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	429a      	cmp	r2, r3
 800372e:	d1eb      	bne.n	8003708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003730:	4b25      	ldr	r3, [pc, #148]	@ (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d20c      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b22      	ldr	r3, [pc, #136]	@ (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b20      	ldr	r3, [pc, #128]	@ (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e032      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003764:	4b19      	ldr	r3, [pc, #100]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4916      	ldr	r1, [pc, #88]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003782:	4b12      	ldr	r3, [pc, #72]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	490e      	ldr	r1, [pc, #56]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003796:	f000 f821 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 800379a:	4602      	mov	r2, r0
 800379c:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	490a      	ldr	r1, [pc, #40]	@ (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	5ccb      	ldrb	r3, [r1, r3]
 80037aa:	fa22 f303 	lsr.w	r3, r2, r3
 80037ae:	4a09      	ldr	r2, [pc, #36]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037b2:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe f854 	bl	8001864 <HAL_InitTick>

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023c00 	.word	0x40023c00
 80037cc:	40023800 	.word	0x40023800
 80037d0:	08004c1c 	.word	0x08004c1c
 80037d4:	200000cc 	.word	0x200000cc
 80037d8:	200000d0 	.word	0x200000d0

080037dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e0:	b094      	sub	sp, #80	@ 0x50
 80037e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037f4:	4b79      	ldr	r3, [pc, #484]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x200>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 030c 	and.w	r3, r3, #12
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d00d      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x40>
 8003800:	2b08      	cmp	r3, #8
 8003802:	f200 80e1 	bhi.w	80039c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x34>
 800380a:	2b04      	cmp	r3, #4
 800380c:	d003      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0x3a>
 800380e:	e0db      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003810:	4b73      	ldr	r3, [pc, #460]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003812:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003814:	e0db      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003816:	4b73      	ldr	r3, [pc, #460]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003818:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800381a:	e0d8      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800381c:	4b6f      	ldr	r3, [pc, #444]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x200>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003824:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003826:	4b6d      	ldr	r3, [pc, #436]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d063      	beq.n	80038fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003832:	4b6a      	ldr	r3, [pc, #424]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	099b      	lsrs	r3, r3, #6
 8003838:	2200      	movs	r2, #0
 800383a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800383c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800383e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003844:	633b      	str	r3, [r7, #48]	@ 0x30
 8003846:	2300      	movs	r3, #0
 8003848:	637b      	str	r3, [r7, #52]	@ 0x34
 800384a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800384e:	4622      	mov	r2, r4
 8003850:	462b      	mov	r3, r5
 8003852:	f04f 0000 	mov.w	r0, #0
 8003856:	f04f 0100 	mov.w	r1, #0
 800385a:	0159      	lsls	r1, r3, #5
 800385c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003860:	0150      	lsls	r0, r2, #5
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4621      	mov	r1, r4
 8003868:	1a51      	subs	r1, r2, r1
 800386a:	6139      	str	r1, [r7, #16]
 800386c:	4629      	mov	r1, r5
 800386e:	eb63 0301 	sbc.w	r3, r3, r1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003880:	4659      	mov	r1, fp
 8003882:	018b      	lsls	r3, r1, #6
 8003884:	4651      	mov	r1, sl
 8003886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800388a:	4651      	mov	r1, sl
 800388c:	018a      	lsls	r2, r1, #6
 800388e:	4651      	mov	r1, sl
 8003890:	ebb2 0801 	subs.w	r8, r2, r1
 8003894:	4659      	mov	r1, fp
 8003896:	eb63 0901 	sbc.w	r9, r3, r1
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ae:	4690      	mov	r8, r2
 80038b0:	4699      	mov	r9, r3
 80038b2:	4623      	mov	r3, r4
 80038b4:	eb18 0303 	adds.w	r3, r8, r3
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	462b      	mov	r3, r5
 80038bc:	eb49 0303 	adc.w	r3, r9, r3
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038ce:	4629      	mov	r1, r5
 80038d0:	024b      	lsls	r3, r1, #9
 80038d2:	4621      	mov	r1, r4
 80038d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038d8:	4621      	mov	r1, r4
 80038da:	024a      	lsls	r2, r1, #9
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038e2:	2200      	movs	r2, #0
 80038e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038ec:	f7fc fc74 	bl	80001d8 <__aeabi_uldivmod>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4613      	mov	r3, r2
 80038f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038f8:	e058      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038fa:	4b38      	ldr	r3, [pc, #224]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x200>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	099b      	lsrs	r3, r3, #6
 8003900:	2200      	movs	r2, #0
 8003902:	4618      	mov	r0, r3
 8003904:	4611      	mov	r1, r2
 8003906:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800390a:	623b      	str	r3, [r7, #32]
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003910:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003914:	4642      	mov	r2, r8
 8003916:	464b      	mov	r3, r9
 8003918:	f04f 0000 	mov.w	r0, #0
 800391c:	f04f 0100 	mov.w	r1, #0
 8003920:	0159      	lsls	r1, r3, #5
 8003922:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003926:	0150      	lsls	r0, r2, #5
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4641      	mov	r1, r8
 800392e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003932:	4649      	mov	r1, r9
 8003934:	eb63 0b01 	sbc.w	fp, r3, r1
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003944:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003948:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800394c:	ebb2 040a 	subs.w	r4, r2, sl
 8003950:	eb63 050b 	sbc.w	r5, r3, fp
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	00eb      	lsls	r3, r5, #3
 800395e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003962:	00e2      	lsls	r2, r4, #3
 8003964:	4614      	mov	r4, r2
 8003966:	461d      	mov	r5, r3
 8003968:	4643      	mov	r3, r8
 800396a:	18e3      	adds	r3, r4, r3
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	464b      	mov	r3, r9
 8003970:	eb45 0303 	adc.w	r3, r5, r3
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003982:	4629      	mov	r1, r5
 8003984:	028b      	lsls	r3, r1, #10
 8003986:	4621      	mov	r1, r4
 8003988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800398c:	4621      	mov	r1, r4
 800398e:	028a      	lsls	r2, r1, #10
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003996:	2200      	movs	r2, #0
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	61fa      	str	r2, [r7, #28]
 800399c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039a0:	f7fc fc1a 	bl	80001d8 <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4613      	mov	r3, r2
 80039aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039ac:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x200>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	3301      	adds	r3, #1
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80039bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039c6:	e002      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039c8:	4b05      	ldr	r3, [pc, #20]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3750      	adds	r7, #80	@ 0x50
 80039d4:	46bd      	mov	sp, r7
 80039d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800
 80039e0:	00f42400 	.word	0x00f42400
 80039e4:	007a1200 	.word	0x007a1200

080039e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ec:	4b03      	ldr	r3, [pc, #12]	@ (80039fc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	200000cc 	.word	0x200000cc

08003a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a04:	f7ff fff0 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	0a9b      	lsrs	r3, r3, #10
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4903      	ldr	r1, [pc, #12]	@ (8003a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40023800 	.word	0x40023800
 8003a24:	08004c2c 	.word	0x08004c2c

08003a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e07b      	b.n	8003b32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d108      	bne.n	8003a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a4a:	d009      	beq.n	8003a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61da      	str	r2, [r3, #28]
 8003a52:	e005      	b.n	8003a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd fd30 	bl	80014e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae4:	ea42 0103 	orr.w	r1, r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	f003 0104 	and.w	r1, r3, #4
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	f003 0210 	and.w	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e041      	b.n	8003bd0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7fd fd05 	bl	8001570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3304      	adds	r3, #4
 8003b76:	4619      	mov	r1, r3
 8003b78:	4610      	mov	r0, r2
 8003b7a:	f000 fabb 	bl	80040f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d001      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e044      	b.n	8003c7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003c88 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d018      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x6c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c1a:	d013      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x6c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1a      	ldr	r2, [pc, #104]	@ (8003c8c <HAL_TIM_Base_Start_IT+0xb4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00e      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x6c>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a19      	ldr	r2, [pc, #100]	@ (8003c90 <HAL_TIM_Base_Start_IT+0xb8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d009      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x6c>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a17      	ldr	r2, [pc, #92]	@ (8003c94 <HAL_TIM_Base_Start_IT+0xbc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d004      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x6c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a16      	ldr	r2, [pc, #88]	@ (8003c98 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d111      	bne.n	8003c68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b06      	cmp	r3, #6
 8003c54:	d010      	beq.n	8003c78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c66:	e007      	b.n	8003c78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	40014000 	.word	0x40014000

08003c9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d020      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01b      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0202 	mvn.w	r2, #2
 8003cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f9e5 	bl	80040b6 <HAL_TIM_IC_CaptureCallback>
 8003cec:	e005      	b.n	8003cfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f9d7 	bl	80040a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f9e8 	bl	80040ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d020      	beq.n	8003d4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01b      	beq.n	8003d4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0204 	mvn.w	r2, #4
 8003d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f9bf 	bl	80040b6 <HAL_TIM_IC_CaptureCallback>
 8003d38:	e005      	b.n	8003d46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f9b1 	bl	80040a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f9c2 	bl	80040ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d020      	beq.n	8003d98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01b      	beq.n	8003d98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0208 	mvn.w	r2, #8
 8003d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f999 	bl	80040b6 <HAL_TIM_IC_CaptureCallback>
 8003d84:	e005      	b.n	8003d92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f98b 	bl	80040a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f99c 	bl	80040ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d020      	beq.n	8003de4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01b      	beq.n	8003de4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0210 	mvn.w	r2, #16
 8003db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2208      	movs	r2, #8
 8003dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f973 	bl	80040b6 <HAL_TIM_IC_CaptureCallback>
 8003dd0:	e005      	b.n	8003dde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f965 	bl	80040a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f976 	bl	80040ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00c      	beq.n	8003e08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d007      	beq.n	8003e08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0201 	mvn.w	r2, #1
 8003e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f943 	bl	800408e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00c      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fb94 	bl	8004554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00c      	beq.n	8003e50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f947 	bl	80040de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00c      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0220 	mvn.w	r2, #32
 8003e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fb66 	bl	8004540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_TIM_ConfigClockSource+0x1c>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e0b4      	b.n	8004002 <HAL_TIM_ConfigClockSource+0x186>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed0:	d03e      	beq.n	8003f50 <HAL_TIM_ConfigClockSource+0xd4>
 8003ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed6:	f200 8087 	bhi.w	8003fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ede:	f000 8086 	beq.w	8003fee <HAL_TIM_ConfigClockSource+0x172>
 8003ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee6:	d87f      	bhi.n	8003fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee8:	2b70      	cmp	r3, #112	@ 0x70
 8003eea:	d01a      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0xa6>
 8003eec:	2b70      	cmp	r3, #112	@ 0x70
 8003eee:	d87b      	bhi.n	8003fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef0:	2b60      	cmp	r3, #96	@ 0x60
 8003ef2:	d050      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x11a>
 8003ef4:	2b60      	cmp	r3, #96	@ 0x60
 8003ef6:	d877      	bhi.n	8003fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef8:	2b50      	cmp	r3, #80	@ 0x50
 8003efa:	d03c      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0xfa>
 8003efc:	2b50      	cmp	r3, #80	@ 0x50
 8003efe:	d873      	bhi.n	8003fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8003f00:	2b40      	cmp	r3, #64	@ 0x40
 8003f02:	d058      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x13a>
 8003f04:	2b40      	cmp	r3, #64	@ 0x40
 8003f06:	d86f      	bhi.n	8003fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8003f08:	2b30      	cmp	r3, #48	@ 0x30
 8003f0a:	d064      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003f0c:	2b30      	cmp	r3, #48	@ 0x30
 8003f0e:	d86b      	bhi.n	8003fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d060      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d867      	bhi.n	8003fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d05c      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003f1c:	2b10      	cmp	r3, #16
 8003f1e:	d05a      	beq.n	8003fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003f20:	e062      	b.n	8003fe8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f32:	f000 fa76 	bl	8004422 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	609a      	str	r2, [r3, #8]
      break;
 8003f4e:	e04f      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f60:	f000 fa5f 	bl	8004422 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f72:	609a      	str	r2, [r3, #8]
      break;
 8003f74:	e03c      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f82:	461a      	mov	r2, r3
 8003f84:	f000 f9d3 	bl	800432e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2150      	movs	r1, #80	@ 0x50
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fa2c 	bl	80043ec <TIM_ITRx_SetConfig>
      break;
 8003f94:	e02c      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f000 f9f2 	bl	800438c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2160      	movs	r1, #96	@ 0x60
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fa1c 	bl	80043ec <TIM_ITRx_SetConfig>
      break;
 8003fb4:	e01c      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f000 f9b3 	bl	800432e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2140      	movs	r1, #64	@ 0x40
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fa0c 	bl	80043ec <TIM_ITRx_SetConfig>
      break;
 8003fd4:	e00c      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	f000 fa03 	bl	80043ec <TIM_ITRx_SetConfig>
      break;
 8003fe6:	e003      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
      break;
 8003fec:	e000      	b.n	8003ff0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_TIM_SlaveConfigSynchro+0x18>
 800401e:	2302      	movs	r3, #2
 8004020:	e031      	b.n	8004086 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004032:	6839      	ldr	r1, [r7, #0]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f8e9 	bl	800420c <TIM_SlaveTimer_SetConfig>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d009      	beq.n	8004054 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e018      	b.n	8004086 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004062:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004072:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3a      	ldr	r2, [pc, #232]	@ (80041f0 <TIM_Base_SetConfig+0xfc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00f      	beq.n	800412c <TIM_Base_SetConfig+0x38>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004112:	d00b      	beq.n	800412c <TIM_Base_SetConfig+0x38>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a37      	ldr	r2, [pc, #220]	@ (80041f4 <TIM_Base_SetConfig+0x100>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <TIM_Base_SetConfig+0x38>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a36      	ldr	r2, [pc, #216]	@ (80041f8 <TIM_Base_SetConfig+0x104>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_Base_SetConfig+0x38>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a35      	ldr	r2, [pc, #212]	@ (80041fc <TIM_Base_SetConfig+0x108>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d108      	bne.n	800413e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2b      	ldr	r2, [pc, #172]	@ (80041f0 <TIM_Base_SetConfig+0xfc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01b      	beq.n	800417e <TIM_Base_SetConfig+0x8a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414c:	d017      	beq.n	800417e <TIM_Base_SetConfig+0x8a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a28      	ldr	r2, [pc, #160]	@ (80041f4 <TIM_Base_SetConfig+0x100>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d013      	beq.n	800417e <TIM_Base_SetConfig+0x8a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a27      	ldr	r2, [pc, #156]	@ (80041f8 <TIM_Base_SetConfig+0x104>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00f      	beq.n	800417e <TIM_Base_SetConfig+0x8a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a26      	ldr	r2, [pc, #152]	@ (80041fc <TIM_Base_SetConfig+0x108>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00b      	beq.n	800417e <TIM_Base_SetConfig+0x8a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a25      	ldr	r2, [pc, #148]	@ (8004200 <TIM_Base_SetConfig+0x10c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d007      	beq.n	800417e <TIM_Base_SetConfig+0x8a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a24      	ldr	r2, [pc, #144]	@ (8004204 <TIM_Base_SetConfig+0x110>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d003      	beq.n	800417e <TIM_Base_SetConfig+0x8a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a23      	ldr	r2, [pc, #140]	@ (8004208 <TIM_Base_SetConfig+0x114>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d108      	bne.n	8004190 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a0e      	ldr	r2, [pc, #56]	@ (80041f0 <TIM_Base_SetConfig+0xfc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d103      	bne.n	80041c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d105      	bne.n	80041e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f023 0201 	bic.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]
  }
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40010000 	.word	0x40010000
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40000c00 	.word	0x40000c00
 8004200:	40014000 	.word	0x40014000
 8004204:	40014400 	.word	0x40014400
 8004208:	40014800 	.word	0x40014800

0800420c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004228:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f023 0307 	bic.w	r3, r3, #7
 800423a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b70      	cmp	r3, #112	@ 0x70
 8004254:	d01a      	beq.n	800428c <TIM_SlaveTimer_SetConfig+0x80>
 8004256:	2b70      	cmp	r3, #112	@ 0x70
 8004258:	d860      	bhi.n	800431c <TIM_SlaveTimer_SetConfig+0x110>
 800425a:	2b60      	cmp	r3, #96	@ 0x60
 800425c:	d054      	beq.n	8004308 <TIM_SlaveTimer_SetConfig+0xfc>
 800425e:	2b60      	cmp	r3, #96	@ 0x60
 8004260:	d85c      	bhi.n	800431c <TIM_SlaveTimer_SetConfig+0x110>
 8004262:	2b50      	cmp	r3, #80	@ 0x50
 8004264:	d046      	beq.n	80042f4 <TIM_SlaveTimer_SetConfig+0xe8>
 8004266:	2b50      	cmp	r3, #80	@ 0x50
 8004268:	d858      	bhi.n	800431c <TIM_SlaveTimer_SetConfig+0x110>
 800426a:	2b40      	cmp	r3, #64	@ 0x40
 800426c:	d019      	beq.n	80042a2 <TIM_SlaveTimer_SetConfig+0x96>
 800426e:	2b40      	cmp	r3, #64	@ 0x40
 8004270:	d854      	bhi.n	800431c <TIM_SlaveTimer_SetConfig+0x110>
 8004272:	2b30      	cmp	r3, #48	@ 0x30
 8004274:	d055      	beq.n	8004322 <TIM_SlaveTimer_SetConfig+0x116>
 8004276:	2b30      	cmp	r3, #48	@ 0x30
 8004278:	d850      	bhi.n	800431c <TIM_SlaveTimer_SetConfig+0x110>
 800427a:	2b20      	cmp	r3, #32
 800427c:	d051      	beq.n	8004322 <TIM_SlaveTimer_SetConfig+0x116>
 800427e:	2b20      	cmp	r3, #32
 8004280:	d84c      	bhi.n	800431c <TIM_SlaveTimer_SetConfig+0x110>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d04d      	beq.n	8004322 <TIM_SlaveTimer_SetConfig+0x116>
 8004286:	2b10      	cmp	r3, #16
 8004288:	d04b      	beq.n	8004322 <TIM_SlaveTimer_SetConfig+0x116>
 800428a:	e047      	b.n	800431c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800429c:	f000 f8c1 	bl	8004422 <TIM_ETR_SetConfig>
      break;
 80042a0:	e040      	b.n	8004324 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b05      	cmp	r3, #5
 80042a8:	d101      	bne.n	80042ae <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e03b      	b.n	8004326 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a1a      	ldr	r2, [r3, #32]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0201 	bic.w	r2, r2, #1
 80042c4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042d4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	621a      	str	r2, [r3, #32]
      break;
 80042f2:	e017      	b.n	8004324 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004300:	461a      	mov	r2, r3
 8004302:	f000 f814 	bl	800432e <TIM_TI1_ConfigInputStage>
      break;
 8004306:	e00d      	b.n	8004324 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004314:	461a      	mov	r2, r3
 8004316:	f000 f839 	bl	800438c <TIM_TI2_ConfigInputStage>
      break;
 800431a:	e003      	b.n	8004324 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	75fb      	strb	r3, [r7, #23]
      break;
 8004320:	e000      	b.n	8004324 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004322:	bf00      	nop
  }

  return status;
 8004324:	7dfb      	ldrb	r3, [r7, #23]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432e:	b480      	push	{r7}
 8004330:	b087      	sub	sp, #28
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f023 0201 	bic.w	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 030a 	bic.w	r3, r3, #10
 800436a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	621a      	str	r2, [r3, #32]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f023 0210 	bic.w	r2, r3, #16
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	031b      	lsls	r3, r3, #12
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004402:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4313      	orrs	r3, r2
 800440a:	f043 0307 	orr.w	r3, r3, #7
 800440e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	609a      	str	r2, [r3, #8]
}
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004422:	b480      	push	{r7}
 8004424:	b087      	sub	sp, #28
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800443c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	021a      	lsls	r2, r3, #8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	431a      	orrs	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4313      	orrs	r3, r2
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	609a      	str	r2, [r3, #8]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004478:	2302      	movs	r3, #2
 800447a:	e050      	b.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	@ (800452c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d018      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c8:	d013      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a18      	ldr	r2, [pc, #96]	@ (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00e      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a16      	ldr	r2, [pc, #88]	@ (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d009      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a15      	ldr	r2, [pc, #84]	@ (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d004      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a13      	ldr	r2, [pc, #76]	@ (800453c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d10c      	bne.n	800450c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	4313      	orrs	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40010000 	.word	0x40010000
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	40000c00 	.word	0x40000c00
 800453c:	40014000 	.word	0x40014000

08004540 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800456c:	4814      	ldr	r0, [pc, #80]	@ (80045c0 <I2Cx_Init+0x58>)
 800456e:	f7fe fa15 	bl	800299c <HAL_I2C_GetState>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d121      	bne.n	80045bc <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8004578:	4b11      	ldr	r3, [pc, #68]	@ (80045c0 <I2Cx_Init+0x58>)
 800457a:	4a12      	ldr	r2, [pc, #72]	@ (80045c4 <I2Cx_Init+0x5c>)
 800457c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800457e:	4b10      	ldr	r3, [pc, #64]	@ (80045c0 <I2Cx_Init+0x58>)
 8004580:	2243      	movs	r2, #67	@ 0x43
 8004582:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8004584:	4b0e      	ldr	r3, [pc, #56]	@ (80045c0 <I2Cx_Init+0x58>)
 8004586:	4a10      	ldr	r2, [pc, #64]	@ (80045c8 <I2Cx_Init+0x60>)
 8004588:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800458a:	4b0d      	ldr	r3, [pc, #52]	@ (80045c0 <I2Cx_Init+0x58>)
 800458c:	2200      	movs	r2, #0
 800458e:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <I2Cx_Init+0x58>)
 8004592:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004596:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8004598:	4b09      	ldr	r3, [pc, #36]	@ (80045c0 <I2Cx_Init+0x58>)
 800459a:	2200      	movs	r2, #0
 800459c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800459e:	4b08      	ldr	r3, [pc, #32]	@ (80045c0 <I2Cx_Init+0x58>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80045a4:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <I2Cx_Init+0x58>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 80045aa:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <I2Cx_Init+0x58>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80045b0:	4803      	ldr	r0, [pc, #12]	@ (80045c0 <I2Cx_Init+0x58>)
 80045b2:	f000 f86b 	bl	800468c <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80045b6:	4802      	ldr	r0, [pc, #8]	@ (80045c0 <I2Cx_Init+0x58>)
 80045b8:	f7fd fd50 	bl	800205c <HAL_I2C_Init>
  }
}
 80045bc:	bf00      	nop
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	200002fc 	.word	0x200002fc
 80045c4:	40005400 	.word	0x40005400
 80045c8:	000186a0 	.word	0x000186a0

080045cc <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af04      	add	r7, sp, #16
 80045d2:	4603      	mov	r3, r0
 80045d4:	80fb      	strh	r3, [r7, #6]
 80045d6:	460b      	mov	r3, r1
 80045d8:	717b      	strb	r3, [r7, #5]
 80045da:	4613      	mov	r3, r2
 80045dc:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80045e2:	797b      	ldrb	r3, [r7, #5]
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004614 <I2Cx_WriteData+0x48>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	88f9      	ldrh	r1, [r7, #6]
 80045ec:	9302      	str	r3, [sp, #8]
 80045ee:	2301      	movs	r3, #1
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	1d3b      	adds	r3, r7, #4
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	2301      	movs	r3, #1
 80045f8:	4807      	ldr	r0, [pc, #28]	@ (8004618 <I2Cx_WriteData+0x4c>)
 80045fa:	f7fd fea3 	bl	8002344 <HAL_I2C_Mem_Write>
 80045fe:	4603      	mov	r3, r0
 8004600:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8004608:	f000 f834 	bl	8004674 <I2Cx_Error>
  }
}
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	200000d8 	.word	0x200000d8
 8004618:	200002fc 	.word	0x200002fc

0800461c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af04      	add	r7, sp, #16
 8004622:	4603      	mov	r3, r0
 8004624:	460a      	mov	r2, r1
 8004626:	80fb      	strh	r3, [r7, #6]
 8004628:	4613      	mov	r3, r2
 800462a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8004634:	797b      	ldrb	r3, [r7, #5]
 8004636:	b29a      	uxth	r2, r3
 8004638:	4b0c      	ldr	r3, [pc, #48]	@ (800466c <I2Cx_ReadData+0x50>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	88f9      	ldrh	r1, [r7, #6]
 800463e:	9302      	str	r3, [sp, #8]
 8004640:	2301      	movs	r3, #1
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	f107 030e 	add.w	r3, r7, #14
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	2301      	movs	r3, #1
 800464c:	4808      	ldr	r0, [pc, #32]	@ (8004670 <I2Cx_ReadData+0x54>)
 800464e:	f7fd ff73 	bl	8002538 <HAL_I2C_Mem_Read>
 8004652:	4603      	mov	r3, r0
 8004654:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800465c:	f000 f80a 	bl	8004674 <I2Cx_Error>
  }
  return value;
 8004660:	7bbb      	ldrb	r3, [r7, #14]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	200000d8 	.word	0x200000d8
 8004670:	200002fc 	.word	0x200002fc

08004674 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8004678:	4803      	ldr	r0, [pc, #12]	@ (8004688 <I2Cx_Error+0x14>)
 800467a:	f7fd fe33 	bl	80022e4 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C communication BUS */
  I2Cx_Init();
 800467e:	f7ff ff73 	bl	8004568 <I2Cx_Init>
}
 8004682:	bf00      	nop
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	200002fc 	.word	0x200002fc

0800468c <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	@ 0x28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	4b25      	ldr	r3, [pc, #148]	@ (8004730 <I2Cx_MspInit+0xa4>)
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	4a24      	ldr	r2, [pc, #144]	@ (8004730 <I2Cx_MspInit+0xa4>)
 800469e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80046a4:	4b22      	ldr	r3, [pc, #136]	@ (8004730 <I2Cx_MspInit+0xa4>)
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004730 <I2Cx_MspInit+0xa4>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004730 <I2Cx_MspInit+0xa4>)
 80046ba:	f043 0302 	orr.w	r3, r3, #2
 80046be:	6313      	str	r3, [r2, #48]	@ 0x30
 80046c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004730 <I2Cx_MspInit+0xa4>)
 80046c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 80046cc:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80046d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80046d2:	2312      	movs	r3, #18
 80046d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80046da:	2302      	movs	r3, #2
 80046dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80046de:	2304      	movs	r3, #4
 80046e0:	627b      	str	r3, [r7, #36]	@ 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80046e2:	f107 0314 	add.w	r3, r7, #20
 80046e6:	4619      	mov	r1, r3
 80046e8:	4812      	ldr	r0, [pc, #72]	@ (8004734 <I2Cx_MspInit+0xa8>)
 80046ea:	f7fd fa1d 	bl	8001b28 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80046ee:	4b10      	ldr	r3, [pc, #64]	@ (8004730 <I2Cx_MspInit+0xa4>)
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	4a0f      	ldr	r2, [pc, #60]	@ (8004730 <I2Cx_MspInit+0xa4>)
 80046f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046f8:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80046fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004730 <I2Cx_MspInit+0xa4>)
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004730 <I2Cx_MspInit+0xa4>)
 8004700:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004704:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8004706:	2200      	movs	r2, #0
 8004708:	210f      	movs	r1, #15
 800470a:	201f      	movs	r0, #31
 800470c:	f7fd f9d5 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004710:	201f      	movs	r0, #31
 8004712:	f7fd f9ee 	bl	8001af2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8004716:	2200      	movs	r2, #0
 8004718:	210f      	movs	r1, #15
 800471a:	2020      	movs	r0, #32
 800471c:	f7fd f9cd 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8004720:	2020      	movs	r0, #32
 8004722:	f7fd f9e6 	bl	8001af2 <HAL_NVIC_EnableIRQ>
}
 8004726:	bf00      	nop
 8004728:	3728      	adds	r7, #40	@ 0x28
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40023800 	.word	0x40023800
 8004734:	40020400 	.word	0x40020400

08004738 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	4b0f      	ldr	r3, [pc, #60]	@ (8004780 <COMPASSACCELERO_IO_Init+0x48>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004746:	4a0e      	ldr	r2, [pc, #56]	@ (8004780 <COMPASSACCELERO_IO_Init+0x48>)
 8004748:	f043 0310 	orr.w	r3, r3, #16
 800474c:	6313      	str	r3, [r2, #48]	@ 0x30
 800474e:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <COMPASSACCELERO_IO_Init+0x48>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800475a:	2304      	movs	r3, #4
 800475c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800475e:	2300      	movs	r3, #0
 8004760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004766:	2302      	movs	r3, #2
 8004768:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4805      	ldr	r0, [pc, #20]	@ (8004784 <COMPASSACCELERO_IO_Init+0x4c>)
 8004770:	f7fd f9da 	bl	8001b28 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8004774:	f7ff fef8 	bl	8004568 <I2Cx_Init>
}
 8004778:	bf00      	nop
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40023800 	.word	0x40023800
 8004784:	40021000 	.word	0x40021000

08004788 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	4b13      	ldr	r3, [pc, #76]	@ (80047e0 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004796:	4a12      	ldr	r2, [pc, #72]	@ (80047e0 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8004798:	f043 0310 	orr.w	r3, r3, #16
 800479c:	6313      	str	r3, [r2, #48]	@ 0x30
 800479e:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80047aa:	2330      	movs	r3, #48	@ 0x30
 80047ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80047ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80047b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80047b4:	2302      	movs	r3, #2
 80047b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80047bc:	1d3b      	adds	r3, r7, #4
 80047be:	4619      	mov	r1, r3
 80047c0:	4808      	ldr	r0, [pc, #32]	@ (80047e4 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 80047c2:	f7fd f9b1 	bl	8001b28 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80047c6:	2200      	movs	r2, #0
 80047c8:	210f      	movs	r1, #15
 80047ca:	200a      	movs	r0, #10
 80047cc:	f7fd f975 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80047d0:	200a      	movs	r0, #10
 80047d2:	f7fd f98e 	bl	8001af2 <HAL_NVIC_EnableIRQ>
}
 80047d6:	bf00      	nop
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40023800 	.word	0x40023800
 80047e4:	40021000 	.word	0x40021000

080047e8 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	80fb      	strh	r3, [r7, #6]
 80047f2:	460b      	mov	r3, r1
 80047f4:	717b      	strb	r3, [r7, #5]
 80047f6:	4613      	mov	r3, r2
 80047f8:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 80047fa:	793a      	ldrb	r2, [r7, #4]
 80047fc:	7979      	ldrb	r1, [r7, #5]
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fee3 	bl	80045cc <I2Cx_WriteData>
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	4603      	mov	r3, r0
 8004816:	460a      	mov	r2, r1
 8004818:	80fb      	strh	r3, [r7, #6]
 800481a:	4613      	mov	r3, r2
 800481c:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 800481e:	797a      	ldrb	r2, [r7, #5]
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	4611      	mov	r1, r2
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fef9 	bl	800461c <I2Cx_ReadData>
 800482a:	4603      	mov	r3, r0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 800483e:	2300      	movs	r3, #0
 8004840:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8004842:	1d3b      	adds	r3, r7, #4
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800484a:	4b58      	ldr	r3, [pc, #352]	@ (80049ac <BSP_ACCELERO_Init+0x178>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4798      	blx	r3
 8004850:	4603      	mov	r3, r0
 8004852:	2b33      	cmp	r3, #51	@ 0x33
 8004854:	d14f      	bne.n	80048f6 <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8004856:	4b56      	ldr	r3, [pc, #344]	@ (80049b0 <BSP_ACCELERO_Init+0x17c>)
 8004858:	4a54      	ldr	r2, [pc, #336]	@ (80049ac <BSP_ACCELERO_Init+0x178>)
 800485a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 800485c:	2300      	movs	r3, #0
 800485e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8004860:	2340      	movs	r3, #64	@ 0x40
 8004862:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8004864:	2307      	movs	r3, #7
 8004866:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8004868:	2300      	movs	r3, #0
 800486a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 800486c:	2300      	movs	r3, #0
 800486e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8004870:	2300      	movs	r3, #0
 8004872:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8004874:	2308      	movs	r3, #8
 8004876:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8004878:	7b3a      	ldrb	r2, [r7, #12]
 800487a:	7b7b      	ldrb	r3, [r7, #13]
 800487c:	4313      	orrs	r3, r2
 800487e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8004880:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8004882:	4313      	orrs	r3, r2
 8004884:	b2db      	uxtb	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	8abb      	ldrh	r3, [r7, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800488e:	7c3a      	ldrb	r2, [r7, #16]
 8004890:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8004892:	4313      	orrs	r3, r2
 8004894:	b2da      	uxtb	r2, r3
 8004896:	7cbb      	ldrb	r3, [r7, #18]
 8004898:	4313      	orrs	r3, r2
 800489a:	b2da      	uxtb	r2, r3
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	4313      	orrs	r3, r2
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80048a4:	b21a      	sxth	r2, r3
 80048a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	b21b      	sxth	r3, r3
 80048ae:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80048b0:	4b3f      	ldr	r3, [pc, #252]	@ (80049b0 <BSP_ACCELERO_Init+0x17c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	8aba      	ldrh	r2, [r7, #20]
 80048b8:	4610      	mov	r0, r2
 80048ba:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 80048bc:	2380      	movs	r3, #128	@ 0x80
 80048be:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 80048c0:	2310      	movs	r3, #16
 80048c2:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80048cc:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80048ce:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80048d0:	4313      	orrs	r3, r2
 80048d2:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80048d4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80048d6:	4313      	orrs	r3, r2
 80048d8:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80048da:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80048dc:	4313      	orrs	r3, r2
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80048e2:	4b33      	ldr	r3, [pc, #204]	@ (80049b0 <BSP_ACCELERO_Init+0x17c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e8:	8aba      	ldrh	r2, [r7, #20]
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	4610      	mov	r0, r2
 80048ee:	4798      	blx	r3

    ret = ACCELERO_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	75fb      	strb	r3, [r7, #23]
 80048f4:	e054      	b.n	80049a0 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 80048f6:	4b2f      	ldr	r3, [pc, #188]	@ (80049b4 <BSP_ACCELERO_Init+0x180>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	4798      	blx	r3
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b33      	cmp	r3, #51	@ 0x33
 8004900:	d14e      	bne.n	80049a0 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8004902:	4b2b      	ldr	r3, [pc, #172]	@ (80049b0 <BSP_ACCELERO_Init+0x17c>)
 8004904:	4a2b      	ldr	r2, [pc, #172]	@ (80049b4 <BSP_ACCELERO_Init+0x180>)
 8004906:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8004908:	2300      	movs	r3, #0
 800490a:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 800490c:	2340      	movs	r3, #64	@ 0x40
 800490e:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8004910:	2307      	movs	r3, #7
 8004912:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8004914:	2300      	movs	r3, #0
 8004916:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8004918:	2300      	movs	r3, #0
 800491a:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 800491c:	2300      	movs	r3, #0
 800491e:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8004920:	2308      	movs	r3, #8
 8004922:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8004924:	7b3a      	ldrb	r2, [r7, #12]
 8004926:	7b7b      	ldrb	r3, [r7, #13]
 8004928:	4313      	orrs	r3, r2
 800492a:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 800492c:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800492e:	4313      	orrs	r3, r2
 8004930:	b2db      	uxtb	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	8abb      	ldrh	r3, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800493a:	7c3a      	ldrb	r2, [r7, #16]
 800493c:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 800493e:	4313      	orrs	r3, r2
 8004940:	b2da      	uxtb	r2, r3
 8004942:	7cbb      	ldrb	r3, [r7, #18]
 8004944:	4313      	orrs	r3, r2
 8004946:	b2da      	uxtb	r2, r3
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	4313      	orrs	r3, r2
 800494c:	b2db      	uxtb	r3, r3
 800494e:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8004950:	b21a      	sxth	r2, r3
 8004952:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	b21b      	sxth	r3, r3
 800495a:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800495c:	4b14      	ldr	r3, [pc, #80]	@ (80049b0 <BSP_ACCELERO_Init+0x17c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	8aba      	ldrh	r2, [r7, #20]
 8004964:	4610      	mov	r0, r2
 8004966:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8004968:	2380      	movs	r3, #128	@ 0x80
 800496a:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 800496c:	2310      	movs	r3, #16
 800496e:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8004970:	2300      	movs	r3, #0
 8004972:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8004974:	2300      	movs	r3, #0
 8004976:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004978:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800497a:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800497c:	4313      	orrs	r3, r2
 800497e:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8004980:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004982:	4313      	orrs	r3, r2
 8004984:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8004986:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004988:	4313      	orrs	r3, r2
 800498a:	b2db      	uxtb	r3, r3
 800498c:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800498e:	4b08      	ldr	r3, [pc, #32]	@ (80049b0 <BSP_ACCELERO_Init+0x17c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	8aba      	ldrh	r2, [r7, #20]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	4610      	mov	r0, r2
 800499a:	4798      	blx	r3

    ret = ACCELERO_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000034 	.word	0x20000034
 80049b0:	20000350 	.word	0x20000350
 80049b4:	20000000 	.word	0x20000000

080049b8 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 80049c4:	4b10      	ldr	r3, [pc, #64]	@ (8004a08 <BSP_ACCELERO_GetXYZ+0x50>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d018      	beq.n	8004a00 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80049ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004a08 <BSP_ACCELERO_GetXYZ+0x50>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 80049d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a08 <BSP_ACCELERO_GetXYZ+0x50>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0b      	ldr	r2, [pc, #44]	@ (8004a0c <BSP_ACCELERO_GetXYZ+0x54>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10e      	bne.n	8004a00 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 80049f2:	89fb      	ldrh	r3, [r7, #14]
 80049f4:	425b      	negs	r3, r3
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3302      	adds	r3, #2
 80049fc:	b212      	sxth	r2, r2
 80049fe:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20000350 	.word	0x20000350
 8004a0c:	20000034 	.word	0x20000034

08004a10 <malloc>:
 8004a10:	4b02      	ldr	r3, [pc, #8]	@ (8004a1c <malloc+0xc>)
 8004a12:	4601      	mov	r1, r0
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	f000 b825 	b.w	8004a64 <_malloc_r>
 8004a1a:	bf00      	nop
 8004a1c:	200000dc 	.word	0x200000dc

08004a20 <sbrk_aligned>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	4e0f      	ldr	r6, [pc, #60]	@ (8004a60 <sbrk_aligned+0x40>)
 8004a24:	460c      	mov	r4, r1
 8004a26:	6831      	ldr	r1, [r6, #0]
 8004a28:	4605      	mov	r5, r0
 8004a2a:	b911      	cbnz	r1, 8004a32 <sbrk_aligned+0x12>
 8004a2c:	f000 f8ae 	bl	8004b8c <_sbrk_r>
 8004a30:	6030      	str	r0, [r6, #0]
 8004a32:	4621      	mov	r1, r4
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 f8a9 	bl	8004b8c <_sbrk_r>
 8004a3a:	1c43      	adds	r3, r0, #1
 8004a3c:	d103      	bne.n	8004a46 <sbrk_aligned+0x26>
 8004a3e:	f04f 34ff 	mov.w	r4, #4294967295
 8004a42:	4620      	mov	r0, r4
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
 8004a46:	1cc4      	adds	r4, r0, #3
 8004a48:	f024 0403 	bic.w	r4, r4, #3
 8004a4c:	42a0      	cmp	r0, r4
 8004a4e:	d0f8      	beq.n	8004a42 <sbrk_aligned+0x22>
 8004a50:	1a21      	subs	r1, r4, r0
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 f89a 	bl	8004b8c <_sbrk_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d1f2      	bne.n	8004a42 <sbrk_aligned+0x22>
 8004a5c:	e7ef      	b.n	8004a3e <sbrk_aligned+0x1e>
 8004a5e:	bf00      	nop
 8004a60:	20000354 	.word	0x20000354

08004a64 <_malloc_r>:
 8004a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a68:	1ccd      	adds	r5, r1, #3
 8004a6a:	f025 0503 	bic.w	r5, r5, #3
 8004a6e:	3508      	adds	r5, #8
 8004a70:	2d0c      	cmp	r5, #12
 8004a72:	bf38      	it	cc
 8004a74:	250c      	movcc	r5, #12
 8004a76:	2d00      	cmp	r5, #0
 8004a78:	4606      	mov	r6, r0
 8004a7a:	db01      	blt.n	8004a80 <_malloc_r+0x1c>
 8004a7c:	42a9      	cmp	r1, r5
 8004a7e:	d904      	bls.n	8004a8a <_malloc_r+0x26>
 8004a80:	230c      	movs	r3, #12
 8004a82:	6033      	str	r3, [r6, #0]
 8004a84:	2000      	movs	r0, #0
 8004a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b60 <_malloc_r+0xfc>
 8004a8e:	f000 f869 	bl	8004b64 <__malloc_lock>
 8004a92:	f8d8 3000 	ldr.w	r3, [r8]
 8004a96:	461c      	mov	r4, r3
 8004a98:	bb44      	cbnz	r4, 8004aec <_malloc_r+0x88>
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	f7ff ffbf 	bl	8004a20 <sbrk_aligned>
 8004aa2:	1c43      	adds	r3, r0, #1
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	d158      	bne.n	8004b5a <_malloc_r+0xf6>
 8004aa8:	f8d8 4000 	ldr.w	r4, [r8]
 8004aac:	4627      	mov	r7, r4
 8004aae:	2f00      	cmp	r7, #0
 8004ab0:	d143      	bne.n	8004b3a <_malloc_r+0xd6>
 8004ab2:	2c00      	cmp	r4, #0
 8004ab4:	d04b      	beq.n	8004b4e <_malloc_r+0xea>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	4639      	mov	r1, r7
 8004aba:	4630      	mov	r0, r6
 8004abc:	eb04 0903 	add.w	r9, r4, r3
 8004ac0:	f000 f864 	bl	8004b8c <_sbrk_r>
 8004ac4:	4581      	cmp	r9, r0
 8004ac6:	d142      	bne.n	8004b4e <_malloc_r+0xea>
 8004ac8:	6821      	ldr	r1, [r4, #0]
 8004aca:	1a6d      	subs	r5, r5, r1
 8004acc:	4629      	mov	r1, r5
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f7ff ffa6 	bl	8004a20 <sbrk_aligned>
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d03a      	beq.n	8004b4e <_malloc_r+0xea>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	442b      	add	r3, r5
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	bb62      	cbnz	r2, 8004b40 <_malloc_r+0xdc>
 8004ae6:	f8c8 7000 	str.w	r7, [r8]
 8004aea:	e00f      	b.n	8004b0c <_malloc_r+0xa8>
 8004aec:	6822      	ldr	r2, [r4, #0]
 8004aee:	1b52      	subs	r2, r2, r5
 8004af0:	d420      	bmi.n	8004b34 <_malloc_r+0xd0>
 8004af2:	2a0b      	cmp	r2, #11
 8004af4:	d917      	bls.n	8004b26 <_malloc_r+0xc2>
 8004af6:	1961      	adds	r1, r4, r5
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	6025      	str	r5, [r4, #0]
 8004afc:	bf18      	it	ne
 8004afe:	6059      	strne	r1, [r3, #4]
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	bf08      	it	eq
 8004b04:	f8c8 1000 	streq.w	r1, [r8]
 8004b08:	5162      	str	r2, [r4, r5]
 8004b0a:	604b      	str	r3, [r1, #4]
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f000 f82f 	bl	8004b70 <__malloc_unlock>
 8004b12:	f104 000b 	add.w	r0, r4, #11
 8004b16:	1d23      	adds	r3, r4, #4
 8004b18:	f020 0007 	bic.w	r0, r0, #7
 8004b1c:	1ac2      	subs	r2, r0, r3
 8004b1e:	bf1c      	itt	ne
 8004b20:	1a1b      	subne	r3, r3, r0
 8004b22:	50a3      	strne	r3, [r4, r2]
 8004b24:	e7af      	b.n	8004a86 <_malloc_r+0x22>
 8004b26:	6862      	ldr	r2, [r4, #4]
 8004b28:	42a3      	cmp	r3, r4
 8004b2a:	bf0c      	ite	eq
 8004b2c:	f8c8 2000 	streq.w	r2, [r8]
 8004b30:	605a      	strne	r2, [r3, #4]
 8004b32:	e7eb      	b.n	8004b0c <_malloc_r+0xa8>
 8004b34:	4623      	mov	r3, r4
 8004b36:	6864      	ldr	r4, [r4, #4]
 8004b38:	e7ae      	b.n	8004a98 <_malloc_r+0x34>
 8004b3a:	463c      	mov	r4, r7
 8004b3c:	687f      	ldr	r7, [r7, #4]
 8004b3e:	e7b6      	b.n	8004aae <_malloc_r+0x4a>
 8004b40:	461a      	mov	r2, r3
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	42a3      	cmp	r3, r4
 8004b46:	d1fb      	bne.n	8004b40 <_malloc_r+0xdc>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	6053      	str	r3, [r2, #4]
 8004b4c:	e7de      	b.n	8004b0c <_malloc_r+0xa8>
 8004b4e:	230c      	movs	r3, #12
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	4630      	mov	r0, r6
 8004b54:	f000 f80c 	bl	8004b70 <__malloc_unlock>
 8004b58:	e794      	b.n	8004a84 <_malloc_r+0x20>
 8004b5a:	6005      	str	r5, [r0, #0]
 8004b5c:	e7d6      	b.n	8004b0c <_malloc_r+0xa8>
 8004b5e:	bf00      	nop
 8004b60:	20000358 	.word	0x20000358

08004b64 <__malloc_lock>:
 8004b64:	4801      	ldr	r0, [pc, #4]	@ (8004b6c <__malloc_lock+0x8>)
 8004b66:	f000 b84b 	b.w	8004c00 <__retarget_lock_acquire_recursive>
 8004b6a:	bf00      	nop
 8004b6c:	20000498 	.word	0x20000498

08004b70 <__malloc_unlock>:
 8004b70:	4801      	ldr	r0, [pc, #4]	@ (8004b78 <__malloc_unlock+0x8>)
 8004b72:	f000 b846 	b.w	8004c02 <__retarget_lock_release_recursive>
 8004b76:	bf00      	nop
 8004b78:	20000498 	.word	0x20000498

08004b7c <memset>:
 8004b7c:	4402      	add	r2, r0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d100      	bne.n	8004b86 <memset+0xa>
 8004b84:	4770      	bx	lr
 8004b86:	f803 1b01 	strb.w	r1, [r3], #1
 8004b8a:	e7f9      	b.n	8004b80 <memset+0x4>

08004b8c <_sbrk_r>:
 8004b8c:	b538      	push	{r3, r4, r5, lr}
 8004b8e:	4d06      	ldr	r5, [pc, #24]	@ (8004ba8 <_sbrk_r+0x1c>)
 8004b90:	2300      	movs	r3, #0
 8004b92:	4604      	mov	r4, r0
 8004b94:	4608      	mov	r0, r1
 8004b96:	602b      	str	r3, [r5, #0]
 8004b98:	f7fc fdd0 	bl	800173c <_sbrk>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d102      	bne.n	8004ba6 <_sbrk_r+0x1a>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	b103      	cbz	r3, 8004ba6 <_sbrk_r+0x1a>
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	bd38      	pop	{r3, r4, r5, pc}
 8004ba8:	20000494 	.word	0x20000494

08004bac <__errno>:
 8004bac:	4b01      	ldr	r3, [pc, #4]	@ (8004bb4 <__errno+0x8>)
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	200000dc 	.word	0x200000dc

08004bb8 <__libc_init_array>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	4d0d      	ldr	r5, [pc, #52]	@ (8004bf0 <__libc_init_array+0x38>)
 8004bbc:	4c0d      	ldr	r4, [pc, #52]	@ (8004bf4 <__libc_init_array+0x3c>)
 8004bbe:	1b64      	subs	r4, r4, r5
 8004bc0:	10a4      	asrs	r4, r4, #2
 8004bc2:	2600      	movs	r6, #0
 8004bc4:	42a6      	cmp	r6, r4
 8004bc6:	d109      	bne.n	8004bdc <__libc_init_array+0x24>
 8004bc8:	4d0b      	ldr	r5, [pc, #44]	@ (8004bf8 <__libc_init_array+0x40>)
 8004bca:	4c0c      	ldr	r4, [pc, #48]	@ (8004bfc <__libc_init_array+0x44>)
 8004bcc:	f000 f81a 	bl	8004c04 <_init>
 8004bd0:	1b64      	subs	r4, r4, r5
 8004bd2:	10a4      	asrs	r4, r4, #2
 8004bd4:	2600      	movs	r6, #0
 8004bd6:	42a6      	cmp	r6, r4
 8004bd8:	d105      	bne.n	8004be6 <__libc_init_array+0x2e>
 8004bda:	bd70      	pop	{r4, r5, r6, pc}
 8004bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be0:	4798      	blx	r3
 8004be2:	3601      	adds	r6, #1
 8004be4:	e7ee      	b.n	8004bc4 <__libc_init_array+0xc>
 8004be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bea:	4798      	blx	r3
 8004bec:	3601      	adds	r6, #1
 8004bee:	e7f2      	b.n	8004bd6 <__libc_init_array+0x1e>
 8004bf0:	08004c3c 	.word	0x08004c3c
 8004bf4:	08004c3c 	.word	0x08004c3c
 8004bf8:	08004c3c 	.word	0x08004c3c
 8004bfc:	08004c40 	.word	0x08004c40

08004c00 <__retarget_lock_acquire_recursive>:
 8004c00:	4770      	bx	lr

08004c02 <__retarget_lock_release_recursive>:
 8004c02:	4770      	bx	lr

08004c04 <_init>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	bf00      	nop
 8004c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0a:	bc08      	pop	{r3}
 8004c0c:	469e      	mov	lr, r3
 8004c0e:	4770      	bx	lr

08004c10 <_fini>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	bf00      	nop
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr
