
P2_FreeRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c16c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800c30c  0800c30c  0000d30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3a4  0800c3a4  0000e080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3a4  0800c3a4  0000d3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3ac  0800c3ac  0000e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3ac  0800c3ac  0000d3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c3b0  0800c3b0  0000d3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800c3b4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054c8  20000080  0800c434  0000e080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005548  0800c434  0000e548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000255be  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005705  00000000  00000000  0003366e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f00  00000000  00000000  00038d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017e7  00000000  00000000  0003ac78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca4e  00000000  00000000  0003c45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027c50  00000000  00000000  00058ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1c14  00000000  00000000  00080afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122711  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008678  00000000  00000000  00122754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0012adcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c2f4 	.word	0x0800c2f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800c2f4 	.word	0x0800c2f4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Timer para depuración.
 80004d4:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <configureTimerForRunTimeStats+0x2c>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	4a08      	ldr	r2, [pc, #32]	@ (80004fc <configureTimerForRunTimeStats+0x2c>)
 80004da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004de:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Habilita el timer
 80004e0:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <configureTimerForRunTimeStats+0x30>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <configureTimerForRunTimeStats+0x30>)
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0; // Inicializa el timer que se encarga de contar los ciclos de reloj.
 80004ec:	4b04      	ldr	r3, [pc, #16]	@ (8000500 <configureTimerForRunTimeStats+0x30>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	605a      	str	r2, [r3, #4]
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	e000edf0 	.word	0xe000edf0
 8000500:	e0001000 	.word	0xe0001000

08000504 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	return DWT->CYCCNT; // Devuelve la cuenta de los ciclos de reloj que se han leido.
 8000508:	4b03      	ldr	r3, [pc, #12]	@ (8000518 <getRunTimeCounterValue+0x14>)
 800050a:	685b      	ldr	r3, [r3, #4]
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	e0001000 	.word	0xe0001000

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fd10 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f820 	bl	8000568 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000528:	f000 f886 	bl	8000638 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f966 	bl	80007fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000530:	f000 f8a2 	bl	8000678 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000534:	f000 f8ce 	bl	80006d4 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000538:	f000 f8fa 	bl	8000730 <MX_I2S3_Init>
  MX_SPI1_Init();
 800053c:	f000 f928 	bl	8000790 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000540:	f008 fbf0 	bl	8008d24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000544:	4a05      	ldr	r2, [pc, #20]	@ (800055c <main+0x40>)
 8000546:	2100      	movs	r1, #0
 8000548:	4805      	ldr	r0, [pc, #20]	@ (8000560 <main+0x44>)
 800054a:	f008 fc35 	bl	8008db8 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <main+0x48>)
 8000552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f008 fc0a 	bl	8008d6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <main+0x3c>
 800055c:	0800c368 	.word	0x0800c368
 8000560:	080009b1 	.word	0x080009b1
 8000564:	200001d8 	.word	0x200001d8

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	@ 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f00b fdca 	bl	800c110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b27      	ldr	r3, [pc, #156]	@ (8000630 <SystemClock_Config+0xc8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	4a26      	ldr	r2, [pc, #152]	@ (8000630 <SystemClock_Config+0xc8>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	@ 0x40
 800059c:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <SystemClock_Config+0xc8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <SystemClock_Config+0xcc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a20      	ldr	r2, [pc, #128]	@ (8000634 <SystemClock_Config+0xcc>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <SystemClock_Config+0xcc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005c8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005dc:	23c0      	movs	r3, #192	@ 0xc0
 80005de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005e4:	2308      	movs	r3, #8
 80005e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fea7 	bl	8004340 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f8:	f000 f9f6 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000608:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2103      	movs	r1, #3
 8000618:	4618      	mov	r0, r3
 800061a:	f004 f909 	bl	8004830 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000624:	f000 f9e0 	bl	80009e8 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	@ 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800064e:	2301      	movs	r3, #1
 8000650:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000652:	23c8      	movs	r3, #200	@ 0xc8
 8000654:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000656:	2305      	movs	r3, #5
 8000658:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800065a:	2302      	movs	r3, #2
 800065c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	4618      	mov	r0, r3
 8000662:	f004 fb23 	bl	8004cac <HAL_RCCEx_PeriphCLKConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800066c:	f000 f9bc 	bl	80009e8 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <MX_I2C1_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	@ (80006cc <MX_I2C1_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_I2C1_Init+0x50>)
 8000684:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <MX_I2C1_Init+0x58>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_I2C1_Init+0x50>)
 8000696:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800069a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a2:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006b6:	f003 f85f 	bl	8003778 <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 f992 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	40005400 	.word	0x40005400
 80006d0:	000186a0 	.word	0x000186a0

080006d4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_I2S2_Init+0x50>)
 80006da:	4a13      	ldr	r2, [pc, #76]	@ (8000728 <MX_I2S2_Init+0x54>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_I2S2_Init+0x50>)
 80006e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_I2S2_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <MX_I2S2_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_I2S2_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <MX_I2S2_Init+0x50>)
 80006fa:	4a0c      	ldr	r2, [pc, #48]	@ (800072c <MX_I2S2_Init+0x58>)
 80006fc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_I2S2_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_I2S2_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_I2S2_Init+0x50>)
 800070c:	2201      	movs	r2, #1
 800070e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <MX_I2S2_Init+0x50>)
 8000712:	f003 f975 	bl	8003a00 <HAL_I2S_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800071c:	f000 f964 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200000f0 	.word	0x200000f0
 8000728:	40003800 	.word	0x40003800
 800072c:	00017700 	.word	0x00017700

08000730 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_I2S3_Init+0x54>)
 8000736:	4a14      	ldr	r2, [pc, #80]	@ (8000788 <MX_I2S3_Init+0x58>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_I2S3_Init+0x54>)
 800073c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000740:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_I2S3_Init+0x54>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_I2S3_Init+0x54>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800074e:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <MX_I2S3_Init+0x54>)
 8000750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000754:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_I2S3_Init+0x54>)
 8000758:	4a0c      	ldr	r2, [pc, #48]	@ (800078c <MX_I2S3_Init+0x5c>)
 800075a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_I2S3_Init+0x54>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_I2S3_Init+0x54>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_I2S3_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_I2S3_Init+0x54>)
 8000770:	f003 f946 	bl	8003a00 <HAL_I2S_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800077a:	f000 f935 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000138 	.word	0x20000138
 8000788:	40003c00 	.word	0x40003c00
 800078c:	00017700 	.word	0x00017700

08000790 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000794:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <MX_SPI1_Init+0x64>)
 8000796:	4a18      	ldr	r2, [pc, #96]	@ (80007f8 <MX_SPI1_Init+0x68>)
 8000798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079a:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <MX_SPI1_Init+0x64>)
 800079c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a2:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <MX_SPI1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_SPI1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_SPI1_Init+0x64>)
 80007bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_SPI1_Init+0x64>)
 80007dc:	220a      	movs	r2, #10
 80007de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_SPI1_Init+0x64>)
 80007e2:	f004 fbb5 	bl	8004f50 <HAL_SPI_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007ec:	f000 f8fc 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000180 	.word	0x20000180
 80007f8:	40013000 	.word	0x40013000

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	4b61      	ldr	r3, [pc, #388]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a60      	ldr	r2, [pc, #384]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800081c:	f043 0310 	orr.w	r3, r3, #16
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b5e      	ldr	r3, [pc, #376]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0310 	and.w	r3, r3, #16
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	4b5a      	ldr	r3, [pc, #360]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a59      	ldr	r2, [pc, #356]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b57      	ldr	r3, [pc, #348]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b53      	ldr	r3, [pc, #332]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a52      	ldr	r2, [pc, #328]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b50      	ldr	r3, [pc, #320]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b4c      	ldr	r3, [pc, #304]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a4b      	ldr	r2, [pc, #300]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b49      	ldr	r3, [pc, #292]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b45      	ldr	r3, [pc, #276]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a44      	ldr	r2, [pc, #272]	@ (800099c <MX_GPIO_Init+0x1a0>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b42      	ldr	r3, [pc, #264]	@ (800099c <MX_GPIO_Init+0x1a0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b3e      	ldr	r3, [pc, #248]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a3d      	ldr	r2, [pc, #244]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b3b      	ldr	r3, [pc, #236]	@ (800099c <MX_GPIO_Init+0x1a0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2108      	movs	r1, #8
 80008be:	4838      	ldr	r0, [pc, #224]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 80008c0:	f000 fe0c 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2101      	movs	r1, #1
 80008c8:	4836      	ldr	r0, [pc, #216]	@ (80009a4 <MX_GPIO_Init+0x1a8>)
 80008ca:	f000 fe07 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ce:	2200      	movs	r2, #0
 80008d0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008d4:	4834      	ldr	r0, [pc, #208]	@ (80009a8 <MX_GPIO_Init+0x1ac>)
 80008d6:	f000 fe01 	bl	80014dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80008da:	2304      	movs	r3, #4
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	482c      	ldr	r0, [pc, #176]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 80008ee:	f000 fc71 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008f2:	2308      	movs	r3, #8
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4825      	ldr	r0, [pc, #148]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 800090a:	f000 fc63 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800090e:	2332      	movs	r3, #50	@ 0x32
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000912:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	481f      	ldr	r0, [pc, #124]	@ (80009a0 <MX_GPIO_Init+0x1a4>)
 8000924:	f000 fc56 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000928:	2301      	movs	r3, #1
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4819      	ldr	r0, [pc, #100]	@ (80009a4 <MX_GPIO_Init+0x1a8>)
 8000940:	f000 fc48 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000944:	2301      	movs	r3, #1
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000948:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4814      	ldr	r0, [pc, #80]	@ (80009ac <MX_GPIO_Init+0x1b0>)
 800095a:	f000 fc3b 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000962:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	480c      	ldr	r0, [pc, #48]	@ (80009a8 <MX_GPIO_Init+0x1ac>)
 8000978:	f000 fc2c 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800097c:	2320      	movs	r3, #32
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_GPIO_Init+0x1ac>)
 8000990:	f000 fc20 	bl	80011d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000994:	bf00      	nop
 8000996:	3730      	adds	r7, #48	@ 0x30
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020c00 	.word	0x40020c00
 80009ac:	40020000 	.word	0x40020000

080009b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80009b8:	f00a ffe8 	bl	800b98c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1); // Bucle infinito del sistema operativo, se ejecuta la tarea básica.
 80009bc:	2001      	movs	r0, #1
 80009be:	f008 fa8d 	bl	8008edc <osDelay>
 80009c2:	e7fb      	b.n	80009bc <StartDefaultTask+0xc>

080009c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a04      	ldr	r2, [pc, #16]	@ (80009e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d6:	f000 fad7 	bl	8000f88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40000800 	.word	0x40000800

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <Error_Handler+0x8>

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_MspInit+0x54>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	4a11      	ldr	r2, [pc, #68]	@ (8000a48 <HAL_MspInit+0x54>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <HAL_MspInit+0x54>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <HAL_MspInit+0x54>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <HAL_MspInit+0x54>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <HAL_MspInit+0x54>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	210f      	movs	r1, #15
 8000a36:	f06f 0001 	mvn.w	r0, #1
 8000a3a:	f000 fba1 	bl	8001180 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	@ (8000ad0 <HAL_I2C_MspInit+0x84>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12c      	bne.n	8000ac8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a17      	ldr	r2, [pc, #92]	@ (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a8a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a90:	2312      	movs	r3, #18
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <HAL_I2C_MspInit+0x8c>)
 8000aa8:	f000 fb94 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab4:	4a07      	ldr	r2, [pc, #28]	@ (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000ab6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	@ 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400

08000adc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08e      	sub	sp, #56	@ 0x38
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a59      	ldr	r2, [pc, #356]	@ (8000c60 <HAL_I2S_MspInit+0x184>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d15b      	bne.n	8000bb6 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
 8000b02:	4b58      	ldr	r3, [pc, #352]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	4a57      	ldr	r2, [pc, #348]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0e:	4b55      	ldr	r3, [pc, #340]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b16:	623b      	str	r3, [r7, #32]
 8000b18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
 8000b1e:	4b51      	ldr	r3, [pc, #324]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a50      	ldr	r2, [pc, #320]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	61fb      	str	r3, [r7, #28]
 8000b34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
 8000b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a49      	ldr	r2, [pc, #292]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b47      	ldr	r3, [pc, #284]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b52:	2304      	movs	r3, #4
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000b62:	2306      	movs	r3, #6
 8000b64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	483e      	ldr	r0, [pc, #248]	@ (8000c68 <HAL_I2S_MspInit+0x18c>)
 8000b6e:	f000 fb31 	bl	80011d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b72:	2308      	movs	r3, #8
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b82:	2305      	movs	r3, #5
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4836      	ldr	r0, [pc, #216]	@ (8000c68 <HAL_I2S_MspInit+0x18c>)
 8000b8e:	f000 fb21 	bl	80011d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000b92:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	482f      	ldr	r0, [pc, #188]	@ (8000c6c <HAL_I2S_MspInit+0x190>)
 8000bb0:	f000 fb10 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bb4:	e04f      	b.n	8000c56 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a2d      	ldr	r2, [pc, #180]	@ (8000c70 <HAL_I2S_MspInit+0x194>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d14a      	bne.n	8000c56 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	4a26      	ldr	r2, [pc, #152]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000bca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd0:	4b24      	ldr	r3, [pc, #144]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bec:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c00:	4a18      	ldr	r2, [pc, #96]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c08:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <HAL_I2S_MspInit+0x188>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c14:	2310      	movs	r3, #16
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c24:	2306      	movs	r3, #6
 8000c26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4811      	ldr	r0, [pc, #68]	@ (8000c74 <HAL_I2S_MspInit+0x198>)
 8000c30:	f000 fad0 	bl	80011d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c34:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c46:	2306      	movs	r3, #6
 8000c48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <HAL_I2S_MspInit+0x18c>)
 8000c52:	f000 fabf 	bl	80011d4 <HAL_GPIO_Init>
}
 8000c56:	bf00      	nop
 8000c58:	3738      	adds	r7, #56	@ 0x38
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40003800 	.word	0x40003800
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40003c00 	.word	0x40003c00
 8000c74:	40020000 	.word	0x40020000

08000c78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	@ 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	@ (8000cfc <HAL_SPI_MspInit+0x84>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12b      	bne.n	8000cf2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <HAL_SPI_MspInit+0x88>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	4a17      	ldr	r2, [pc, #92]	@ (8000d00 <HAL_SPI_MspInit+0x88>)
 8000ca4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <HAL_SPI_MspInit+0x88>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <HAL_SPI_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a10      	ldr	r2, [pc, #64]	@ (8000d00 <HAL_SPI_MspInit+0x88>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <HAL_SPI_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cd2:	23e0      	movs	r3, #224	@ 0xe0
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <HAL_SPI_MspInit+0x8c>)
 8000cee:	f000 fa71 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	@ 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000

08000d08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08e      	sub	sp, #56	@ 0x38
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b33      	ldr	r3, [pc, #204]	@ (8000dec <HAL_InitTick+0xe4>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d20:	4a32      	ldr	r2, [pc, #200]	@ (8000dec <HAL_InitTick+0xe4>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d28:	4b30      	ldr	r3, [pc, #192]	@ (8000dec <HAL_InitTick+0xe4>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d34:	f107 0210 	add.w	r2, r7, #16
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 ff82 	bl	8004c48 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d103      	bne.n	8000d56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d4e:	f003 ff67 	bl	8004c20 <HAL_RCC_GetPCLK1Freq>
 8000d52:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d54:	e004      	b.n	8000d60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d56:	f003 ff63 	bl	8004c20 <HAL_RCC_GetPCLK1Freq>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d62:	4a23      	ldr	r2, [pc, #140]	@ (8000df0 <HAL_InitTick+0xe8>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	0c9b      	lsrs	r3, r3, #18
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <HAL_InitTick+0xf0>)
 8000d72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d7a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d80:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000d82:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000d94:	4817      	ldr	r0, [pc, #92]	@ (8000df4 <HAL_InitTick+0xec>)
 8000d96:	f004 f964 	bl	8005062 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000da0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d11b      	bne.n	8000de0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000da8:	4812      	ldr	r0, [pc, #72]	@ (8000df4 <HAL_InitTick+0xec>)
 8000daa:	f004 f9b3 	bl	8005114 <HAL_TIM_Base_Start_IT>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000db4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d111      	bne.n	8000de0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000dbc:	201e      	movs	r0, #30
 8000dbe:	f000 f9fb 	bl	80011b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d808      	bhi.n	8000dda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	201e      	movs	r0, #30
 8000dce:	f000 f9d7 	bl	8001180 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_InitTick+0xf4>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e002      	b.n	8000de0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000de0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3738      	adds	r7, #56	@ 0x38
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	200001dc 	.word	0x200001dc
 8000df8:	40000800 	.word	0x40000800
 8000dfc:	20000004 	.word	0x20000004

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <NMI_Handler+0x4>

08000e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <TIM4_IRQHandler+0x10>)
 8000e3e:	f004 f9cb 	bl	80051d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001dc 	.word	0x200001dc

08000e4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <OTG_FS_IRQHandler+0x10>)
 8000e52:	f000 fe3d 	bl	8001ad0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20005020 	.word	0x20005020

08000e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e68:	4a14      	ldr	r2, [pc, #80]	@ (8000ebc <_sbrk+0x5c>)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <_sbrk+0x60>)
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <_sbrk+0x64>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ec8 <_sbrk+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d207      	bcs.n	8000ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e90:	f00b f9ac 	bl	800c1ec <__errno>
 8000e94:	4603      	mov	r3, r0
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20020000 	.word	0x20020000
 8000ec0:	00000400 	.word	0x00000400
 8000ec4:	20000224 	.word	0x20000224
 8000ec8:	20005548 	.word	0x20005548

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef4:	f7ff ffea 	bl	8000ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	@ (8000f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	@ (8000f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f00b f96b 	bl	800c1f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fafb 	bl	800051c <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f34:	0800c3b4 	.word	0x0800c3b4
  ldr r2, =_sbss
 8000f38:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000f3c:	20005548 	.word	0x20005548

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f8fc 	bl	800116a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	200f      	movs	r0, #15
 8000f74:	f7ff fec8 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fd3c 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000228 	.word	0x20000228

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000228 	.word	0x20000228

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffee 	bl	8000fb0 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffde 	bl	8000fb0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	@ (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	@ (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	@ (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	@ 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	@ 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff4c 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001192:	f7ff ff61 	bl	8001058 <__NVIC_GetPriorityGrouping>
 8001196:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	6978      	ldr	r0, [r7, #20]
 800119e:	f7ff ffb1 	bl	8001104 <NVIC_EncodePriority>
 80011a2:	4602      	mov	r2, r0
 80011a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff80 	bl	80010b0 <__NVIC_SetPriority>
}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff54 	bl	8001074 <__NVIC_EnableIRQ>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e159      	b.n	80014a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	f040 8148 	bne.w	800149e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d005      	beq.n	8001226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	2b02      	cmp	r3, #2
 8001224:	d130      	bne.n	8001288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 0201 	and.w	r2, r3, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b03      	cmp	r3, #3
 8001292:	d017      	beq.n	80012c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d123      	bne.n	8001318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	08da      	lsrs	r2, r3, #3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3208      	adds	r2, #8
 8001312:	69b9      	ldr	r1, [r7, #24]
 8001314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0203 	and.w	r2, r3, #3
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80a2 	beq.w	800149e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b57      	ldr	r3, [pc, #348]	@ (80014bc <HAL_GPIO_Init+0x2e8>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a56      	ldr	r2, [pc, #344]	@ (80014bc <HAL_GPIO_Init+0x2e8>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b54      	ldr	r3, [pc, #336]	@ (80014bc <HAL_GPIO_Init+0x2e8>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001376:	4a52      	ldr	r2, [pc, #328]	@ (80014c0 <HAL_GPIO_Init+0x2ec>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a49      	ldr	r2, [pc, #292]	@ (80014c4 <HAL_GPIO_Init+0x2f0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x202>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a48      	ldr	r2, [pc, #288]	@ (80014c8 <HAL_GPIO_Init+0x2f4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x1fe>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a47      	ldr	r2, [pc, #284]	@ (80014cc <HAL_GPIO_Init+0x2f8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x1fa>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a46      	ldr	r2, [pc, #280]	@ (80014d0 <HAL_GPIO_Init+0x2fc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x1f6>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a45      	ldr	r2, [pc, #276]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x1f2>
 80013c2:	2304      	movs	r3, #4
 80013c4:	e008      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013c6:	2307      	movs	r3, #7
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013ca:	2303      	movs	r3, #3
 80013cc:	e004      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013d6:	2300      	movs	r3, #0
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	f002 0203 	and.w	r2, r2, #3
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	4093      	lsls	r3, r2
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e8:	4935      	ldr	r1, [pc, #212]	@ (80014c0 <HAL_GPIO_Init+0x2ec>)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f6:	4b38      	ldr	r3, [pc, #224]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141a:	4a2f      	ldr	r2, [pc, #188]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001420:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001444:	4a24      	ldr	r2, [pc, #144]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800144a:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800146e:	4a1a      	ldr	r2, [pc, #104]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001498:	4a0f      	ldr	r2, [pc, #60]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3301      	adds	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	f67f aea2 	bls.w	80011f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3724      	adds	r7, #36	@ 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40013800 	.word	0x40013800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40013c00 	.word	0x40013c00

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f8:	e003      	b.n	8001502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	619a      	str	r2, [r3, #24]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af02      	add	r7, sp, #8
 8001514:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e059      	b.n	80015d4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f00a fa7a 	bl	800ba34 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2203      	movs	r2, #3
 8001544:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800154e:	d102      	bne.n	8001556 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f004 f869 	bl	8005632 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7c1a      	ldrb	r2, [r3, #16]
 8001568:	f88d 2000 	strb.w	r2, [sp]
 800156c:	3304      	adds	r3, #4
 800156e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001570:	f003 ffea 	bl	8005548 <USB_CoreInit>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2202      	movs	r2, #2
 800157e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e026      	b.n	80015d4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2101      	movs	r1, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f004 f861 	bl	8005654 <USB_SetCurrentMode>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e017      	b.n	80015d4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7c1a      	ldrb	r2, [r3, #16]
 80015ac:	f88d 2000 	strb.w	r2, [sp]
 80015b0:	3304      	adds	r3, #4
 80015b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b4:	f004 fa04 	bl	80059c0 <USB_HostInit>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2202      	movs	r2, #2
 80015c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e004      	b.n	80015d4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b08b      	sub	sp, #44	@ 0x2c
 80015e0:	af04      	add	r7, sp, #16
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	70fb      	strb	r3, [r7, #3]
 80015ee:	460b      	mov	r3, r1
 80015f0:	70bb      	strb	r3, [r7, #2]
 80015f2:	4613      	mov	r3, r2
 80015f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015f6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015f8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_HCD_HC_Init+0x2c>
 8001604:	2302      	movs	r3, #2
 8001606:	e09d      	b.n	8001744 <HAL_HCD_HC_Init+0x168>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	1a9b      	subs	r3, r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	3319      	adds	r3, #25
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	3314      	adds	r3, #20
 8001634:	787a      	ldrb	r2, [r7, #1]
 8001636:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	3315      	adds	r3, #21
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800164c:	78fa      	ldrb	r2, [r7, #3]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	3326      	adds	r3, #38	@ 0x26
 800165c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001660:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001662:	78fa      	ldrb	r2, [r7, #3]
 8001664:	78bb      	ldrb	r3, [r7, #2]
 8001666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800166a:	b2d8      	uxtb	r0, r3
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3316      	adds	r3, #22
 800167a:	4602      	mov	r2, r0
 800167c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	4619      	mov	r1, r3
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 fbc8 	bl	8001e18 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001688:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800168c:	2b00      	cmp	r3, #0
 800168e:	da0a      	bge.n	80016a6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001690:	78fa      	ldrb	r2, [r7, #3]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	3317      	adds	r3, #23
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e009      	b.n	80016ba <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	3317      	adds	r3, #23
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 facc 	bl	8005c5c <USB_GetHostSpeed>
 80016c4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d10b      	bne.n	80016e6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_HCD_HC_Init+0x10a>
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d104      	bne.n	80016e6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2bbc      	cmp	r3, #188	@ 0xbc
 80016e0:	d901      	bls.n	80016e6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016e2:	23bc      	movs	r3, #188	@ 0xbc
 80016e4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	011b      	lsls	r3, r3, #4
 80016ee:	1a9b      	subs	r3, r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	3318      	adds	r3, #24
 80016f6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	b298      	uxth	r0, r3
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	3328      	adds	r3, #40	@ 0x28
 8001710:	4602      	mov	r2, r0
 8001712:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	b29b      	uxth	r3, r3
 800171c:	787c      	ldrb	r4, [r7, #1]
 800171e:	78ba      	ldrb	r2, [r7, #2]
 8001720:	78f9      	ldrb	r1, [r7, #3]
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	4623      	mov	r3, r4
 8001732:	f004 fabb 	bl	8005cac <USB_HC_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
}
 8001744:	4618      	mov	r0, r3
 8001746:	371c      	adds	r7, #28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd90      	pop	{r4, r7, pc}

0800174c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001762:	2b01      	cmp	r3, #1
 8001764:	d101      	bne.n	800176a <HAL_HCD_HC_Halt+0x1e>
 8001766:	2302      	movs	r3, #2
 8001768:	e00f      	b.n	800178a <HAL_HCD_HC_Halt+0x3e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f004 fe01 	bl	8006382 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	4608      	mov	r0, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	4603      	mov	r3, r0
 80017a4:	70fb      	strb	r3, [r7, #3]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70bb      	strb	r3, [r7, #2]
 80017aa:	4613      	mov	r3, r2
 80017ac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	3317      	adds	r3, #23
 80017be:	78ba      	ldrb	r2, [r7, #2]
 80017c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	1a9b      	subs	r3, r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	3326      	adds	r3, #38	@ 0x26
 80017d2:	787a      	ldrb	r2, [r7, #1]
 80017d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017d6:	7c3b      	ldrb	r3, [r7, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d114      	bne.n	8001806 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	332a      	adds	r3, #42	@ 0x2a
 80017ec:	2203      	movs	r2, #3
 80017ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	3319      	adds	r3, #25
 8001800:	7f3a      	ldrb	r2, [r7, #28]
 8001802:	701a      	strb	r2, [r3, #0]
 8001804:	e009      	b.n	800181a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	332a      	adds	r3, #42	@ 0x2a
 8001816:	2202      	movs	r2, #2
 8001818:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800181a:	787b      	ldrb	r3, [r7, #1]
 800181c:	2b03      	cmp	r3, #3
 800181e:	f200 8102 	bhi.w	8001a26 <HAL_HCD_HC_SubmitRequest+0x292>
 8001822:	a201      	add	r2, pc, #4	@ (adr r2, 8001828 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	08001839 	.word	0x08001839
 800182c:	08001a11 	.word	0x08001a11
 8001830:	080018fd 	.word	0x080018fd
 8001834:	08001987 	.word	0x08001987
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001838:	7c3b      	ldrb	r3, [r7, #16]
 800183a:	2b01      	cmp	r3, #1
 800183c:	f040 80f5 	bne.w	8001a2a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001840:	78bb      	ldrb	r3, [r7, #2]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d12d      	bne.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001846:	8b3b      	ldrh	r3, [r7, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d109      	bne.n	8001860 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	333d      	adds	r3, #61	@ 0x3d
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	333d      	adds	r3, #61	@ 0x3d
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10a      	bne.n	800188c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	1a9b      	subs	r3, r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	332a      	adds	r3, #42	@ 0x2a
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800188a:	e0ce      	b.n	8001a2a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	332a      	adds	r3, #42	@ 0x2a
 800189c:	2202      	movs	r2, #2
 800189e:	701a      	strb	r2, [r3, #0]
      break;
 80018a0:	e0c3      	b.n	8001a2a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80018a2:	78fa      	ldrb	r2, [r7, #3]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	331a      	adds	r3, #26
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	f040 80b8 	bne.w	8001a2a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	333c      	adds	r3, #60	@ 0x3c
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10a      	bne.n	80018e6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	332a      	adds	r3, #42	@ 0x2a
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
      break;
 80018e4:	e0a1      	b.n	8001a2a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	332a      	adds	r3, #42	@ 0x2a
 80018f6:	2202      	movs	r2, #2
 80018f8:	701a      	strb	r2, [r3, #0]
      break;
 80018fa:	e096      	b.n	8001a2a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018fc:	78bb      	ldrb	r3, [r7, #2]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d120      	bne.n	8001944 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	333d      	adds	r3, #61	@ 0x3d
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10a      	bne.n	800192e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	332a      	adds	r3, #42	@ 0x2a
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800192c:	e07e      	b.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	332a      	adds	r3, #42	@ 0x2a
 800193e:	2202      	movs	r2, #2
 8001940:	701a      	strb	r2, [r3, #0]
      break;
 8001942:	e073      	b.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	333c      	adds	r3, #60	@ 0x3c
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10a      	bne.n	8001970 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	332a      	adds	r3, #42	@ 0x2a
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
      break;
 800196e:	e05d      	b.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	332a      	adds	r3, #42	@ 0x2a
 8001980:	2202      	movs	r2, #2
 8001982:	701a      	strb	r2, [r3, #0]
      break;
 8001984:	e052      	b.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001986:	78bb      	ldrb	r3, [r7, #2]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d120      	bne.n	80019ce <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800198c:	78fa      	ldrb	r2, [r7, #3]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	333d      	adds	r3, #61	@ 0x3d
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10a      	bne.n	80019b8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a2:	78fa      	ldrb	r2, [r7, #3]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	332a      	adds	r3, #42	@ 0x2a
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019b6:	e039      	b.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	332a      	adds	r3, #42	@ 0x2a
 80019c8:	2202      	movs	r2, #2
 80019ca:	701a      	strb	r2, [r3, #0]
      break;
 80019cc:	e02e      	b.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	333c      	adds	r3, #60	@ 0x3c
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10a      	bne.n	80019fa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	332a      	adds	r3, #42	@ 0x2a
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
      break;
 80019f8:	e018      	b.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019fa:	78fa      	ldrb	r2, [r7, #3]
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	1a9b      	subs	r3, r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	332a      	adds	r3, #42	@ 0x2a
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	701a      	strb	r2, [r3, #0]
      break;
 8001a0e:	e00d      	b.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	332a      	adds	r3, #42	@ 0x2a
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
      break;
 8001a24:	e002      	b.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a26:	bf00      	nop
 8001a28:	e000      	b.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a2a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	332c      	adds	r3, #44	@ 0x2c
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	8b39      	ldrh	r1, [r7, #24]
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4403      	add	r3, r0
 8001a50:	3334      	adds	r3, #52	@ 0x34
 8001a52:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	334c      	adds	r3, #76	@ 0x4c
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	3338      	adds	r3, #56	@ 0x38
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	1a9b      	subs	r3, r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	3315      	adds	r3, #21
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	334d      	adds	r3, #77	@ 0x4d
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	3310      	adds	r3, #16
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	1d19      	adds	r1, r3, #4
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	799b      	ldrb	r3, [r3, #6]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f004 fa0a 	bl	8005ed8 <USB_HC_StartXfer>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop

08001ad0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 ff2a 	bl	8005940 <USB_GetMode>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	f040 80fb 	bne.w	8001cea <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 feed 	bl	80058d8 <USB_ReadInterrupts>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80f1 	beq.w	8001ce8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 fee4 	bl	80058d8 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b1a:	d104      	bne.n	8001b26 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fed4 	bl	80058d8 <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b3a:	d104      	bne.n	8001b46 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 fec4 	bl	80058d8 <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b5a:	d104      	bne.n	8001b66 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 feb4 	bl	80058d8 <USB_ReadInterrupts>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d103      	bne.n	8001b82 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fea6 	bl	80058d8 <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b96:	d120      	bne.n	8001bda <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001ba0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d113      	bne.n	8001bda <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	6938      	ldr	r0, [r7, #16]
 8001bb6:	f003 fd99 	bl	80056ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bba:	6938      	ldr	r0, [r7, #16]
 8001bbc:	f003 fdc8 	bl	8005750 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7a5b      	ldrb	r3, [r3, #9]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d105      	bne.n	8001bd4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 ffa4 	bl	8005b1c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f009 ffab 	bl	800bb30 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 fe7a 	bl	80058d8 <USB_ReadInterrupts>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bee:	d102      	bne.n	8001bf6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f001 fd4d 	bl	8003690 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 fe6c 	bl	80058d8 <USB_ReadInterrupts>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d106      	bne.n	8001c18 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f009 ff74 	bl	800baf8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2208      	movs	r2, #8
 8001c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 fe5b 	bl	80058d8 <USB_ReadInterrupts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c2c:	d139      	bne.n	8001ca2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 fb94 	bl	8006360 <USB_HC_ReadInterrupt>
 8001c38:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e025      	b.n	8001c8c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d018      	beq.n	8001c86 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c6a:	d106      	bne.n	8001c7a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	4619      	mov	r1, r3
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f905 	bl	8001e82 <HCD_HC_IN_IRQHandler>
 8001c78:	e005      	b.n	8001c86 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 ff67 	bl	8002b54 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	795b      	ldrb	r3, [r3, #5]
 8001c90:	461a      	mov	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d3d3      	bcc.n	8001c40 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 fe16 	bl	80058d8 <USB_ReadInterrupts>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2b10      	cmp	r3, #16
 8001cb4:	d101      	bne.n	8001cba <HAL_HCD_IRQHandler+0x1ea>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_HCD_IRQHandler+0x1ec>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d014      	beq.n	8001cea <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0210 	bic.w	r2, r2, #16
 8001cce:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f001 fbfe 	bl	80034d2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0210 	orr.w	r2, r2, #16
 8001ce4:	619a      	str	r2, [r3, #24]
 8001ce6:	e000      	b.n	8001cea <HAL_HCD_IRQHandler+0x21a>
      return;
 8001ce8:	bf00      	nop
    }
  }
}
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_HCD_Start+0x16>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e013      	b.n	8001d2e <HAL_HCD_Start+0x3e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2101      	movs	r1, #1
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 ff68 	bl	8005bea <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 fc76 	bl	8005610 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_HCD_Stop+0x16>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e00d      	b.n	8001d68 <HAL_HCD_Stop+0x32>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f004 fc32 	bl	80065c2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 ff0a 	bl	8005b96 <USB_ResetPort>
 8001d82:	4603      	mov	r3, r0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	334c      	adds	r3, #76	@ 0x4c
 8001da8:	781b      	ldrb	r3, [r3, #0]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dc2:	78fa      	ldrb	r2, [r7, #3]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	3338      	adds	r3, #56	@ 0x38
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 ff4c 	bl	8005c8a <USB_GetCurrentFrame>
 8001df2:	4603      	mov	r3, r0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 ff27 	bl	8005c5c <USB_GetHostSpeed>
 8001e0e:	4603      	mov	r3, r0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	331a      	adds	r3, #26
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e38:	78fa      	ldrb	r2, [r7, #3]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	331b      	adds	r3, #27
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	3325      	adds	r3, #37	@ 0x25
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3324      	adds	r3, #36	@ 0x24
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 fd2c 	bl	80058fe <USB_ReadChInterrupts>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d11a      	bne.n	8001ee6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	334d      	adds	r3, #77	@ 0x4d
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	78fa      	ldrb	r2, [r7, #3]
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 fa4f 	bl	8006382 <USB_HC_Halt>
 8001ee4:	e09e      	b.n	8002024 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fd05 	bl	80058fe <USB_ReadChInterrupts>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001efe:	d11b      	bne.n	8001f38 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	334d      	adds	r3, #77	@ 0x4d
 8001f24:	2208      	movs	r2, #8
 8001f26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 fa26 	bl	8006382 <USB_HC_Halt>
 8001f36:	e075      	b.n	8002024 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f003 fcdc 	bl	80058fe <USB_ReadChInterrupts>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d11a      	bne.n	8001f86 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2308      	movs	r3, #8
 8001f60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	334d      	adds	r3, #77	@ 0x4d
 8001f72:	2206      	movs	r2, #6
 8001f74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	78fa      	ldrb	r2, [r7, #3]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 f9ff 	bl	8006382 <USB_HC_Halt>
 8001f84:	e04e      	b.n	8002024 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 fcb5 	bl	80058fe <USB_ReadChInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f9e:	d11b      	bne.n	8001fd8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fac:	461a      	mov	r2, r3
 8001fae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	334d      	adds	r3, #77	@ 0x4d
 8001fc4:	2209      	movs	r2, #9
 8001fc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 f9d6 	bl	8006382 <USB_HC_Halt>
 8001fd6:	e025      	b.n	8002024 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fc8c 	bl	80058fe <USB_ReadChInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fec:	2b80      	cmp	r3, #128	@ 0x80
 8001fee:	d119      	bne.n	8002024 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2380      	movs	r3, #128	@ 0x80
 8002000:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	334d      	adds	r3, #77	@ 0x4d
 8002012:	2207      	movs	r2, #7
 8002014:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f004 f9af 	bl	8006382 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f003 fc66 	bl	80058fe <USB_ReadChInterrupts>
 8002032:	4603      	mov	r3, r0
 8002034:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800203c:	d112      	bne.n	8002064 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f004 f99b 	bl	8006382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002058:	461a      	mov	r2, r3
 800205a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800205e:	6093      	str	r3, [r2, #8]
 8002060:	f000 bd75 	b.w	8002b4e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f003 fc46 	bl	80058fe <USB_ReadChInterrupts>
 8002072:	4603      	mov	r3, r0
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	f040 8128 	bne.w	80022ce <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800208a:	461a      	mov	r2, r3
 800208c:	2320      	movs	r3, #32
 800208e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	331b      	adds	r3, #27
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d119      	bne.n	80020da <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	331b      	adds	r3, #27
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	0151      	lsls	r1, r2, #5
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	440a      	add	r2, r1
 80020d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	799b      	ldrb	r3, [r3, #6]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d01b      	beq.n	800211a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3330      	adds	r3, #48	@ 0x30
 80020f2:	6819      	ldr	r1, [r3, #0]
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	1ac9      	subs	r1, r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4403      	add	r3, r0
 8002116:	3338      	adds	r3, #56	@ 0x38
 8002118:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	334d      	adds	r3, #77	@ 0x4d
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800212e:	78fa      	ldrb	r2, [r7, #3]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3344      	adds	r3, #68	@ 0x44
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800214e:	461a      	mov	r2, r3
 8002150:	2301      	movs	r3, #1
 8002152:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3326      	adds	r3, #38	@ 0x26
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3326      	adds	r3, #38	@ 0x26
 800217a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800217c:	2b02      	cmp	r3, #2
 800217e:	d110      	bne.n	80021a2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f004 f8fa 	bl	8006382 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800219a:	461a      	mov	r2, r3
 800219c:	2310      	movs	r3, #16
 800219e:	6093      	str	r3, [r2, #8]
 80021a0:	e03d      	b.n	800221e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	3326      	adds	r3, #38	@ 0x26
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d00a      	beq.n	80021ce <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3326      	adds	r3, #38	@ 0x26
 80021c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d127      	bne.n	800221e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	0151      	lsls	r1, r2, #5
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	440a      	add	r2, r1
 80021e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021ec:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	334c      	adds	r3, #76	@ 0x4c
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	334c      	adds	r3, #76	@ 0x4c
 8002212:	781a      	ldrb	r2, [r3, #0]
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	4619      	mov	r1, r3
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f009 fc97 	bl	800bb4c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	799b      	ldrb	r3, [r3, #6]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d13b      	bne.n	800229e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	3338      	adds	r3, #56	@ 0x38
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4403      	add	r3, r0
 8002246:	3328      	adds	r3, #40	@ 0x28
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	440b      	add	r3, r1
 800224c:	1e59      	subs	r1, r3, #1
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4403      	add	r3, r0
 800225c:	3328      	adds	r3, #40	@ 0x28
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	fbb1 f3f3 	udiv	r3, r1, r3
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8470 	beq.w	8002b4e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	333c      	adds	r3, #60	@ 0x3c
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	f083 0301 	eor.w	r3, r3, #1
 8002286:	b2d8      	uxtb	r0, r3
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	333c      	adds	r3, #60	@ 0x3c
 8002296:	4602      	mov	r2, r0
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	f000 bc58 	b.w	8002b4e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	333c      	adds	r3, #60	@ 0x3c
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	f083 0301 	eor.w	r3, r3, #1
 80022b6:	b2d8      	uxtb	r0, r3
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	333c      	adds	r3, #60	@ 0x3c
 80022c6:	4602      	mov	r2, r0
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	f000 bc40 	b.w	8002b4e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fb11 	bl	80058fe <USB_ReadChInterrupts>
 80022dc:	4603      	mov	r3, r0
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b20      	cmp	r3, #32
 80022e4:	d131      	bne.n	800234a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022f2:	461a      	mov	r2, r3
 80022f4:	2320      	movs	r3, #32
 80022f6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	331a      	adds	r3, #26
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	f040 841f 	bne.w	8002b4e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	331b      	adds	r3, #27
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	334d      	adds	r3, #77	@ 0x4d
 8002334:	2203      	movs	r2, #3
 8002336:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f004 f81e 	bl	8006382 <USB_HC_Halt>
 8002346:	f000 bc02 	b.w	8002b4e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f003 fad3 	bl	80058fe <USB_ReadChInterrupts>
 8002358:	4603      	mov	r3, r0
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	f040 8305 	bne.w	800296e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002370:	461a      	mov	r2, r3
 8002372:	2302      	movs	r3, #2
 8002374:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	334d      	adds	r3, #77	@ 0x4d
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d114      	bne.n	80023b6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	334d      	adds	r3, #77	@ 0x4d
 800239c:	2202      	movs	r2, #2
 800239e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	334c      	adds	r3, #76	@ 0x4c
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e2cc      	b.n	8002950 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	334d      	adds	r3, #77	@ 0x4d
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b06      	cmp	r3, #6
 80023ca:	d114      	bne.n	80023f6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	334d      	adds	r3, #77	@ 0x4d
 80023dc:	2202      	movs	r2, #2
 80023de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	334c      	adds	r3, #76	@ 0x4c
 80023f0:	2205      	movs	r2, #5
 80023f2:	701a      	strb	r2, [r3, #0]
 80023f4:	e2ac      	b.n	8002950 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	334d      	adds	r3, #77	@ 0x4d
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b07      	cmp	r3, #7
 800240a:	d00b      	beq.n	8002424 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	334d      	adds	r3, #77	@ 0x4d
 800241c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800241e:	2b09      	cmp	r3, #9
 8002420:	f040 80a6 	bne.w	8002570 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	334d      	adds	r3, #77	@ 0x4d
 8002434:	2202      	movs	r2, #2
 8002436:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	3344      	adds	r3, #68	@ 0x44
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	1c59      	adds	r1, r3, #1
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4403      	add	r3, r0
 8002458:	3344      	adds	r3, #68	@ 0x44
 800245a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	3344      	adds	r3, #68	@ 0x44
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d943      	bls.n	80024fa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	3344      	adds	r3, #68	@ 0x44
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	331a      	adds	r3, #26
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d123      	bne.n	80024e4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	331b      	adds	r3, #27
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	331c      	adds	r3, #28
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	0151      	lsls	r1, r2, #5
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	440a      	add	r2, r1
 80024da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	334c      	adds	r3, #76	@ 0x4c
 80024f4:	2204      	movs	r2, #4
 80024f6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024f8:	e229      	b.n	800294e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	334c      	adds	r3, #76	@ 0x4c
 800250a:	2202      	movs	r2, #2
 800250c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3326      	adds	r3, #38	@ 0x26
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00b      	beq.n	800253c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3326      	adds	r3, #38	@ 0x26
 8002534:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002536:	2b02      	cmp	r3, #2
 8002538:	f040 8209 	bne.w	800294e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002552:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800255a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002568:	461a      	mov	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800256e:	e1ee      	b.n	800294e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	334d      	adds	r3, #77	@ 0x4d
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b05      	cmp	r3, #5
 8002584:	f040 80c8 	bne.w	8002718 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	334d      	adds	r3, #77	@ 0x4d
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	331b      	adds	r3, #27
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	f040 81ce 	bne.w	8002950 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	3326      	adds	r3, #38	@ 0x26
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d16b      	bne.n	80026a2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3348      	adds	r3, #72	@ 0x48
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	1c59      	adds	r1, r3, #1
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4403      	add	r3, r0
 80025ea:	3348      	adds	r3, #72	@ 0x48
 80025ec:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	3348      	adds	r3, #72	@ 0x48
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d943      	bls.n	800268c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3348      	adds	r3, #72	@ 0x48
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	331b      	adds	r3, #27
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	3344      	adds	r3, #68	@ 0x44
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d809      	bhi.n	8002656 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	331c      	adds	r3, #28
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4413      	add	r3, r2
 800265e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	0151      	lsls	r1, r2, #5
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	440a      	add	r2, r1
 800266c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002674:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	334c      	adds	r3, #76	@ 0x4c
 8002686:	2204      	movs	r2, #4
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	e014      	b.n	80026b6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	334c      	adds	r3, #76	@ 0x4c
 800269c:	2202      	movs	r2, #2
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	e009      	b.n	80026b6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	334c      	adds	r3, #76	@ 0x4c
 80026b2:	2202      	movs	r2, #2
 80026b4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	3326      	adds	r3, #38	@ 0x26
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00b      	beq.n	80026e4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	3326      	adds	r3, #38	@ 0x26
 80026dc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026de:	2b02      	cmp	r3, #2
 80026e0:	f040 8136 	bne.w	8002950 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026fa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002702:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002710:	461a      	mov	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e11b      	b.n	8002950 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	334d      	adds	r3, #77	@ 0x4d
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b03      	cmp	r3, #3
 800272c:	f040 8081 	bne.w	8002832 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	334d      	adds	r3, #77	@ 0x4d
 8002740:	2202      	movs	r2, #2
 8002742:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	331b      	adds	r3, #27
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b01      	cmp	r3, #1
 8002758:	f040 80fa 	bne.w	8002950 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800275c:	78fa      	ldrb	r2, [r7, #3]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	334c      	adds	r3, #76	@ 0x4c
 800276c:	2202      	movs	r2, #2
 800276e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	78fa      	ldrb	r2, [r7, #3]
 8002780:	0151      	lsls	r1, r2, #5
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	440a      	add	r2, r1
 8002786:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800278a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	0151      	lsls	r1, r2, #5
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	440a      	add	r2, r1
 80027a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ae:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	0151      	lsls	r1, r2, #5
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	440a      	add	r2, r1
 80027c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ca:	f023 0320 	bic.w	r3, r3, #32
 80027ce:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	3326      	adds	r3, #38	@ 0x26
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	3326      	adds	r3, #38	@ 0x26
 80027f6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	f040 80a9 	bne.w	8002950 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002814:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800281c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	e08e      	b.n	8002950 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	334d      	adds	r3, #77	@ 0x4d
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d143      	bne.n	80028d0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	334d      	adds	r3, #77	@ 0x4d
 8002858:	2202      	movs	r2, #2
 800285a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	334c      	adds	r3, #76	@ 0x4c
 800286c:	2202      	movs	r2, #2
 800286e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	3326      	adds	r3, #38	@ 0x26
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	3326      	adds	r3, #38	@ 0x26
 8002896:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002898:	2b02      	cmp	r3, #2
 800289a:	d159      	bne.n	8002950 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028b2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028ba:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c8:	461a      	mov	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e03f      	b.n	8002950 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	334d      	adds	r3, #77	@ 0x4d
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d126      	bne.n	8002934 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	334d      	adds	r3, #77	@ 0x4d
 80028f6:	2202      	movs	r2, #2
 80028f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	3344      	adds	r3, #68	@ 0x44
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	1c59      	adds	r1, r3, #1
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4403      	add	r3, r0
 800291a:	3344      	adds	r3, #68	@ 0x44
 800291c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	334c      	adds	r3, #76	@ 0x4c
 800292e:	2204      	movs	r2, #4
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e00d      	b.n	8002950 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	334d      	adds	r3, #77	@ 0x4d
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b02      	cmp	r3, #2
 8002948:	f000 8100 	beq.w	8002b4c <HCD_HC_IN_IRQHandler+0xcca>
 800294c:	e000      	b.n	8002950 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800294e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	334c      	adds	r3, #76	@ 0x4c
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	4619      	mov	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f009 f8f0 	bl	800bb4c <HAL_HCD_HC_NotifyURBChange_Callback>
 800296c:	e0ef      	b.n	8002b4e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f002 ffc1 	bl	80058fe <USB_ReadChInterrupts>
 800297c:	4603      	mov	r3, r0
 800297e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002982:	2b40      	cmp	r3, #64	@ 0x40
 8002984:	d12f      	bne.n	80029e6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002992:	461a      	mov	r2, r3
 8002994:	2340      	movs	r3, #64	@ 0x40
 8002996:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	334d      	adds	r3, #77	@ 0x4d
 80029a8:	2205      	movs	r2, #5
 80029aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	331a      	adds	r3, #26
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	3344      	adds	r3, #68	@ 0x44
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 fccf 	bl	8006382 <USB_HC_Halt>
 80029e4:	e0b3      	b.n	8002b4e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f002 ff85 	bl	80058fe <USB_ReadChInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	f040 80a7 	bne.w	8002b4e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3326      	adds	r3, #38	@ 0x26
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d11b      	bne.n	8002a4e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3344      	adds	r3, #68	@ 0x44
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	334d      	adds	r3, #77	@ 0x4d
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 fc9b 	bl	8006382 <USB_HC_Halt>
 8002a4c:	e03f      	b.n	8002ace <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3326      	adds	r3, #38	@ 0x26
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	3326      	adds	r3, #38	@ 0x26
 8002a74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d129      	bne.n	8002ace <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	3344      	adds	r3, #68	@ 0x44
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	799b      	ldrb	r3, [r3, #6]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HCD_HC_IN_IRQHandler+0xc2a>
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	331b      	adds	r3, #27
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d110      	bne.n	8002ace <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	334d      	adds	r3, #77	@ 0x4d
 8002abc:	2204      	movs	r2, #4
 8002abe:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 fc5a 	bl	8006382 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	331b      	adds	r3, #27
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d129      	bne.n	8002b38 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	331b      	adds	r3, #27
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	0151      	lsls	r1, r2, #5
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	440a      	add	r2, r1
 8002b0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b16:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	0151      	lsls	r1, r2, #5
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	440a      	add	r2, r1
 8002b2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b32:	f043 0320 	orr.w	r3, r3, #32
 8002b36:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b44:	461a      	mov	r2, r3
 8002b46:	2310      	movs	r3, #16
 8002b48:	6093      	str	r3, [r2, #8]
 8002b4a:	e000      	b.n	8002b4e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b4c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f002 fec3 	bl	80058fe <USB_ReadChInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d11b      	bne.n	8002bba <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2304      	movs	r3, #4
 8002b92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	334d      	adds	r3, #77	@ 0x4d
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 fbe6 	bl	8006382 <USB_HC_Halt>
 8002bb6:	f000 bc89 	b.w	80034cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f002 fe9b 	bl	80058fe <USB_ReadChInterrupts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	f040 8082 	bne.w	8002cd8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be0:	461a      	mov	r2, r3
 8002be2:	2320      	movs	r3, #32
 8002be4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3319      	adds	r3, #25
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d124      	bne.n	8002c46 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3319      	adds	r3, #25
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	334c      	adds	r3, #76	@ 0x4c
 8002c20:	2202      	movs	r2, #2
 8002c22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	334d      	adds	r3, #77	@ 0x4d
 8002c34:	2203      	movs	r2, #3
 8002c36:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f003 fb9e 	bl	8006382 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	331a      	adds	r3, #26
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	f040 8437 	bne.w	80034cc <HCD_HC_OUT_IRQHandler+0x978>
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	331b      	adds	r3, #27
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f040 842b 	bne.w	80034cc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	3326      	adds	r3, #38	@ 0x26
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d009      	beq.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	331b      	adds	r3, #27
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	334d      	adds	r3, #77	@ 0x4d
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 fb60 	bl	8006382 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	3344      	adds	r3, #68	@ 0x44
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e3f9      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f002 fe0c 	bl	80058fe <USB_ReadChInterrupts>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cf0:	d111      	bne.n	8002d16 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d04:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 fb37 	bl	8006382 <USB_HC_Halt>
 8002d14:	e3da      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 fded 	bl	80058fe <USB_ReadChInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d168      	bne.n	8002e00 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3344      	adds	r3, #68	@ 0x44
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 fdd7 	bl	80058fe <USB_ReadChInterrupts>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d56:	2b40      	cmp	r3, #64	@ 0x40
 8002d58:	d112      	bne.n	8002d80 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	3319      	adds	r3, #25
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2340      	movs	r3, #64	@ 0x40
 8002d7e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	331b      	adds	r3, #27
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d019      	beq.n	8002dca <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	331b      	adds	r3, #27
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	0151      	lsls	r1, r2, #5
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	440a      	add	r2, r1
 8002dc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2301      	movs	r3, #1
 8002dda:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	334d      	adds	r3, #77	@ 0x4d
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f003 fac2 	bl	8006382 <USB_HC_Halt>
 8002dfe:	e365      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f002 fd78 	bl	80058fe <USB_ReadChInterrupts>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e14:	2b40      	cmp	r3, #64	@ 0x40
 8002e16:	d139      	bne.n	8002e8c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	334d      	adds	r3, #77	@ 0x4d
 8002e28:	2205      	movs	r2, #5
 8002e2a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	331a      	adds	r3, #26
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3319      	adds	r3, #25
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	3344      	adds	r3, #68	@ 0x44
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f003 fa85 	bl	8006382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e84:	461a      	mov	r2, r3
 8002e86:	2340      	movs	r3, #64	@ 0x40
 8002e88:	6093      	str	r3, [r2, #8]
 8002e8a:	e31f      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f002 fd32 	bl	80058fe <USB_ReadChInterrupts>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d11a      	bne.n	8002eda <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	334d      	adds	r3, #77	@ 0x4d
 8002ec6:	2206      	movs	r2, #6
 8002ec8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 fa55 	bl	8006382 <USB_HC_Halt>
 8002ed8:	e2f8      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 fd0b 	bl	80058fe <USB_ReadChInterrupts>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b10      	cmp	r3, #16
 8002ef0:	d144      	bne.n	8002f7c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3344      	adds	r3, #68	@ 0x44
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	334d      	adds	r3, #77	@ 0x4d
 8002f16:	2204      	movs	r2, #4
 8002f18:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3319      	adds	r3, #25
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d114      	bne.n	8002f5a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3318      	adds	r3, #24
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	3319      	adds	r3, #25
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 fa0d 	bl	8006382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f74:	461a      	mov	r2, r3
 8002f76:	2310      	movs	r3, #16
 8002f78:	6093      	str	r3, [r2, #8]
 8002f7a:	e2a7      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f002 fcba 	bl	80058fe <USB_ReadChInterrupts>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f90:	2b80      	cmp	r3, #128	@ 0x80
 8002f92:	f040 8083 	bne.w	800309c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	799b      	ldrb	r3, [r3, #6]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d111      	bne.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	334d      	adds	r3, #77	@ 0x4d
 8002fae:	2207      	movs	r2, #7
 8002fb0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f003 f9e1 	bl	8006382 <USB_HC_Halt>
 8002fc0:	e062      	b.n	8003088 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	3344      	adds	r3, #68	@ 0x44
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	1c59      	adds	r1, r3, #1
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4403      	add	r3, r0
 8002fe2:	3344      	adds	r3, #68	@ 0x44
 8002fe4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3344      	adds	r3, #68	@ 0x44
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d922      	bls.n	8003042 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3344      	adds	r3, #68	@ 0x44
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	334c      	adds	r3, #76	@ 0x4c
 8003020:	2204      	movs	r2, #4
 8003022:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	334c      	adds	r3, #76	@ 0x4c
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	4619      	mov	r1, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f008 fd86 	bl	800bb4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003040:	e022      	b.n	8003088 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	334c      	adds	r3, #76	@ 0x4c
 8003052:	2202      	movs	r2, #2
 8003054:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800306c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003074:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003094:	461a      	mov	r2, r3
 8003096:	2380      	movs	r3, #128	@ 0x80
 8003098:	6093      	str	r3, [r2, #8]
 800309a:	e217      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 fc2a 	bl	80058fe <USB_ReadChInterrupts>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b4:	d11b      	bne.n	80030ee <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	334d      	adds	r3, #77	@ 0x4d
 80030c6:	2209      	movs	r2, #9
 80030c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 f955 	bl	8006382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e4:	461a      	mov	r2, r3
 80030e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030ea:	6093      	str	r3, [r2, #8]
 80030ec:	e1ee      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f002 fc01 	bl	80058fe <USB_ReadChInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b02      	cmp	r3, #2
 8003104:	f040 81df 	bne.w	80034c6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003114:	461a      	mov	r2, r3
 8003116:	2302      	movs	r3, #2
 8003118:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	334d      	adds	r3, #77	@ 0x4d
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	f040 8093 	bne.w	8003258 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	334d      	adds	r3, #77	@ 0x4d
 8003142:	2202      	movs	r2, #2
 8003144:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	334c      	adds	r3, #76	@ 0x4c
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3326      	adds	r3, #38	@ 0x26
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d00b      	beq.n	8003188 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	3326      	adds	r3, #38	@ 0x26
 8003180:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003182:	2b03      	cmp	r3, #3
 8003184:	f040 8190 	bne.w	80034a8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	799b      	ldrb	r3, [r3, #6]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d115      	bne.n	80031bc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	333d      	adds	r3, #61	@ 0x3d
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	f083 0301 	eor.w	r3, r3, #1
 80031a8:	b2d8      	uxtb	r0, r3
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	333d      	adds	r3, #61	@ 0x3d
 80031b8:	4602      	mov	r2, r0
 80031ba:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	799b      	ldrb	r3, [r3, #6]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f040 8171 	bne.w	80034a8 <HCD_HC_OUT_IRQHandler+0x954>
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	3334      	adds	r3, #52	@ 0x34
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8165 	beq.w	80034a8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	3334      	adds	r3, #52	@ 0x34
 80031ee:	6819      	ldr	r1, [r3, #0]
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4403      	add	r3, r0
 80031fe:	3328      	adds	r3, #40	@ 0x28
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	440b      	add	r3, r1
 8003204:	1e59      	subs	r1, r3, #1
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4403      	add	r3, r0
 8003214:	3328      	adds	r3, #40	@ 0x28
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	fbb1 f3f3 	udiv	r3, r1, r3
 800321c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 813f 	beq.w	80034a8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	333d      	adds	r3, #61	@ 0x3d
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	f083 0301 	eor.w	r3, r3, #1
 8003242:	b2d8      	uxtb	r0, r3
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	333d      	adds	r3, #61	@ 0x3d
 8003252:	4602      	mov	r2, r0
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e127      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	334d      	adds	r3, #77	@ 0x4d
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d120      	bne.n	80032b0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	334d      	adds	r3, #77	@ 0x4d
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	331b      	adds	r3, #27
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 8107 	bne.w	80034a8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	334c      	adds	r3, #76	@ 0x4c
 80032aa:	2202      	movs	r2, #2
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	e0fb      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	334d      	adds	r3, #77	@ 0x4d
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d13a      	bne.n	800333c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	334d      	adds	r3, #77	@ 0x4d
 80032d6:	2202      	movs	r2, #2
 80032d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	334c      	adds	r3, #76	@ 0x4c
 80032ea:	2202      	movs	r2, #2
 80032ec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	331b      	adds	r3, #27
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	f040 80d1 	bne.w	80034a8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	331b      	adds	r3, #27
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4413      	add	r3, r2
 8003322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	0151      	lsls	r1, r2, #5
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	440a      	add	r2, r1
 8003330:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003338:	6053      	str	r3, [r2, #4]
 800333a:	e0b5      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	334d      	adds	r3, #77	@ 0x4d
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b05      	cmp	r3, #5
 8003350:	d114      	bne.n	800337c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	334d      	adds	r3, #77	@ 0x4d
 8003362:	2202      	movs	r2, #2
 8003364:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	334c      	adds	r3, #76	@ 0x4c
 8003376:	2202      	movs	r2, #2
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	e095      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	334d      	adds	r3, #77	@ 0x4d
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b06      	cmp	r3, #6
 8003390:	d114      	bne.n	80033bc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	334d      	adds	r3, #77	@ 0x4d
 80033a2:	2202      	movs	r2, #2
 80033a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	334c      	adds	r3, #76	@ 0x4c
 80033b6:	2205      	movs	r2, #5
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e075      	b.n	80034a8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	334d      	adds	r3, #77	@ 0x4d
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b07      	cmp	r3, #7
 80033d0:	d00a      	beq.n	80033e8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	334d      	adds	r3, #77	@ 0x4d
 80033e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033e4:	2b09      	cmp	r3, #9
 80033e6:	d170      	bne.n	80034ca <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	334d      	adds	r3, #77	@ 0x4d
 80033f8:	2202      	movs	r2, #2
 80033fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3344      	adds	r3, #68	@ 0x44
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	1c59      	adds	r1, r3, #1
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4403      	add	r3, r0
 800341c:	3344      	adds	r3, #68	@ 0x44
 800341e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	3344      	adds	r3, #68	@ 0x44
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d914      	bls.n	8003460 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3344      	adds	r3, #68	@ 0x44
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	334c      	adds	r3, #76	@ 0x4c
 800345a:	2204      	movs	r2, #4
 800345c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800345e:	e022      	b.n	80034a6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	334c      	adds	r3, #76	@ 0x4c
 8003470:	2202      	movs	r2, #2
 8003472:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4413      	add	r3, r2
 800347c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800348a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003492:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4413      	add	r3, r2
 800349c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a0:	461a      	mov	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034a6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	334c      	adds	r3, #76	@ 0x4c
 80034b8:	781a      	ldrb	r2, [r3, #0]
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f008 fb44 	bl	800bb4c <HAL_HCD_HC_NotifyURBChange_Callback>
 80034c4:	e002      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80034c6:	bf00      	nop
 80034c8:	e000      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80034ca:	bf00      	nop
  }
}
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b08a      	sub	sp, #40	@ 0x28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	0c5b      	lsrs	r3, r3, #17
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003506:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d004      	beq.n	8003518 <HCD_RXQLVL_IRQHandler+0x46>
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b05      	cmp	r3, #5
 8003512:	f000 80b6 	beq.w	8003682 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003516:	e0b7      	b.n	8003688 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80b3 	beq.w	8003686 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	332c      	adds	r3, #44	@ 0x2c
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80a7 	beq.w	8003686 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3338      	adds	r3, #56	@ 0x38
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	18d1      	adds	r1, r2, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4403      	add	r3, r0
 800355c:	3334      	adds	r3, #52	@ 0x34
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4299      	cmp	r1, r3
 8003562:	f200 8083 	bhi.w	800366c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	332c      	adds	r3, #44	@ 0x2c
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	b292      	uxth	r2, r2
 8003580:	4619      	mov	r1, r3
 8003582:	f002 f951 	bl	8005828 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	332c      	adds	r3, #44	@ 0x2c
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	18d1      	adds	r1, r2, r3
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4403      	add	r3, r0
 80035aa:	332c      	adds	r3, #44	@ 0x2c
 80035ac:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	3338      	adds	r3, #56	@ 0x38
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	18d1      	adds	r1, r2, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4403      	add	r3, r0
 80035d2:	3338      	adds	r3, #56	@ 0x38
 80035d4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	0cdb      	lsrs	r3, r3, #19
 80035e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ea:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3328      	adds	r3, #40	@ 0x28
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4293      	cmp	r3, r2
 8003604:	d13f      	bne.n	8003686 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d03c      	beq.n	8003686 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003622:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800362a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	4413      	add	r3, r2
 8003634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003638:	461a      	mov	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	333c      	adds	r3, #60	@ 0x3c
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	f083 0301 	eor.w	r3, r3, #1
 8003654:	b2d8      	uxtb	r0, r3
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	333c      	adds	r3, #60	@ 0x3c
 8003666:	4602      	mov	r2, r0
 8003668:	701a      	strb	r2, [r3, #0]
      break;
 800366a:	e00c      	b.n	8003686 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	334c      	adds	r3, #76	@ 0x4c
 800367c:	2204      	movs	r2, #4
 800367e:	701a      	strb	r2, [r3, #0]
      break;
 8003680:	e001      	b.n	8003686 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003682:	bf00      	nop
 8003684:	e000      	b.n	8003688 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003686:	bf00      	nop
  }
}
 8003688:	bf00      	nop
 800368a:	3728      	adds	r7, #40	@ 0x28
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80036bc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d10b      	bne.n	80036e0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d102      	bne.n	80036d8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f008 fa1e 	bl	800bb14 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f043 0302 	orr.w	r3, r3, #2
 80036de:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d132      	bne.n	8003750 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f043 0308 	orr.w	r3, r3, #8
 80036f0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d126      	bne.n	800374a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7a5b      	ldrb	r3, [r3, #9]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d113      	bne.n	800372c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800370a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800370e:	d106      	bne.n	800371e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2102      	movs	r1, #2
 8003716:	4618      	mov	r0, r3
 8003718:	f002 fa00 	bl	8005b1c <USB_InitFSLSPClkSel>
 800371c:	e011      	b.n	8003742 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2101      	movs	r1, #1
 8003724:	4618      	mov	r0, r3
 8003726:	f002 f9f9 	bl	8005b1c <USB_InitFSLSPClkSel>
 800372a:	e00a      	b.n	8003742 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	79db      	ldrb	r3, [r3, #7]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d106      	bne.n	8003742 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800373a:	461a      	mov	r2, r3
 800373c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003740:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f008 fa14 	bl	800bb70 <HAL_HCD_PortEnabled_Callback>
 8003748:	e002      	b.n	8003750 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f008 fa1e 	bl	800bb8c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b20      	cmp	r3, #32
 8003758:	d103      	bne.n	8003762 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f043 0320 	orr.w	r3, r3, #32
 8003760:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003768:	461a      	mov	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	6013      	str	r3, [r2, #0]
}
 800376e:	bf00      	nop
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e12b      	b.n	80039e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd f954 	bl	8000a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2224      	movs	r2, #36	@ 0x24
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037dc:	f001 fa20 	bl	8004c20 <HAL_RCC_GetPCLK1Freq>
 80037e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4a81      	ldr	r2, [pc, #516]	@ (80039ec <HAL_I2C_Init+0x274>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d807      	bhi.n	80037fc <HAL_I2C_Init+0x84>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a80      	ldr	r2, [pc, #512]	@ (80039f0 <HAL_I2C_Init+0x278>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	bf94      	ite	ls
 80037f4:	2301      	movls	r3, #1
 80037f6:	2300      	movhi	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e006      	b.n	800380a <HAL_I2C_Init+0x92>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4a7d      	ldr	r2, [pc, #500]	@ (80039f4 <HAL_I2C_Init+0x27c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	bf94      	ite	ls
 8003804:	2301      	movls	r3, #1
 8003806:	2300      	movhi	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e0e7      	b.n	80039e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4a78      	ldr	r2, [pc, #480]	@ (80039f8 <HAL_I2C_Init+0x280>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	0c9b      	lsrs	r3, r3, #18
 800381c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4a6a      	ldr	r2, [pc, #424]	@ (80039ec <HAL_I2C_Init+0x274>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d802      	bhi.n	800384c <HAL_I2C_Init+0xd4>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3301      	adds	r3, #1
 800384a:	e009      	b.n	8003860 <HAL_I2C_Init+0xe8>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	4a69      	ldr	r2, [pc, #420]	@ (80039fc <HAL_I2C_Init+0x284>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	099b      	lsrs	r3, r3, #6
 800385e:	3301      	adds	r3, #1
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	430b      	orrs	r3, r1
 8003866:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003872:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	495c      	ldr	r1, [pc, #368]	@ (80039ec <HAL_I2C_Init+0x274>)
 800387c:	428b      	cmp	r3, r1
 800387e:	d819      	bhi.n	80038b4 <HAL_I2C_Init+0x13c>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1e59      	subs	r1, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	fbb1 f3f3 	udiv	r3, r1, r3
 800388e:	1c59      	adds	r1, r3, #1
 8003890:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003894:	400b      	ands	r3, r1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_I2C_Init+0x138>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e59      	subs	r1, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ae:	e051      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 80038b0:	2304      	movs	r3, #4
 80038b2:	e04f      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d111      	bne.n	80038e0 <HAL_I2C_Init+0x168>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1e58      	subs	r0, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	440b      	add	r3, r1
 80038ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e012      	b.n	8003906 <HAL_I2C_Init+0x18e>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1e58      	subs	r0, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	0099      	lsls	r1, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Init+0x196>
 800390a:	2301      	movs	r3, #1
 800390c:	e022      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10e      	bne.n	8003934 <HAL_I2C_Init+0x1bc>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1e58      	subs	r0, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	440b      	add	r3, r1
 8003924:	fbb0 f3f3 	udiv	r3, r0, r3
 8003928:	3301      	adds	r3, #1
 800392a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003932:	e00f      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1e58      	subs	r0, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	0099      	lsls	r1, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	fbb0 f3f3 	udiv	r3, r0, r3
 800394a:	3301      	adds	r3, #1
 800394c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003950:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	6809      	ldr	r1, [r1, #0]
 8003958:	4313      	orrs	r3, r2
 800395a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003982:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6911      	ldr	r1, [r2, #16]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68d2      	ldr	r2, [r2, #12]
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	430b      	orrs	r3, r1
 8003996:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	000186a0 	.word	0x000186a0
 80039f0:	001e847f 	.word	0x001e847f
 80039f4:	003d08ff 	.word	0x003d08ff
 80039f8:	431bde83 	.word	0x431bde83
 80039fc:	10624dd3 	.word	0x10624dd3

08003a00 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e128      	b.n	8003c64 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a90      	ldr	r2, [pc, #576]	@ (8003c6c <HAL_I2S_Init+0x26c>)
 8003a2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7fd f855 	bl	8000adc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a48:	f023 030f 	bic.w	r3, r3, #15
 8003a4c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2202      	movs	r2, #2
 8003a54:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d060      	beq.n	8003b20 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a66:	2310      	movs	r3, #16
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	e001      	b.n	8003a70 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a6c:	2320      	movs	r3, #32
 8003a6e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d802      	bhi.n	8003a7e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f001 fa04 	bl	8004e8c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a84:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a8e:	d125      	bne.n	8003adc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d010      	beq.n	8003aba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	461a      	mov	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	3305      	adds	r3, #5
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	e01f      	b.n	8003afa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	461a      	mov	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad6:	3305      	adds	r3, #5
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	e00e      	b.n	8003afa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	461a      	mov	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	3305      	adds	r3, #5
 8003af8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4a5c      	ldr	r2, [pc, #368]	@ (8003c70 <HAL_I2S_Init+0x270>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	08db      	lsrs	r3, r3, #3
 8003b04:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	e003      	b.n	8003b28 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b20:	2302      	movs	r3, #2
 8003b22:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d902      	bls.n	8003b34 <HAL_I2S_Init+0x134>
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2bff      	cmp	r3, #255	@ 0xff
 8003b32:	d907      	bls.n	8003b44 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b38:	f043 0210 	orr.w	r2, r3, #16
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e08f      	b.n	8003c64 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	ea42 0103 	orr.w	r1, r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b62:	f023 030f 	bic.w	r3, r3, #15
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6851      	ldr	r1, [r2, #4]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6892      	ldr	r2, [r2, #8]
 8003b6e:	4311      	orrs	r1, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68d2      	ldr	r2, [r2, #12]
 8003b74:	4311      	orrs	r1, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6992      	ldr	r2, [r2, #24]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b86:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d161      	bne.n	8003c54 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a38      	ldr	r2, [pc, #224]	@ (8003c74 <HAL_I2S_Init+0x274>)
 8003b94:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a37      	ldr	r2, [pc, #220]	@ (8003c78 <HAL_I2S_Init+0x278>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <HAL_I2S_Init+0x1a4>
 8003ba0:	4b36      	ldr	r3, [pc, #216]	@ (8003c7c <HAL_I2S_Init+0x27c>)
 8003ba2:	e001      	b.n	8003ba8 <HAL_I2S_Init+0x1a8>
 8003ba4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	4932      	ldr	r1, [pc, #200]	@ (8003c78 <HAL_I2S_Init+0x278>)
 8003bb0:	428a      	cmp	r2, r1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_I2S_Init+0x1b8>
 8003bb4:	4a31      	ldr	r2, [pc, #196]	@ (8003c7c <HAL_I2S_Init+0x27c>)
 8003bb6:	e001      	b.n	8003bbc <HAL_I2S_Init+0x1bc>
 8003bb8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003bbc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bc0:	f023 030f 	bic.w	r3, r3, #15
 8003bc4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a2b      	ldr	r2, [pc, #172]	@ (8003c78 <HAL_I2S_Init+0x278>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d101      	bne.n	8003bd4 <HAL_I2S_Init+0x1d4>
 8003bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c7c <HAL_I2S_Init+0x27c>)
 8003bd2:	e001      	b.n	8003bd8 <HAL_I2S_Init+0x1d8>
 8003bd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bd8:	2202      	movs	r2, #2
 8003bda:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a25      	ldr	r2, [pc, #148]	@ (8003c78 <HAL_I2S_Init+0x278>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <HAL_I2S_Init+0x1ea>
 8003be6:	4b25      	ldr	r3, [pc, #148]	@ (8003c7c <HAL_I2S_Init+0x27c>)
 8003be8:	e001      	b.n	8003bee <HAL_I2S_Init+0x1ee>
 8003bea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bfa:	d003      	beq.n	8003c04 <HAL_I2S_Init+0x204>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d103      	bne.n	8003c0c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	e001      	b.n	8003c10 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c24:	4313      	orrs	r3, r2
 8003c26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	897b      	ldrh	r3, [r7, #10]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c3c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a0d      	ldr	r2, [pc, #52]	@ (8003c78 <HAL_I2S_Init+0x278>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d101      	bne.n	8003c4c <HAL_I2S_Init+0x24c>
 8003c48:	4b0c      	ldr	r3, [pc, #48]	@ (8003c7c <HAL_I2S_Init+0x27c>)
 8003c4a:	e001      	b.n	8003c50 <HAL_I2S_Init+0x250>
 8003c4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c50:	897a      	ldrh	r2, [r7, #10]
 8003c52:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3720      	adds	r7, #32
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	08003d77 	.word	0x08003d77
 8003c70:	cccccccd 	.word	0xcccccccd
 8003c74:	08003e8d 	.word	0x08003e8d
 8003c78:	40003800 	.word	0x40003800
 8003c7c:	40003400 	.word	0x40003400

08003c80 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	881a      	ldrh	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	1c9a      	adds	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10e      	bne.n	8003d10 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d00:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ffb8 	bl	8003c80 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2a:	b292      	uxth	r2, r2
 8003d2c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d32:	1c9a      	adds	r2, r3, #2
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10e      	bne.n	8003d6e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ff93 	bl	8003c94 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b086      	sub	sp, #24
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d13a      	bne.n	8003e08 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d109      	bne.n	8003db0 <I2S_IRQHandler+0x3a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da6:	2b40      	cmp	r3, #64	@ 0x40
 8003da8:	d102      	bne.n	8003db0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff ffb4 	bl	8003d18 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db6:	2b40      	cmp	r3, #64	@ 0x40
 8003db8:	d126      	bne.n	8003e08 <I2S_IRQHandler+0x92>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d11f      	bne.n	8003e08 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dd6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	f043 0202 	orr.w	r2, r3, #2
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff ff50 	bl	8003ca8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d136      	bne.n	8003e82 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d109      	bne.n	8003e32 <I2S_IRQHandler+0xbc>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e28:	2b80      	cmp	r3, #128	@ 0x80
 8003e2a:	d102      	bne.n	8003e32 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ff45 	bl	8003cbc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d122      	bne.n	8003e82 <I2S_IRQHandler+0x10c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d11b      	bne.n	8003e82 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e58:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e74:	f043 0204 	orr.w	r2, r3, #4
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ff13 	bl	8003ca8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e82:	bf00      	nop
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a92      	ldr	r2, [pc, #584]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ea6:	4b92      	ldr	r3, [pc, #584]	@ (80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea8:	e001      	b.n	8003eae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003eaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a8b      	ldr	r2, [pc, #556]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d101      	bne.n	8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ec4:	4b8a      	ldr	r3, [pc, #552]	@ (80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ec6:	e001      	b.n	8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ec8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ed8:	d004      	beq.n	8003ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f040 8099 	bne.w	8004016 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d107      	bne.n	8003efe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f925 	bl	8004148 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d107      	bne.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f9c8 	bl	80042a8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1e:	2b40      	cmp	r3, #64	@ 0x40
 8003f20:	d13a      	bne.n	8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d035      	beq.n	8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6e      	ldr	r2, [pc, #440]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f36:	4b6e      	ldr	r3, [pc, #440]	@ (80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f38:	e001      	b.n	8003f3e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4969      	ldr	r1, [pc, #420]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f46:	428b      	cmp	r3, r1
 8003f48:	d101      	bne.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f4a:	4b69      	ldr	r3, [pc, #420]	@ (80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f4c:	e001      	b.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f56:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8a:	f043 0202 	orr.w	r2, r3, #2
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fe88 	bl	8003ca8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	f040 80c3 	bne.w	800412a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80bd 	beq.w	800412a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fbe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a49      	ldr	r2, [pc, #292]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d101      	bne.n	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fca:	4b49      	ldr	r3, [pc, #292]	@ (80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fcc:	e001      	b.n	8003fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4944      	ldr	r1, [pc, #272]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fda:	428b      	cmp	r3, r1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fde:	4b44      	ldr	r3, [pc, #272]	@ (80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fe0:	e001      	b.n	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003fe2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fec:	2300      	movs	r3, #0
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004006:	f043 0204 	orr.w	r2, r3, #4
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff fe4a 	bl	8003ca8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004014:	e089      	b.n	800412a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b02      	cmp	r3, #2
 800401e:	d107      	bne.n	8004030 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f8be 	bl	80041ac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b01      	cmp	r3, #1
 8004038:	d107      	bne.n	800404a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f8fd 	bl	8004244 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004050:	2b40      	cmp	r3, #64	@ 0x40
 8004052:	d12f      	bne.n	80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d02a      	beq.n	80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800406c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1e      	ldr	r2, [pc, #120]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d101      	bne.n	800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004078:	4b1d      	ldr	r3, [pc, #116]	@ (80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800407a:	e001      	b.n	8004080 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800407c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4919      	ldr	r1, [pc, #100]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004088:	428b      	cmp	r3, r1
 800408a:	d101      	bne.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800408c:	4b18      	ldr	r3, [pc, #96]	@ (80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800408e:	e001      	b.n	8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004090:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004094:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004098:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	f043 0202 	orr.w	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff fdfa 	bl	8003ca8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d136      	bne.n	800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d031      	beq.n	800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a07      	ldr	r2, [pc, #28]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d101      	bne.n	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040d2:	4b07      	ldr	r3, [pc, #28]	@ (80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040d4:	e001      	b.n	80040da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4902      	ldr	r1, [pc, #8]	@ (80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040e2:	428b      	cmp	r3, r1
 80040e4:	d106      	bne.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040e6:	4b02      	ldr	r3, [pc, #8]	@ (80040f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040e8:	e006      	b.n	80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040ea:	bf00      	nop
 80040ec:	40003800 	.word	0x40003800
 80040f0:	40003400 	.word	0x40003400
 80040f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040fc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800410c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411a:	f043 0204 	orr.w	r2, r3, #4
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fdc0 	bl	8003ca8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004128:	e000      	b.n	800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800412a:	bf00      	nop
}
 800412c:	bf00      	nop
 800412e:	3720      	adds	r7, #32
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	1c99      	adds	r1, r3, #2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6251      	str	r1, [r2, #36]	@ 0x24
 800415a:	881a      	ldrh	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d113      	bne.n	80041a2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004188:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d106      	bne.n	80041a2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ffc9 	bl	8004134 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	1c99      	adds	r1, r3, #2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6251      	str	r1, [r2, #36]	@ 0x24
 80041be:	8819      	ldrh	r1, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1d      	ldr	r2, [pc, #116]	@ (800423c <I2SEx_TxISR_I2SExt+0x90>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <I2SEx_TxISR_I2SExt+0x22>
 80041ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004240 <I2SEx_TxISR_I2SExt+0x94>)
 80041cc:	e001      	b.n	80041d2 <I2SEx_TxISR_I2SExt+0x26>
 80041ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041d2:	460a      	mov	r2, r1
 80041d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d121      	bne.n	8004232 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a12      	ldr	r2, [pc, #72]	@ (800423c <I2SEx_TxISR_I2SExt+0x90>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d101      	bne.n	80041fc <I2SEx_TxISR_I2SExt+0x50>
 80041f8:	4b11      	ldr	r3, [pc, #68]	@ (8004240 <I2SEx_TxISR_I2SExt+0x94>)
 80041fa:	e001      	b.n	8004200 <I2SEx_TxISR_I2SExt+0x54>
 80041fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	490d      	ldr	r1, [pc, #52]	@ (800423c <I2SEx_TxISR_I2SExt+0x90>)
 8004208:	428b      	cmp	r3, r1
 800420a:	d101      	bne.n	8004210 <I2SEx_TxISR_I2SExt+0x64>
 800420c:	4b0c      	ldr	r3, [pc, #48]	@ (8004240 <I2SEx_TxISR_I2SExt+0x94>)
 800420e:	e001      	b.n	8004214 <I2SEx_TxISR_I2SExt+0x68>
 8004210:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004214:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004218:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff ff81 	bl	8004134 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40003800 	.word	0x40003800
 8004240:	40003400 	.word	0x40003400

08004244 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68d8      	ldr	r0, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	1c99      	adds	r1, r3, #2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800425c:	b282      	uxth	r2, r0
 800425e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d113      	bne.n	80042a0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004286:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ff4a 	bl	8004134 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a20      	ldr	r2, [pc, #128]	@ (8004338 <I2SEx_RxISR_I2SExt+0x90>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d101      	bne.n	80042be <I2SEx_RxISR_I2SExt+0x16>
 80042ba:	4b20      	ldr	r3, [pc, #128]	@ (800433c <I2SEx_RxISR_I2SExt+0x94>)
 80042bc:	e001      	b.n	80042c2 <I2SEx_RxISR_I2SExt+0x1a>
 80042be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042c2:	68d8      	ldr	r0, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c8:	1c99      	adds	r1, r3, #2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042ce:	b282      	uxth	r2, r0
 80042d0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d121      	bne.n	800432e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a12      	ldr	r2, [pc, #72]	@ (8004338 <I2SEx_RxISR_I2SExt+0x90>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d101      	bne.n	80042f8 <I2SEx_RxISR_I2SExt+0x50>
 80042f4:	4b11      	ldr	r3, [pc, #68]	@ (800433c <I2SEx_RxISR_I2SExt+0x94>)
 80042f6:	e001      	b.n	80042fc <I2SEx_RxISR_I2SExt+0x54>
 80042f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	490d      	ldr	r1, [pc, #52]	@ (8004338 <I2SEx_RxISR_I2SExt+0x90>)
 8004304:	428b      	cmp	r3, r1
 8004306:	d101      	bne.n	800430c <I2SEx_RxISR_I2SExt+0x64>
 8004308:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <I2SEx_RxISR_I2SExt+0x94>)
 800430a:	e001      	b.n	8004310 <I2SEx_RxISR_I2SExt+0x68>
 800430c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004310:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004314:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ff03 	bl	8004134 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40003800 	.word	0x40003800
 800433c:	40003400 	.word	0x40003400

08004340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e267      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d075      	beq.n	800444a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800435e:	4b88      	ldr	r3, [pc, #544]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b04      	cmp	r3, #4
 8004368:	d00c      	beq.n	8004384 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800436a:	4b85      	ldr	r3, [pc, #532]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004372:	2b08      	cmp	r3, #8
 8004374:	d112      	bne.n	800439c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004376:	4b82      	ldr	r3, [pc, #520]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004382:	d10b      	bne.n	800439c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	4b7e      	ldr	r3, [pc, #504]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d05b      	beq.n	8004448 <HAL_RCC_OscConfig+0x108>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d157      	bne.n	8004448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e242      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a4:	d106      	bne.n	80043b4 <HAL_RCC_OscConfig+0x74>
 80043a6:	4b76      	ldr	r3, [pc, #472]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a75      	ldr	r2, [pc, #468]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80043ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e01d      	b.n	80043f0 <HAL_RCC_OscConfig+0xb0>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x98>
 80043be:	4b70      	ldr	r3, [pc, #448]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a6f      	ldr	r2, [pc, #444]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80043c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a6c      	ldr	r2, [pc, #432]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e00b      	b.n	80043f0 <HAL_RCC_OscConfig+0xb0>
 80043d8:	4b69      	ldr	r3, [pc, #420]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a68      	ldr	r2, [pc, #416]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80043de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	4b66      	ldr	r3, [pc, #408]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a65      	ldr	r2, [pc, #404]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80043ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d013      	beq.n	8004420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fc fdda 	bl	8000fb0 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004400:	f7fc fdd6 	bl	8000fb0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	@ 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e207      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004412:	4b5b      	ldr	r3, [pc, #364]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0xc0>
 800441e:	e014      	b.n	800444a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fc fdc6 	bl	8000fb0 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004428:	f7fc fdc2 	bl	8000fb0 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	@ 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1f3      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443a:	4b51      	ldr	r3, [pc, #324]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0xe8>
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d063      	beq.n	800451e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004456:	4b4a      	ldr	r3, [pc, #296]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004462:	4b47      	ldr	r3, [pc, #284]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800446a:	2b08      	cmp	r3, #8
 800446c:	d11c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446e:	4b44      	ldr	r3, [pc, #272]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d116      	bne.n	80044a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	4b41      	ldr	r3, [pc, #260]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_RCC_OscConfig+0x152>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d001      	beq.n	8004492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e1c7      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004492:	4b3b      	ldr	r3, [pc, #236]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4937      	ldr	r1, [pc, #220]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a6:	e03a      	b.n	800451e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d020      	beq.n	80044f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b0:	4b34      	ldr	r3, [pc, #208]	@ (8004584 <HAL_RCC_OscConfig+0x244>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b6:	f7fc fd7b 	bl	8000fb0 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044be:	f7fc fd77 	bl	8000fb0 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e1a8      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044dc:	4b28      	ldr	r3, [pc, #160]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	4925      	ldr	r1, [pc, #148]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	600b      	str	r3, [r1, #0]
 80044f0:	e015      	b.n	800451e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f2:	4b24      	ldr	r3, [pc, #144]	@ (8004584 <HAL_RCC_OscConfig+0x244>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fc fd5a 	bl	8000fb0 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004500:	f7fc fd56 	bl	8000fb0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e187      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004512:	4b1b      	ldr	r3, [pc, #108]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d036      	beq.n	8004598 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d016      	beq.n	8004560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004532:	4b15      	ldr	r3, [pc, #84]	@ (8004588 <HAL_RCC_OscConfig+0x248>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fc fd3a 	bl	8000fb0 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004540:	f7fc fd36 	bl	8000fb0 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e167      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004552:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <HAL_RCC_OscConfig+0x240>)
 8004554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x200>
 800455e:	e01b      	b.n	8004598 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004560:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <HAL_RCC_OscConfig+0x248>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004566:	f7fc fd23 	bl	8000fb0 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456c:	e00e      	b.n	800458c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800456e:	f7fc fd1f 	bl	8000fb0 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d907      	bls.n	800458c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e150      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
 8004580:	40023800 	.word	0x40023800
 8004584:	42470000 	.word	0x42470000
 8004588:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800458c:	4b88      	ldr	r3, [pc, #544]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 800458e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ea      	bne.n	800456e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8097 	beq.w	80046d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a6:	2300      	movs	r3, #0
 80045a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045aa:	4b81      	ldr	r3, [pc, #516]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10f      	bne.n	80045d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	4b7d      	ldr	r3, [pc, #500]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	4a7c      	ldr	r2, [pc, #496]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 80045c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045c6:	4b7a      	ldr	r3, [pc, #488]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d2:	2301      	movs	r3, #1
 80045d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d6:	4b77      	ldr	r3, [pc, #476]	@ (80047b4 <HAL_RCC_OscConfig+0x474>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d118      	bne.n	8004614 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045e2:	4b74      	ldr	r3, [pc, #464]	@ (80047b4 <HAL_RCC_OscConfig+0x474>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a73      	ldr	r2, [pc, #460]	@ (80047b4 <HAL_RCC_OscConfig+0x474>)
 80045e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ee:	f7fc fcdf 	bl	8000fb0 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f6:	f7fc fcdb 	bl	8000fb0 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e10c      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004608:	4b6a      	ldr	r3, [pc, #424]	@ (80047b4 <HAL_RCC_OscConfig+0x474>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d106      	bne.n	800462a <HAL_RCC_OscConfig+0x2ea>
 800461c:	4b64      	ldr	r3, [pc, #400]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004620:	4a63      	ldr	r2, [pc, #396]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	6713      	str	r3, [r2, #112]	@ 0x70
 8004628:	e01c      	b.n	8004664 <HAL_RCC_OscConfig+0x324>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b05      	cmp	r3, #5
 8004630:	d10c      	bne.n	800464c <HAL_RCC_OscConfig+0x30c>
 8004632:	4b5f      	ldr	r3, [pc, #380]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004636:	4a5e      	ldr	r2, [pc, #376]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 8004638:	f043 0304 	orr.w	r3, r3, #4
 800463c:	6713      	str	r3, [r2, #112]	@ 0x70
 800463e:	4b5c      	ldr	r3, [pc, #368]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004642:	4a5b      	ldr	r2, [pc, #364]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6713      	str	r3, [r2, #112]	@ 0x70
 800464a:	e00b      	b.n	8004664 <HAL_RCC_OscConfig+0x324>
 800464c:	4b58      	ldr	r3, [pc, #352]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004650:	4a57      	ldr	r2, [pc, #348]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 8004652:	f023 0301 	bic.w	r3, r3, #1
 8004656:	6713      	str	r3, [r2, #112]	@ 0x70
 8004658:	4b55      	ldr	r3, [pc, #340]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465c:	4a54      	ldr	r2, [pc, #336]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 800465e:	f023 0304 	bic.w	r3, r3, #4
 8004662:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d015      	beq.n	8004698 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fc fca0 	bl	8000fb0 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004672:	e00a      	b.n	800468a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004674:	f7fc fc9c 	bl	8000fb0 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e0cb      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468a:	4b49      	ldr	r3, [pc, #292]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0ee      	beq.n	8004674 <HAL_RCC_OscConfig+0x334>
 8004696:	e014      	b.n	80046c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004698:	f7fc fc8a 	bl	8000fb0 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a0:	f7fc fc86 	bl	8000fb0 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e0b5      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b6:	4b3e      	ldr	r3, [pc, #248]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ee      	bne.n	80046a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d105      	bne.n	80046d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c8:	4b39      	ldr	r3, [pc, #228]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	4a38      	ldr	r2, [pc, #224]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 80046ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80a1 	beq.w	8004820 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046de:	4b34      	ldr	r3, [pc, #208]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d05c      	beq.n	80047a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d141      	bne.n	8004776 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b31      	ldr	r3, [pc, #196]	@ (80047b8 <HAL_RCC_OscConfig+0x478>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fc fc5a 	bl	8000fb0 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004700:	f7fc fc56 	bl	8000fb0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e087      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b27      	ldr	r3, [pc, #156]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	3b01      	subs	r3, #1
 8004738:	041b      	lsls	r3, r3, #16
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	061b      	lsls	r3, r3, #24
 8004742:	491b      	ldr	r1, [pc, #108]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 8004744:	4313      	orrs	r3, r2
 8004746:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004748:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <HAL_RCC_OscConfig+0x478>)
 800474a:	2201      	movs	r2, #1
 800474c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474e:	f7fc fc2f 	bl	8000fb0 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004756:	f7fc fc2b 	bl	8000fb0 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e05c      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004768:	4b11      	ldr	r3, [pc, #68]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCC_OscConfig+0x416>
 8004774:	e054      	b.n	8004820 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004776:	4b10      	ldr	r3, [pc, #64]	@ (80047b8 <HAL_RCC_OscConfig+0x478>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fc fc18 	bl	8000fb0 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004784:	f7fc fc14 	bl	8000fb0 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e045      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004796:	4b06      	ldr	r3, [pc, #24]	@ (80047b0 <HAL_RCC_OscConfig+0x470>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x444>
 80047a2:	e03d      	b.n	8004820 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d107      	bne.n	80047bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e038      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40007000 	.word	0x40007000
 80047b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047bc:	4b1b      	ldr	r3, [pc, #108]	@ (800482c <HAL_RCC_OscConfig+0x4ec>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d028      	beq.n	800481c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d121      	bne.n	800481c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d11a      	bne.n	800481c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047ec:	4013      	ands	r3, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d111      	bne.n	800481c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004802:	085b      	lsrs	r3, r3, #1
 8004804:	3b01      	subs	r3, #1
 8004806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004808:	429a      	cmp	r2, r3
 800480a:	d107      	bne.n	800481c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004818:	429a      	cmp	r2, r3
 800481a:	d001      	beq.n	8004820 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40023800 	.word	0x40023800

08004830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0cc      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004844:	4b68      	ldr	r3, [pc, #416]	@ (80049e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d90c      	bls.n	800486c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	4b65      	ldr	r3, [pc, #404]	@ (80049e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485a:	4b63      	ldr	r3, [pc, #396]	@ (80049e8 <HAL_RCC_ClockConfig+0x1b8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0b8      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d020      	beq.n	80048ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004884:	4b59      	ldr	r3, [pc, #356]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4a58      	ldr	r2, [pc, #352]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800488e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800489c:	4b53      	ldr	r3, [pc, #332]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4a52      	ldr	r2, [pc, #328]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a8:	4b50      	ldr	r3, [pc, #320]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	494d      	ldr	r1, [pc, #308]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d044      	beq.n	8004950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d107      	bne.n	80048de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ce:	4b47      	ldr	r3, [pc, #284]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d119      	bne.n	800490e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e07f      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d003      	beq.n	80048ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d107      	bne.n	80048fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ee:	4b3f      	ldr	r3, [pc, #252]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e06f      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fe:	4b3b      	ldr	r3, [pc, #236]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e067      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800490e:	4b37      	ldr	r3, [pc, #220]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f023 0203 	bic.w	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4934      	ldr	r1, [pc, #208]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	4313      	orrs	r3, r2
 800491e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004920:	f7fc fb46 	bl	8000fb0 <HAL_GetTick>
 8004924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004926:	e00a      	b.n	800493e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004928:	f7fc fb42 	bl	8000fb0 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e04f      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493e:	4b2b      	ldr	r3, [pc, #172]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 020c 	and.w	r2, r3, #12
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	429a      	cmp	r2, r3
 800494e:	d1eb      	bne.n	8004928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004950:	4b25      	ldr	r3, [pc, #148]	@ (80049e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d20c      	bcs.n	8004978 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495e:	4b22      	ldr	r3, [pc, #136]	@ (80049e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	4b20      	ldr	r3, [pc, #128]	@ (80049e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e032      	b.n	80049de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004984:	4b19      	ldr	r3, [pc, #100]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	4916      	ldr	r1, [pc, #88]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049a2:	4b12      	ldr	r3, [pc, #72]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	490e      	ldr	r1, [pc, #56]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049b6:	f000 f821 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80049ba:	4602      	mov	r2, r0
 80049bc:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	091b      	lsrs	r3, r3, #4
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	490a      	ldr	r1, [pc, #40]	@ (80049f0 <HAL_RCC_ClockConfig+0x1c0>)
 80049c8:	5ccb      	ldrb	r3, [r1, r3]
 80049ca:	fa22 f303 	lsr.w	r3, r2, r3
 80049ce:	4a09      	ldr	r2, [pc, #36]	@ (80049f4 <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049d2:	4b09      	ldr	r3, [pc, #36]	@ (80049f8 <HAL_RCC_ClockConfig+0x1c8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fc f996 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40023c00 	.word	0x40023c00
 80049ec:	40023800 	.word	0x40023800
 80049f0:	0800c38c 	.word	0x0800c38c
 80049f4:	20000000 	.word	0x20000000
 80049f8:	20000004 	.word	0x20000004

080049fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a00:	b094      	sub	sp, #80	@ 0x50
 8004a02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a14:	4b79      	ldr	r3, [pc, #484]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 030c 	and.w	r3, r3, #12
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d00d      	beq.n	8004a3c <HAL_RCC_GetSysClockFreq+0x40>
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	f200 80e1 	bhi.w	8004be8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x34>
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d003      	beq.n	8004a36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a2e:	e0db      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a30:	4b73      	ldr	r3, [pc, #460]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a34:	e0db      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a36:	4b73      	ldr	r3, [pc, #460]	@ (8004c04 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a3a:	e0d8      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a3c:	4b6f      	ldr	r3, [pc, #444]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a46:	4b6d      	ldr	r3, [pc, #436]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d063      	beq.n	8004b1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a52:	4b6a      	ldr	r3, [pc, #424]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	099b      	lsrs	r3, r3, #6
 8004a58:	2200      	movs	r2, #0
 8004a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a64:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a66:	2300      	movs	r3, #0
 8004a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a6e:	4622      	mov	r2, r4
 8004a70:	462b      	mov	r3, r5
 8004a72:	f04f 0000 	mov.w	r0, #0
 8004a76:	f04f 0100 	mov.w	r1, #0
 8004a7a:	0159      	lsls	r1, r3, #5
 8004a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a80:	0150      	lsls	r0, r2, #5
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4621      	mov	r1, r4
 8004a88:	1a51      	subs	r1, r2, r1
 8004a8a:	6139      	str	r1, [r7, #16]
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	018b      	lsls	r3, r1, #6
 8004aa4:	4651      	mov	r1, sl
 8004aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aaa:	4651      	mov	r1, sl
 8004aac:	018a      	lsls	r2, r1, #6
 8004aae:	4651      	mov	r1, sl
 8004ab0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	eb63 0901 	sbc.w	r9, r3, r1
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ace:	4690      	mov	r8, r2
 8004ad0:	4699      	mov	r9, r3
 8004ad2:	4623      	mov	r3, r4
 8004ad4:	eb18 0303 	adds.w	r3, r8, r3
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	462b      	mov	r3, r5
 8004adc:	eb49 0303 	adc.w	r3, r9, r3
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004aee:	4629      	mov	r1, r5
 8004af0:	024b      	lsls	r3, r1, #9
 8004af2:	4621      	mov	r1, r4
 8004af4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004af8:	4621      	mov	r1, r4
 8004afa:	024a      	lsls	r2, r1, #9
 8004afc:	4610      	mov	r0, r2
 8004afe:	4619      	mov	r1, r3
 8004b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b02:	2200      	movs	r2, #0
 8004b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b0c:	f7fb fb68 	bl	80001e0 <__aeabi_uldivmod>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4613      	mov	r3, r2
 8004b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b18:	e058      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1a:	4b38      	ldr	r3, [pc, #224]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	099b      	lsrs	r3, r3, #6
 8004b20:	2200      	movs	r2, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	4611      	mov	r1, r2
 8004b26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b2a:	623b      	str	r3, [r7, #32]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b34:	4642      	mov	r2, r8
 8004b36:	464b      	mov	r3, r9
 8004b38:	f04f 0000 	mov.w	r0, #0
 8004b3c:	f04f 0100 	mov.w	r1, #0
 8004b40:	0159      	lsls	r1, r3, #5
 8004b42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b46:	0150      	lsls	r0, r2, #5
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b52:	4649      	mov	r1, r9
 8004b54:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b6c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b70:	eb63 050b 	sbc.w	r5, r3, fp
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	00eb      	lsls	r3, r5, #3
 8004b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b82:	00e2      	lsls	r2, r4, #3
 8004b84:	4614      	mov	r4, r2
 8004b86:	461d      	mov	r5, r3
 8004b88:	4643      	mov	r3, r8
 8004b8a:	18e3      	adds	r3, r4, r3
 8004b8c:	603b      	str	r3, [r7, #0]
 8004b8e:	464b      	mov	r3, r9
 8004b90:	eb45 0303 	adc.w	r3, r5, r3
 8004b94:	607b      	str	r3, [r7, #4]
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	028b      	lsls	r3, r1, #10
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bac:	4621      	mov	r1, r4
 8004bae:	028a      	lsls	r2, r1, #10
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
 8004bba:	61fa      	str	r2, [r7, #28]
 8004bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bc0:	f7fb fb0e 	bl	80001e0 <__aeabi_uldivmod>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4613      	mov	r3, r2
 8004bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004be6:	e002      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004be8:	4b05      	ldr	r3, [pc, #20]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3750      	adds	r7, #80	@ 0x50
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	00f42400 	.word	0x00f42400
 8004c04:	007a1200 	.word	0x007a1200

08004c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c0c:	4b03      	ldr	r3, [pc, #12]	@ (8004c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20000000 	.word	0x20000000

08004c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c24:	f7ff fff0 	bl	8004c08 <HAL_RCC_GetHCLKFreq>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	4b05      	ldr	r3, [pc, #20]	@ (8004c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	0a9b      	lsrs	r3, r3, #10
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	4903      	ldr	r1, [pc, #12]	@ (8004c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c36:	5ccb      	ldrb	r3, [r1, r3]
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40023800 	.word	0x40023800
 8004c44:	0800c39c 	.word	0x0800c39c

08004c48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	220f      	movs	r2, #15
 8004c56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c58:	4b12      	ldr	r3, [pc, #72]	@ (8004ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0203 	and.w	r2, r3, #3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c7c:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	08db      	lsrs	r3, r3, #3
 8004c82:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ca8 <HAL_RCC_GetClockConfig+0x60>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0207 	and.w	r2, r3, #7
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	601a      	str	r2, [r3, #0]
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40023c00 	.word	0x40023c00

08004cac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d038      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cd4:	4b68      	ldr	r3, [pc, #416]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cda:	f7fc f969 	bl	8000fb0 <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ce2:	f7fc f965 	bl	8000fb0 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0bd      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cf4:	4b61      	ldr	r3, [pc, #388]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f0      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	019b      	lsls	r3, r3, #6
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	071b      	lsls	r3, r3, #28
 8004d12:	495a      	ldr	r1, [pc, #360]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d1a:	4b57      	ldr	r3, [pc, #348]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d20:	f7fc f946 	bl	8000fb0 <HAL_GetTick>
 8004d24:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d28:	f7fc f942 	bl	8000fb0 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e09a      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d3a:	4b50      	ldr	r3, [pc, #320]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8083 	beq.w	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	4b48      	ldr	r3, [pc, #288]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5c:	4a47      	ldr	r2, [pc, #284]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d64:	4b45      	ldr	r3, [pc, #276]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d70:	4b43      	ldr	r3, [pc, #268]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a42      	ldr	r2, [pc, #264]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d7a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d7c:	f7fc f918 	bl	8000fb0 <HAL_GetTick>
 8004d80:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d84:	f7fc f914 	bl	8000fb0 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e06c      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d96:	4b3a      	ldr	r3, [pc, #232]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004da2:	4b36      	ldr	r3, [pc, #216]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004daa:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d02f      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d028      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dca:	4b2e      	ldr	r3, [pc, #184]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004dd6:	4a29      	ldr	r2, [pc, #164]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ddc:	4b27      	ldr	r3, [pc, #156]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d114      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004de8:	f7fc f8e2 	bl	8000fb0 <HAL_GetTick>
 8004dec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dee:	e00a      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df0:	f7fc f8de 	bl	8000fb0 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e034      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e06:	4b1d      	ldr	r3, [pc, #116]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0ee      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e1e:	d10d      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004e20:	4b16      	ldr	r3, [pc, #88]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e34:	4911      	ldr	r1, [pc, #68]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
 8004e3a:	e005      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	4a0e      	ldr	r2, [pc, #56]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e42:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e46:	6093      	str	r3, [r2, #8]
 8004e48:	4b0c      	ldr	r3, [pc, #48]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e54:	4909      	ldr	r1, [pc, #36]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	7d1a      	ldrb	r2, [r3, #20]
 8004e6a:	4b07      	ldr	r3, [pc, #28]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004e6c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	42470068 	.word	0x42470068
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	40007000 	.word	0x40007000
 8004e84:	42470e40 	.word	0x42470e40
 8004e88:	424711e0 	.word	0x424711e0

08004e8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d141      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004eaa:	4b25      	ldr	r3, [pc, #148]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d006      	beq.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ec0:	d131      	bne.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ec2:	4b20      	ldr	r3, [pc, #128]	@ (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ec4:	617b      	str	r3, [r7, #20]
          break;
 8004ec6:	e031      	b.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ed4:	d109      	bne.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004edc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ee0:	4a19      	ldr	r2, [pc, #100]	@ (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	e008      	b.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004eea:	4b15      	ldr	r3, [pc, #84]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ef4:	4a15      	ldr	r2, [pc, #84]	@ (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efa:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004efc:	4b10      	ldr	r3, [pc, #64]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f02:	099b      	lsrs	r3, r3, #6
 8004f04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f10:	4b0b      	ldr	r3, [pc, #44]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f16:	0f1b      	lsrs	r3, r3, #28
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f22:	617b      	str	r3, [r7, #20]
          break;
 8004f24:	e002      	b.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
          break;
 8004f2a:	bf00      	nop
        }
      }
      break;
 8004f2c:	e000      	b.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8004f2e:	bf00      	nop
    }
  }
  return frequency;
 8004f30:	697b      	ldr	r3, [r7, #20]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40023800 	.word	0x40023800
 8004f44:	00bb8000 	.word	0x00bb8000
 8004f48:	007a1200 	.word	0x007a1200
 8004f4c:	00f42400 	.word	0x00f42400

08004f50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e07b      	b.n	800505a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d108      	bne.n	8004f7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f72:	d009      	beq.n	8004f88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	61da      	str	r2, [r3, #28]
 8004f7a:	e005      	b.n	8004f88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fb fe68 	bl	8000c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500c:	ea42 0103 	orr.w	r1, r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	0c1b      	lsrs	r3, r3, #16
 8005026:	f003 0104 	and.w	r1, r3, #4
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	f003 0210 	and.w	r2, r3, #16
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005048:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e041      	b.n	80050f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d106      	bne.n	800508e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f839 	bl	8005100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3304      	adds	r3, #4
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f000 f9b1 	bl	8005408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d001      	beq.n	800512c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e044      	b.n	80051b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1e      	ldr	r2, [pc, #120]	@ (80051c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d018      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005156:	d013      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1a      	ldr	r2, [pc, #104]	@ (80051c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00e      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a19      	ldr	r2, [pc, #100]	@ (80051cc <HAL_TIM_Base_Start_IT+0xb8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a17      	ldr	r2, [pc, #92]	@ (80051d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a16      	ldr	r2, [pc, #88]	@ (80051d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d111      	bne.n	80051a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b06      	cmp	r3, #6
 8005190:	d010      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a2:	e007      	b.n	80051b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40014000 	.word	0x40014000

080051d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d020      	beq.n	800523c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01b      	beq.n	800523c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0202 	mvn.w	r2, #2
 800520c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8d2 	bl	80053cc <HAL_TIM_IC_CaptureCallback>
 8005228:	e005      	b.n	8005236 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8c4 	bl	80053b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f8d5 	bl	80053e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d020      	beq.n	8005288 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01b      	beq.n	8005288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0204 	mvn.w	r2, #4
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f8ac 	bl	80053cc <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f89e 	bl	80053b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f8af 	bl	80053e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d020      	beq.n	80052d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01b      	beq.n	80052d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0208 	mvn.w	r2, #8
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2204      	movs	r2, #4
 80052aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f886 	bl	80053cc <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f878 	bl	80053b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f889 	bl	80053e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d020      	beq.n	8005320 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01b      	beq.n	8005320 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0210 	mvn.w	r2, #16
 80052f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2208      	movs	r2, #8
 80052f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f860 	bl	80053cc <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f852 	bl	80053b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f863 	bl	80053e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00c      	beq.n	8005344 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0201 	mvn.w	r2, #1
 800533c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fb fb40 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00c      	beq.n	8005368 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8e6 	bl	8005534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00c      	beq.n	800538c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f834 	bl	80053f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00c      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0220 	mvn.w	r2, #32
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f8b8 	bl	8005520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a3a      	ldr	r2, [pc, #232]	@ (8005504 <TIM_Base_SetConfig+0xfc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00f      	beq.n	8005440 <TIM_Base_SetConfig+0x38>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005426:	d00b      	beq.n	8005440 <TIM_Base_SetConfig+0x38>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a37      	ldr	r2, [pc, #220]	@ (8005508 <TIM_Base_SetConfig+0x100>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d007      	beq.n	8005440 <TIM_Base_SetConfig+0x38>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a36      	ldr	r2, [pc, #216]	@ (800550c <TIM_Base_SetConfig+0x104>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_Base_SetConfig+0x38>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a35      	ldr	r2, [pc, #212]	@ (8005510 <TIM_Base_SetConfig+0x108>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d108      	bne.n	8005452 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2b      	ldr	r2, [pc, #172]	@ (8005504 <TIM_Base_SetConfig+0xfc>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01b      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005460:	d017      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a28      	ldr	r2, [pc, #160]	@ (8005508 <TIM_Base_SetConfig+0x100>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a27      	ldr	r2, [pc, #156]	@ (800550c <TIM_Base_SetConfig+0x104>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00f      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a26      	ldr	r2, [pc, #152]	@ (8005510 <TIM_Base_SetConfig+0x108>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a25      	ldr	r2, [pc, #148]	@ (8005514 <TIM_Base_SetConfig+0x10c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a24      	ldr	r2, [pc, #144]	@ (8005518 <TIM_Base_SetConfig+0x110>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0x8a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a23      	ldr	r2, [pc, #140]	@ (800551c <TIM_Base_SetConfig+0x114>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005504 <TIM_Base_SetConfig+0xfc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d103      	bne.n	80054d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d105      	bne.n	80054f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f023 0201 	bic.w	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	611a      	str	r2, [r3, #16]
  }
}
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40010000 	.word	0x40010000
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800
 8005510:	40000c00 	.word	0x40000c00
 8005514:	40014000 	.word	0x40014000
 8005518:	40014400 	.word	0x40014400
 800551c:	40014800 	.word	0x40014800

08005520 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005548:	b084      	sub	sp, #16
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	f107 001c 	add.w	r0, r7, #28
 8005556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800555a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800555e:	2b01      	cmp	r3, #1
 8005560:	d123      	bne.n	80055aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005566:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800558a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800558e:	2b01      	cmp	r3, #1
 8005590:	d105      	bne.n	800559e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9dc 	bl	800595c <USB_CoreReset>
 80055a4:	4603      	mov	r3, r0
 80055a6:	73fb      	strb	r3, [r7, #15]
 80055a8:	e01b      	b.n	80055e2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f9d0 	bl	800595c <USB_CoreReset>
 80055bc:	4603      	mov	r3, r0
 80055be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d106      	bne.n	80055d6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80055d4:	e005      	b.n	80055e2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055e2:	7fbb      	ldrb	r3, [r7, #30]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d10b      	bne.n	8005600 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f043 0206 	orr.w	r2, r3, #6
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f043 0220 	orr.w	r2, r3, #32
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800560c:	b004      	add	sp, #16
 800560e:	4770      	bx	lr

08005610 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f043 0201 	orr.w	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f023 0201 	bic.w	r2, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d115      	bne.n	80056a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005682:	200a      	movs	r0, #10
 8005684:	f7fb fca0 	bl	8000fc8 <HAL_Delay>
      ms += 10U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	330a      	adds	r3, #10
 800568c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f956 	bl	8005940 <USB_GetMode>
 8005694:	4603      	mov	r3, r0
 8005696:	2b01      	cmp	r3, #1
 8005698:	d01e      	beq.n	80056d8 <USB_SetCurrentMode+0x84>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2bc7      	cmp	r3, #199	@ 0xc7
 800569e:	d9f0      	bls.n	8005682 <USB_SetCurrentMode+0x2e>
 80056a0:	e01a      	b.n	80056d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d115      	bne.n	80056d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056b4:	200a      	movs	r0, #10
 80056b6:	f7fb fc87 	bl	8000fc8 <HAL_Delay>
      ms += 10U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	330a      	adds	r3, #10
 80056be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f93d 	bl	8005940 <USB_GetMode>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <USB_SetCurrentMode+0x84>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80056d0:	d9f0      	bls.n	80056b4 <USB_SetCurrentMode+0x60>
 80056d2:	e001      	b.n	80056d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e005      	b.n	80056e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2bc8      	cmp	r3, #200	@ 0xc8
 80056dc:	d101      	bne.n	80056e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3301      	adds	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005706:	d901      	bls.n	800570c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e01b      	b.n	8005744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	daf2      	bge.n	80056fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	019b      	lsls	r3, r3, #6
 800571c:	f043 0220 	orr.w	r2, r3, #32
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3301      	adds	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005730:	d901      	bls.n	8005736 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e006      	b.n	8005744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b20      	cmp	r3, #32
 8005740:	d0f0      	beq.n	8005724 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3301      	adds	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005768:	d901      	bls.n	800576e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e018      	b.n	80057a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	daf2      	bge.n	800575c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2210      	movs	r2, #16
 800577e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3301      	adds	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800578c:	d901      	bls.n	8005792 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e006      	b.n	80057a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0310 	and.w	r3, r3, #16
 800579a:	2b10      	cmp	r3, #16
 800579c:	d0f0      	beq.n	8005780 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b089      	sub	sp, #36	@ 0x24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	4611      	mov	r1, r2
 80057b8:	461a      	mov	r2, r3
 80057ba:	460b      	mov	r3, r1
 80057bc:	71fb      	strb	r3, [r7, #7]
 80057be:	4613      	mov	r3, r2
 80057c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d123      	bne.n	800581a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057d2:	88bb      	ldrh	r3, [r7, #4]
 80057d4:	3303      	adds	r3, #3
 80057d6:	089b      	lsrs	r3, r3, #2
 80057d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057da:	2300      	movs	r3, #0
 80057dc:	61bb      	str	r3, [r7, #24]
 80057de:	e018      	b.n	8005812 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	031a      	lsls	r2, r3, #12
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057ec:	461a      	mov	r2, r3
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	3301      	adds	r3, #1
 80057f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3301      	adds	r3, #1
 80057fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	3301      	adds	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3301      	adds	r3, #1
 800580a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	3301      	adds	r3, #1
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	429a      	cmp	r2, r3
 8005818:	d3e2      	bcc.n	80057e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3724      	adds	r7, #36	@ 0x24
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005828:	b480      	push	{r7}
 800582a:	b08b      	sub	sp, #44	@ 0x2c
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	089b      	lsrs	r3, r3, #2
 8005842:	b29b      	uxth	r3, r3
 8005844:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	f003 0303 	and.w	r3, r3, #3
 800584c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800584e:	2300      	movs	r3, #0
 8005850:	623b      	str	r3, [r7, #32]
 8005852:	e014      	b.n	800587e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	3301      	adds	r3, #1
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	3301      	adds	r3, #1
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800586c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586e:	3301      	adds	r3, #1
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	3301      	adds	r3, #1
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	3301      	adds	r3, #1
 800587c:	623b      	str	r3, [r7, #32]
 800587e:	6a3a      	ldr	r2, [r7, #32]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	429a      	cmp	r2, r3
 8005884:	d3e6      	bcc.n	8005854 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005886:	8bfb      	ldrh	r3, [r7, #30]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01e      	beq.n	80058ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005896:	461a      	mov	r2, r3
 8005898:	f107 0310 	add.w	r3, r7, #16
 800589c:	6812      	ldr	r2, [r2, #0]
 800589e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	701a      	strb	r2, [r3, #0]
      i++;
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	3301      	adds	r3, #1
 80058b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ba:	3301      	adds	r3, #1
 80058bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80058be:	8bfb      	ldrh	r3, [r7, #30]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058c4:	8bfb      	ldrh	r3, [r7, #30]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1ea      	bne.n	80058a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	372c      	adds	r7, #44	@ 0x2c
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4013      	ands	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058f0:	68fb      	ldr	r3, [r7, #12]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80058fe:	b480      	push	{r7}
 8005900:	b085      	sub	sp, #20
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4413      	add	r3, r2
 8005926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	4013      	ands	r3, r2
 8005930:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005932:	68bb      	ldr	r3, [r7, #8]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	f003 0301 	and.w	r3, r3, #1
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3301      	adds	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005974:	d901      	bls.n	800597a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e01b      	b.n	80059b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	daf2      	bge.n	8005968 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f043 0201 	orr.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3301      	adds	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800599e:	d901      	bls.n	80059a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e006      	b.n	80059b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d0f0      	beq.n	8005992 <USB_CoreReset+0x36>

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
	...

080059c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059c0:	b084      	sub	sp, #16
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b086      	sub	sp, #24
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059e0:	461a      	mov	r2, r3
 80059e2:	2300      	movs	r3, #0
 80059e4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a02:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d119      	bne.n	8005a4a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d10a      	bne.n	8005a34 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a2c:	f043 0304 	orr.w	r3, r3, #4
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	e014      	b.n	8005a5e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a42:	f023 0304 	bic.w	r3, r3, #4
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	e009      	b.n	8005a5e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a58:	f023 0304 	bic.w	r3, r3, #4
 8005a5c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a5e:	2110      	movs	r1, #16
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff fe43 	bl	80056ec <USB_FlushTxFifo>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff fe6d 	bl	8005750 <USB_FlushRxFifo>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a80:	2300      	movs	r3, #0
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	e015      	b.n	8005ab2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a92:	461a      	mov	r2, r3
 8005a94:	f04f 33ff 	mov.w	r3, #4294967295
 8005a98:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d3e3      	bcc.n	8005a86 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aca:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2280      	movs	r2, #128	@ 0x80
 8005ad0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8005b10 <USB_HostInit+0x150>)
 8005ad6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a0e      	ldr	r2, [pc, #56]	@ (8005b14 <USB_HostInit+0x154>)
 8005adc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ae0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f043 0210 	orr.w	r2, r3, #16
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	699a      	ldr	r2, [r3, #24]
 8005af8:	4b07      	ldr	r3, [pc, #28]	@ (8005b18 <USB_HostInit+0x158>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b0c:	b004      	add	sp, #16
 8005b0e:	4770      	bx	lr
 8005b10:	00600080 	.word	0x00600080
 8005b14:	004000e0 	.word	0x004000e0
 8005b18:	a3200008 	.word	0xa3200008

08005b1c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	68f9      	ldr	r1, [r7, #12]
 8005b50:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005b54:	4313      	orrs	r3, r2
 8005b56:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d107      	bne.n	8005b6e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b64:	461a      	mov	r2, r3
 8005b66:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005b6a:	6053      	str	r3, [r2, #4]
 8005b6c:	e00c      	b.n	8005b88 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d107      	bne.n	8005b84 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005b80:	6053      	str	r3, [r2, #4]
 8005b82:	e001      	b.n	8005b88 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005bb6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005bc6:	2064      	movs	r0, #100	@ 0x64
 8005bc8:	f7fb f9fe 	bl	8000fc8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bd8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005bda:	200a      	movs	r0, #10
 8005bdc:	f7fb f9f4 	bl	8000fc8 <HAL_Delay>

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005c0e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <USB_DriveVbus+0x44>
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d106      	bne.n	8005c2e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c2c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c38:	d109      	bne.n	8005c4e <USB_DriveVbus+0x64>
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d106      	bne.n	8005c4e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c4c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	0c5b      	lsrs	r3, r3, #17
 8005c7a:	f003 0303 	and.w	r3, r3, #3
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	b29b      	uxth	r3, r3
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	4608      	mov	r0, r1
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	461a      	mov	r2, r3
 8005cba:	4603      	mov	r3, r0
 8005cbc:	70fb      	strb	r3, [r7, #3]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	70bb      	strb	r3, [r7, #2]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ce2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d867      	bhi.n	8005dba <USB_HC_Init+0x10e>
 8005cea:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf0 <USB_HC_Init+0x44>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005d01 	.word	0x08005d01
 8005cf4:	08005d7d 	.word	0x08005d7d
 8005cf8:	08005d01 	.word	0x08005d01
 8005cfc:	08005d3f 	.word	0x08005d3f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005d12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	da51      	bge.n	8005dc0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d3a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005d3c:	e040      	b.n	8005dc0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005d50:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	da34      	bge.n	8005dc4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d78:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d7a:	e023      	b.n	8005dc4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f240 2325 	movw	r3, #549	@ 0x225
 8005d8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	da17      	bge.n	8005dc8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	78fa      	ldrb	r2, [r7, #3]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005db2:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005db6:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005db8:	e006      	b.n	8005dc8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	77fb      	strb	r3, [r7, #31]
      break;
 8005dbe:	e004      	b.n	8005dca <USB_HC_Init+0x11e>
      break;
 8005dc0:	bf00      	nop
 8005dc2:	e002      	b.n	8005dca <USB_HC_Init+0x11e>
      break;
 8005dc4:	bf00      	nop
 8005dc6:	e000      	b.n	8005dca <USB_HC_Init+0x11e>
      break;
 8005dc8:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	2300      	movs	r3, #0
 8005dda:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	78fa      	ldrb	r2, [r7, #3]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005df6:	f043 0302 	orr.w	r3, r3, #2
 8005dfa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e02:	699a      	ldr	r2, [r3, #24]
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e10:	6939      	ldr	r1, [r7, #16]
 8005e12:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005e16:	4313      	orrs	r3, r2
 8005e18:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005e26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	da03      	bge.n	8005e36 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	e001      	b.n	8005e3a <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff ff0e 	bl	8005c5c <USB_GetHostSpeed>
 8005e40:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005e42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d106      	bne.n	8005e58 <USB_HC_Init+0x1ac>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d003      	beq.n	8005e58 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005e50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	e001      	b.n	8005e5c <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e5c:	787b      	ldrb	r3, [r7, #1]
 8005e5e:	059b      	lsls	r3, r3, #22
 8005e60:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e64:	78bb      	ldrb	r3, [r7, #2]
 8005e66:	02db      	lsls	r3, r3, #11
 8005e68:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e6c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e6e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005e72:	049b      	lsls	r3, r3, #18
 8005e74:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e78:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005e7a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005e7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e80:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	431a      	orrs	r2, r3
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e8a:	78fa      	ldrb	r2, [r7, #3]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e9a:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005e9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d003      	beq.n	8005eac <USB_HC_Init+0x200>
 8005ea4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10f      	bne.n	8005ecc <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	78fa      	ldrb	r2, [r7, #3]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ec6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005eca:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005ecc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop

08005ed8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08c      	sub	sp, #48	@ 0x30
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005ef0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ef4:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	799b      	ldrb	r3, [r3, #6]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d158      	bne.n	8005fb0 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005efe:	2301      	movs	r3, #1
 8005f00:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	78db      	ldrb	r3, [r3, #3]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	8a92      	ldrh	r2, [r2, #20]
 8005f10:	fb03 f202 	mul.w	r2, r3, r2
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	61da      	str	r2, [r3, #28]
 8005f18:	e079      	b.n	800600e <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	7c9b      	ldrb	r3, [r3, #18]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d130      	bne.n	8005f84 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	2bbc      	cmp	r3, #188	@ 0xbc
 8005f28:	d918      	bls.n	8005f5c <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	8a9b      	ldrh	r3, [r3, #20]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d003      	beq.n	8005f4c <USB_HC_StartXfer+0x74>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d103      	bne.n	8005f54 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	60da      	str	r2, [r3, #12]
 8005f52:	e05c      	b.n	800600e <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2201      	movs	r2, #1
 8005f58:	60da      	str	r2, [r3, #12]
 8005f5a:	e058      	b.n	800600e <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6a1a      	ldr	r2, [r3, #32]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d007      	beq.n	8005f7c <USB_HC_StartXfer+0xa4>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d003      	beq.n	8005f7c <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2204      	movs	r2, #4
 8005f78:	60da      	str	r2, [r3, #12]
 8005f7a:	e048      	b.n	800600e <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2203      	movs	r2, #3
 8005f80:	60da      	str	r2, [r3, #12]
 8005f82:	e044      	b.n	800600e <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d10d      	bne.n	8005fa6 <USB_HC_StartXfer+0xce>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	8a92      	ldrh	r2, [r2, #20]
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d907      	bls.n	8005fa6 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	8a92      	ldrh	r2, [r2, #20]
 8005f9c:	fb03 f202 	mul.w	r2, r3, r2
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	61da      	str	r2, [r3, #28]
 8005fa4:	e033      	b.n	800600e <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	6a1a      	ldr	r2, [r3, #32]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	61da      	str	r2, [r3, #28]
 8005fae:	e02e      	b.n	800600e <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d018      	beq.n	8005fea <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	8a92      	ldrh	r2, [r2, #20]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	8a92      	ldrh	r2, [r2, #20]
 8005fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fcc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005fce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005fd0:	8b7b      	ldrh	r3, [r7, #26]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d90b      	bls.n	8005fee <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8005fd6:	8b7b      	ldrh	r3, [r7, #26]
 8005fd8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005fda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	8a92      	ldrh	r2, [r2, #20]
 8005fe0:	fb03 f202 	mul.w	r2, r3, r2
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	61da      	str	r2, [r3, #28]
 8005fe8:	e001      	b.n	8005fee <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8005fea:	2301      	movs	r3, #1
 8005fec:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	78db      	ldrb	r3, [r3, #3]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d007      	beq.n	8006006 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ff6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	8a92      	ldrh	r2, [r2, #20]
 8005ffc:	fb03 f202 	mul.w	r2, r3, r2
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	61da      	str	r2, [r3, #28]
 8006004:	e003      	b.n	800600e <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6a1a      	ldr	r2, [r3, #32]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006016:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006018:	04d9      	lsls	r1, r3, #19
 800601a:	4ba4      	ldr	r3, [pc, #656]	@ (80062ac <USB_HC_StartXfer+0x3d4>)
 800601c:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800601e:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	7d9b      	ldrb	r3, [r3, #22]
 8006024:	075b      	lsls	r3, r3, #29
 8006026:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800602a:	69f9      	ldr	r1, [r7, #28]
 800602c:	0148      	lsls	r0, r1, #5
 800602e:	6a39      	ldr	r1, [r7, #32]
 8006030:	4401      	add	r1, r0
 8006032:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006036:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006038:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d009      	beq.n	8006054 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6999      	ldr	r1, [r3, #24]
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	4413      	add	r3, r2
 800604c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006050:	460a      	mov	r2, r1
 8006052:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	bf0c      	ite	eq
 8006064:	2301      	moveq	r3, #1
 8006066:	2300      	movne	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	4413      	add	r3, r2
 8006074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	6a3a      	ldr	r2, [r7, #32]
 8006080:	440a      	add	r2, r1
 8006082:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006086:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800608a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	7e7b      	ldrb	r3, [r7, #25]
 800609c:	075b      	lsls	r3, r3, #29
 800609e:	69f9      	ldr	r1, [r7, #28]
 80060a0:	0148      	lsls	r0, r1, #5
 80060a2:	6a39      	ldr	r1, [r7, #32]
 80060a4:	4401      	add	r1, r0
 80060a6:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80060aa:	4313      	orrs	r3, r2
 80060ac:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	799b      	ldrb	r3, [r3, #6]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	f040 80c4 	bne.w	8006240 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	7c5b      	ldrb	r3, [r3, #17]
 80060bc:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80060c2:	4313      	orrs	r3, r2
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	6a3a      	ldr	r2, [r7, #32]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80060d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80060d4:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060f0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80060f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	79db      	ldrb	r3, [r3, #7]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d123      	bne.n	8006146 <USB_HC_StartXfer+0x26e>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	78db      	ldrb	r3, [r3, #3]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d11f      	bne.n	8006146 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	6a3a      	ldr	r2, [r7, #32]
 800611a:	440a      	add	r2, r1
 800611c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006124:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	4413      	add	r3, r2
 800612e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	6a3a      	ldr	r2, [r7, #32]
 800613a:	440a      	add	r2, r1
 800613c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006144:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	7c9b      	ldrb	r3, [r3, #18]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d003      	beq.n	8006156 <USB_HC_StartXfer+0x27e>
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	7c9b      	ldrb	r3, [r3, #18]
 8006152:	2b03      	cmp	r3, #3
 8006154:	d117      	bne.n	8006186 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800615a:	2b01      	cmp	r3, #1
 800615c:	d113      	bne.n	8006186 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	78db      	ldrb	r3, [r3, #3]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d10f      	bne.n	8006186 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	4413      	add	r3, r2
 800616e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	6a3a      	ldr	r2, [r7, #32]
 800617a:	440a      	add	r2, r1
 800617c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006184:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	7c9b      	ldrb	r3, [r3, #18]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d163      	bne.n	8006256 <USB_HC_StartXfer+0x37e>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	78db      	ldrb	r3, [r3, #3]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d15f      	bne.n	8006256 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	3b01      	subs	r3, #1
 800619c:	2b03      	cmp	r3, #3
 800619e:	d859      	bhi.n	8006254 <USB_HC_StartXfer+0x37c>
 80061a0:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <USB_HC_StartXfer+0x2d0>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	080061b9 	.word	0x080061b9
 80061ac:	080061db 	.word	0x080061db
 80061b0:	080061fd 	.word	0x080061fd
 80061b4:	0800621f 	.word	0x0800621f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	6a3a      	ldr	r2, [r7, #32]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061d6:	6053      	str	r3, [r2, #4]
          break;
 80061d8:	e03d      	b.n	8006256 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	6a3a      	ldr	r2, [r7, #32]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061f4:	f043 030e 	orr.w	r3, r3, #14
 80061f8:	6053      	str	r3, [r2, #4]
          break;
 80061fa:	e02c      	b.n	8006256 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	4413      	add	r3, r2
 8006204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	6a3a      	ldr	r2, [r7, #32]
 8006210:	440a      	add	r2, r1
 8006212:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006216:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800621a:	6053      	str	r3, [r2, #4]
          break;
 800621c:	e01b      	b.n	8006256 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	6a3a      	ldr	r2, [r7, #32]
 8006232:	440a      	add	r2, r1
 8006234:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006238:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800623c:	6053      	str	r3, [r2, #4]
          break;
 800623e:	e00a      	b.n	8006256 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	4413      	add	r3, r2
 8006248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800624c:	461a      	mov	r2, r3
 800624e:	2300      	movs	r3, #0
 8006250:	6053      	str	r3, [r2, #4]
 8006252:	e000      	b.n	8006256 <USB_HC_StartXfer+0x37e>
          break;
 8006254:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	4413      	add	r3, r2
 800625e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800626c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	78db      	ldrb	r3, [r3, #3]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d004      	beq.n	8006280 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	e003      	b.n	8006288 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006286:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800628e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	4413      	add	r3, r2
 8006298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800629c:	461a      	mov	r2, r3
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80062a2:	79fb      	ldrb	r3, [r7, #7]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	e055      	b.n	8006358 <USB_HC_StartXfer+0x480>
 80062ac:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	78db      	ldrb	r3, [r3, #3]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d14e      	bne.n	8006356 <USB_HC_StartXfer+0x47e>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d04a      	beq.n	8006356 <USB_HC_StartXfer+0x47e>
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	79db      	ldrb	r3, [r3, #7]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d146      	bne.n	8006356 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	7c9b      	ldrb	r3, [r3, #18]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d831      	bhi.n	8006334 <USB_HC_StartXfer+0x45c>
 80062d0:	a201      	add	r2, pc, #4	@ (adr r2, 80062d8 <USB_HC_StartXfer+0x400>)
 80062d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d6:	bf00      	nop
 80062d8:	080062e9 	.word	0x080062e9
 80062dc:	0800630d 	.word	0x0800630d
 80062e0:	080062e9 	.word	0x080062e9
 80062e4:	0800630d 	.word	0x0800630d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	3303      	adds	r3, #3
 80062ee:	089b      	lsrs	r3, r3, #2
 80062f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80062f2:	8afa      	ldrh	r2, [r7, #22]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d91c      	bls.n	8006338 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	f043 0220 	orr.w	r2, r3, #32
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	619a      	str	r2, [r3, #24]
        }
        break;
 800630a:	e015      	b.n	8006338 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	3303      	adds	r3, #3
 8006312:	089b      	lsrs	r3, r3, #2
 8006314:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006316:	8afa      	ldrh	r2, [r7, #22]
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	b29b      	uxth	r3, r3
 8006322:	429a      	cmp	r2, r3
 8006324:	d90a      	bls.n	800633c <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	619a      	str	r2, [r3, #24]
        }
        break;
 8006332:	e003      	b.n	800633c <USB_HC_StartXfer+0x464>

      default:
        break;
 8006334:	bf00      	nop
 8006336:	e002      	b.n	800633e <USB_HC_StartXfer+0x466>
        break;
 8006338:	bf00      	nop
 800633a:	e000      	b.n	800633e <USB_HC_StartXfer+0x466>
        break;
 800633c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6999      	ldr	r1, [r3, #24]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	785a      	ldrb	r2, [r3, #1]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	b29b      	uxth	r3, r3
 800634c:	2000      	movs	r0, #0
 800634e:	9000      	str	r0, [sp, #0]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f7ff fa2b 	bl	80057ac <USB_WritePacket>
  }

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3728      	adds	r7, #40	@ 0x28
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	b29b      	uxth	r3, r3
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006382:	b480      	push	{r7}
 8006384:	b089      	sub	sp, #36	@ 0x24
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	460b      	mov	r3, r1
 800638c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	0c9b      	lsrs	r3, r3, #18
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	0fdb      	lsrs	r3, r3, #31
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	0fdb      	lsrs	r3, r3, #31
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d10d      	bne.n	8006404 <USB_HC_Halt+0x82>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10a      	bne.n	8006404 <USB_HC_Halt+0x82>
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d002      	beq.n	8006400 <USB_HC_Halt+0x7e>
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d101      	bne.n	8006404 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	e0d8      	b.n	80065b6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <USB_HC_Halt+0x8e>
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d173      	bne.n	80064f8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	4413      	add	r3, r2
 8006418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	0151      	lsls	r1, r2, #5
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	440a      	add	r2, r1
 8006426:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800642a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800642e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 0320 	and.w	r3, r3, #32
 8006438:	2b00      	cmp	r3, #0
 800643a:	d14a      	bne.n	80064d2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d133      	bne.n	80064b0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	4413      	add	r3, r2
 8006450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	69fa      	ldr	r2, [r7, #28]
 800645c:	440a      	add	r2, r1
 800645e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006462:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006466:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	4413      	add	r3, r2
 8006470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	440a      	add	r2, r1
 800647e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006482:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006486:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	3301      	adds	r3, #1
 800648c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006494:	d82e      	bhi.n	80064f4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	4413      	add	r3, r2
 800649e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064ac:	d0ec      	beq.n	8006488 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064ae:	e081      	b.n	80065b4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064ce:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064d0:	e070      	b.n	80065b4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	0151      	lsls	r1, r2, #5
 80064e4:	69fa      	ldr	r2, [r7, #28]
 80064e6:	440a      	add	r2, r1
 80064e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064f2:	e05f      	b.n	80065b4 <USB_HC_Halt+0x232>
            break;
 80064f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064f6:	e05d      	b.n	80065b4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	440a      	add	r2, r1
 800650e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006512:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006516:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d133      	bne.n	8006590 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	0151      	lsls	r1, r2, #5
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	440a      	add	r2, r1
 800653e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006542:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006546:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	4413      	add	r3, r2
 8006550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	0151      	lsls	r1, r2, #5
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	440a      	add	r2, r1
 800655e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006562:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006566:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	3301      	adds	r3, #1
 800656c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006574:	d81d      	bhi.n	80065b2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	4413      	add	r3, r2
 800657e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006588:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800658c:	d0ec      	beq.n	8006568 <USB_HC_Halt+0x1e6>
 800658e:	e011      	b.n	80065b4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	4413      	add	r3, r2
 8006598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	0151      	lsls	r1, r2, #5
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	440a      	add	r2, r1
 80065a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	e000      	b.n	80065b4 <USB_HC_Halt+0x232>
          break;
 80065b2:	bf00      	nop
    }
  }

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3724      	adds	r7, #36	@ 0x24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b088      	sub	sp, #32
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff f82b 	bl	8005632 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065dc:	2110      	movs	r1, #16
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff f884 	bl	80056ec <USB_FlushTxFifo>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff f8ae 	bl	8005750 <USB_FlushRxFifo>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80065fe:	2300      	movs	r3, #0
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	e01f      	b.n	8006644 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	4413      	add	r3, r2
 800660c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800661a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006622:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800662a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	4413      	add	r3, r2
 8006634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006638:	461a      	mov	r2, r3
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	3301      	adds	r3, #1
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2b0f      	cmp	r3, #15
 8006648:	d9dc      	bls.n	8006604 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800664a:	2300      	movs	r3, #0
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	e034      	b.n	80066ba <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	4413      	add	r3, r2
 8006658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006666:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800666e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006676:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	4413      	add	r3, r2
 8006680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006684:	461a      	mov	r2, r3
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006696:	d80c      	bhi.n	80066b2 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066ae:	d0ec      	beq.n	800668a <USB_StopHost+0xc8>
 80066b0:	e000      	b.n	80066b4 <USB_StopHost+0xf2>
        break;
 80066b2:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	3301      	adds	r3, #1
 80066b8:	61bb      	str	r3, [r7, #24]
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b0f      	cmp	r3, #15
 80066be:	d9c7      	bls.n	8006650 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066c6:	461a      	mov	r2, r3
 80066c8:	f04f 33ff 	mov.w	r3, #4294967295
 80066cc:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f04f 32ff 	mov.w	r2, #4294967295
 80066d4:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fe ff9a 	bl	8005610 <USB_EnableGlobalInt>

  return ret;
 80066dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3720      	adds	r7, #32
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80066e6:	b590      	push	{r4, r7, lr}
 80066e8:	b089      	sub	sp, #36	@ 0x24
 80066ea:	af04      	add	r7, sp, #16
 80066ec:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80066ee:	2301      	movs	r3, #1
 80066f0:	2202      	movs	r2, #2
 80066f2:	2102      	movs	r1, #2
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fcd2 	bl	800709e <USBH_FindInterface>
 80066fa:	4603      	mov	r3, r0
 80066fc:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	2bff      	cmp	r3, #255	@ 0xff
 8006702:	d002      	beq.n	800670a <USBH_CDC_InterfaceInit+0x24>
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d901      	bls.n	800670e <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800670a:	2302      	movs	r3, #2
 800670c:	e13d      	b.n	800698a <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fca7 	bl	8007066 <USBH_SelectInterface>
 8006718:	4603      	mov	r3, r0
 800671a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800671c:	7bbb      	ldrb	r3, [r7, #14]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006722:	2302      	movs	r3, #2
 8006724:	e131      	b.n	800698a <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800672c:	2050      	movs	r0, #80	@ 0x50
 800672e:	f005 fc31 	bl	800bf94 <malloc>
 8006732:	4603      	mov	r3, r0
 8006734:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006746:	2302      	movs	r3, #2
 8006748:	e11f      	b.n	800698a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800674a:	2250      	movs	r2, #80	@ 0x50
 800674c:	2100      	movs	r1, #0
 800674e:	68b8      	ldr	r0, [r7, #8]
 8006750:	f005 fcde 	bl	800c110 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	211a      	movs	r1, #26
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	4413      	add	r3, r2
 8006760:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	b25b      	sxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	da15      	bge.n	8006798 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	211a      	movs	r1, #26
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	4413      	add	r3, r2
 8006778:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	211a      	movs	r1, #26
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	4413      	add	r3, r2
 800678e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006792:	881a      	ldrh	r2, [r3, #0]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	785b      	ldrb	r3, [r3, #1]
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f002 fa19 	bl	8008bd6 <USBH_AllocPipe>
 80067a4:	4603      	mov	r3, r0
 80067a6:	461a      	mov	r2, r3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	7819      	ldrb	r1, [r3, #0]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	7858      	ldrb	r0, [r3, #1]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	8952      	ldrh	r2, [r2, #10]
 80067c4:	9202      	str	r2, [sp, #8]
 80067c6:	2203      	movs	r2, #3
 80067c8:	9201      	str	r2, [sp, #4]
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	4623      	mov	r3, r4
 80067ce:	4602      	mov	r2, r0
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f002 f9d1 	bl	8008b78 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2200      	movs	r2, #0
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f005 fb52 	bl	800be88 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80067e4:	2300      	movs	r3, #0
 80067e6:	2200      	movs	r2, #0
 80067e8:	210a      	movs	r1, #10
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fc57 	bl	800709e <USBH_FindInterface>
 80067f0:	4603      	mov	r3, r0
 80067f2:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2bff      	cmp	r3, #255	@ 0xff
 80067f8:	d002      	beq.n	8006800 <USBH_CDC_InterfaceInit+0x11a>
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d901      	bls.n	8006804 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006800:	2302      	movs	r3, #2
 8006802:	e0c2      	b.n	800698a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	211a      	movs	r1, #26
 800680a:	fb01 f303 	mul.w	r3, r1, r3
 800680e:	4413      	add	r3, r2
 8006810:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	b25b      	sxtb	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	da16      	bge.n	800684a <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	211a      	movs	r1, #26
 8006822:	fb01 f303 	mul.w	r3, r1, r3
 8006826:	4413      	add	r3, r2
 8006828:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800682c:	781a      	ldrb	r2, [r3, #0]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	211a      	movs	r1, #26
 8006838:	fb01 f303 	mul.w	r3, r1, r3
 800683c:	4413      	add	r3, r2
 800683e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006842:	881a      	ldrh	r2, [r3, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	835a      	strh	r2, [r3, #26]
 8006848:	e015      	b.n	8006876 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	211a      	movs	r1, #26
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	4413      	add	r3, r2
 8006856:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800685a:	781a      	ldrb	r2, [r3, #0]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	211a      	movs	r1, #26
 8006866:	fb01 f303 	mul.w	r3, r1, r3
 800686a:	4413      	add	r3, r2
 800686c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006870:	881a      	ldrh	r2, [r3, #0]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	211a      	movs	r1, #26
 800687c:	fb01 f303 	mul.w	r3, r1, r3
 8006880:	4413      	add	r3, r2
 8006882:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	b25b      	sxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	da16      	bge.n	80068bc <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	211a      	movs	r1, #26
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	4413      	add	r3, r2
 800689a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800689e:	781a      	ldrb	r2, [r3, #0]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	211a      	movs	r1, #26
 80068aa:	fb01 f303 	mul.w	r3, r1, r3
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80068b4:	881a      	ldrh	r2, [r3, #0]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	835a      	strh	r2, [r3, #26]
 80068ba:	e015      	b.n	80068e8 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	211a      	movs	r1, #26
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	4413      	add	r3, r2
 80068c8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80068cc:	781a      	ldrb	r2, [r3, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	211a      	movs	r1, #26
 80068d8:	fb01 f303 	mul.w	r3, r1, r3
 80068dc:	4413      	add	r3, r2
 80068de:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80068e2:	881a      	ldrh	r2, [r3, #0]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	7b9b      	ldrb	r3, [r3, #14]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f002 f971 	bl	8008bd6 <USBH_AllocPipe>
 80068f4:	4603      	mov	r3, r0
 80068f6:	461a      	mov	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	7bdb      	ldrb	r3, [r3, #15]
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f002 f967 	bl	8008bd6 <USBH_AllocPipe>
 8006908:	4603      	mov	r3, r0
 800690a:	461a      	mov	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	7b59      	ldrb	r1, [r3, #13]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	7b98      	ldrb	r0, [r3, #14]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	8b12      	ldrh	r2, [r2, #24]
 8006928:	9202      	str	r2, [sp, #8]
 800692a:	2202      	movs	r2, #2
 800692c:	9201      	str	r2, [sp, #4]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	4623      	mov	r3, r4
 8006932:	4602      	mov	r2, r0
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f002 f91f 	bl	8008b78 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	7b19      	ldrb	r1, [r3, #12]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	7bd8      	ldrb	r0, [r3, #15]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	8b52      	ldrh	r2, [r2, #26]
 8006952:	9202      	str	r2, [sp, #8]
 8006954:	2202      	movs	r2, #2
 8006956:	9201      	str	r2, [sp, #4]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	4623      	mov	r3, r4
 800695c:	4602      	mov	r2, r0
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f002 f90a 	bl	8008b78 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	7b5b      	ldrb	r3, [r3, #13]
 8006970:	2200      	movs	r2, #0
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f005 fa87 	bl	800be88 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	7b1b      	ldrb	r3, [r3, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f005 fa80 	bl	800be88 <USBH_LL_SetToggle>

  return USBH_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bd90      	pop	{r4, r7, pc}

08006992 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00e      	beq.n	80069ca <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	4619      	mov	r1, r3
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f002 f8ff 	bl	8008bb6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f002 f92a 	bl	8008c18 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	7b1b      	ldrb	r3, [r3, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00e      	beq.n	80069f0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	7b1b      	ldrb	r3, [r3, #12]
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f002 f8ec 	bl	8008bb6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	7b1b      	ldrb	r3, [r3, #12]
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f002 f917 	bl	8008c18 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	7b5b      	ldrb	r3, [r3, #13]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00e      	beq.n	8006a16 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	7b5b      	ldrb	r3, [r3, #13]
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f002 f8d9 	bl	8008bb6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	7b5b      	ldrb	r3, [r3, #13]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f002 f904 	bl	8008c18 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00b      	beq.n	8006a3a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f005 faba 	bl	800bfa4 <free>
    phost->pActiveClass->pData = 0U;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a36:	2200      	movs	r2, #0
 8006a38:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3340      	adds	r3, #64	@ 0x40
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f8b2 	bl	8006bc6 <GetLineCoding>
 8006a62:	4603      	mov	r3, r0
 8006a64:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006a66:	7afb      	ldrb	r3, [r7, #11]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006a72:	2102      	movs	r1, #2
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006a78:	7afb      	ldrb	r3, [r7, #11]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d877      	bhi.n	8006b98 <USBH_CDC_Process+0x114>
 8006aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab0 <USBH_CDC_Process+0x2c>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006ac5 	.word	0x08006ac5
 8006ab4:	08006acb 	.word	0x08006acb
 8006ab8:	08006afb 	.word	0x08006afb
 8006abc:	08006b6f 	.word	0x08006b6f
 8006ac0:	08006b7d 	.word	0x08006b7d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac8:	e06d      	b.n	8006ba6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f897 	bl	8006c04 <SetLineCoding>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ae8:	e058      	b.n	8006b9c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d055      	beq.n	8006b9c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2204      	movs	r2, #4
 8006af4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006af8:	e050      	b.n	8006b9c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	3340      	adds	r3, #64	@ 0x40
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f860 	bl	8006bc6 <GetLineCoding>
 8006b06:	4603      	mov	r3, r0
 8006b08:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d126      	bne.n	8006b5e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b22:	791b      	ldrb	r3, [r3, #4]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d13b      	bne.n	8006ba0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b32:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d133      	bne.n	8006ba0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b42:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d12b      	bne.n	8006ba0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b50:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d124      	bne.n	8006ba0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f982 	bl	8006e60 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b5c:	e020      	b.n	8006ba0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d01d      	beq.n	8006ba0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2204      	movs	r2, #4
 8006b68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006b6c:	e018      	b.n	8006ba0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f867 	bl	8006c42 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f8f6 	bl	8006d66 <CDC_ProcessReception>
      break;
 8006b7a:	e014      	b.n	8006ba6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 f984 	bl	8007e8c <USBH_ClrFeature>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006b96:	e005      	b.n	8006ba4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006b98:	bf00      	nop
 8006b9a:	e004      	b.n	8006ba6 <USBH_CDC_Process+0x122>
      break;
 8006b9c:	bf00      	nop
 8006b9e:	e002      	b.n	8006ba6 <USBH_CDC_Process+0x122>
      break;
 8006ba0:	bf00      	nop
 8006ba2:	e000      	b.n	8006ba6 <USBH_CDC_Process+0x122>
      break;
 8006ba4:	bf00      	nop

  }

  return status;
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	22a1      	movs	r2, #161	@ 0xa1
 8006bd4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2221      	movs	r2, #33	@ 0x21
 8006bda:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2207      	movs	r2, #7
 8006bec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2207      	movs	r2, #7
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 fc7e 	bl	80084f6 <USBH_CtlReq>
 8006bfa:	4603      	mov	r3, r0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2221      	movs	r2, #33	@ 0x21
 8006c12:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2207      	movs	r2, #7
 8006c2a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2207      	movs	r2, #7
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 fc5f 	bl	80084f6 <USBH_CtlReq>
 8006c38:	4603      	mov	r3, r0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b086      	sub	sp, #24
 8006c46:	af02      	add	r7, sp, #8
 8006c48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c54:	2300      	movs	r3, #0
 8006c56:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d002      	beq.n	8006c68 <CDC_ProcessTransmission+0x26>
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d023      	beq.n	8006cae <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006c66:	e07a      	b.n	8006d5e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	8b12      	ldrh	r2, [r2, #24]
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d90b      	bls.n	8006c8c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	69d9      	ldr	r1, [r3, #28]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8b1a      	ldrh	r2, [r3, #24]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	7b5b      	ldrb	r3, [r3, #13]
 8006c80:	2001      	movs	r0, #1
 8006c82:	9000      	str	r0, [sp, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 ff34 	bl	8008af2 <USBH_BulkSendData>
 8006c8a:	e00b      	b.n	8006ca4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	7b5b      	ldrb	r3, [r3, #13]
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	9000      	str	r0, [sp, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f001 ff27 	bl	8008af2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006cac:	e057      	b.n	8006d5e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	7b5b      	ldrb	r3, [r3, #13]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f005 f8bd 	bl	800be34 <USBH_LL_GetURBState>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006cbe:	7afb      	ldrb	r3, [r7, #11]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d136      	bne.n	8006d32 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	8b12      	ldrh	r2, [r2, #24]
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d90e      	bls.n	8006cee <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	8b12      	ldrh	r2, [r2, #24]
 8006cd8:	1a9a      	subs	r2, r3, r2
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	8b12      	ldrh	r2, [r2, #24]
 8006ce6:	441a      	add	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	61da      	str	r2, [r3, #28]
 8006cec:	e002      	b.n	8006cf4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d004      	beq.n	8006d06 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8006d04:	e006      	b.n	8006d14 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f892 	bl	8006e38 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2204      	movs	r2, #4
 8006d18:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006d28:	2300      	movs	r3, #0
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f002 f964 	bl	8008ff8 <osMessageQueuePut>
      break;
 8006d30:	e014      	b.n	8006d5c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d32:	7afb      	ldrb	r3, [r7, #11]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d111      	bne.n	8006d5c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2204      	movs	r2, #4
 8006d44:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006d54:	2300      	movs	r3, #0
 8006d56:	2200      	movs	r2, #0
 8006d58:	f002 f94e 	bl	8008ff8 <osMessageQueuePut>
      break;
 8006d5c:	bf00      	nop
  }
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b086      	sub	sp, #24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d002      	beq.n	8006d8c <CDC_ProcessReception+0x26>
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d00e      	beq.n	8006da8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006d8a:	e051      	b.n	8006e30 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	6a19      	ldr	r1, [r3, #32]
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	8b5a      	ldrh	r2, [r3, #26]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	7b1b      	ldrb	r3, [r3, #12]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 fecf 	bl	8008b3c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2204      	movs	r2, #4
 8006da2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006da6:	e043      	b.n	8006e30 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	7b1b      	ldrb	r3, [r3, #12]
 8006dac:	4619      	mov	r1, r3
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f005 f840 	bl	800be34 <USBH_LL_GetURBState>
 8006db4:	4603      	mov	r3, r0
 8006db6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006db8:	7cfb      	ldrb	r3, [r7, #19]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d137      	bne.n	8006e2e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	7b1b      	ldrb	r3, [r3, #12]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f004 ffa3 	bl	800bd10 <USBH_LL_GetLastXferSize>
 8006dca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d016      	beq.n	8006e04 <CDC_ProcessReception+0x9e>
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	8b5b      	ldrh	r3, [r3, #26]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d110      	bne.n	8006e04 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	1ad2      	subs	r2, r2, r3
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	6a1a      	ldr	r2, [r3, #32]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	441a      	add	r2, r3
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8006e02:	e006      	b.n	8006e12 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f81d 	bl	8006e4c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2204      	movs	r2, #4
 8006e16:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006e26:	2300      	movs	r3, #0
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f002 f8e5 	bl	8008ff8 <osMessageQueuePut>
      break;
 8006e2e:	bf00      	nop
  }
}
 8006e30:	bf00      	nop
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e044      	b.n	8006f16 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	79fa      	ldrb	r2, [r7, #7]
 8006e90:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f841 	bl	8006f2c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2104      	movs	r1, #4
 8006edc:	2010      	movs	r0, #16
 8006ede:	f002 f818 	bl	8008f12 <osMessageQueueNew>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8006eea:	4b0d      	ldr	r3, [pc, #52]	@ (8006f20 <USBH_Init+0xac>)
 8006eec:	4a0d      	ldr	r2, [pc, #52]	@ (8006f24 <USBH_Init+0xb0>)
 8006eee:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f20 <USBH_Init+0xac>)
 8006ef2:	2280      	movs	r2, #128	@ 0x80
 8006ef4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f20 <USBH_Init+0xac>)
 8006ef8:	2218      	movs	r2, #24
 8006efa:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006efc:	4a08      	ldr	r2, [pc, #32]	@ (8006f20 <USBH_Init+0xac>)
 8006efe:	68f9      	ldr	r1, [r7, #12]
 8006f00:	4809      	ldr	r0, [pc, #36]	@ (8006f28 <USBH_Init+0xb4>)
 8006f02:	f001 ff59 	bl	8008db8 <osThreadNew>
 8006f06:	4602      	mov	r2, r0
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f004 fe4a 	bl	800bba8 <USBH_LL_Init>

  return USBH_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	2000022c 	.word	0x2000022c
 8006f24:	0800c31c 	.word	0x0800c31c
 8006f28:	08007bdd 	.word	0x08007bdd

08006f2c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	e009      	b.n	8006f52 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	33e0      	adds	r3, #224	@ 0xe0
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	2200      	movs	r2, #0
 8006f4a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b0f      	cmp	r3, #15
 8006f56:	d9f2      	bls.n	8006f3e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	e009      	b.n	8006f72 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006f68:	2200      	movs	r2, #0
 8006f6a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f78:	d3f1      	bcc.n	8006f5e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2240      	movs	r2, #64	@ 0x40
 8006f9e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	331c      	adds	r3, #28
 8006fca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006fce:	2100      	movs	r1, #0
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f005 f89d 	bl	800c110 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f005 f894 	bl	800c110 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006fee:	2212      	movs	r2, #18
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f005 f88c 	bl	800c110 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006ffe:	223e      	movs	r2, #62	@ 0x3e
 8007000:	2100      	movs	r1, #0
 8007002:	4618      	mov	r0, r3
 8007004:	f005 f884 	bl	800c110 <memset>

  return USBH_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d016      	beq.n	8007054 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10e      	bne.n	800704e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007036:	1c59      	adds	r1, r3, #1
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	33de      	adds	r3, #222	@ 0xde
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]
 800704c:	e004      	b.n	8007058 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800704e:	2302      	movs	r3, #2
 8007050:	73fb      	strb	r3, [r7, #15]
 8007052:	e001      	b.n	8007058 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007054:	2302      	movs	r3, #2
 8007056:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007066:	b480      	push	{r7}
 8007068:	b085      	sub	sp, #20
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	460b      	mov	r3, r1
 8007070:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800707c:	78fa      	ldrb	r2, [r7, #3]
 800707e:	429a      	cmp	r2, r3
 8007080:	d204      	bcs.n	800708c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	78fa      	ldrb	r2, [r7, #3]
 8007086:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800708a:	e001      	b.n	8007090 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800708c:	2302      	movs	r3, #2
 800708e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007090:	7bfb      	ldrb	r3, [r7, #15]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800709e:	b480      	push	{r7}
 80070a0:	b087      	sub	sp, #28
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	4608      	mov	r0, r1
 80070a8:	4611      	mov	r1, r2
 80070aa:	461a      	mov	r2, r3
 80070ac:	4603      	mov	r3, r0
 80070ae:	70fb      	strb	r3, [r7, #3]
 80070b0:	460b      	mov	r3, r1
 80070b2:	70bb      	strb	r3, [r7, #2]
 80070b4:	4613      	mov	r3, r2
 80070b6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80070bc:	2300      	movs	r3, #0
 80070be:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80070c6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070c8:	e025      	b.n	8007116 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	221a      	movs	r2, #26
 80070ce:	fb02 f303 	mul.w	r3, r2, r3
 80070d2:	3308      	adds	r3, #8
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	3302      	adds	r3, #2
 80070da:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	795b      	ldrb	r3, [r3, #5]
 80070e0:	78fa      	ldrb	r2, [r7, #3]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d002      	beq.n	80070ec <USBH_FindInterface+0x4e>
 80070e6:	78fb      	ldrb	r3, [r7, #3]
 80070e8:	2bff      	cmp	r3, #255	@ 0xff
 80070ea:	d111      	bne.n	8007110 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80070f0:	78ba      	ldrb	r2, [r7, #2]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d002      	beq.n	80070fc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80070f6:	78bb      	ldrb	r3, [r7, #2]
 80070f8:	2bff      	cmp	r3, #255	@ 0xff
 80070fa:	d109      	bne.n	8007110 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007100:	787a      	ldrb	r2, [r7, #1]
 8007102:	429a      	cmp	r2, r3
 8007104:	d002      	beq.n	800710c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007106:	787b      	ldrb	r3, [r7, #1]
 8007108:	2bff      	cmp	r3, #255	@ 0xff
 800710a:	d101      	bne.n	8007110 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	e006      	b.n	800711e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007110:	7dfb      	ldrb	r3, [r7, #23]
 8007112:	3301      	adds	r3, #1
 8007114:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d9d6      	bls.n	80070ca <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800711c:	23ff      	movs	r3, #255	@ 0xff
}
 800711e:	4618      	mov	r0, r3
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f004 fd74 	bl	800bc20 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007138:	2101      	movs	r1, #1
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f004 fe8d 	bl	800be5a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af04      	add	r7, sp, #16
 8007152:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007154:	2302      	movs	r3, #2
 8007156:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	d102      	bne.n	800716e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2203      	movs	r2, #3
 800716c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b0b      	cmp	r3, #11
 8007176:	f200 8244 	bhi.w	8007602 <USBH_Process+0x4b6>
 800717a:	a201      	add	r2, pc, #4	@ (adr r2, 8007180 <USBH_Process+0x34>)
 800717c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007180:	080071b1 	.word	0x080071b1
 8007184:	080071ff 	.word	0x080071ff
 8007188:	08007283 	.word	0x08007283
 800718c:	08007581 	.word	0x08007581
 8007190:	08007603 	.word	0x08007603
 8007194:	0800733f 	.word	0x0800733f
 8007198:	0800750b 	.word	0x0800750b
 800719c:	08007391 	.word	0x08007391
 80071a0:	080073cd 	.word	0x080073cd
 80071a4:	08007405 	.word	0x08007405
 80071a8:	08007463 	.word	0x08007463
 80071ac:	08007569 	.word	0x08007569
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 8224 	beq.w	8007606 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80071c4:	20c8      	movs	r0, #200	@ 0xc8
 80071c6:	f004 fe92 	bl	800beee <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f004 fd85 	bl	800bcda <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80071f4:	2300      	movs	r3, #0
 80071f6:	2200      	movs	r2, #0
 80071f8:	f001 fefe 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80071fc:	e203      	b.n	8007606 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007204:	2b01      	cmp	r3, #1
 8007206:	d107      	bne.n	8007218 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	701a      	strb	r2, [r3, #0]
 8007216:	e025      	b.n	8007264 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800721e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007222:	d914      	bls.n	800724e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800722a:	3301      	adds	r3, #1
 800722c:	b2da      	uxtb	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800723a:	2b03      	cmp	r3, #3
 800723c:	d903      	bls.n	8007246 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	220d      	movs	r2, #13
 8007242:	701a      	strb	r2, [r3, #0]
 8007244:	e00e      	b.n	8007264 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e00a      	b.n	8007264 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007254:	f103 020a 	add.w	r2, r3, #10
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800725e:	200a      	movs	r0, #10
 8007260:	f004 fe45 	bl	800beee <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007278:	2300      	movs	r3, #0
 800727a:	2200      	movs	r2, #0
 800727c:	f001 febc 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif
      break;
 8007280:	e1c8      	b.n	8007614 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007292:	2104      	movs	r1, #4
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007298:	2064      	movs	r0, #100	@ 0x64
 800729a:	f004 fe28 	bl	800beee <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f004 fcf4 	bl	800bc8c <USBH_LL_GetSpeed>
 80072a4:	4603      	mov	r3, r0
 80072a6:	461a      	mov	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2205      	movs	r2, #5
 80072b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80072b4:	2100      	movs	r1, #0
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 fc8d 	bl	8008bd6 <USBH_AllocPipe>
 80072bc:	4603      	mov	r3, r0
 80072be:	461a      	mov	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80072c4:	2180      	movs	r1, #128	@ 0x80
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 fc85 	bl	8008bd6 <USBH_AllocPipe>
 80072cc:	4603      	mov	r3, r0
 80072ce:	461a      	mov	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	7919      	ldrb	r1, [r3, #4]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072e8:	9202      	str	r2, [sp, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	9201      	str	r2, [sp, #4]
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	4603      	mov	r3, r0
 80072f2:	2280      	movs	r2, #128	@ 0x80
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 fc3f 	bl	8008b78 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	7959      	ldrb	r1, [r3, #5]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800730e:	9202      	str	r2, [sp, #8]
 8007310:	2200      	movs	r2, #0
 8007312:	9201      	str	r2, [sp, #4]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	4603      	mov	r3, r0
 8007318:	2200      	movs	r2, #0
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 fc2c 	bl	8008b78 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007334:	2300      	movs	r3, #0
 8007336:	2200      	movs	r2, #0
 8007338:	f001 fe5e 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif
      break;
 800733c:	e16a      	b.n	8007614 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f96e 	bl	8007620 <USBH_HandleEnum>
 8007344:	4603      	mov	r3, r0
 8007346:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	f040 815c 	bne.w	800760a <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007360:	2b01      	cmp	r3, #1
 8007362:	d103      	bne.n	800736c <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2208      	movs	r2, #8
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	e002      	b.n	8007372 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2207      	movs	r2, #7
 8007370:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2205      	movs	r2, #5
 8007376:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007386:	2300      	movs	r3, #0
 8007388:	2200      	movs	r2, #0
 800738a:	f001 fe35 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800738e:	e13c      	b.n	800760a <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 8139 	beq.w	800760e <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073a2:	2101      	movs	r1, #1
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2208      	movs	r2, #8
 80073ac:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2205      	movs	r2, #5
 80073b2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80073c2:	2300      	movs	r3, #0
 80073c4:	2200      	movs	r2, #0
 80073c6:	f001 fe17 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80073ca:	e120      	b.n	800760e <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fd12 	bl	8007dfe <USBH_SetCfg>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2209      	movs	r2, #9
 80073e4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80073fa:	2300      	movs	r3, #0
 80073fc:	2200      	movs	r2, #0
 80073fe:	f001 fdfb 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif
      break;
 8007402:	e107      	b.n	8007614 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b00      	cmp	r3, #0
 8007410:	d015      	beq.n	800743e <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007412:	2101      	movs	r1, #1
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fd15 	bl	8007e44 <USBH_SetFeature>
 800741a:	4603      	mov	r3, r0
 800741c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d103      	bne.n	800742e <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	220a      	movs	r2, #10
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	e00a      	b.n	8007444 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b03      	cmp	r3, #3
 8007434:	d106      	bne.n	8007444 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	220a      	movs	r2, #10
 800743a:	701a      	strb	r2, [r3, #0]
 800743c:	e002      	b.n	8007444 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	220a      	movs	r2, #10
 8007442:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007458:	2300      	movs	r3, #0
 800745a:	2200      	movs	r2, #0
 800745c:	f001 fdcc 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif
      break;
 8007460:	e0d8      	b.n	8007614 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007468:	2b00      	cmp	r3, #0
 800746a:	d03f      	beq.n	80074ec <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007474:	2300      	movs	r3, #0
 8007476:	73fb      	strb	r3, [r7, #15]
 8007478:	e016      	b.n	80074a8 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800747a:	7bfa      	ldrb	r2, [r7, #15]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	32de      	adds	r2, #222	@ 0xde
 8007480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007484:	791a      	ldrb	r2, [r3, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800748c:	429a      	cmp	r2, r3
 800748e:	d108      	bne.n	80074a2 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007490:	7bfa      	ldrb	r2, [r7, #15]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	32de      	adds	r2, #222	@ 0xde
 8007496:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80074a0:	e005      	b.n	80074ae <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	3301      	adds	r3, #1
 80074a6:	73fb      	strb	r3, [r7, #15]
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0e5      	beq.n	800747a <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d016      	beq.n	80074e6 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	4798      	blx	r3
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d109      	bne.n	80074de <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2206      	movs	r2, #6
 80074ce:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80074d6:	2103      	movs	r1, #3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
 80074dc:	e006      	b.n	80074ec <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	220d      	movs	r2, #13
 80074e2:	701a      	strb	r2, [r3, #0]
 80074e4:	e002      	b.n	80074ec <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	220d      	movs	r2, #13
 80074ea:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2205      	movs	r2, #5
 80074f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007500:	2300      	movs	r3, #0
 8007502:	2200      	movs	r2, #0
 8007504:	f001 fd78 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif
      break;
 8007508:	e084      	b.n	8007614 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007510:	2b00      	cmp	r3, #0
 8007512:	d017      	beq.n	8007544 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4798      	blx	r3
 8007520:	4603      	mov	r3, r0
 8007522:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d103      	bne.n	8007534 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	220b      	movs	r2, #11
 8007530:	701a      	strb	r2, [r3, #0]
 8007532:	e00a      	b.n	800754a <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b02      	cmp	r3, #2
 800753a:	d106      	bne.n	800754a <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	220d      	movs	r2, #13
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	e002      	b.n	800754a <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	220d      	movs	r2, #13
 8007548:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2205      	movs	r2, #5
 800754e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800755e:	2300      	movs	r3, #0
 8007560:	2200      	movs	r2, #0
 8007562:	f001 fd49 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif
      break;
 8007566:	e055      	b.n	8007614 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d04f      	beq.n	8007612 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	4798      	blx	r3
      }
      break;
 800757e:	e048      	b.n	8007612 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff fccf 	bl	8006f2c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007594:	2b00      	cmp	r3, #0
 8007596:	d009      	beq.n	80075ac <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d005      	beq.n	80075c2 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075bc:	2105      	movs	r1, #5
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d107      	bne.n	80075de <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff fda7 	bl	800712a <USBH_Start>
 80075dc:	e002      	b.n	80075e4 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f004 fb1e 	bl	800bc20 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80075f8:	2300      	movs	r3, #0
 80075fa:	2200      	movs	r2, #0
 80075fc:	f001 fcfc 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif
      break;
 8007600:	e008      	b.n	8007614 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007602:	bf00      	nop
 8007604:	e006      	b.n	8007614 <USBH_Process+0x4c8>
      break;
 8007606:	bf00      	nop
 8007608:	e004      	b.n	8007614 <USBH_Process+0x4c8>
      break;
 800760a:	bf00      	nop
 800760c:	e002      	b.n	8007614 <USBH_Process+0x4c8>
    break;
 800760e:	bf00      	nop
 8007610:	e000      	b.n	8007614 <USBH_Process+0x4c8>
      break;
 8007612:	bf00      	nop
  }
  return USBH_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop

08007620 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af04      	add	r7, sp, #16
 8007626:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007628:	2301      	movs	r3, #1
 800762a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800762c:	2301      	movs	r3, #1
 800762e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	785b      	ldrb	r3, [r3, #1]
 8007634:	2b07      	cmp	r3, #7
 8007636:	f200 8204 	bhi.w	8007a42 <USBH_HandleEnum+0x422>
 800763a:	a201      	add	r2, pc, #4	@ (adr r2, 8007640 <USBH_HandleEnum+0x20>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007661 	.word	0x08007661
 8007644:	0800771b 	.word	0x0800771b
 8007648:	08007785 	.word	0x08007785
 800764c:	0800780f 	.word	0x0800780f
 8007650:	08007879 	.word	0x08007879
 8007654:	080078e9 	.word	0x080078e9
 8007658:	08007985 	.word	0x08007985
 800765c:	08007a03 	.word	0x08007a03
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007660:	2108      	movs	r1, #8
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fae8 	bl	8007c38 <USBH_Get_DevDesc>
 8007668:	4603      	mov	r3, r0
 800766a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d12e      	bne.n	80076d0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	7919      	ldrb	r1, [r3, #4]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007696:	9202      	str	r2, [sp, #8]
 8007698:	2200      	movs	r2, #0
 800769a:	9201      	str	r2, [sp, #4]
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	4603      	mov	r3, r0
 80076a0:	2280      	movs	r2, #128	@ 0x80
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 fa68 	bl	8008b78 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	7959      	ldrb	r1, [r3, #5]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076bc:	9202      	str	r2, [sp, #8]
 80076be:	2200      	movs	r2, #0
 80076c0:	9201      	str	r2, [sp, #4]
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	4603      	mov	r3, r0
 80076c6:	2200      	movs	r2, #0
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 fa55 	bl	8008b78 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076ce:	e1ba      	b.n	8007a46 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	f040 81b7 	bne.w	8007a46 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80076de:	3301      	adds	r3, #1
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d903      	bls.n	80076fa <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	220d      	movs	r2, #13
 80076f6:	701a      	strb	r2, [r3, #0]
      break;
 80076f8:	e1a5      	b.n	8007a46 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	795b      	ldrb	r3, [r3, #5]
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 fa89 	bl	8008c18 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	791b      	ldrb	r3, [r3, #4]
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 fa83 	bl	8008c18 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	701a      	strb	r2, [r3, #0]
      break;
 8007718:	e195      	b.n	8007a46 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800771a:	2112      	movs	r1, #18
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fa8b 	bl	8007c38 <USBH_Get_DevDesc>
 8007722:	4603      	mov	r3, r0
 8007724:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d103      	bne.n	8007734 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007732:	e18a      	b.n	8007a4a <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	2b03      	cmp	r3, #3
 8007738:	f040 8187 	bne.w	8007a4a <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007742:	3301      	adds	r3, #1
 8007744:	b2da      	uxtb	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007752:	2b03      	cmp	r3, #3
 8007754:	d903      	bls.n	800775e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	220d      	movs	r2, #13
 800775a:	701a      	strb	r2, [r3, #0]
      break;
 800775c:	e175      	b.n	8007a4a <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	795b      	ldrb	r3, [r3, #5]
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 fa57 	bl	8008c18 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	791b      	ldrb	r3, [r3, #4]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 fa51 	bl	8008c18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	701a      	strb	r2, [r3, #0]
      break;
 8007782:	e162      	b.n	8007a4a <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007784:	2101      	movs	r1, #1
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fb15 	bl	8007db6 <USBH_SetAddress>
 800778c:	4603      	mov	r3, r0
 800778e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d130      	bne.n	80077f8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007796:	2002      	movs	r0, #2
 8007798:	f004 fba9 	bl	800beee <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2203      	movs	r2, #3
 80077a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	7919      	ldrb	r1, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80077be:	9202      	str	r2, [sp, #8]
 80077c0:	2200      	movs	r2, #0
 80077c2:	9201      	str	r2, [sp, #4]
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	4603      	mov	r3, r0
 80077c8:	2280      	movs	r2, #128	@ 0x80
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 f9d4 	bl	8008b78 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	7959      	ldrb	r1, [r3, #5]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077e4:	9202      	str	r2, [sp, #8]
 80077e6:	2200      	movs	r2, #0
 80077e8:	9201      	str	r2, [sp, #4]
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	4603      	mov	r3, r0
 80077ee:	2200      	movs	r2, #0
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 f9c1 	bl	8008b78 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077f6:	e12a      	b.n	8007a4e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077f8:	7bbb      	ldrb	r3, [r7, #14]
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	f040 8127 	bne.w	8007a4e <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	220d      	movs	r2, #13
 8007804:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	705a      	strb	r2, [r3, #1]
      break;
 800780c:	e11f      	b.n	8007a4e <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800780e:	2109      	movs	r1, #9
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fa3d 	bl	8007c90 <USBH_Get_CfgDesc>
 8007816:	4603      	mov	r3, r0
 8007818:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d103      	bne.n	8007828 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2204      	movs	r2, #4
 8007824:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007826:	e114      	b.n	8007a52 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	2b03      	cmp	r3, #3
 800782c:	f040 8111 	bne.w	8007a52 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007836:	3301      	adds	r3, #1
 8007838:	b2da      	uxtb	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007846:	2b03      	cmp	r3, #3
 8007848:	d903      	bls.n	8007852 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	220d      	movs	r2, #13
 800784e:	701a      	strb	r2, [r3, #0]
      break;
 8007850:	e0ff      	b.n	8007a52 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	795b      	ldrb	r3, [r3, #5]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 f9dd 	bl	8008c18 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	791b      	ldrb	r3, [r3, #4]
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 f9d7 	bl	8008c18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	701a      	strb	r2, [r3, #0]
      break;
 8007876:	e0ec      	b.n	8007a52 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fa05 	bl	8007c90 <USBH_Get_CfgDesc>
 8007886:	4603      	mov	r3, r0
 8007888:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800788a:	7bbb      	ldrb	r3, [r7, #14]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d103      	bne.n	8007898 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2205      	movs	r2, #5
 8007894:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007896:	e0de      	b.n	8007a56 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	2b03      	cmp	r3, #3
 800789c:	f040 80db 	bne.w	8007a56 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078a6:	3301      	adds	r3, #1
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d903      	bls.n	80078c2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	220d      	movs	r2, #13
 80078be:	701a      	strb	r2, [r3, #0]
      break;
 80078c0:	e0c9      	b.n	8007a56 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	795b      	ldrb	r3, [r3, #5]
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 f9a5 	bl	8008c18 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	791b      	ldrb	r3, [r3, #4]
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 f99f 	bl	8008c18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
      break;
 80078e6:	e0b6      	b.n	8007a56 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d036      	beq.n	8007960 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078fe:	23ff      	movs	r3, #255	@ 0xff
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f9ef 	bl	8007ce4 <USBH_Get_StringDesc>
 8007906:	4603      	mov	r3, r0
 8007908:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d111      	bne.n	8007934 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2206      	movs	r2, #6
 8007914:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2205      	movs	r2, #5
 800791a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800792a:	2300      	movs	r3, #0
 800792c:	2200      	movs	r2, #0
 800792e:	f001 fb63 	bl	8008ff8 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007932:	e092      	b.n	8007a5a <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	2b03      	cmp	r3, #3
 8007938:	f040 808f 	bne.w	8007a5a <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2206      	movs	r2, #6
 8007940:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2205      	movs	r2, #5
 8007946:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007956:	2300      	movs	r3, #0
 8007958:	2200      	movs	r2, #0
 800795a:	f001 fb4d 	bl	8008ff8 <osMessageQueuePut>
      break;
 800795e:	e07c      	b.n	8007a5a <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2206      	movs	r2, #6
 8007964:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2205      	movs	r2, #5
 800796a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800797a:	2300      	movs	r3, #0
 800797c:	2200      	movs	r2, #0
 800797e:	f001 fb3b 	bl	8008ff8 <osMessageQueuePut>
      break;
 8007982:	e06a      	b.n	8007a5a <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800798a:	2b00      	cmp	r3, #0
 800798c:	d027      	beq.n	80079de <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800799a:	23ff      	movs	r3, #255	@ 0xff
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f9a1 	bl	8007ce4 <USBH_Get_StringDesc>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d103      	bne.n	80079b4 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2207      	movs	r2, #7
 80079b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079b2:	e054      	b.n	8007a5e <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d151      	bne.n	8007a5e <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2207      	movs	r2, #7
 80079be:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2205      	movs	r2, #5
 80079c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80079d4:	2300      	movs	r3, #0
 80079d6:	2200      	movs	r2, #0
 80079d8:	f001 fb0e 	bl	8008ff8 <osMessageQueuePut>
      break;
 80079dc:	e03f      	b.n	8007a5e <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2207      	movs	r2, #7
 80079e2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2205      	movs	r2, #5
 80079e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80079f8:	2300      	movs	r3, #0
 80079fa:	2200      	movs	r2, #0
 80079fc:	f001 fafc 	bl	8008ff8 <osMessageQueuePut>
      break;
 8007a00:	e02d      	b.n	8007a5e <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d017      	beq.n	8007a3c <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a18:	23ff      	movs	r3, #255	@ 0xff
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f962 	bl	8007ce4 <USBH_Get_StringDesc>
 8007a20:	4603      	mov	r3, r0
 8007a22:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d102      	bne.n	8007a30 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a2e:	e018      	b.n	8007a62 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d115      	bne.n	8007a62 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	73fb      	strb	r3, [r7, #15]
      break;
 8007a3a:	e012      	b.n	8007a62 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a40:	e00f      	b.n	8007a62 <USBH_HandleEnum+0x442>

    default:
      break;
 8007a42:	bf00      	nop
 8007a44:	e00e      	b.n	8007a64 <USBH_HandleEnum+0x444>
      break;
 8007a46:	bf00      	nop
 8007a48:	e00c      	b.n	8007a64 <USBH_HandleEnum+0x444>
      break;
 8007a4a:	bf00      	nop
 8007a4c:	e00a      	b.n	8007a64 <USBH_HandleEnum+0x444>
      break;
 8007a4e:	bf00      	nop
 8007a50:	e008      	b.n	8007a64 <USBH_HandleEnum+0x444>
      break;
 8007a52:	bf00      	nop
 8007a54:	e006      	b.n	8007a64 <USBH_HandleEnum+0x444>
      break;
 8007a56:	bf00      	nop
 8007a58:	e004      	b.n	8007a64 <USBH_HandleEnum+0x444>
      break;
 8007a5a:	bf00      	nop
 8007a5c:	e002      	b.n	8007a64 <USBH_HandleEnum+0x444>
      break;
 8007a5e:	bf00      	nop
 8007a60:	e000      	b.n	8007a64 <USBH_HandleEnum+0x444>
      break;
 8007a62:	bf00      	nop
  }
  return Status;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop

08007a70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f804 	bl	8007ab2 <USBH_HandleSof>
}
 8007aaa:	bf00      	nop
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b0b      	cmp	r3, #11
 8007ac2:	d10a      	bne.n	8007ada <USBH_HandleSof+0x28>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d005      	beq.n	8007ada <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	4798      	blx	r3
  }
}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007b06:	2300      	movs	r3, #0
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f001 fa75 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif

  return;
 8007b0e:	bf00      	nop
}
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007b26:	bf00      	nop
}
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b082      	sub	sp, #8
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007b66:	2300      	movs	r3, #0
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f001 fa45 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f004 f85c 	bl	800bc56 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	791b      	ldrb	r3, [r3, #4]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 f837 	bl	8008c18 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	795b      	ldrb	r3, [r3, #5]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 f831 	bl	8008c18 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007bca:	2300      	movs	r3, #0
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f001 fa13 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f001 fa5f 	bl	80090b8 <osMessageQueueGet>
 8007bfa:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1f0      	bne.n	8007be4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff faa2 	bl	800714c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007c08:	e7ec      	b.n	8007be4 <USBH_Process_OS+0x8>

08007c0a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007c26:	2300      	movs	r3, #0
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f001 f9e5 	bl	8008ff8 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007c44:	887b      	ldrh	r3, [r7, #2]
 8007c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c4a:	d901      	bls.n	8007c50 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e01b      	b.n	8007c88 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007c56:	887b      	ldrh	r3, [r7, #2]
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c60:	2100      	movs	r1, #0
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f872 	bl	8007d4c <USBH_GetDescriptor>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d109      	bne.n	8007c86 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007c78:	887a      	ldrh	r2, [r7, #2]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f929 	bl	8007ed4 <USBH_ParseDevDesc>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	331c      	adds	r3, #28
 8007ca0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007ca2:	887b      	ldrh	r3, [r7, #2]
 8007ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ca8:	d901      	bls.n	8007cae <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e016      	b.n	8007cdc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007cae:	887b      	ldrh	r3, [r7, #2]
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cb8:	2100      	movs	r1, #0
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f846 	bl	8007d4c <USBH_GetDescriptor>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d107      	bne.n	8007cda <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007cca:	887b      	ldrh	r3, [r7, #2]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	68b9      	ldr	r1, [r7, #8]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f9af 	bl	8008034 <USBH_ParseCfgDesc>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	607a      	str	r2, [r7, #4]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	72fb      	strb	r3, [r7, #11]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007cf8:	893b      	ldrh	r3, [r7, #8]
 8007cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cfe:	d802      	bhi.n	8007d06 <USBH_Get_StringDesc+0x22>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e01c      	b.n	8007d44 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007d12:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007d1a:	893b      	ldrh	r3, [r7, #8]
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	2100      	movs	r1, #0
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 f812 	bl	8007d4c <USBH_GetDescriptor>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d107      	bne.n	8007d42 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007d38:	893a      	ldrh	r2, [r7, #8]
 8007d3a:	6879      	ldr	r1, [r7, #4]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 fb8d 	bl	800845c <USBH_ParseStringDesc>
  }

  return status;
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	607b      	str	r3, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	72fb      	strb	r3, [r7, #11]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	789b      	ldrb	r3, [r3, #2]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d11c      	bne.n	8007da0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007d66:	7afb      	ldrb	r3, [r7, #11]
 8007d68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2206      	movs	r2, #6
 8007d76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	893a      	ldrh	r2, [r7, #8]
 8007d7c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007d7e:	893b      	ldrh	r3, [r7, #8]
 8007d80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007d84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d88:	d104      	bne.n	8007d94 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f240 4209 	movw	r2, #1033	@ 0x409
 8007d90:	829a      	strh	r2, [r3, #20]
 8007d92:	e002      	b.n	8007d9a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8b3a      	ldrh	r2, [r7, #24]
 8007d9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007da0:	8b3b      	ldrh	r3, [r7, #24]
 8007da2:	461a      	mov	r2, r3
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 fba5 	bl	80084f6 <USBH_CtlReq>
 8007dac:	4603      	mov	r3, r0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	789b      	ldrb	r3, [r3, #2]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d10f      	bne.n	8007dea <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2205      	movs	r2, #5
 8007dd4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007dea:	2200      	movs	r2, #0
 8007dec:	2100      	movs	r1, #0
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fb81 	bl	80084f6 <USBH_CtlReq>
 8007df4:	4603      	mov	r3, r0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	460b      	mov	r3, r1
 8007e08:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	789b      	ldrb	r3, [r3, #2]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d10e      	bne.n	8007e30 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2209      	movs	r2, #9
 8007e1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	887a      	ldrh	r2, [r7, #2]
 8007e22:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e30:	2200      	movs	r2, #0
 8007e32:	2100      	movs	r1, #0
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fb5e 	bl	80084f6 <USBH_CtlReq>
 8007e3a:	4603      	mov	r3, r0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	789b      	ldrb	r3, [r3, #2]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d10f      	bne.n	8007e78 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2203      	movs	r2, #3
 8007e62:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fb3a 	bl	80084f6 <USBH_CtlReq>
 8007e82:	4603      	mov	r3, r0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	789b      	ldrb	r3, [r3, #2]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d10f      	bne.n	8007ec0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007eb2:	78fb      	ldrb	r3, [r7, #3]
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fb16 	bl	80084f6 <USBH_CtlReq>
 8007eca:	4603      	mov	r3, r0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007ee8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	e094      	b.n	8008022 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	781a      	ldrb	r2, [r3, #0]
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	785a      	ldrb	r2, [r3, #1]
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	3302      	adds	r3, #2
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	3303      	adds	r3, #3
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	021b      	lsls	r3, r3, #8
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	791a      	ldrb	r2, [r3, #4]
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	795a      	ldrb	r2, [r3, #5]
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	799a      	ldrb	r2, [r3, #6]
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	79da      	ldrb	r2, [r3, #7]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d004      	beq.n	8007f56 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d11b      	bne.n	8007f8e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	79db      	ldrb	r3, [r3, #7]
 8007f5a:	2b20      	cmp	r3, #32
 8007f5c:	dc0f      	bgt.n	8007f7e <USBH_ParseDevDesc+0xaa>
 8007f5e:	2b08      	cmp	r3, #8
 8007f60:	db0f      	blt.n	8007f82 <USBH_ParseDevDesc+0xae>
 8007f62:	3b08      	subs	r3, #8
 8007f64:	4a32      	ldr	r2, [pc, #200]	@ (8008030 <USBH_ParseDevDesc+0x15c>)
 8007f66:	fa22 f303 	lsr.w	r3, r2, r3
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bf14      	ite	ne
 8007f72:	2301      	movne	r3, #1
 8007f74:	2300      	moveq	r3, #0
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d106      	bne.n	8007f8a <USBH_ParseDevDesc+0xb6>
 8007f7c:	e001      	b.n	8007f82 <USBH_ParseDevDesc+0xae>
 8007f7e:	2b40      	cmp	r3, #64	@ 0x40
 8007f80:	d003      	beq.n	8007f8a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2208      	movs	r2, #8
 8007f86:	71da      	strb	r2, [r3, #7]
        break;
 8007f88:	e000      	b.n	8007f8c <USBH_ParseDevDesc+0xb8>
        break;
 8007f8a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007f8c:	e00e      	b.n	8007fac <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d107      	bne.n	8007fa8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	79db      	ldrb	r3, [r3, #7]
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d005      	beq.n	8007fac <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	2208      	movs	r2, #8
 8007fa4:	71da      	strb	r2, [r3, #7]
 8007fa6:	e001      	b.n	8007fac <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	2b08      	cmp	r3, #8
 8007fb0:	d936      	bls.n	8008020 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	3308      	adds	r3, #8
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	3309      	adds	r3, #9
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	021b      	lsls	r3, r3, #8
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	330a      	adds	r3, #10
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	330b      	adds	r3, #11
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	021b      	lsls	r3, r3, #8
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	330c      	adds	r3, #12
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	461a      	mov	r2, r3
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	330d      	adds	r3, #13
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	021b      	lsls	r3, r3, #8
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	7b9a      	ldrb	r2, [r3, #14]
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	7bda      	ldrb	r2, [r3, #15]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	7c1a      	ldrb	r2, [r3, #16]
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	7c5a      	ldrb	r2, [r3, #17]
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
}
 8008022:	4618      	mov	r0, r3
 8008024:	371c      	adds	r7, #28
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	01000101 	.word	0x01000101

08008034 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08c      	sub	sp, #48	@ 0x30
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	4613      	mov	r3, r2
 8008040:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008048:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008062:	2302      	movs	r3, #2
 8008064:	e0da      	b.n	800821c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800806a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	2b09      	cmp	r3, #9
 8008070:	d002      	beq.n	8008078 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008074:	2209      	movs	r2, #9
 8008076:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	781a      	ldrb	r2, [r3, #0]
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	785a      	ldrb	r2, [r3, #1]
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	3302      	adds	r3, #2
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	3303      	adds	r3, #3
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	021b      	lsls	r3, r3, #8
 8008098:	b29b      	uxth	r3, r3
 800809a:	4313      	orrs	r3, r2
 800809c:	b29b      	uxth	r3, r3
 800809e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080a2:	bf28      	it	cs
 80080a4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	791a      	ldrb	r2, [r3, #4]
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	795a      	ldrb	r2, [r3, #5]
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	799a      	ldrb	r2, [r3, #6]
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	79da      	ldrb	r2, [r3, #7]
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	7a1a      	ldrb	r2, [r3, #8]
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80080d6:	88fb      	ldrh	r3, [r7, #6]
 80080d8:	2b09      	cmp	r3, #9
 80080da:	f240 809d 	bls.w	8008218 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80080de:	2309      	movs	r3, #9
 80080e0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80080e2:	2300      	movs	r3, #0
 80080e4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080e6:	e081      	b.n	80081ec <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080e8:	f107 0316 	add.w	r3, r7, #22
 80080ec:	4619      	mov	r1, r3
 80080ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080f0:	f000 f9e7 	bl	80084c2 <USBH_GetNextDesc>
 80080f4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80080f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f8:	785b      	ldrb	r3, [r3, #1]
 80080fa:	2b04      	cmp	r3, #4
 80080fc:	d176      	bne.n	80081ec <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80080fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	2b09      	cmp	r3, #9
 8008104:	d002      	beq.n	800810c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008108:	2209      	movs	r2, #9
 800810a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800810c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008110:	221a      	movs	r2, #26
 8008112:	fb02 f303 	mul.w	r3, r2, r3
 8008116:	3308      	adds	r3, #8
 8008118:	6a3a      	ldr	r2, [r7, #32]
 800811a:	4413      	add	r3, r2
 800811c:	3302      	adds	r3, #2
 800811e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008120:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008122:	69f8      	ldr	r0, [r7, #28]
 8008124:	f000 f87e 	bl	8008224 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800812e:	2300      	movs	r3, #0
 8008130:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008132:	e043      	b.n	80081bc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008134:	f107 0316 	add.w	r3, r7, #22
 8008138:	4619      	mov	r1, r3
 800813a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800813c:	f000 f9c1 	bl	80084c2 <USBH_GetNextDesc>
 8008140:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008144:	785b      	ldrb	r3, [r3, #1]
 8008146:	2b05      	cmp	r3, #5
 8008148:	d138      	bne.n	80081bc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	795b      	ldrb	r3, [r3, #5]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d113      	bne.n	800817a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008156:	2b02      	cmp	r3, #2
 8008158:	d003      	beq.n	8008162 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	799b      	ldrb	r3, [r3, #6]
 800815e:	2b03      	cmp	r3, #3
 8008160:	d10b      	bne.n	800817a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	79db      	ldrb	r3, [r3, #7]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10b      	bne.n	8008182 <USBH_ParseCfgDesc+0x14e>
 800816a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	2b09      	cmp	r3, #9
 8008170:	d007      	beq.n	8008182 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008174:	2209      	movs	r2, #9
 8008176:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008178:	e003      	b.n	8008182 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817c:	2207      	movs	r2, #7
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	e000      	b.n	8008184 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008182:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008188:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800818c:	3201      	adds	r2, #1
 800818e:	00d2      	lsls	r2, r2, #3
 8008190:	211a      	movs	r1, #26
 8008192:	fb01 f303 	mul.w	r3, r1, r3
 8008196:	4413      	add	r3, r2
 8008198:	3308      	adds	r3, #8
 800819a:	6a3a      	ldr	r2, [r7, #32]
 800819c:	4413      	add	r3, r2
 800819e:	3304      	adds	r3, #4
 80081a0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80081a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081a4:	69b9      	ldr	r1, [r7, #24]
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 f870 	bl	800828c <USBH_ParseEPDesc>
 80081ac:	4603      	mov	r3, r0
 80081ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80081b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081b6:	3301      	adds	r3, #1
 80081b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	791b      	ldrb	r3, [r3, #4]
 80081c0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d204      	bcs.n	80081d2 <USBH_ParseCfgDesc+0x19e>
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	885a      	ldrh	r2, [r3, #2]
 80081cc:	8afb      	ldrh	r3, [r7, #22]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d8b0      	bhi.n	8008134 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	791b      	ldrb	r3, [r3, #4]
 80081d6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80081da:	429a      	cmp	r2, r3
 80081dc:	d201      	bcs.n	80081e2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80081de:	2303      	movs	r3, #3
 80081e0:	e01c      	b.n	800821c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80081e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081e6:	3301      	adds	r3, #1
 80081e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80081ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d805      	bhi.n	8008200 <USBH_ParseCfgDesc+0x1cc>
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	885a      	ldrh	r2, [r3, #2]
 80081f8:	8afb      	ldrh	r3, [r7, #22]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	f63f af74 	bhi.w	80080e8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	791b      	ldrb	r3, [r3, #4]
 8008204:	2b02      	cmp	r3, #2
 8008206:	bf28      	it	cs
 8008208:	2302      	movcs	r3, #2
 800820a:	b2db      	uxtb	r3, r3
 800820c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008210:	429a      	cmp	r2, r3
 8008212:	d201      	bcs.n	8008218 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008214:	2303      	movs	r3, #3
 8008216:	e001      	b.n	800821c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008218:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800821c:	4618      	mov	r0, r3
 800821e:	3730      	adds	r7, #48	@ 0x30
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781a      	ldrb	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	785a      	ldrb	r2, [r3, #1]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	789a      	ldrb	r2, [r3, #2]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	78da      	ldrb	r2, [r3, #3]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	3304      	adds	r3, #4
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	2b02      	cmp	r3, #2
 8008256:	bf28      	it	cs
 8008258:	2302      	movcs	r3, #2
 800825a:	b2da      	uxtb	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	795a      	ldrb	r2, [r3, #5]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	799a      	ldrb	r2, [r3, #6]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	79da      	ldrb	r2, [r3, #7]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	7a1a      	ldrb	r2, [r3, #8]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	721a      	strb	r2, [r3, #8]
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	785a      	ldrb	r2, [r3, #1]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	789a      	ldrb	r2, [r3, #2]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	78da      	ldrb	r2, [r3, #3]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	3304      	adds	r3, #4
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	461a      	mov	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3305      	adds	r3, #5
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	021b      	lsls	r3, r3, #8
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	4313      	orrs	r3, r2
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	799a      	ldrb	r2, [r3, #6]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	889b      	ldrh	r3, [r3, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d009      	beq.n	80082fa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80082ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082ee:	d804      	bhi.n	80082fa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80082f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082f8:	d901      	bls.n	80082fe <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80082fa:	2303      	movs	r3, #3
 80082fc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008304:	2b00      	cmp	r3, #0
 8008306:	d136      	bne.n	8008376 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	78db      	ldrb	r3, [r3, #3]
 800830c:	f003 0303 	and.w	r3, r3, #3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d108      	bne.n	8008326 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	889b      	ldrh	r3, [r3, #4]
 8008318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800831c:	f240 8097 	bls.w	800844e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008320:	2303      	movs	r3, #3
 8008322:	75fb      	strb	r3, [r7, #23]
 8008324:	e093      	b.n	800844e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	78db      	ldrb	r3, [r3, #3]
 800832a:	f003 0303 	and.w	r3, r3, #3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d107      	bne.n	8008342 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	889b      	ldrh	r3, [r3, #4]
 8008336:	2b40      	cmp	r3, #64	@ 0x40
 8008338:	f240 8089 	bls.w	800844e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800833c:	2303      	movs	r3, #3
 800833e:	75fb      	strb	r3, [r7, #23]
 8008340:	e085      	b.n	800844e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	78db      	ldrb	r3, [r3, #3]
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	2b01      	cmp	r3, #1
 800834c:	d005      	beq.n	800835a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	78db      	ldrb	r3, [r3, #3]
 8008352:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008356:	2b03      	cmp	r3, #3
 8008358:	d10a      	bne.n	8008370 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	799b      	ldrb	r3, [r3, #6]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <USBH_ParseEPDesc+0xde>
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	799b      	ldrb	r3, [r3, #6]
 8008366:	2b10      	cmp	r3, #16
 8008368:	d970      	bls.n	800844c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800836a:	2303      	movs	r3, #3
 800836c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800836e:	e06d      	b.n	800844c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008370:	2303      	movs	r3, #3
 8008372:	75fb      	strb	r3, [r7, #23]
 8008374:	e06b      	b.n	800844e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800837c:	2b01      	cmp	r3, #1
 800837e:	d13c      	bne.n	80083fa <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	78db      	ldrb	r3, [r3, #3]
 8008384:	f003 0303 	and.w	r3, r3, #3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d005      	beq.n	8008398 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	78db      	ldrb	r3, [r3, #3]
 8008390:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008394:	2b00      	cmp	r3, #0
 8008396:	d106      	bne.n	80083a6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	889b      	ldrh	r3, [r3, #4]
 800839c:	2b40      	cmp	r3, #64	@ 0x40
 800839e:	d956      	bls.n	800844e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80083a0:	2303      	movs	r3, #3
 80083a2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80083a4:	e053      	b.n	800844e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	78db      	ldrb	r3, [r3, #3]
 80083aa:	f003 0303 	and.w	r3, r3, #3
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d10e      	bne.n	80083d0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	799b      	ldrb	r3, [r3, #6]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80083be:	2b10      	cmp	r3, #16
 80083c0:	d803      	bhi.n	80083ca <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80083c6:	2b40      	cmp	r3, #64	@ 0x40
 80083c8:	d941      	bls.n	800844e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80083ca:	2303      	movs	r3, #3
 80083cc:	75fb      	strb	r3, [r7, #23]
 80083ce:	e03e      	b.n	800844e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	78db      	ldrb	r3, [r3, #3]
 80083d4:	f003 0303 	and.w	r3, r3, #3
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d10b      	bne.n	80083f4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	799b      	ldrb	r3, [r3, #6]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d004      	beq.n	80083ee <USBH_ParseEPDesc+0x162>
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	889b      	ldrh	r3, [r3, #4]
 80083e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083ec:	d32f      	bcc.n	800844e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80083ee:	2303      	movs	r3, #3
 80083f0:	75fb      	strb	r3, [r7, #23]
 80083f2:	e02c      	b.n	800844e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80083f4:	2303      	movs	r3, #3
 80083f6:	75fb      	strb	r3, [r7, #23]
 80083f8:	e029      	b.n	800844e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008400:	2b02      	cmp	r3, #2
 8008402:	d120      	bne.n	8008446 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	78db      	ldrb	r3, [r3, #3]
 8008408:	f003 0303 	and.w	r3, r3, #3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d106      	bne.n	800841e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	889b      	ldrh	r3, [r3, #4]
 8008414:	2b08      	cmp	r3, #8
 8008416:	d01a      	beq.n	800844e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008418:	2303      	movs	r3, #3
 800841a:	75fb      	strb	r3, [r7, #23]
 800841c:	e017      	b.n	800844e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	78db      	ldrb	r3, [r3, #3]
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	2b03      	cmp	r3, #3
 8008428:	d10a      	bne.n	8008440 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	799b      	ldrb	r3, [r3, #6]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <USBH_ParseEPDesc+0x1ae>
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	889b      	ldrh	r3, [r3, #4]
 8008436:	2b08      	cmp	r3, #8
 8008438:	d909      	bls.n	800844e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800843a:	2303      	movs	r3, #3
 800843c:	75fb      	strb	r3, [r7, #23]
 800843e:	e006      	b.n	800844e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008440:	2303      	movs	r3, #3
 8008442:	75fb      	strb	r3, [r7, #23]
 8008444:	e003      	b.n	800844e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008446:	2303      	movs	r3, #3
 8008448:	75fb      	strb	r3, [r7, #23]
 800844a:	e000      	b.n	800844e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800844c:	bf00      	nop
  }

  return status;
 800844e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008450:	4618      	mov	r0, r3
 8008452:	371c      	adds	r7, #28
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800845c:	b480      	push	{r7}
 800845e:	b087      	sub	sp, #28
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	4613      	mov	r3, r2
 8008468:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3301      	adds	r3, #1
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b03      	cmp	r3, #3
 8008472:	d120      	bne.n	80084b6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	1e9a      	subs	r2, r3, #2
 800847a:	88fb      	ldrh	r3, [r7, #6]
 800847c:	4293      	cmp	r3, r2
 800847e:	bf28      	it	cs
 8008480:	4613      	movcs	r3, r2
 8008482:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3302      	adds	r3, #2
 8008488:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800848a:	2300      	movs	r3, #0
 800848c:	82fb      	strh	r3, [r7, #22]
 800848e:	e00b      	b.n	80084a8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008490:	8afb      	ldrh	r3, [r7, #22]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	781a      	ldrb	r2, [r3, #0]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	3301      	adds	r3, #1
 80084a0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80084a2:	8afb      	ldrh	r3, [r7, #22]
 80084a4:	3302      	adds	r3, #2
 80084a6:	82fb      	strh	r3, [r7, #22]
 80084a8:	8afa      	ldrh	r2, [r7, #22]
 80084aa:	8abb      	ldrh	r3, [r7, #20]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d3ef      	bcc.n	8008490 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2200      	movs	r2, #0
 80084b4:	701a      	strb	r2, [r3, #0]
  }
}
 80084b6:	bf00      	nop
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b085      	sub	sp, #20
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
 80084ca:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	7812      	ldrb	r2, [r2, #0]
 80084d4:	4413      	add	r3, r2
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4413      	add	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80084e8:	68fb      	ldr	r3, [r7, #12]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b086      	sub	sp, #24
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	60b9      	str	r1, [r7, #8]
 8008500:	4613      	mov	r3, r2
 8008502:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008504:	2301      	movs	r3, #1
 8008506:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	789b      	ldrb	r3, [r3, #2]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d002      	beq.n	8008516 <USBH_CtlReq+0x20>
 8008510:	2b02      	cmp	r3, #2
 8008512:	d01d      	beq.n	8008550 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008514:	e043      	b.n	800859e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	88fa      	ldrh	r2, [r7, #6]
 8008520:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2201      	movs	r2, #1
 8008526:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2202      	movs	r2, #2
 800852c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800852e:	2301      	movs	r3, #1
 8008530:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2203      	movs	r2, #3
 8008536:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008546:	2300      	movs	r3, #0
 8008548:	2200      	movs	r2, #0
 800854a:	f000 fd55 	bl	8008ff8 <osMessageQueuePut>
      break;
 800854e:	e026      	b.n	800859e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 f829 	bl	80085a8 <USBH_HandleControl>
 8008556:	4603      	mov	r3, r0
 8008558:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <USBH_CtlReq+0x70>
 8008560:	7dfb      	ldrb	r3, [r7, #23]
 8008562:	2b03      	cmp	r3, #3
 8008564:	d106      	bne.n	8008574 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2201      	movs	r2, #1
 800856a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	761a      	strb	r2, [r3, #24]
 8008572:	e005      	b.n	8008580 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008574:	7dfb      	ldrb	r3, [r7, #23]
 8008576:	2b02      	cmp	r3, #2
 8008578:	d102      	bne.n	8008580 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2201      	movs	r2, #1
 800857e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2203      	movs	r2, #3
 8008584:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008594:	2300      	movs	r3, #0
 8008596:	2200      	movs	r2, #0
 8008598:	f000 fd2e 	bl	8008ff8 <osMessageQueuePut>
      break;
 800859c:	bf00      	nop
  }
  return status;
 800859e:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80085b0:	2301      	movs	r3, #1
 80085b2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	7e1b      	ldrb	r3, [r3, #24]
 80085bc:	3b01      	subs	r3, #1
 80085be:	2b0a      	cmp	r3, #10
 80085c0:	f200 8229 	bhi.w	8008a16 <USBH_HandleControl+0x46e>
 80085c4:	a201      	add	r2, pc, #4	@ (adr r2, 80085cc <USBH_HandleControl+0x24>)
 80085c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ca:	bf00      	nop
 80085cc:	080085f9 	.word	0x080085f9
 80085d0:	08008613 	.word	0x08008613
 80085d4:	080086b5 	.word	0x080086b5
 80085d8:	080086db 	.word	0x080086db
 80085dc:	08008767 	.word	0x08008767
 80085e0:	08008791 	.word	0x08008791
 80085e4:	08008853 	.word	0x08008853
 80085e8:	08008875 	.word	0x08008875
 80085ec:	08008907 	.word	0x08008907
 80085f0:	0800892d 	.word	0x0800892d
 80085f4:	080089bf 	.word	0x080089bf
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f103 0110 	add.w	r1, r3, #16
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	795b      	ldrb	r3, [r3, #5]
 8008602:	461a      	mov	r2, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fa17 	bl	8008a38 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2202      	movs	r2, #2
 800860e:	761a      	strb	r2, [r3, #24]
      break;
 8008610:	e20c      	b.n	8008a2c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	795b      	ldrb	r3, [r3, #5]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f003 fc0b 	bl	800be34 <USBH_LL_GetURBState>
 800861e:	4603      	mov	r3, r0
 8008620:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d12c      	bne.n	8008682 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	7c1b      	ldrb	r3, [r3, #16]
 800862c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008630:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	8adb      	ldrh	r3, [r3, #22]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800863a:	7b7b      	ldrb	r3, [r7, #13]
 800863c:	2b80      	cmp	r3, #128	@ 0x80
 800863e:	d103      	bne.n	8008648 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2203      	movs	r2, #3
 8008644:	761a      	strb	r2, [r3, #24]
 8008646:	e00d      	b.n	8008664 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2205      	movs	r2, #5
 800864c:	761a      	strb	r2, [r3, #24]
 800864e:	e009      	b.n	8008664 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008650:	7b7b      	ldrb	r3, [r7, #13]
 8008652:	2b80      	cmp	r3, #128	@ 0x80
 8008654:	d103      	bne.n	800865e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2209      	movs	r2, #9
 800865a:	761a      	strb	r2, [r3, #24]
 800865c:	e002      	b.n	8008664 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2207      	movs	r2, #7
 8008662:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2203      	movs	r2, #3
 8008668:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008678:	2300      	movs	r3, #0
 800867a:	2200      	movs	r2, #0
 800867c:	f000 fcbc 	bl	8008ff8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008680:	e1cb      	b.n	8008a1a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	2b04      	cmp	r3, #4
 8008686:	d003      	beq.n	8008690 <USBH_HandleControl+0xe8>
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	2b02      	cmp	r3, #2
 800868c:	f040 81c5 	bne.w	8008a1a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	220b      	movs	r2, #11
 8008694:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2203      	movs	r2, #3
 800869a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80086aa:	2300      	movs	r3, #0
 80086ac:	2200      	movs	r2, #0
 80086ae:	f000 fca3 	bl	8008ff8 <osMessageQueuePut>
      break;
 80086b2:	e1b2      	b.n	8008a1a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6899      	ldr	r1, [r3, #8]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	899a      	ldrh	r2, [r3, #12]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	791b      	ldrb	r3, [r3, #4]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f9f2 	bl	8008ab6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2204      	movs	r2, #4
 80086d6:	761a      	strb	r2, [r3, #24]
      break;
 80086d8:	e1a8      	b.n	8008a2c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	791b      	ldrb	r3, [r3, #4]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f003 fba7 	bl	800be34 <USBH_LL_GetURBState>
 80086e6:	4603      	mov	r3, r0
 80086e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d110      	bne.n	8008712 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2209      	movs	r2, #9
 80086f4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2203      	movs	r2, #3
 80086fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800870a:	2300      	movs	r3, #0
 800870c:	2200      	movs	r2, #0
 800870e:	f000 fc73 	bl	8008ff8 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b05      	cmp	r3, #5
 8008716:	d110      	bne.n	800873a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008718:	2303      	movs	r3, #3
 800871a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2203      	movs	r2, #3
 8008720:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008730:	2300      	movs	r3, #0
 8008732:	2200      	movs	r2, #0
 8008734:	f000 fc60 	bl	8008ff8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008738:	e171      	b.n	8008a1e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	2b04      	cmp	r3, #4
 800873e:	f040 816e 	bne.w	8008a1e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	220b      	movs	r2, #11
 8008746:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2203      	movs	r2, #3
 800874c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800875c:	2300      	movs	r3, #0
 800875e:	2200      	movs	r2, #0
 8008760:	f000 fc4a 	bl	8008ff8 <osMessageQueuePut>
      break;
 8008764:	e15b      	b.n	8008a1e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6899      	ldr	r1, [r3, #8]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	899a      	ldrh	r2, [r3, #12]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	795b      	ldrb	r3, [r3, #5]
 8008772:	2001      	movs	r0, #1
 8008774:	9000      	str	r0, [sp, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f978 	bl	8008a6c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008782:	b29a      	uxth	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2206      	movs	r2, #6
 800878c:	761a      	strb	r2, [r3, #24]
      break;
 800878e:	e14d      	b.n	8008a2c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	795b      	ldrb	r3, [r3, #5]
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f003 fb4c 	bl	800be34 <USBH_LL_GetURBState>
 800879c:	4603      	mov	r3, r0
 800879e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d111      	bne.n	80087ca <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2207      	movs	r2, #7
 80087aa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2203      	movs	r2, #3
 80087b0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087c0:	2300      	movs	r3, #0
 80087c2:	2200      	movs	r2, #0
 80087c4:	f000 fc18 	bl	8008ff8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087c8:	e12b      	b.n	8008a22 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b05      	cmp	r3, #5
 80087ce:	d113      	bne.n	80087f8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	220c      	movs	r2, #12
 80087d4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80087d6:	2303      	movs	r3, #3
 80087d8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2203      	movs	r2, #3
 80087de:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087ee:	2300      	movs	r3, #0
 80087f0:	2200      	movs	r2, #0
 80087f2:	f000 fc01 	bl	8008ff8 <osMessageQueuePut>
      break;
 80087f6:	e114      	b.n	8008a22 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d111      	bne.n	8008822 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2205      	movs	r2, #5
 8008802:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2203      	movs	r2, #3
 8008808:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008818:	2300      	movs	r3, #0
 800881a:	2200      	movs	r2, #0
 800881c:	f000 fbec 	bl	8008ff8 <osMessageQueuePut>
      break;
 8008820:	e0ff      	b.n	8008a22 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008822:	7bbb      	ldrb	r3, [r7, #14]
 8008824:	2b04      	cmp	r3, #4
 8008826:	f040 80fc 	bne.w	8008a22 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	220b      	movs	r2, #11
 800882e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008830:	2302      	movs	r3, #2
 8008832:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2203      	movs	r2, #3
 8008838:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008848:	2300      	movs	r3, #0
 800884a:	2200      	movs	r2, #0
 800884c:	f000 fbd4 	bl	8008ff8 <osMessageQueuePut>
      break;
 8008850:	e0e7      	b.n	8008a22 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	791b      	ldrb	r3, [r3, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	2100      	movs	r1, #0
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f92b 	bl	8008ab6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008866:	b29a      	uxth	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2208      	movs	r2, #8
 8008870:	761a      	strb	r2, [r3, #24]

      break;
 8008872:	e0db      	b.n	8008a2c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	791b      	ldrb	r3, [r3, #4]
 8008878:	4619      	mov	r1, r3
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f003 fada 	bl	800be34 <USBH_LL_GetURBState>
 8008880:	4603      	mov	r3, r0
 8008882:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d113      	bne.n	80088b2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	220d      	movs	r2, #13
 800888e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2203      	movs	r2, #3
 8008898:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80088a8:	2300      	movs	r3, #0
 80088aa:	2200      	movs	r2, #0
 80088ac:	f000 fba4 	bl	8008ff8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088b0:	e0b9      	b.n	8008a26 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	d111      	bne.n	80088dc <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	220b      	movs	r2, #11
 80088bc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2203      	movs	r2, #3
 80088c2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80088d2:	2300      	movs	r3, #0
 80088d4:	2200      	movs	r2, #0
 80088d6:	f000 fb8f 	bl	8008ff8 <osMessageQueuePut>
      break;
 80088da:	e0a4      	b.n	8008a26 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	2b05      	cmp	r3, #5
 80088e0:	f040 80a1 	bne.w	8008a26 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80088e4:	2303      	movs	r3, #3
 80088e6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2203      	movs	r2, #3
 80088ec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80088fc:	2300      	movs	r3, #0
 80088fe:	2200      	movs	r2, #0
 8008900:	f000 fb7a 	bl	8008ff8 <osMessageQueuePut>
      break;
 8008904:	e08f      	b.n	8008a26 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	795b      	ldrb	r3, [r3, #5]
 800890a:	2201      	movs	r2, #1
 800890c:	9200      	str	r2, [sp, #0]
 800890e:	2200      	movs	r2, #0
 8008910:	2100      	movs	r1, #0
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f8aa 	bl	8008a6c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800891e:	b29a      	uxth	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	220a      	movs	r2, #10
 8008928:	761a      	strb	r2, [r3, #24]
      break;
 800892a:	e07f      	b.n	8008a2c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	795b      	ldrb	r3, [r3, #5]
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f003 fa7e 	bl	800be34 <USBH_LL_GetURBState>
 8008938:	4603      	mov	r3, r0
 800893a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d113      	bne.n	800896a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	220d      	movs	r2, #13
 800894a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2203      	movs	r2, #3
 8008950:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008960:	2300      	movs	r3, #0
 8008962:	2200      	movs	r2, #0
 8008964:	f000 fb48 	bl	8008ff8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008968:	e05f      	b.n	8008a2a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800896a:	7bbb      	ldrb	r3, [r7, #14]
 800896c:	2b02      	cmp	r3, #2
 800896e:	d111      	bne.n	8008994 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2209      	movs	r2, #9
 8008974:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2203      	movs	r2, #3
 800897a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800898a:	2300      	movs	r3, #0
 800898c:	2200      	movs	r2, #0
 800898e:	f000 fb33 	bl	8008ff8 <osMessageQueuePut>
      break;
 8008992:	e04a      	b.n	8008a2a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	2b04      	cmp	r3, #4
 8008998:	d147      	bne.n	8008a2a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	220b      	movs	r2, #11
 800899e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2203      	movs	r2, #3
 80089a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80089b4:	2300      	movs	r3, #0
 80089b6:	2200      	movs	r2, #0
 80089b8:	f000 fb1e 	bl	8008ff8 <osMessageQueuePut>
      break;
 80089bc:	e035      	b.n	8008a2a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	7e5b      	ldrb	r3, [r3, #25]
 80089c2:	3301      	adds	r3, #1
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	765a      	strb	r2, [r3, #25]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	7e5b      	ldrb	r3, [r3, #25]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d806      	bhi.n	80089e0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80089de:	e025      	b.n	8008a2c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089e6:	2106      	movs	r1, #6
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	795b      	ldrb	r3, [r3, #5]
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f90d 	bl	8008c18 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	791b      	ldrb	r3, [r3, #4]
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f907 	bl	8008c18 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a10:	2302      	movs	r3, #2
 8008a12:	73fb      	strb	r3, [r7, #15]
      break;
 8008a14:	e00a      	b.n	8008a2c <USBH_HandleControl+0x484>

    default:
      break;
 8008a16:	bf00      	nop
 8008a18:	e008      	b.n	8008a2c <USBH_HandleControl+0x484>
      break;
 8008a1a:	bf00      	nop
 8008a1c:	e006      	b.n	8008a2c <USBH_HandleControl+0x484>
      break;
 8008a1e:	bf00      	nop
 8008a20:	e004      	b.n	8008a2c <USBH_HandleControl+0x484>
      break;
 8008a22:	bf00      	nop
 8008a24:	e002      	b.n	8008a2c <USBH_HandleControl+0x484>
      break;
 8008a26:	bf00      	nop
 8008a28:	e000      	b.n	8008a2c <USBH_HandleControl+0x484>
      break;
 8008a2a:	bf00      	nop
  }

  return status;
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop

08008a38 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af04      	add	r7, sp, #16
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	4613      	mov	r3, r2
 8008a44:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a46:	79f9      	ldrb	r1, [r7, #7]
 8008a48:	2300      	movs	r3, #0
 8008a4a:	9303      	str	r3, [sp, #12]
 8008a4c:	2308      	movs	r3, #8
 8008a4e:	9302      	str	r3, [sp, #8]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	9301      	str	r3, [sp, #4]
 8008a54:	2300      	movs	r3, #0
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	2300      	movs	r3, #0
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f003 f9b8 	bl	800bdd2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af04      	add	r7, sp, #16
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	4611      	mov	r1, r2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	80fb      	strh	r3, [r7, #6]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a90:	7979      	ldrb	r1, [r7, #5]
 8008a92:	7e3b      	ldrb	r3, [r7, #24]
 8008a94:	9303      	str	r3, [sp, #12]
 8008a96:	88fb      	ldrh	r3, [r7, #6]
 8008a98:	9302      	str	r3, [sp, #8]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f003 f993 	bl	800bdd2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b088      	sub	sp, #32
 8008aba:	af04      	add	r7, sp, #16
 8008abc:	60f8      	str	r0, [r7, #12]
 8008abe:	60b9      	str	r1, [r7, #8]
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	80fb      	strh	r3, [r7, #6]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008acc:	7979      	ldrb	r1, [r7, #5]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	9303      	str	r3, [sp, #12]
 8008ad2:	88fb      	ldrh	r3, [r7, #6]
 8008ad4:	9302      	str	r3, [sp, #8]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	2301      	movs	r3, #1
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f003 f975 	bl	800bdd2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ae8:	2300      	movs	r3, #0

}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b088      	sub	sp, #32
 8008af6:	af04      	add	r7, sp, #16
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	4611      	mov	r1, r2
 8008afe:	461a      	mov	r2, r3
 8008b00:	460b      	mov	r3, r1
 8008b02:	80fb      	strh	r3, [r7, #6]
 8008b04:	4613      	mov	r3, r2
 8008b06:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b16:	7979      	ldrb	r1, [r7, #5]
 8008b18:	7e3b      	ldrb	r3, [r7, #24]
 8008b1a:	9303      	str	r3, [sp, #12]
 8008b1c:	88fb      	ldrh	r3, [r7, #6]
 8008b1e:	9302      	str	r3, [sp, #8]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	2301      	movs	r3, #1
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	2302      	movs	r3, #2
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f003 f950 	bl	800bdd2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af04      	add	r7, sp, #16
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	4611      	mov	r1, r2
 8008b48:	461a      	mov	r2, r3
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	80fb      	strh	r3, [r7, #6]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b52:	7979      	ldrb	r1, [r7, #5]
 8008b54:	2300      	movs	r3, #0
 8008b56:	9303      	str	r3, [sp, #12]
 8008b58:	88fb      	ldrh	r3, [r7, #6]
 8008b5a:	9302      	str	r3, [sp, #8]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	2301      	movs	r3, #1
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	2302      	movs	r3, #2
 8008b66:	2201      	movs	r2, #1
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f003 f932 	bl	800bdd2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af04      	add	r7, sp, #16
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	4608      	mov	r0, r1
 8008b82:	4611      	mov	r1, r2
 8008b84:	461a      	mov	r2, r3
 8008b86:	4603      	mov	r3, r0
 8008b88:	70fb      	strb	r3, [r7, #3]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	70bb      	strb	r3, [r7, #2]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008b92:	7878      	ldrb	r0, [r7, #1]
 8008b94:	78ba      	ldrb	r2, [r7, #2]
 8008b96:	78f9      	ldrb	r1, [r7, #3]
 8008b98:	8b3b      	ldrh	r3, [r7, #24]
 8008b9a:	9302      	str	r3, [sp, #8]
 8008b9c:	7d3b      	ldrb	r3, [r7, #20]
 8008b9e:	9301      	str	r3, [sp, #4]
 8008ba0:	7c3b      	ldrb	r3, [r7, #16]
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f003 f8c5 	bl	800bd36 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b082      	sub	sp, #8
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008bc2:	78fb      	ldrb	r3, [r7, #3]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f003 f8e4 	bl	800bd94 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b084      	sub	sp, #16
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	460b      	mov	r3, r1
 8008be0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f836 	bl	8008c54 <USBH_GetFreePipe>
 8008be8:	4603      	mov	r3, r0
 8008bea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008bec:	89fb      	ldrh	r3, [r7, #14]
 8008bee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d00a      	beq.n	8008c0c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008bf6:	78fa      	ldrb	r2, [r7, #3]
 8008bf8:	89fb      	ldrh	r3, [r7, #14]
 8008bfa:	f003 030f 	and.w	r3, r3, #15
 8008bfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	33e0      	adds	r3, #224	@ 0xe0
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	440b      	add	r3, r1
 8008c0a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c0c:	89fb      	ldrh	r3, [r7, #14]
 8008c0e:	b2db      	uxtb	r3, r3
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008c24:	78fb      	ldrb	r3, [r7, #3]
 8008c26:	2b0f      	cmp	r3, #15
 8008c28:	d80d      	bhi.n	8008c46 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	33e0      	adds	r3, #224	@ 0xe0
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	78fb      	ldrb	r3, [r7, #3]
 8008c38:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	33e0      	adds	r3, #224	@ 0xe0
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	440b      	add	r3, r1
 8008c44:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
 8008c64:	e00f      	b.n	8008c86 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	33e0      	adds	r3, #224	@ 0xe0
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d102      	bne.n	8008c80 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	e007      	b.n	8008c90 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	3301      	adds	r3, #1
 8008c84:	73fb      	strb	r3, [r7, #15]
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	2b0f      	cmp	r3, #15
 8008c8a:	d9ec      	bls.n	8008c66 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <__NVIC_SetPriority>:
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	6039      	str	r1, [r7, #0]
 8008ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	db0a      	blt.n	8008cc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	490c      	ldr	r1, [pc, #48]	@ (8008ce8 <__NVIC_SetPriority+0x4c>)
 8008cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cba:	0112      	lsls	r2, r2, #4
 8008cbc:	b2d2      	uxtb	r2, r2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008cc4:	e00a      	b.n	8008cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	4908      	ldr	r1, [pc, #32]	@ (8008cec <__NVIC_SetPriority+0x50>)
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	f003 030f 	and.w	r3, r3, #15
 8008cd2:	3b04      	subs	r3, #4
 8008cd4:	0112      	lsls	r2, r2, #4
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	440b      	add	r3, r1
 8008cda:	761a      	strb	r2, [r3, #24]
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	e000e100 	.word	0xe000e100
 8008cec:	e000ed00 	.word	0xe000ed00

08008cf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008cf4:	4b05      	ldr	r3, [pc, #20]	@ (8008d0c <SysTick_Handler+0x1c>)
 8008cf6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008cf8:	f001 ff56 	bl	800aba8 <xTaskGetSchedulerState>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d001      	beq.n	8008d06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008d02:	f002 fd51 	bl	800b7a8 <xPortSysTickHandler>
  }
}
 8008d06:	bf00      	nop
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	e000e010 	.word	0xe000e010

08008d10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008d14:	2100      	movs	r1, #0
 8008d16:	f06f 0004 	mvn.w	r0, #4
 8008d1a:	f7ff ffbf 	bl	8008c9c <__NVIC_SetPriority>
#endif
}
 8008d1e:	bf00      	nop
 8008d20:	bd80      	pop	{r7, pc}
	...

08008d24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d2a:	f3ef 8305 	mrs	r3, IPSR
 8008d2e:	603b      	str	r3, [r7, #0]
  return(result);
 8008d30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008d36:	f06f 0305 	mvn.w	r3, #5
 8008d3a:	607b      	str	r3, [r7, #4]
 8008d3c:	e00c      	b.n	8008d58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d68 <osKernelInitialize+0x44>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d105      	bne.n	8008d52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008d46:	4b08      	ldr	r3, [pc, #32]	@ (8008d68 <osKernelInitialize+0x44>)
 8008d48:	2201      	movs	r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	607b      	str	r3, [r7, #4]
 8008d50:	e002      	b.n	8008d58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008d52:	f04f 33ff 	mov.w	r3, #4294967295
 8008d56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d58:	687b      	ldr	r3, [r7, #4]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	20000250 	.word	0x20000250

08008d6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d72:	f3ef 8305 	mrs	r3, IPSR
 8008d76:	603b      	str	r3, [r7, #0]
  return(result);
 8008d78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008d7e:	f06f 0305 	mvn.w	r3, #5
 8008d82:	607b      	str	r3, [r7, #4]
 8008d84:	e010      	b.n	8008da8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d86:	4b0b      	ldr	r3, [pc, #44]	@ (8008db4 <osKernelStart+0x48>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d109      	bne.n	8008da2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d8e:	f7ff ffbf 	bl	8008d10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d92:	4b08      	ldr	r3, [pc, #32]	@ (8008db4 <osKernelStart+0x48>)
 8008d94:	2202      	movs	r2, #2
 8008d96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d98:	f001 fa86 	bl	800a2a8 <vTaskStartScheduler>
      stat = osOK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	607b      	str	r3, [r7, #4]
 8008da0:	e002      	b.n	8008da8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008da2:	f04f 33ff 	mov.w	r3, #4294967295
 8008da6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008da8:	687b      	ldr	r3, [r7, #4]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	20000250 	.word	0x20000250

08008db8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08e      	sub	sp, #56	@ 0x38
 8008dbc:	af04      	add	r7, sp, #16
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dc8:	f3ef 8305 	mrs	r3, IPSR
 8008dcc:	617b      	str	r3, [r7, #20]
  return(result);
 8008dce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d17e      	bne.n	8008ed2 <osThreadNew+0x11a>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d07b      	beq.n	8008ed2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008dda:	2380      	movs	r3, #128	@ 0x80
 8008ddc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008dde:	2318      	movs	r3, #24
 8008de0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008de2:	2300      	movs	r3, #0
 8008de4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008de6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d045      	beq.n	8008e7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <osThreadNew+0x48>
        name = attr->name;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d008      	beq.n	8008e26 <osThreadNew+0x6e>
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	2b38      	cmp	r3, #56	@ 0x38
 8008e18:	d805      	bhi.n	8008e26 <osThreadNew+0x6e>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <osThreadNew+0x72>
        return (NULL);
 8008e26:	2300      	movs	r3, #0
 8008e28:	e054      	b.n	8008ed4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	089b      	lsrs	r3, r3, #2
 8008e38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00e      	beq.n	8008e60 <osThreadNew+0xa8>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	2baf      	cmp	r3, #175	@ 0xaf
 8008e48:	d90a      	bls.n	8008e60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d006      	beq.n	8008e60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	695b      	ldr	r3, [r3, #20]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d002      	beq.n	8008e60 <osThreadNew+0xa8>
        mem = 1;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	61bb      	str	r3, [r7, #24]
 8008e5e:	e010      	b.n	8008e82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10c      	bne.n	8008e82 <osThreadNew+0xca>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d108      	bne.n	8008e82 <osThreadNew+0xca>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d104      	bne.n	8008e82 <osThreadNew+0xca>
          mem = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	61bb      	str	r3, [r7, #24]
 8008e7c:	e001      	b.n	8008e82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d110      	bne.n	8008eaa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e90:	9202      	str	r2, [sp, #8]
 8008e92:	9301      	str	r3, [sp, #4]
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	6a3a      	ldr	r2, [r7, #32]
 8008e9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f001 f808 	bl	8009eb4 <xTaskCreateStatic>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	613b      	str	r3, [r7, #16]
 8008ea8:	e013      	b.n	8008ed2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d110      	bne.n	8008ed2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	f107 0310 	add.w	r3, r7, #16
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f001 f856 	bl	8009f74 <xTaskCreate>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d001      	beq.n	8008ed2 <osThreadNew+0x11a>
            hTask = NULL;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008ed2:	693b      	ldr	r3, [r7, #16]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3728      	adds	r7, #40	@ 0x28
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ee4:	f3ef 8305 	mrs	r3, IPSR
 8008ee8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008eea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <osDelay+0x1c>
    stat = osErrorISR;
 8008ef0:	f06f 0305 	mvn.w	r3, #5
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	e007      	b.n	8008f08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d002      	beq.n	8008f08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f001 f99a 	bl	800a23c <vTaskDelay>
    }
  }

  return (stat);
 8008f08:	68fb      	ldr	r3, [r7, #12]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b08a      	sub	sp, #40	@ 0x28
 8008f16:	af02      	add	r7, sp, #8
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f22:	f3ef 8305 	mrs	r3, IPSR
 8008f26:	613b      	str	r3, [r7, #16]
  return(result);
 8008f28:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d15f      	bne.n	8008fee <osMessageQueueNew+0xdc>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d05c      	beq.n	8008fee <osMessageQueueNew+0xdc>
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d059      	beq.n	8008fee <osMessageQueueNew+0xdc>
    mem = -1;
 8008f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d029      	beq.n	8008f9a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d012      	beq.n	8008f74 <osMessageQueueNew+0x62>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	2b4f      	cmp	r3, #79	@ 0x4f
 8008f54:	d90e      	bls.n	8008f74 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00a      	beq.n	8008f74 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	695a      	ldr	r2, [r3, #20]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	fb01 f303 	mul.w	r3, r1, r3
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d302      	bcc.n	8008f74 <osMessageQueueNew+0x62>
        mem = 1;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	61bb      	str	r3, [r7, #24]
 8008f72:	e014      	b.n	8008f9e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d110      	bne.n	8008f9e <osMessageQueueNew+0x8c>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10c      	bne.n	8008f9e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d108      	bne.n	8008f9e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d104      	bne.n	8008f9e <osMessageQueueNew+0x8c>
          mem = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61bb      	str	r3, [r7, #24]
 8008f98:	e001      	b.n	8008f9e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d10b      	bne.n	8008fbc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691a      	ldr	r2, [r3, #16]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	2100      	movs	r1, #0
 8008fae:	9100      	str	r1, [sp, #0]
 8008fb0:	68b9      	ldr	r1, [r7, #8]
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 fa30 	bl	8009418 <xQueueGenericCreateStatic>
 8008fb8:	61f8      	str	r0, [r7, #28]
 8008fba:	e008      	b.n	8008fce <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d105      	bne.n	8008fce <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	68b9      	ldr	r1, [r7, #8]
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 faa3 	bl	8009512 <xQueueGenericCreate>
 8008fcc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00c      	beq.n	8008fee <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	617b      	str	r3, [r7, #20]
 8008fe0:	e001      	b.n	8008fe6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008fe6:	6979      	ldr	r1, [r7, #20]
 8008fe8:	69f8      	ldr	r0, [r7, #28]
 8008fea:	f000 ff05 	bl	8009df8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008fee:	69fb      	ldr	r3, [r7, #28]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3720      	adds	r7, #32
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b088      	sub	sp, #32
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	603b      	str	r3, [r7, #0]
 8009004:	4613      	mov	r3, r2
 8009006:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800900c:	2300      	movs	r3, #0
 800900e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009010:	f3ef 8305 	mrs	r3, IPSR
 8009014:	617b      	str	r3, [r7, #20]
  return(result);
 8009016:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009018:	2b00      	cmp	r3, #0
 800901a:	d028      	beq.n	800906e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d005      	beq.n	800902e <osMessageQueuePut+0x36>
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <osMessageQueuePut+0x36>
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800902e:	f06f 0303 	mvn.w	r3, #3
 8009032:	61fb      	str	r3, [r7, #28]
 8009034:	e038      	b.n	80090a8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009036:	2300      	movs	r3, #0
 8009038:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800903a:	f107 0210 	add.w	r2, r7, #16
 800903e:	2300      	movs	r3, #0
 8009040:	68b9      	ldr	r1, [r7, #8]
 8009042:	69b8      	ldr	r0, [r7, #24]
 8009044:	f000 fbc6 	bl	80097d4 <xQueueGenericSendFromISR>
 8009048:	4603      	mov	r3, r0
 800904a:	2b01      	cmp	r3, #1
 800904c:	d003      	beq.n	8009056 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800904e:	f06f 0302 	mvn.w	r3, #2
 8009052:	61fb      	str	r3, [r7, #28]
 8009054:	e028      	b.n	80090a8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d025      	beq.n	80090a8 <osMessageQueuePut+0xb0>
 800905c:	4b15      	ldr	r3, [pc, #84]	@ (80090b4 <osMessageQueuePut+0xbc>)
 800905e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	e01c      	b.n	80090a8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <osMessageQueuePut+0x82>
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d103      	bne.n	8009082 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800907a:	f06f 0303 	mvn.w	r3, #3
 800907e:	61fb      	str	r3, [r7, #28]
 8009080:	e012      	b.n	80090a8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009082:	2300      	movs	r3, #0
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	69b8      	ldr	r0, [r7, #24]
 800908a:	f000 faa1 	bl	80095d0 <xQueueGenericSend>
 800908e:	4603      	mov	r3, r0
 8009090:	2b01      	cmp	r3, #1
 8009092:	d009      	beq.n	80090a8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800909a:	f06f 0301 	mvn.w	r3, #1
 800909e:	61fb      	str	r3, [r7, #28]
 80090a0:	e002      	b.n	80090a8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80090a2:	f06f 0302 	mvn.w	r3, #2
 80090a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80090a8:	69fb      	ldr	r3, [r7, #28]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3720      	adds	r7, #32
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	e000ed04 	.word	0xe000ed04

080090b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b088      	sub	sp, #32
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ce:	f3ef 8305 	mrs	r3, IPSR
 80090d2:	617b      	str	r3, [r7, #20]
  return(result);
 80090d4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d028      	beq.n	800912c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d005      	beq.n	80090ec <osMessageQueueGet+0x34>
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <osMessageQueueGet+0x34>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d003      	beq.n	80090f4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80090ec:	f06f 0303 	mvn.w	r3, #3
 80090f0:	61fb      	str	r3, [r7, #28]
 80090f2:	e037      	b.n	8009164 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80090f4:	2300      	movs	r3, #0
 80090f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80090f8:	f107 0310 	add.w	r3, r7, #16
 80090fc:	461a      	mov	r2, r3
 80090fe:	68b9      	ldr	r1, [r7, #8]
 8009100:	69b8      	ldr	r0, [r7, #24]
 8009102:	f000 fce7 	bl	8009ad4 <xQueueReceiveFromISR>
 8009106:	4603      	mov	r3, r0
 8009108:	2b01      	cmp	r3, #1
 800910a:	d003      	beq.n	8009114 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800910c:	f06f 0302 	mvn.w	r3, #2
 8009110:	61fb      	str	r3, [r7, #28]
 8009112:	e027      	b.n	8009164 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d024      	beq.n	8009164 <osMessageQueueGet+0xac>
 800911a:	4b15      	ldr	r3, [pc, #84]	@ (8009170 <osMessageQueueGet+0xb8>)
 800911c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009120:	601a      	str	r2, [r3, #0]
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	e01b      	b.n	8009164 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <osMessageQueueGet+0x80>
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d103      	bne.n	8009140 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009138:	f06f 0303 	mvn.w	r3, #3
 800913c:	61fb      	str	r3, [r7, #28]
 800913e:	e011      	b.n	8009164 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	69b8      	ldr	r0, [r7, #24]
 8009146:	f000 fbe3 	bl	8009910 <xQueueReceive>
 800914a:	4603      	mov	r3, r0
 800914c:	2b01      	cmp	r3, #1
 800914e:	d009      	beq.n	8009164 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009156:	f06f 0301 	mvn.w	r3, #1
 800915a:	61fb      	str	r3, [r7, #28]
 800915c:	e002      	b.n	8009164 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800915e:	f06f 0302 	mvn.w	r3, #2
 8009162:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009164:	69fb      	ldr	r3, [r7, #28]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3720      	adds	r7, #32
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4a07      	ldr	r2, [pc, #28]	@ (80091a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	4a06      	ldr	r2, [pc, #24]	@ (80091a4 <vApplicationGetIdleTaskMemory+0x30>)
 800918a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2280      	movs	r2, #128	@ 0x80
 8009190:	601a      	str	r2, [r3, #0]
}
 8009192:	bf00      	nop
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	20000254 	.word	0x20000254
 80091a4:	20000304 	.word	0x20000304

080091a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4a07      	ldr	r2, [pc, #28]	@ (80091d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80091b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	4a06      	ldr	r2, [pc, #24]	@ (80091d8 <vApplicationGetTimerTaskMemory+0x30>)
 80091be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80091c6:	601a      	str	r2, [r3, #0]
}
 80091c8:	bf00      	nop
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	20000504 	.word	0x20000504
 80091d8:	200005b4 	.word	0x200005b4

080091dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f103 0208 	add.w	r2, r3, #8
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f04f 32ff 	mov.w	r2, #4294967295
 80091f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f103 0208 	add.w	r2, r3, #8
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f103 0208 	add.w	r2, r3, #8
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800922a:	bf00      	nop
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009236:	b480      	push	{r7}
 8009238:	b085      	sub	sp, #20
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	1c5a      	adds	r2, r3, #1
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	601a      	str	r2, [r3, #0]
}
 8009272:	bf00      	nop
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800927e:	b480      	push	{r7}
 8009280:	b085      	sub	sp, #20
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009294:	d103      	bne.n	800929e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	e00c      	b.n	80092b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3308      	adds	r3, #8
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	e002      	b.n	80092ac <vListInsert+0x2e>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d2f6      	bcs.n	80092a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	601a      	str	r2, [r3, #0]
}
 80092e4:	bf00      	nop
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6892      	ldr	r2, [r2, #8]
 8009306:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	6852      	ldr	r2, [r2, #4]
 8009310:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	429a      	cmp	r2, r3
 800931a:	d103      	bne.n	8009324 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689a      	ldr	r2, [r3, #8]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	1e5a      	subs	r2, r3, #1
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10b      	bne.n	8009370 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800936a:	bf00      	nop
 800936c:	bf00      	nop
 800936e:	e7fd      	b.n	800936c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009370:	f002 f98a 	bl	800b688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800937c:	68f9      	ldr	r1, [r7, #12]
 800937e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009380:	fb01 f303 	mul.w	r3, r1, r3
 8009384:	441a      	add	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a0:	3b01      	subs	r3, #1
 80093a2:	68f9      	ldr	r1, [r7, #12]
 80093a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80093a6:	fb01 f303 	mul.w	r3, r1, r3
 80093aa:	441a      	add	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	22ff      	movs	r2, #255	@ 0xff
 80093b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	22ff      	movs	r2, #255	@ 0xff
 80093bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d114      	bne.n	80093f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d01a      	beq.n	8009404 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	3310      	adds	r3, #16
 80093d2:	4618      	mov	r0, r3
 80093d4:	f001 fa22 	bl	800a81c <xTaskRemoveFromEventList>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d012      	beq.n	8009404 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80093de:	4b0d      	ldr	r3, [pc, #52]	@ (8009414 <xQueueGenericReset+0xd0>)
 80093e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	e009      	b.n	8009404 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3310      	adds	r3, #16
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7ff fef1 	bl	80091dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3324      	adds	r3, #36	@ 0x24
 80093fe:	4618      	mov	r0, r3
 8009400:	f7ff feec 	bl	80091dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009404:	f002 f972 	bl	800b6ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009408:	2301      	movs	r3, #1
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	e000ed04 	.word	0xe000ed04

08009418 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08e      	sub	sp, #56	@ 0x38
 800941c:	af02      	add	r7, sp, #8
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10b      	bne.n	8009444 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800943e:	bf00      	nop
 8009440:	bf00      	nop
 8009442:	e7fd      	b.n	8009440 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10b      	bne.n	8009462 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	e7fd      	b.n	800945e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <xQueueGenericCreateStatic+0x56>
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <xQueueGenericCreateStatic+0x5a>
 800946e:	2301      	movs	r3, #1
 8009470:	e000      	b.n	8009474 <xQueueGenericCreateStatic+0x5c>
 8009472:	2300      	movs	r3, #0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10b      	bne.n	8009490 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	623b      	str	r3, [r7, #32]
}
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	e7fd      	b.n	800948c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d102      	bne.n	800949c <xQueueGenericCreateStatic+0x84>
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <xQueueGenericCreateStatic+0x88>
 800949c:	2301      	movs	r3, #1
 800949e:	e000      	b.n	80094a2 <xQueueGenericCreateStatic+0x8a>
 80094a0:	2300      	movs	r3, #0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10b      	bne.n	80094be <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	61fb      	str	r3, [r7, #28]
}
 80094b8:	bf00      	nop
 80094ba:	bf00      	nop
 80094bc:	e7fd      	b.n	80094ba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80094be:	2350      	movs	r3, #80	@ 0x50
 80094c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2b50      	cmp	r3, #80	@ 0x50
 80094c6:	d00b      	beq.n	80094e0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	61bb      	str	r3, [r7, #24]
}
 80094da:	bf00      	nop
 80094dc:	bf00      	nop
 80094de:	e7fd      	b.n	80094dc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80094e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80094e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00d      	beq.n	8009508 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80094ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80094f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80094f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	4613      	mov	r3, r2
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	68b9      	ldr	r1, [r7, #8]
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 f840 	bl	8009588 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800950a:	4618      	mov	r0, r3
 800950c:	3730      	adds	r7, #48	@ 0x30
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009512:	b580      	push	{r7, lr}
 8009514:	b08a      	sub	sp, #40	@ 0x28
 8009516:	af02      	add	r7, sp, #8
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	4613      	mov	r3, r2
 800951e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10b      	bne.n	800953e <xQueueGenericCreate+0x2c>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	613b      	str	r3, [r7, #16]
}
 8009538:	bf00      	nop
 800953a:	bf00      	nop
 800953c:	e7fd      	b.n	800953a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	fb02 f303 	mul.w	r3, r2, r3
 8009546:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	3350      	adds	r3, #80	@ 0x50
 800954c:	4618      	mov	r0, r3
 800954e:	f002 f9bd 	bl	800b8cc <pvPortMalloc>
 8009552:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d011      	beq.n	800957e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	3350      	adds	r3, #80	@ 0x50
 8009562:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800956c:	79fa      	ldrb	r2, [r7, #7]
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	4613      	mov	r3, r2
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 f805 	bl	8009588 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800957e:	69bb      	ldr	r3, [r7, #24]
	}
 8009580:	4618      	mov	r0, r3
 8009582:	3720      	adds	r7, #32
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
 8009594:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d103      	bne.n	80095a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	e002      	b.n	80095aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095b6:	2101      	movs	r1, #1
 80095b8:	69b8      	ldr	r0, [r7, #24]
 80095ba:	f7ff fec3 	bl	8009344 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	78fa      	ldrb	r2, [r7, #3]
 80095c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80095c6:	bf00      	nop
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08e      	sub	sp, #56	@ 0x38
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80095de:	2300      	movs	r3, #0
 80095e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80095e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10b      	bne.n	8009604 <xQueueGenericSend+0x34>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80095fe:	bf00      	nop
 8009600:	bf00      	nop
 8009602:	e7fd      	b.n	8009600 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d103      	bne.n	8009612 <xQueueGenericSend+0x42>
 800960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <xQueueGenericSend+0x46>
 8009612:	2301      	movs	r3, #1
 8009614:	e000      	b.n	8009618 <xQueueGenericSend+0x48>
 8009616:	2300      	movs	r3, #0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10b      	bne.n	8009634 <xQueueGenericSend+0x64>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800962e:	bf00      	nop
 8009630:	bf00      	nop
 8009632:	e7fd      	b.n	8009630 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b02      	cmp	r3, #2
 8009638:	d103      	bne.n	8009642 <xQueueGenericSend+0x72>
 800963a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800963e:	2b01      	cmp	r3, #1
 8009640:	d101      	bne.n	8009646 <xQueueGenericSend+0x76>
 8009642:	2301      	movs	r3, #1
 8009644:	e000      	b.n	8009648 <xQueueGenericSend+0x78>
 8009646:	2300      	movs	r3, #0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10b      	bne.n	8009664 <xQueueGenericSend+0x94>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	623b      	str	r3, [r7, #32]
}
 800965e:	bf00      	nop
 8009660:	bf00      	nop
 8009662:	e7fd      	b.n	8009660 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009664:	f001 faa0 	bl	800aba8 <xTaskGetSchedulerState>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d102      	bne.n	8009674 <xQueueGenericSend+0xa4>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d101      	bne.n	8009678 <xQueueGenericSend+0xa8>
 8009674:	2301      	movs	r3, #1
 8009676:	e000      	b.n	800967a <xQueueGenericSend+0xaa>
 8009678:	2300      	movs	r3, #0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10b      	bne.n	8009696 <xQueueGenericSend+0xc6>
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	61fb      	str	r3, [r7, #28]
}
 8009690:	bf00      	nop
 8009692:	bf00      	nop
 8009694:	e7fd      	b.n	8009692 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009696:	f001 fff7 	bl	800b688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800969a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800969e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d302      	bcc.n	80096ac <xQueueGenericSend+0xdc>
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d129      	bne.n	8009700 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	68b9      	ldr	r1, [r7, #8]
 80096b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096b2:	f000 fa91 	bl	8009bd8 <prvCopyDataToQueue>
 80096b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d010      	beq.n	80096e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c2:	3324      	adds	r3, #36	@ 0x24
 80096c4:	4618      	mov	r0, r3
 80096c6:	f001 f8a9 	bl	800a81c <xTaskRemoveFromEventList>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d013      	beq.n	80096f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80096d0:	4b3f      	ldr	r3, [pc, #252]	@ (80097d0 <xQueueGenericSend+0x200>)
 80096d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096d6:	601a      	str	r2, [r3, #0]
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	e00a      	b.n	80096f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80096e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d007      	beq.n	80096f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80096e8:	4b39      	ldr	r3, [pc, #228]	@ (80097d0 <xQueueGenericSend+0x200>)
 80096ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80096f8:	f001 fff8 	bl	800b6ec <vPortExitCritical>
				return pdPASS;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e063      	b.n	80097c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d103      	bne.n	800970e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009706:	f001 fff1 	bl	800b6ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800970a:	2300      	movs	r3, #0
 800970c:	e05c      	b.n	80097c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800970e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009710:	2b00      	cmp	r3, #0
 8009712:	d106      	bne.n	8009722 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009714:	f107 0314 	add.w	r3, r7, #20
 8009718:	4618      	mov	r0, r3
 800971a:	f001 f8e3 	bl	800a8e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800971e:	2301      	movs	r3, #1
 8009720:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009722:	f001 ffe3 	bl	800b6ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009726:	f000 fe31 	bl	800a38c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800972a:	f001 ffad 	bl	800b688 <vPortEnterCritical>
 800972e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009730:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009734:	b25b      	sxtb	r3, r3
 8009736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800973a:	d103      	bne.n	8009744 <xQueueGenericSend+0x174>
 800973c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009746:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800974a:	b25b      	sxtb	r3, r3
 800974c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009750:	d103      	bne.n	800975a <xQueueGenericSend+0x18a>
 8009752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800975a:	f001 ffc7 	bl	800b6ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800975e:	1d3a      	adds	r2, r7, #4
 8009760:	f107 0314 	add.w	r3, r7, #20
 8009764:	4611      	mov	r1, r2
 8009766:	4618      	mov	r0, r3
 8009768:	f001 f8d2 	bl	800a910 <xTaskCheckForTimeOut>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d124      	bne.n	80097bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009772:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009774:	f000 fb28 	bl	8009dc8 <prvIsQueueFull>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d018      	beq.n	80097b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800977e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009780:	3310      	adds	r3, #16
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	4611      	mov	r1, r2
 8009786:	4618      	mov	r0, r3
 8009788:	f000 fff6 	bl	800a778 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800978c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800978e:	f000 fab3 	bl	8009cf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009792:	f000 fe09 	bl	800a3a8 <xTaskResumeAll>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	f47f af7c 	bne.w	8009696 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800979e:	4b0c      	ldr	r3, [pc, #48]	@ (80097d0 <xQueueGenericSend+0x200>)
 80097a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	e772      	b.n	8009696 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80097b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097b2:	f000 faa1 	bl	8009cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097b6:	f000 fdf7 	bl	800a3a8 <xTaskResumeAll>
 80097ba:	e76c      	b.n	8009696 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80097bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097be:	f000 fa9b 	bl	8009cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097c2:	f000 fdf1 	bl	800a3a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80097c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3738      	adds	r7, #56	@ 0x38
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	e000ed04 	.word	0xe000ed04

080097d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b090      	sub	sp, #64	@ 0x40
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
 80097e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80097e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10b      	bne.n	8009804 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80097fe:	bf00      	nop
 8009800:	bf00      	nop
 8009802:	e7fd      	b.n	8009800 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d103      	bne.n	8009812 <xQueueGenericSendFromISR+0x3e>
 800980a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <xQueueGenericSendFromISR+0x42>
 8009812:	2301      	movs	r3, #1
 8009814:	e000      	b.n	8009818 <xQueueGenericSendFromISR+0x44>
 8009816:	2300      	movs	r3, #0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10b      	bne.n	8009834 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800981c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800982e:	bf00      	nop
 8009830:	bf00      	nop
 8009832:	e7fd      	b.n	8009830 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	2b02      	cmp	r3, #2
 8009838:	d103      	bne.n	8009842 <xQueueGenericSendFromISR+0x6e>
 800983a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800983e:	2b01      	cmp	r3, #1
 8009840:	d101      	bne.n	8009846 <xQueueGenericSendFromISR+0x72>
 8009842:	2301      	movs	r3, #1
 8009844:	e000      	b.n	8009848 <xQueueGenericSendFromISR+0x74>
 8009846:	2300      	movs	r3, #0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10b      	bne.n	8009864 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800984c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	623b      	str	r3, [r7, #32]
}
 800985e:	bf00      	nop
 8009860:	bf00      	nop
 8009862:	e7fd      	b.n	8009860 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009864:	f001 fff0 	bl	800b848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009868:	f3ef 8211 	mrs	r2, BASEPRI
 800986c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	61fa      	str	r2, [r7, #28]
 800987e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009880:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009882:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009886:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800988c:	429a      	cmp	r2, r3
 800988e:	d302      	bcc.n	8009896 <xQueueGenericSendFromISR+0xc2>
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2b02      	cmp	r3, #2
 8009894:	d12f      	bne.n	80098f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009898:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800989c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	68b9      	ldr	r1, [r7, #8]
 80098aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80098ac:	f000 f994 	bl	8009bd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80098b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80098b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b8:	d112      	bne.n	80098e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d016      	beq.n	80098f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c4:	3324      	adds	r3, #36	@ 0x24
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 ffa8 	bl	800a81c <xTaskRemoveFromEventList>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00e      	beq.n	80098f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00b      	beq.n	80098f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	e007      	b.n	80098f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80098e4:	3301      	adds	r3, #1
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	b25a      	sxtb	r2, r3
 80098ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80098f0:	2301      	movs	r3, #1
 80098f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80098f4:	e001      	b.n	80098fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098f6:	2300      	movs	r3, #0
 80098f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098fc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009904:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009908:	4618      	mov	r0, r3
 800990a:	3740      	adds	r7, #64	@ 0x40
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b08c      	sub	sp, #48	@ 0x30
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800991c:	2300      	movs	r3, #0
 800991e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10b      	bne.n	8009942 <xQueueReceive+0x32>
	__asm volatile
 800992a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	623b      	str	r3, [r7, #32]
}
 800993c:	bf00      	nop
 800993e:	bf00      	nop
 8009940:	e7fd      	b.n	800993e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d103      	bne.n	8009950 <xQueueReceive+0x40>
 8009948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <xQueueReceive+0x44>
 8009950:	2301      	movs	r3, #1
 8009952:	e000      	b.n	8009956 <xQueueReceive+0x46>
 8009954:	2300      	movs	r3, #0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10b      	bne.n	8009972 <xQueueReceive+0x62>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	61fb      	str	r3, [r7, #28]
}
 800996c:	bf00      	nop
 800996e:	bf00      	nop
 8009970:	e7fd      	b.n	800996e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009972:	f001 f919 	bl	800aba8 <xTaskGetSchedulerState>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d102      	bne.n	8009982 <xQueueReceive+0x72>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <xQueueReceive+0x76>
 8009982:	2301      	movs	r3, #1
 8009984:	e000      	b.n	8009988 <xQueueReceive+0x78>
 8009986:	2300      	movs	r3, #0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10b      	bne.n	80099a4 <xQueueReceive+0x94>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	61bb      	str	r3, [r7, #24]
}
 800999e:	bf00      	nop
 80099a0:	bf00      	nop
 80099a2:	e7fd      	b.n	80099a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099a4:	f001 fe70 	bl	800b688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d01f      	beq.n	80099f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099b4:	68b9      	ldr	r1, [r7, #8]
 80099b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099b8:	f000 f978 	bl	8009cac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099be:	1e5a      	subs	r2, r3, #1
 80099c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00f      	beq.n	80099ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ce:	3310      	adds	r3, #16
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 ff23 	bl	800a81c <xTaskRemoveFromEventList>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d007      	beq.n	80099ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80099dc:	4b3c      	ldr	r3, [pc, #240]	@ (8009ad0 <xQueueReceive+0x1c0>)
 80099de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099ec:	f001 fe7e 	bl	800b6ec <vPortExitCritical>
				return pdPASS;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e069      	b.n	8009ac8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d103      	bne.n	8009a02 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099fa:	f001 fe77 	bl	800b6ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099fe:	2300      	movs	r3, #0
 8009a00:	e062      	b.n	8009ac8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d106      	bne.n	8009a16 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a08:	f107 0310 	add.w	r3, r7, #16
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 ff69 	bl	800a8e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a12:	2301      	movs	r3, #1
 8009a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a16:	f001 fe69 	bl	800b6ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a1a:	f000 fcb7 	bl	800a38c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a1e:	f001 fe33 	bl	800b688 <vPortEnterCritical>
 8009a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a28:	b25b      	sxtb	r3, r3
 8009a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2e:	d103      	bne.n	8009a38 <xQueueReceive+0x128>
 8009a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a3e:	b25b      	sxtb	r3, r3
 8009a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a44:	d103      	bne.n	8009a4e <xQueueReceive+0x13e>
 8009a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a4e:	f001 fe4d 	bl	800b6ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a52:	1d3a      	adds	r2, r7, #4
 8009a54:	f107 0310 	add.w	r3, r7, #16
 8009a58:	4611      	mov	r1, r2
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 ff58 	bl	800a910 <xTaskCheckForTimeOut>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d123      	bne.n	8009aae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a68:	f000 f998 	bl	8009d9c <prvIsQueueEmpty>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d017      	beq.n	8009aa2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a74:	3324      	adds	r3, #36	@ 0x24
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	4611      	mov	r1, r2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 fe7c 	bl	800a778 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a82:	f000 f939 	bl	8009cf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a86:	f000 fc8f 	bl	800a3a8 <xTaskResumeAll>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d189      	bne.n	80099a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009a90:	4b0f      	ldr	r3, [pc, #60]	@ (8009ad0 <xQueueReceive+0x1c0>)
 8009a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	e780      	b.n	80099a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009aa4:	f000 f928 	bl	8009cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009aa8:	f000 fc7e 	bl	800a3a8 <xTaskResumeAll>
 8009aac:	e77a      	b.n	80099a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009aae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ab0:	f000 f922 	bl	8009cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ab4:	f000 fc78 	bl	800a3a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ab8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009aba:	f000 f96f 	bl	8009d9c <prvIsQueueEmpty>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f43f af6f 	beq.w	80099a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ac6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3730      	adds	r7, #48	@ 0x30
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	e000ed04 	.word	0xe000ed04

08009ad4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b08e      	sub	sp, #56	@ 0x38
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10b      	bne.n	8009b02 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	623b      	str	r3, [r7, #32]
}
 8009afc:	bf00      	nop
 8009afe:	bf00      	nop
 8009b00:	e7fd      	b.n	8009afe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d103      	bne.n	8009b10 <xQueueReceiveFromISR+0x3c>
 8009b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <xQueueReceiveFromISR+0x40>
 8009b10:	2301      	movs	r3, #1
 8009b12:	e000      	b.n	8009b16 <xQueueReceiveFromISR+0x42>
 8009b14:	2300      	movs	r3, #0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10b      	bne.n	8009b32 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	61fb      	str	r3, [r7, #28]
}
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	e7fd      	b.n	8009b2e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b32:	f001 fe89 	bl	800b848 <vPortValidateInterruptPriority>
	__asm volatile
 8009b36:	f3ef 8211 	mrs	r2, BASEPRI
 8009b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	61ba      	str	r2, [r7, #24]
 8009b4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009b4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b56:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d02f      	beq.n	8009bbe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b68:	68b9      	ldr	r1, [r7, #8]
 8009b6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b6c:	f000 f89e 	bl	8009cac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b72:	1e5a      	subs	r2, r3, #1
 8009b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b76:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009b78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b80:	d112      	bne.n	8009ba8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d016      	beq.n	8009bb8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8c:	3310      	adds	r3, #16
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 fe44 	bl	800a81c <xTaskRemoveFromEventList>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00e      	beq.n	8009bb8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00b      	beq.n	8009bb8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	601a      	str	r2, [r3, #0]
 8009ba6:	e007      	b.n	8009bb8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bac:	3301      	adds	r3, #1
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	b25a      	sxtb	r2, r3
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bbc:	e001      	b.n	8009bc2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f383 8811 	msr	BASEPRI, r3
}
 8009bcc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3738      	adds	r7, #56	@ 0x38
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009be4:	2300      	movs	r3, #0
 8009be6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10d      	bne.n	8009c12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d14d      	bne.n	8009c9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 ffee 	bl	800abe4 <xTaskPriorityDisinherit>
 8009c08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	609a      	str	r2, [r3, #8]
 8009c10:	e043      	b.n	8009c9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d119      	bne.n	8009c4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6858      	ldr	r0, [r3, #4]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c20:	461a      	mov	r2, r3
 8009c22:	68b9      	ldr	r1, [r7, #8]
 8009c24:	f002 fb0e 	bl	800c244 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c30:	441a      	add	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d32b      	bcc.n	8009c9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	605a      	str	r2, [r3, #4]
 8009c4a:	e026      	b.n	8009c9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	68d8      	ldr	r0, [r3, #12]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c54:	461a      	mov	r2, r3
 8009c56:	68b9      	ldr	r1, [r7, #8]
 8009c58:	f002 faf4 	bl	800c244 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	68da      	ldr	r2, [r3, #12]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c64:	425b      	negs	r3, r3
 8009c66:	441a      	add	r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	68da      	ldr	r2, [r3, #12]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d207      	bcs.n	8009c88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	689a      	ldr	r2, [r3, #8]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c80:	425b      	negs	r3, r3
 8009c82:	441a      	add	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d105      	bne.n	8009c9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	1c5a      	adds	r2, r3, #1
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009ca2:	697b      	ldr	r3, [r7, #20]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d018      	beq.n	8009cf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68da      	ldr	r2, [r3, #12]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc6:	441a      	add	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68da      	ldr	r2, [r3, #12]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d303      	bcc.n	8009ce0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	68d9      	ldr	r1, [r3, #12]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce8:	461a      	mov	r2, r3
 8009cea:	6838      	ldr	r0, [r7, #0]
 8009cec:	f002 faaa 	bl	800c244 <memcpy>
	}
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d00:	f001 fcc2 	bl	800b688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d0c:	e011      	b.n	8009d32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d012      	beq.n	8009d3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3324      	adds	r3, #36	@ 0x24
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f000 fd7e 	bl	800a81c <xTaskRemoveFromEventList>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d26:	f000 fe57 	bl	800a9d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	dce9      	bgt.n	8009d0e <prvUnlockQueue+0x16>
 8009d3a:	e000      	b.n	8009d3e <prvUnlockQueue+0x46>
					break;
 8009d3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	22ff      	movs	r2, #255	@ 0xff
 8009d42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009d46:	f001 fcd1 	bl	800b6ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d4a:	f001 fc9d 	bl	800b688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d56:	e011      	b.n	8009d7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d012      	beq.n	8009d86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	3310      	adds	r3, #16
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 fd59 	bl	800a81c <xTaskRemoveFromEventList>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d70:	f000 fe32 	bl	800a9d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d74:	7bbb      	ldrb	r3, [r7, #14]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	dce9      	bgt.n	8009d58 <prvUnlockQueue+0x60>
 8009d84:	e000      	b.n	8009d88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	22ff      	movs	r2, #255	@ 0xff
 8009d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009d90:	f001 fcac 	bl	800b6ec <vPortExitCritical>
}
 8009d94:	bf00      	nop
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009da4:	f001 fc70 	bl	800b688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d102      	bne.n	8009db6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009db0:	2301      	movs	r3, #1
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	e001      	b.n	8009dba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009db6:	2300      	movs	r3, #0
 8009db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009dba:	f001 fc97 	bl	800b6ec <vPortExitCritical>

	return xReturn;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009dd0:	f001 fc5a 	bl	800b688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d102      	bne.n	8009de6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009de0:	2301      	movs	r3, #1
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	e001      	b.n	8009dea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009de6:	2300      	movs	r3, #0
 8009de8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009dea:	f001 fc7f 	bl	800b6ec <vPortExitCritical>

	return xReturn;
 8009dee:	68fb      	ldr	r3, [r7, #12]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e02:	2300      	movs	r3, #0
 8009e04:	60fb      	str	r3, [r7, #12]
 8009e06:	e014      	b.n	8009e32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009e08:	4a0f      	ldr	r2, [pc, #60]	@ (8009e48 <vQueueAddToRegistry+0x50>)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10b      	bne.n	8009e2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e14:	490c      	ldr	r1, [pc, #48]	@ (8009e48 <vQueueAddToRegistry+0x50>)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8009e48 <vQueueAddToRegistry+0x50>)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	00db      	lsls	r3, r3, #3
 8009e24:	4413      	add	r3, r2
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e2a:	e006      	b.n	8009e3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2b07      	cmp	r3, #7
 8009e36:	d9e7      	bls.n	8009e08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e38:	bf00      	nop
 8009e3a:	bf00      	nop
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	200009b4 	.word	0x200009b4

08009e4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e5c:	f001 fc14 	bl	800b688 <vPortEnterCritical>
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e66:	b25b      	sxtb	r3, r3
 8009e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6c:	d103      	bne.n	8009e76 <vQueueWaitForMessageRestricted+0x2a>
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e7c:	b25b      	sxtb	r3, r3
 8009e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e82:	d103      	bne.n	8009e8c <vQueueWaitForMessageRestricted+0x40>
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e8c:	f001 fc2e 	bl	800b6ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d106      	bne.n	8009ea6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	3324      	adds	r3, #36	@ 0x24
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	68b9      	ldr	r1, [r7, #8]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 fc8f 	bl	800a7c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009ea6:	6978      	ldr	r0, [r7, #20]
 8009ea8:	f7ff ff26 	bl	8009cf8 <prvUnlockQueue>
	}
 8009eac:	bf00      	nop
 8009eae:	3718      	adds	r7, #24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b08e      	sub	sp, #56	@ 0x38
 8009eb8:	af04      	add	r7, sp, #16
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
 8009ec0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10b      	bne.n	8009ee0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	623b      	str	r3, [r7, #32]
}
 8009eda:	bf00      	nop
 8009edc:	bf00      	nop
 8009ede:	e7fd      	b.n	8009edc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10b      	bne.n	8009efe <xTaskCreateStatic+0x4a>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	61fb      	str	r3, [r7, #28]
}
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	e7fd      	b.n	8009efa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009efe:	23b0      	movs	r3, #176	@ 0xb0
 8009f00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	2bb0      	cmp	r3, #176	@ 0xb0
 8009f06:	d00b      	beq.n	8009f20 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	61bb      	str	r3, [r7, #24]
}
 8009f1a:	bf00      	nop
 8009f1c:	bf00      	nop
 8009f1e:	e7fd      	b.n	8009f1c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d01e      	beq.n	8009f66 <xTaskCreateStatic+0xb2>
 8009f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d01b      	beq.n	8009f66 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f30:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f36:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f40:	2300      	movs	r3, #0
 8009f42:	9303      	str	r3, [sp, #12]
 8009f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f46:	9302      	str	r3, [sp, #8]
 8009f48:	f107 0314 	add.w	r3, r7, #20
 8009f4c:	9301      	str	r3, [sp, #4]
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f000 f851 	bl	800a000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009f60:	f000 f8fc 	bl	800a15c <prvAddNewTaskToReadyList>
 8009f64:	e001      	b.n	8009f6a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009f66:	2300      	movs	r3, #0
 8009f68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f6a:	697b      	ldr	r3, [r7, #20]
	}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3728      	adds	r7, #40	@ 0x28
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b08c      	sub	sp, #48	@ 0x30
 8009f78:	af04      	add	r7, sp, #16
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	603b      	str	r3, [r7, #0]
 8009f80:	4613      	mov	r3, r2
 8009f82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f84:	88fb      	ldrh	r3, [r7, #6]
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f001 fc9f 	bl	800b8cc <pvPortMalloc>
 8009f8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00e      	beq.n	8009fb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f96:	20b0      	movs	r0, #176	@ 0xb0
 8009f98:	f001 fc98 	bl	800b8cc <pvPortMalloc>
 8009f9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d003      	beq.n	8009fac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8009faa:	e005      	b.n	8009fb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009fac:	6978      	ldr	r0, [r7, #20]
 8009fae:	f001 fcd3 	bl	800b958 <vPortFree>
 8009fb2:	e001      	b.n	8009fb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d017      	beq.n	8009fee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fc6:	88fa      	ldrh	r2, [r7, #6]
 8009fc8:	2300      	movs	r3, #0
 8009fca:	9303      	str	r3, [sp, #12]
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	9302      	str	r3, [sp, #8]
 8009fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	68b9      	ldr	r1, [r7, #8]
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f000 f80f 	bl	800a000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fe2:	69f8      	ldr	r0, [r7, #28]
 8009fe4:	f000 f8ba 	bl	800a15c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	61bb      	str	r3, [r7, #24]
 8009fec:	e002      	b.n	8009ff4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fee:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ff4:	69bb      	ldr	r3, [r7, #24]
	}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3720      	adds	r7, #32
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
	...

0800a000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b088      	sub	sp, #32
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a010:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	461a      	mov	r2, r3
 800a018:	21a5      	movs	r1, #165	@ 0xa5
 800a01a:	f002 f879 	bl	800c110 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a020:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a028:	3b01      	subs	r3, #1
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	f023 0307 	bic.w	r3, r3, #7
 800a036:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	f003 0307 	and.w	r3, r3, #7
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00b      	beq.n	800a05a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	617b      	str	r3, [r7, #20]
}
 800a054:	bf00      	nop
 800a056:	bf00      	nop
 800a058:	e7fd      	b.n	800a056 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800a05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05c:	69ba      	ldr	r2, [r7, #24]
 800a05e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d01f      	beq.n	800a0a6 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a066:	2300      	movs	r3, #0
 800a068:	61fb      	str	r3, [r7, #28]
 800a06a:	e012      	b.n	800a092 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	4413      	add	r3, r2
 800a072:	7819      	ldrb	r1, [r3, #0]
 800a074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	4413      	add	r3, r2
 800a07a:	3334      	adds	r3, #52	@ 0x34
 800a07c:	460a      	mov	r2, r1
 800a07e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	4413      	add	r3, r2
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d006      	beq.n	800a09a <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	3301      	adds	r3, #1
 800a090:	61fb      	str	r3, [r7, #28]
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	2b0f      	cmp	r3, #15
 800a096:	d9e9      	bls.n	800a06c <prvInitialiseNewTask+0x6c>
 800a098:	e000      	b.n	800a09c <prvInitialiseNewTask+0x9c>
			{
				break;
 800a09a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a0a4:	e003      	b.n	800a0ae <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b0:	2b37      	cmp	r3, #55	@ 0x37
 800a0b2:	d901      	bls.n	800a0b8 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0b4:	2337      	movs	r3, #55	@ 0x37
 800a0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0c2:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7ff f8a4 	bl	800921c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d6:	3318      	adds	r3, #24
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7ff f89f 	bl	800921c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a104:	2200      	movs	r2, #0
 800a106:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10c:	335c      	adds	r3, #92	@ 0x5c
 800a10e:	224c      	movs	r2, #76	@ 0x4c
 800a110:	2100      	movs	r1, #0
 800a112:	4618      	mov	r0, r3
 800a114:	f001 fffc 	bl	800c110 <memset>
 800a118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11a:	4a0d      	ldr	r2, [pc, #52]	@ (800a150 <prvInitialiseNewTask+0x150>)
 800a11c:	661a      	str	r2, [r3, #96]	@ 0x60
 800a11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a120:	4a0c      	ldr	r2, [pc, #48]	@ (800a154 <prvInitialiseNewTask+0x154>)
 800a122:	665a      	str	r2, [r3, #100]	@ 0x64
 800a124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a126:	4a0c      	ldr	r2, [pc, #48]	@ (800a158 <prvInitialiseNewTask+0x158>)
 800a128:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	68f9      	ldr	r1, [r7, #12]
 800a12e:	69b8      	ldr	r0, [r7, #24]
 800a130:	f001 f976 	bl	800b420 <pxPortInitialiseStack>
 800a134:	4602      	mov	r2, r0
 800a136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a138:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a146:	bf00      	nop
 800a148:	3720      	adds	r7, #32
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	20005408 	.word	0x20005408
 800a154:	20005470 	.word	0x20005470
 800a158:	200054d8 	.word	0x200054d8

0800a15c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a164:	f001 fa90 	bl	800b688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a168:	4b2d      	ldr	r3, [pc, #180]	@ (800a220 <prvAddNewTaskToReadyList+0xc4>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3301      	adds	r3, #1
 800a16e:	4a2c      	ldr	r2, [pc, #176]	@ (800a220 <prvAddNewTaskToReadyList+0xc4>)
 800a170:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a172:	4b2c      	ldr	r3, [pc, #176]	@ (800a224 <prvAddNewTaskToReadyList+0xc8>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d109      	bne.n	800a18e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a17a:	4a2a      	ldr	r2, [pc, #168]	@ (800a224 <prvAddNewTaskToReadyList+0xc8>)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a180:	4b27      	ldr	r3, [pc, #156]	@ (800a220 <prvAddNewTaskToReadyList+0xc4>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d110      	bne.n	800a1aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a188:	f000 fc4a 	bl	800aa20 <prvInitialiseTaskLists>
 800a18c:	e00d      	b.n	800a1aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a18e:	4b26      	ldr	r3, [pc, #152]	@ (800a228 <prvAddNewTaskToReadyList+0xcc>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d109      	bne.n	800a1aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a196:	4b23      	ldr	r3, [pc, #140]	@ (800a224 <prvAddNewTaskToReadyList+0xc8>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d802      	bhi.n	800a1aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a1a4:	4a1f      	ldr	r2, [pc, #124]	@ (800a224 <prvAddNewTaskToReadyList+0xc8>)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a1aa:	4b20      	ldr	r3, [pc, #128]	@ (800a22c <prvAddNewTaskToReadyList+0xd0>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	4a1e      	ldr	r2, [pc, #120]	@ (800a22c <prvAddNewTaskToReadyList+0xd0>)
 800a1b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a1b4:	4b1d      	ldr	r3, [pc, #116]	@ (800a22c <prvAddNewTaskToReadyList+0xd0>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1c0:	4b1b      	ldr	r3, [pc, #108]	@ (800a230 <prvAddNewTaskToReadyList+0xd4>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d903      	bls.n	800a1d0 <prvAddNewTaskToReadyList+0x74>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1cc:	4a18      	ldr	r2, [pc, #96]	@ (800a230 <prvAddNewTaskToReadyList+0xd4>)
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4413      	add	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4a15      	ldr	r2, [pc, #84]	@ (800a234 <prvAddNewTaskToReadyList+0xd8>)
 800a1de:	441a      	add	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	3304      	adds	r3, #4
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	f7ff f825 	bl	8009236 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1ec:	f001 fa7e 	bl	800b6ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1f0:	4b0d      	ldr	r3, [pc, #52]	@ (800a228 <prvAddNewTaskToReadyList+0xcc>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00e      	beq.n	800a216 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a224 <prvAddNewTaskToReadyList+0xc8>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a202:	429a      	cmp	r2, r3
 800a204:	d207      	bcs.n	800a216 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a206:	4b0c      	ldr	r3, [pc, #48]	@ (800a238 <prvAddNewTaskToReadyList+0xdc>)
 800a208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a20c:	601a      	str	r2, [r3, #0]
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a216:	bf00      	nop
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20000ec8 	.word	0x20000ec8
 800a224:	200009f4 	.word	0x200009f4
 800a228:	20000ed4 	.word	0x20000ed4
 800a22c:	20000ee4 	.word	0x20000ee4
 800a230:	20000ed0 	.word	0x20000ed0
 800a234:	200009f8 	.word	0x200009f8
 800a238:	e000ed04 	.word	0xe000ed04

0800a23c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a244:	2300      	movs	r3, #0
 800a246:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d018      	beq.n	800a280 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a24e:	4b14      	ldr	r3, [pc, #80]	@ (800a2a0 <vTaskDelay+0x64>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00b      	beq.n	800a26e <vTaskDelay+0x32>
	__asm volatile
 800a256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25a:	f383 8811 	msr	BASEPRI, r3
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	60bb      	str	r3, [r7, #8]
}
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	e7fd      	b.n	800a26a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a26e:	f000 f88d 	bl	800a38c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a272:	2100      	movs	r1, #0
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fd25 	bl	800acc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a27a:	f000 f895 	bl	800a3a8 <xTaskResumeAll>
 800a27e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d107      	bne.n	800a296 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a286:	4b07      	ldr	r3, [pc, #28]	@ (800a2a4 <vTaskDelay+0x68>)
 800a288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a296:	bf00      	nop
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000ef0 	.word	0x20000ef0
 800a2a4:	e000ed04 	.word	0xe000ed04

0800a2a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08a      	sub	sp, #40	@ 0x28
 800a2ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2b6:	463a      	mov	r2, r7
 800a2b8:	1d39      	adds	r1, r7, #4
 800a2ba:	f107 0308 	add.w	r3, r7, #8
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe ff58 	bl	8009174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	9202      	str	r2, [sp, #8]
 800a2cc:	9301      	str	r3, [sp, #4]
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	460a      	mov	r2, r1
 800a2d6:	4925      	ldr	r1, [pc, #148]	@ (800a36c <vTaskStartScheduler+0xc4>)
 800a2d8:	4825      	ldr	r0, [pc, #148]	@ (800a370 <vTaskStartScheduler+0xc8>)
 800a2da:	f7ff fdeb 	bl	8009eb4 <xTaskCreateStatic>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	4a24      	ldr	r2, [pc, #144]	@ (800a374 <vTaskStartScheduler+0xcc>)
 800a2e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2e4:	4b23      	ldr	r3, [pc, #140]	@ (800a374 <vTaskStartScheduler+0xcc>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	617b      	str	r3, [r7, #20]
 800a2f0:	e001      	b.n	800a2f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d102      	bne.n	800a302 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a2fc:	f000 fd36 	bl	800ad6c <xTimerCreateTimerTask>
 800a300:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d11d      	bne.n	800a344 <vTaskStartScheduler+0x9c>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	613b      	str	r3, [r7, #16]
}
 800a31a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a31c:	4b16      	ldr	r3, [pc, #88]	@ (800a378 <vTaskStartScheduler+0xd0>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	335c      	adds	r3, #92	@ 0x5c
 800a322:	4a16      	ldr	r2, [pc, #88]	@ (800a37c <vTaskStartScheduler+0xd4>)
 800a324:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a326:	4b16      	ldr	r3, [pc, #88]	@ (800a380 <vTaskStartScheduler+0xd8>)
 800a328:	f04f 32ff 	mov.w	r2, #4294967295
 800a32c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a32e:	4b15      	ldr	r3, [pc, #84]	@ (800a384 <vTaskStartScheduler+0xdc>)
 800a330:	2201      	movs	r2, #1
 800a332:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a334:	4b14      	ldr	r3, [pc, #80]	@ (800a388 <vTaskStartScheduler+0xe0>)
 800a336:	2200      	movs	r2, #0
 800a338:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a33a:	f7f6 f8c9 	bl	80004d0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a33e:	f001 f8ff 	bl	800b540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a342:	e00f      	b.n	800a364 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34a:	d10b      	bne.n	800a364 <vTaskStartScheduler+0xbc>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	60fb      	str	r3, [r7, #12]
}
 800a35e:	bf00      	nop
 800a360:	bf00      	nop
 800a362:	e7fd      	b.n	800a360 <vTaskStartScheduler+0xb8>
}
 800a364:	bf00      	nop
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	0800c328 	.word	0x0800c328
 800a370:	0800a9f1 	.word	0x0800a9f1
 800a374:	20000eec 	.word	0x20000eec
 800a378:	200009f4 	.word	0x200009f4
 800a37c:	20000030 	.word	0x20000030
 800a380:	20000ee8 	.word	0x20000ee8
 800a384:	20000ed4 	.word	0x20000ed4
 800a388:	20000ecc 	.word	0x20000ecc

0800a38c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a38c:	b480      	push	{r7}
 800a38e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a390:	4b04      	ldr	r3, [pc, #16]	@ (800a3a4 <vTaskSuspendAll+0x18>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3301      	adds	r3, #1
 800a396:	4a03      	ldr	r2, [pc, #12]	@ (800a3a4 <vTaskSuspendAll+0x18>)
 800a398:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a39a:	bf00      	nop
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	20000ef0 	.word	0x20000ef0

0800a3a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a3b6:	4b42      	ldr	r3, [pc, #264]	@ (800a4c0 <xTaskResumeAll+0x118>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10b      	bne.n	800a3d6 <xTaskResumeAll+0x2e>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	603b      	str	r3, [r7, #0]
}
 800a3d0:	bf00      	nop
 800a3d2:	bf00      	nop
 800a3d4:	e7fd      	b.n	800a3d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3d6:	f001 f957 	bl	800b688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3da:	4b39      	ldr	r3, [pc, #228]	@ (800a4c0 <xTaskResumeAll+0x118>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	4a37      	ldr	r2, [pc, #220]	@ (800a4c0 <xTaskResumeAll+0x118>)
 800a3e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3e4:	4b36      	ldr	r3, [pc, #216]	@ (800a4c0 <xTaskResumeAll+0x118>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d162      	bne.n	800a4b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3ec:	4b35      	ldr	r3, [pc, #212]	@ (800a4c4 <xTaskResumeAll+0x11c>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d05e      	beq.n	800a4b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3f4:	e02f      	b.n	800a456 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3f6:	4b34      	ldr	r3, [pc, #208]	@ (800a4c8 <xTaskResumeAll+0x120>)
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	3318      	adds	r3, #24
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe ff74 	bl	80092f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3304      	adds	r3, #4
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7fe ff6f 	bl	80092f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a416:	4b2d      	ldr	r3, [pc, #180]	@ (800a4cc <xTaskResumeAll+0x124>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d903      	bls.n	800a426 <xTaskResumeAll+0x7e>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a422:	4a2a      	ldr	r2, [pc, #168]	@ (800a4cc <xTaskResumeAll+0x124>)
 800a424:	6013      	str	r3, [r2, #0]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a42a:	4613      	mov	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4a27      	ldr	r2, [pc, #156]	@ (800a4d0 <xTaskResumeAll+0x128>)
 800a434:	441a      	add	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	3304      	adds	r3, #4
 800a43a:	4619      	mov	r1, r3
 800a43c:	4610      	mov	r0, r2
 800a43e:	f7fe fefa 	bl	8009236 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a446:	4b23      	ldr	r3, [pc, #140]	@ (800a4d4 <xTaskResumeAll+0x12c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d302      	bcc.n	800a456 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a450:	4b21      	ldr	r3, [pc, #132]	@ (800a4d8 <xTaskResumeAll+0x130>)
 800a452:	2201      	movs	r2, #1
 800a454:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a456:	4b1c      	ldr	r3, [pc, #112]	@ (800a4c8 <xTaskResumeAll+0x120>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1cb      	bne.n	800a3f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a464:	f000 fb80 	bl	800ab68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a468:	4b1c      	ldr	r3, [pc, #112]	@ (800a4dc <xTaskResumeAll+0x134>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d010      	beq.n	800a496 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a474:	f000 f846 	bl	800a504 <xTaskIncrementTick>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d002      	beq.n	800a484 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a47e:	4b16      	ldr	r3, [pc, #88]	@ (800a4d8 <xTaskResumeAll+0x130>)
 800a480:	2201      	movs	r2, #1
 800a482:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	3b01      	subs	r3, #1
 800a488:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1f1      	bne.n	800a474 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a490:	4b12      	ldr	r3, [pc, #72]	@ (800a4dc <xTaskResumeAll+0x134>)
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a496:	4b10      	ldr	r3, [pc, #64]	@ (800a4d8 <xTaskResumeAll+0x130>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d009      	beq.n	800a4b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a4a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a4e0 <xTaskResumeAll+0x138>)
 800a4a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4b2:	f001 f91b 	bl	800b6ec <vPortExitCritical>

	return xAlreadyYielded;
 800a4b6:	68bb      	ldr	r3, [r7, #8]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	20000ef0 	.word	0x20000ef0
 800a4c4:	20000ec8 	.word	0x20000ec8
 800a4c8:	20000e88 	.word	0x20000e88
 800a4cc:	20000ed0 	.word	0x20000ed0
 800a4d0:	200009f8 	.word	0x200009f8
 800a4d4:	200009f4 	.word	0x200009f4
 800a4d8:	20000edc 	.word	0x20000edc
 800a4dc:	20000ed8 	.word	0x20000ed8
 800a4e0:	e000ed04 	.word	0xe000ed04

0800a4e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a4ea:	4b05      	ldr	r3, [pc, #20]	@ (800a500 <xTaskGetTickCount+0x1c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a4f0:	687b      	ldr	r3, [r7, #4]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	20000ecc 	.word	0x20000ecc

0800a504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a50a:	2300      	movs	r3, #0
 800a50c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a50e:	4b4f      	ldr	r3, [pc, #316]	@ (800a64c <xTaskIncrementTick+0x148>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	f040 8090 	bne.w	800a638 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a518:	4b4d      	ldr	r3, [pc, #308]	@ (800a650 <xTaskIncrementTick+0x14c>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	3301      	adds	r3, #1
 800a51e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a520:	4a4b      	ldr	r2, [pc, #300]	@ (800a650 <xTaskIncrementTick+0x14c>)
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d121      	bne.n	800a570 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a52c:	4b49      	ldr	r3, [pc, #292]	@ (800a654 <xTaskIncrementTick+0x150>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00b      	beq.n	800a54e <xTaskIncrementTick+0x4a>
	__asm volatile
 800a536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a53a:	f383 8811 	msr	BASEPRI, r3
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f3bf 8f4f 	dsb	sy
 800a546:	603b      	str	r3, [r7, #0]
}
 800a548:	bf00      	nop
 800a54a:	bf00      	nop
 800a54c:	e7fd      	b.n	800a54a <xTaskIncrementTick+0x46>
 800a54e:	4b41      	ldr	r3, [pc, #260]	@ (800a654 <xTaskIncrementTick+0x150>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	4b40      	ldr	r3, [pc, #256]	@ (800a658 <xTaskIncrementTick+0x154>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a3e      	ldr	r2, [pc, #248]	@ (800a654 <xTaskIncrementTick+0x150>)
 800a55a:	6013      	str	r3, [r2, #0]
 800a55c:	4a3e      	ldr	r2, [pc, #248]	@ (800a658 <xTaskIncrementTick+0x154>)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6013      	str	r3, [r2, #0]
 800a562:	4b3e      	ldr	r3, [pc, #248]	@ (800a65c <xTaskIncrementTick+0x158>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3301      	adds	r3, #1
 800a568:	4a3c      	ldr	r2, [pc, #240]	@ (800a65c <xTaskIncrementTick+0x158>)
 800a56a:	6013      	str	r3, [r2, #0]
 800a56c:	f000 fafc 	bl	800ab68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a570:	4b3b      	ldr	r3, [pc, #236]	@ (800a660 <xTaskIncrementTick+0x15c>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	693a      	ldr	r2, [r7, #16]
 800a576:	429a      	cmp	r2, r3
 800a578:	d349      	bcc.n	800a60e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a57a:	4b36      	ldr	r3, [pc, #216]	@ (800a654 <xTaskIncrementTick+0x150>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d104      	bne.n	800a58e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a584:	4b36      	ldr	r3, [pc, #216]	@ (800a660 <xTaskIncrementTick+0x15c>)
 800a586:	f04f 32ff 	mov.w	r2, #4294967295
 800a58a:	601a      	str	r2, [r3, #0]
					break;
 800a58c:	e03f      	b.n	800a60e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a58e:	4b31      	ldr	r3, [pc, #196]	@ (800a654 <xTaskIncrementTick+0x150>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d203      	bcs.n	800a5ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a5a6:	4a2e      	ldr	r2, [pc, #184]	@ (800a660 <xTaskIncrementTick+0x15c>)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5ac:	e02f      	b.n	800a60e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fe fe9c 	bl	80092f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d004      	beq.n	800a5ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	3318      	adds	r3, #24
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe fe93 	bl	80092f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ce:	4b25      	ldr	r3, [pc, #148]	@ (800a664 <xTaskIncrementTick+0x160>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d903      	bls.n	800a5de <xTaskIncrementTick+0xda>
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5da:	4a22      	ldr	r2, [pc, #136]	@ (800a664 <xTaskIncrementTick+0x160>)
 800a5dc:	6013      	str	r3, [r2, #0]
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	4a1f      	ldr	r2, [pc, #124]	@ (800a668 <xTaskIncrementTick+0x164>)
 800a5ec:	441a      	add	r2, r3
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	f7fe fe1e 	bl	8009236 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5fe:	4b1b      	ldr	r3, [pc, #108]	@ (800a66c <xTaskIncrementTick+0x168>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a604:	429a      	cmp	r2, r3
 800a606:	d3b8      	bcc.n	800a57a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a608:	2301      	movs	r3, #1
 800a60a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a60c:	e7b5      	b.n	800a57a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a60e:	4b17      	ldr	r3, [pc, #92]	@ (800a66c <xTaskIncrementTick+0x168>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a614:	4914      	ldr	r1, [pc, #80]	@ (800a668 <xTaskIncrementTick+0x164>)
 800a616:	4613      	mov	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	440b      	add	r3, r1
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d901      	bls.n	800a62a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a626:	2301      	movs	r3, #1
 800a628:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a62a:	4b11      	ldr	r3, [pc, #68]	@ (800a670 <xTaskIncrementTick+0x16c>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d007      	beq.n	800a642 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a632:	2301      	movs	r3, #1
 800a634:	617b      	str	r3, [r7, #20]
 800a636:	e004      	b.n	800a642 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a638:	4b0e      	ldr	r3, [pc, #56]	@ (800a674 <xTaskIncrementTick+0x170>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3301      	adds	r3, #1
 800a63e:	4a0d      	ldr	r2, [pc, #52]	@ (800a674 <xTaskIncrementTick+0x170>)
 800a640:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a642:	697b      	ldr	r3, [r7, #20]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3718      	adds	r7, #24
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20000ef0 	.word	0x20000ef0
 800a650:	20000ecc 	.word	0x20000ecc
 800a654:	20000e80 	.word	0x20000e80
 800a658:	20000e84 	.word	0x20000e84
 800a65c:	20000ee0 	.word	0x20000ee0
 800a660:	20000ee8 	.word	0x20000ee8
 800a664:	20000ed0 	.word	0x20000ed0
 800a668:	200009f8 	.word	0x200009f8
 800a66c:	200009f4 	.word	0x200009f4
 800a670:	20000edc 	.word	0x20000edc
 800a674:	20000ed8 	.word	0x20000ed8

0800a678 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a67e:	4b36      	ldr	r3, [pc, #216]	@ (800a758 <vTaskSwitchContext+0xe0>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a686:	4b35      	ldr	r3, [pc, #212]	@ (800a75c <vTaskSwitchContext+0xe4>)
 800a688:	2201      	movs	r2, #1
 800a68a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a68c:	e060      	b.n	800a750 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 800a68e:	4b33      	ldr	r3, [pc, #204]	@ (800a75c <vTaskSwitchContext+0xe4>)
 800a690:	2200      	movs	r2, #0
 800a692:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a694:	f7f5 ff36 	bl	8000504 <getRunTimeCounterValue>
 800a698:	4603      	mov	r3, r0
 800a69a:	4a31      	ldr	r2, [pc, #196]	@ (800a760 <vTaskSwitchContext+0xe8>)
 800a69c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a69e:	4b30      	ldr	r3, [pc, #192]	@ (800a760 <vTaskSwitchContext+0xe8>)
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	4b30      	ldr	r3, [pc, #192]	@ (800a764 <vTaskSwitchContext+0xec>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d909      	bls.n	800a6be <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a6aa:	4b2f      	ldr	r3, [pc, #188]	@ (800a768 <vTaskSwitchContext+0xf0>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800a6b0:	4a2b      	ldr	r2, [pc, #172]	@ (800a760 <vTaskSwitchContext+0xe8>)
 800a6b2:	6810      	ldr	r0, [r2, #0]
 800a6b4:	4a2b      	ldr	r2, [pc, #172]	@ (800a764 <vTaskSwitchContext+0xec>)
 800a6b6:	6812      	ldr	r2, [r2, #0]
 800a6b8:	1a82      	subs	r2, r0, r2
 800a6ba:	440a      	add	r2, r1
 800a6bc:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a6be:	4b28      	ldr	r3, [pc, #160]	@ (800a760 <vTaskSwitchContext+0xe8>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a28      	ldr	r2, [pc, #160]	@ (800a764 <vTaskSwitchContext+0xec>)
 800a6c4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6c6:	4b29      	ldr	r3, [pc, #164]	@ (800a76c <vTaskSwitchContext+0xf4>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	e011      	b.n	800a6f2 <vTaskSwitchContext+0x7a>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10b      	bne.n	800a6ec <vTaskSwitchContext+0x74>
	__asm volatile
 800a6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d8:	f383 8811 	msr	BASEPRI, r3
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	607b      	str	r3, [r7, #4]
}
 800a6e6:	bf00      	nop
 800a6e8:	bf00      	nop
 800a6ea:	e7fd      	b.n	800a6e8 <vTaskSwitchContext+0x70>
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	60fb      	str	r3, [r7, #12]
 800a6f2:	491f      	ldr	r1, [pc, #124]	@ (800a770 <vTaskSwitchContext+0xf8>)
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	440b      	add	r3, r1
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d0e3      	beq.n	800a6ce <vTaskSwitchContext+0x56>
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	4613      	mov	r3, r2
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	4413      	add	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4a17      	ldr	r2, [pc, #92]	@ (800a770 <vTaskSwitchContext+0xf8>)
 800a712:	4413      	add	r3, r2
 800a714:	60bb      	str	r3, [r7, #8]
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	605a      	str	r2, [r3, #4]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	685a      	ldr	r2, [r3, #4]
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	3308      	adds	r3, #8
 800a728:	429a      	cmp	r2, r3
 800a72a:	d104      	bne.n	800a736 <vTaskSwitchContext+0xbe>
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	605a      	str	r2, [r3, #4]
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	4a0a      	ldr	r2, [pc, #40]	@ (800a768 <vTaskSwitchContext+0xf0>)
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	4a0a      	ldr	r2, [pc, #40]	@ (800a76c <vTaskSwitchContext+0xf4>)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a746:	4b08      	ldr	r3, [pc, #32]	@ (800a768 <vTaskSwitchContext+0xf0>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	335c      	adds	r3, #92	@ 0x5c
 800a74c:	4a09      	ldr	r2, [pc, #36]	@ (800a774 <vTaskSwitchContext+0xfc>)
 800a74e:	6013      	str	r3, [r2, #0]
}
 800a750:	bf00      	nop
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20000ef0 	.word	0x20000ef0
 800a75c:	20000edc 	.word	0x20000edc
 800a760:	20000ef8 	.word	0x20000ef8
 800a764:	20000ef4 	.word	0x20000ef4
 800a768:	200009f4 	.word	0x200009f4
 800a76c:	20000ed0 	.word	0x20000ed0
 800a770:	200009f8 	.word	0x200009f8
 800a774:	20000030 	.word	0x20000030

0800a778 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10b      	bne.n	800a7a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a78c:	f383 8811 	msr	BASEPRI, r3
 800a790:	f3bf 8f6f 	isb	sy
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	60fb      	str	r3, [r7, #12]
}
 800a79a:	bf00      	nop
 800a79c:	bf00      	nop
 800a79e:	e7fd      	b.n	800a79c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7a0:	4b07      	ldr	r3, [pc, #28]	@ (800a7c0 <vTaskPlaceOnEventList+0x48>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	3318      	adds	r3, #24
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7fe fd68 	bl	800927e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	6838      	ldr	r0, [r7, #0]
 800a7b2:	f000 fa87 	bl	800acc4 <prvAddCurrentTaskToDelayedList>
}
 800a7b6:	bf00      	nop
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	200009f4 	.word	0x200009f4

0800a7c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10b      	bne.n	800a7ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	617b      	str	r3, [r7, #20]
}
 800a7e8:	bf00      	nop
 800a7ea:	bf00      	nop
 800a7ec:	e7fd      	b.n	800a7ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a818 <vTaskPlaceOnEventListRestricted+0x54>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3318      	adds	r3, #24
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f7fe fd1d 	bl	8009236 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a802:	f04f 33ff 	mov.w	r3, #4294967295
 800a806:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	68b8      	ldr	r0, [r7, #8]
 800a80c:	f000 fa5a 	bl	800acc4 <prvAddCurrentTaskToDelayedList>
	}
 800a810:	bf00      	nop
 800a812:	3718      	adds	r7, #24
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	200009f4 	.word	0x200009f4

0800a81c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10b      	bne.n	800a84a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	60fb      	str	r3, [r7, #12]
}
 800a844:	bf00      	nop
 800a846:	bf00      	nop
 800a848:	e7fd      	b.n	800a846 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	3318      	adds	r3, #24
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe fd4e 	bl	80092f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a854:	4b1d      	ldr	r3, [pc, #116]	@ (800a8cc <xTaskRemoveFromEventList+0xb0>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d11d      	bne.n	800a898 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	3304      	adds	r3, #4
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe fd45 	bl	80092f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a86a:	4b19      	ldr	r3, [pc, #100]	@ (800a8d0 <xTaskRemoveFromEventList+0xb4>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d903      	bls.n	800a87a <xTaskRemoveFromEventList+0x5e>
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a876:	4a16      	ldr	r2, [pc, #88]	@ (800a8d0 <xTaskRemoveFromEventList+0xb4>)
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a87e:	4613      	mov	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4413      	add	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4a13      	ldr	r2, [pc, #76]	@ (800a8d4 <xTaskRemoveFromEventList+0xb8>)
 800a888:	441a      	add	r2, r3
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	3304      	adds	r3, #4
 800a88e:	4619      	mov	r1, r3
 800a890:	4610      	mov	r0, r2
 800a892:	f7fe fcd0 	bl	8009236 <vListInsertEnd>
 800a896:	e005      	b.n	800a8a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	3318      	adds	r3, #24
 800a89c:	4619      	mov	r1, r3
 800a89e:	480e      	ldr	r0, [pc, #56]	@ (800a8d8 <xTaskRemoveFromEventList+0xbc>)
 800a8a0:	f7fe fcc9 	bl	8009236 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a8dc <xTaskRemoveFromEventList+0xc0>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d905      	bls.n	800a8be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a8b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e0 <xTaskRemoveFromEventList+0xc4>)
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	e001      	b.n	800a8c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a8c2:	697b      	ldr	r3, [r7, #20]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3718      	adds	r7, #24
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	20000ef0 	.word	0x20000ef0
 800a8d0:	20000ed0 	.word	0x20000ed0
 800a8d4:	200009f8 	.word	0x200009f8
 800a8d8:	20000e88 	.word	0x20000e88
 800a8dc:	200009f4 	.word	0x200009f4
 800a8e0:	20000edc 	.word	0x20000edc

0800a8e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a8ec:	4b06      	ldr	r3, [pc, #24]	@ (800a908 <vTaskInternalSetTimeOutState+0x24>)
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a8f4:	4b05      	ldr	r3, [pc, #20]	@ (800a90c <vTaskInternalSetTimeOutState+0x28>)
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	605a      	str	r2, [r3, #4]
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	20000ee0 	.word	0x20000ee0
 800a90c:	20000ecc 	.word	0x20000ecc

0800a910 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b088      	sub	sp, #32
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10b      	bne.n	800a938 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	613b      	str	r3, [r7, #16]
}
 800a932:	bf00      	nop
 800a934:	bf00      	nop
 800a936:	e7fd      	b.n	800a934 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10b      	bne.n	800a956 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	60fb      	str	r3, [r7, #12]
}
 800a950:	bf00      	nop
 800a952:	bf00      	nop
 800a954:	e7fd      	b.n	800a952 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a956:	f000 fe97 	bl	800b688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a95a:	4b1d      	ldr	r3, [pc, #116]	@ (800a9d0 <xTaskCheckForTimeOut+0xc0>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	69ba      	ldr	r2, [r7, #24]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a972:	d102      	bne.n	800a97a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a974:	2300      	movs	r3, #0
 800a976:	61fb      	str	r3, [r7, #28]
 800a978:	e023      	b.n	800a9c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	4b15      	ldr	r3, [pc, #84]	@ (800a9d4 <xTaskCheckForTimeOut+0xc4>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	429a      	cmp	r2, r3
 800a984:	d007      	beq.n	800a996 <xTaskCheckForTimeOut+0x86>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	69ba      	ldr	r2, [r7, #24]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d302      	bcc.n	800a996 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a990:	2301      	movs	r3, #1
 800a992:	61fb      	str	r3, [r7, #28]
 800a994:	e015      	b.n	800a9c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d20b      	bcs.n	800a9b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	1ad2      	subs	r2, r2, r3
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7ff ff99 	bl	800a8e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	61fb      	str	r3, [r7, #28]
 800a9b6:	e004      	b.n	800a9c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a9c2:	f000 fe93 	bl	800b6ec <vPortExitCritical>

	return xReturn;
 800a9c6:	69fb      	ldr	r3, [r7, #28]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3720      	adds	r7, #32
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	20000ecc 	.word	0x20000ecc
 800a9d4:	20000ee0 	.word	0x20000ee0

0800a9d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a9dc:	4b03      	ldr	r3, [pc, #12]	@ (800a9ec <vTaskMissedYield+0x14>)
 800a9de:	2201      	movs	r2, #1
 800a9e0:	601a      	str	r2, [r3, #0]
}
 800a9e2:	bf00      	nop
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	20000edc 	.word	0x20000edc

0800a9f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a9f8:	f000 f852 	bl	800aaa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a9fc:	4b06      	ldr	r3, [pc, #24]	@ (800aa18 <prvIdleTask+0x28>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d9f9      	bls.n	800a9f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa04:	4b05      	ldr	r3, [pc, #20]	@ (800aa1c <prvIdleTask+0x2c>)
 800aa06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa14:	e7f0      	b.n	800a9f8 <prvIdleTask+0x8>
 800aa16:	bf00      	nop
 800aa18:	200009f8 	.word	0x200009f8
 800aa1c:	e000ed04 	.word	0xe000ed04

0800aa20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa26:	2300      	movs	r3, #0
 800aa28:	607b      	str	r3, [r7, #4]
 800aa2a:	e00c      	b.n	800aa46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4a12      	ldr	r2, [pc, #72]	@ (800aa80 <prvInitialiseTaskLists+0x60>)
 800aa38:	4413      	add	r3, r2
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fe fbce 	bl	80091dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	3301      	adds	r3, #1
 800aa44:	607b      	str	r3, [r7, #4]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b37      	cmp	r3, #55	@ 0x37
 800aa4a:	d9ef      	bls.n	800aa2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa4c:	480d      	ldr	r0, [pc, #52]	@ (800aa84 <prvInitialiseTaskLists+0x64>)
 800aa4e:	f7fe fbc5 	bl	80091dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa52:	480d      	ldr	r0, [pc, #52]	@ (800aa88 <prvInitialiseTaskLists+0x68>)
 800aa54:	f7fe fbc2 	bl	80091dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa58:	480c      	ldr	r0, [pc, #48]	@ (800aa8c <prvInitialiseTaskLists+0x6c>)
 800aa5a:	f7fe fbbf 	bl	80091dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa5e:	480c      	ldr	r0, [pc, #48]	@ (800aa90 <prvInitialiseTaskLists+0x70>)
 800aa60:	f7fe fbbc 	bl	80091dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa64:	480b      	ldr	r0, [pc, #44]	@ (800aa94 <prvInitialiseTaskLists+0x74>)
 800aa66:	f7fe fbb9 	bl	80091dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa6a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa98 <prvInitialiseTaskLists+0x78>)
 800aa6c:	4a05      	ldr	r2, [pc, #20]	@ (800aa84 <prvInitialiseTaskLists+0x64>)
 800aa6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa70:	4b0a      	ldr	r3, [pc, #40]	@ (800aa9c <prvInitialiseTaskLists+0x7c>)
 800aa72:	4a05      	ldr	r2, [pc, #20]	@ (800aa88 <prvInitialiseTaskLists+0x68>)
 800aa74:	601a      	str	r2, [r3, #0]
}
 800aa76:	bf00      	nop
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	200009f8 	.word	0x200009f8
 800aa84:	20000e58 	.word	0x20000e58
 800aa88:	20000e6c 	.word	0x20000e6c
 800aa8c:	20000e88 	.word	0x20000e88
 800aa90:	20000e9c 	.word	0x20000e9c
 800aa94:	20000eb4 	.word	0x20000eb4
 800aa98:	20000e80 	.word	0x20000e80
 800aa9c:	20000e84 	.word	0x20000e84

0800aaa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aaa6:	e019      	b.n	800aadc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aaa8:	f000 fdee 	bl	800b688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaac:	4b10      	ldr	r3, [pc, #64]	@ (800aaf0 <prvCheckTasksWaitingTermination+0x50>)
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	3304      	adds	r3, #4
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fe fc19 	bl	80092f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aabe:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf4 <prvCheckTasksWaitingTermination+0x54>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	4a0b      	ldr	r2, [pc, #44]	@ (800aaf4 <prvCheckTasksWaitingTermination+0x54>)
 800aac6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aac8:	4b0b      	ldr	r3, [pc, #44]	@ (800aaf8 <prvCheckTasksWaitingTermination+0x58>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3b01      	subs	r3, #1
 800aace:	4a0a      	ldr	r2, [pc, #40]	@ (800aaf8 <prvCheckTasksWaitingTermination+0x58>)
 800aad0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aad2:	f000 fe0b 	bl	800b6ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f810 	bl	800aafc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aadc:	4b06      	ldr	r3, [pc, #24]	@ (800aaf8 <prvCheckTasksWaitingTermination+0x58>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1e1      	bne.n	800aaa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	20000e9c 	.word	0x20000e9c
 800aaf4:	20000ec8 	.word	0x20000ec8
 800aaf8:	20000eb0 	.word	0x20000eb0

0800aafc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	335c      	adds	r3, #92	@ 0x5c
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f001 fb09 	bl	800c120 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d108      	bne.n	800ab2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f000 ff1b 	bl	800b958 <vPortFree>
				vPortFree( pxTCB );
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 ff18 	bl	800b958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab28:	e019      	b.n	800ab5e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d103      	bne.n	800ab3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 ff0f 	bl	800b958 <vPortFree>
	}
 800ab3a:	e010      	b.n	800ab5e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d00b      	beq.n	800ab5e <prvDeleteTCB+0x62>
	__asm volatile
 800ab46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	60fb      	str	r3, [r7, #12]
}
 800ab58:	bf00      	nop
 800ab5a:	bf00      	nop
 800ab5c:	e7fd      	b.n	800ab5a <prvDeleteTCB+0x5e>
	}
 800ab5e:	bf00      	nop
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
	...

0800ab68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab6e:	4b0c      	ldr	r3, [pc, #48]	@ (800aba0 <prvResetNextTaskUnblockTime+0x38>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d104      	bne.n	800ab82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab78:	4b0a      	ldr	r3, [pc, #40]	@ (800aba4 <prvResetNextTaskUnblockTime+0x3c>)
 800ab7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab80:	e008      	b.n	800ab94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab82:	4b07      	ldr	r3, [pc, #28]	@ (800aba0 <prvResetNextTaskUnblockTime+0x38>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	4a04      	ldr	r2, [pc, #16]	@ (800aba4 <prvResetNextTaskUnblockTime+0x3c>)
 800ab92:	6013      	str	r3, [r2, #0]
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	20000e80 	.word	0x20000e80
 800aba4:	20000ee8 	.word	0x20000ee8

0800aba8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800abae:	4b0b      	ldr	r3, [pc, #44]	@ (800abdc <xTaskGetSchedulerState+0x34>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d102      	bne.n	800abbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800abb6:	2301      	movs	r3, #1
 800abb8:	607b      	str	r3, [r7, #4]
 800abba:	e008      	b.n	800abce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abbc:	4b08      	ldr	r3, [pc, #32]	@ (800abe0 <xTaskGetSchedulerState+0x38>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d102      	bne.n	800abca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800abc4:	2302      	movs	r3, #2
 800abc6:	607b      	str	r3, [r7, #4]
 800abc8:	e001      	b.n	800abce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800abca:	2300      	movs	r3, #0
 800abcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800abce:	687b      	ldr	r3, [r7, #4]
	}
 800abd0:	4618      	mov	r0, r3
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	20000ed4 	.word	0x20000ed4
 800abe0:	20000ef0 	.word	0x20000ef0

0800abe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800abf0:	2300      	movs	r3, #0
 800abf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d058      	beq.n	800acac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800abfa:	4b2f      	ldr	r3, [pc, #188]	@ (800acb8 <xTaskPriorityDisinherit+0xd4>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d00b      	beq.n	800ac1c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	60fb      	str	r3, [r7, #12]
}
 800ac16:	bf00      	nop
 800ac18:	bf00      	nop
 800ac1a:	e7fd      	b.n	800ac18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10b      	bne.n	800ac3c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ac24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	60bb      	str	r3, [r7, #8]
}
 800ac36:	bf00      	nop
 800ac38:	bf00      	nop
 800ac3a:	e7fd      	b.n	800ac38 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac40:	1e5a      	subs	r2, r3, #1
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d02c      	beq.n	800acac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d128      	bne.n	800acac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fe fb46 	bl	80092f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac7c:	4b0f      	ldr	r3, [pc, #60]	@ (800acbc <xTaskPriorityDisinherit+0xd8>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d903      	bls.n	800ac8c <xTaskPriorityDisinherit+0xa8>
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac88:	4a0c      	ldr	r2, [pc, #48]	@ (800acbc <xTaskPriorityDisinherit+0xd8>)
 800ac8a:	6013      	str	r3, [r2, #0]
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac90:	4613      	mov	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4a09      	ldr	r2, [pc, #36]	@ (800acc0 <xTaskPriorityDisinherit+0xdc>)
 800ac9a:	441a      	add	r2, r3
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	3304      	adds	r3, #4
 800aca0:	4619      	mov	r1, r3
 800aca2:	4610      	mov	r0, r2
 800aca4:	f7fe fac7 	bl	8009236 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aca8:	2301      	movs	r3, #1
 800acaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acac:	697b      	ldr	r3, [r7, #20]
	}
 800acae:	4618      	mov	r0, r3
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	200009f4 	.word	0x200009f4
 800acbc:	20000ed0 	.word	0x20000ed0
 800acc0:	200009f8 	.word	0x200009f8

0800acc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800acce:	4b21      	ldr	r3, [pc, #132]	@ (800ad54 <prvAddCurrentTaskToDelayedList+0x90>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acd4:	4b20      	ldr	r3, [pc, #128]	@ (800ad58 <prvAddCurrentTaskToDelayedList+0x94>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	3304      	adds	r3, #4
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fe fb08 	bl	80092f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace6:	d10a      	bne.n	800acfe <prvAddCurrentTaskToDelayedList+0x3a>
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d007      	beq.n	800acfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acee:	4b1a      	ldr	r3, [pc, #104]	@ (800ad58 <prvAddCurrentTaskToDelayedList+0x94>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3304      	adds	r3, #4
 800acf4:	4619      	mov	r1, r3
 800acf6:	4819      	ldr	r0, [pc, #100]	@ (800ad5c <prvAddCurrentTaskToDelayedList+0x98>)
 800acf8:	f7fe fa9d 	bl	8009236 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800acfc:	e026      	b.n	800ad4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4413      	add	r3, r2
 800ad04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad06:	4b14      	ldr	r3, [pc, #80]	@ (800ad58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d209      	bcs.n	800ad2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad16:	4b12      	ldr	r3, [pc, #72]	@ (800ad60 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ad58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	3304      	adds	r3, #4
 800ad20:	4619      	mov	r1, r3
 800ad22:	4610      	mov	r0, r2
 800ad24:	f7fe faab 	bl	800927e <vListInsert>
}
 800ad28:	e010      	b.n	800ad4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad2a:	4b0e      	ldr	r3, [pc, #56]	@ (800ad64 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ad58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	3304      	adds	r3, #4
 800ad34:	4619      	mov	r1, r3
 800ad36:	4610      	mov	r0, r2
 800ad38:	f7fe faa1 	bl	800927e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d202      	bcs.n	800ad4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad46:	4a08      	ldr	r2, [pc, #32]	@ (800ad68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	6013      	str	r3, [r2, #0]
}
 800ad4c:	bf00      	nop
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	20000ecc 	.word	0x20000ecc
 800ad58:	200009f4 	.word	0x200009f4
 800ad5c:	20000eb4 	.word	0x20000eb4
 800ad60:	20000e84 	.word	0x20000e84
 800ad64:	20000e80 	.word	0x20000e80
 800ad68:	20000ee8 	.word	0x20000ee8

0800ad6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b08a      	sub	sp, #40	@ 0x28
 800ad70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad72:	2300      	movs	r3, #0
 800ad74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad76:	f000 fb13 	bl	800b3a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad7a:	4b1d      	ldr	r3, [pc, #116]	@ (800adf0 <xTimerCreateTimerTask+0x84>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d021      	beq.n	800adc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad82:	2300      	movs	r3, #0
 800ad84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad86:	2300      	movs	r3, #0
 800ad88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad8a:	1d3a      	adds	r2, r7, #4
 800ad8c:	f107 0108 	add.w	r1, r7, #8
 800ad90:	f107 030c 	add.w	r3, r7, #12
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fe fa07 	bl	80091a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad9a:	6879      	ldr	r1, [r7, #4]
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	9202      	str	r2, [sp, #8]
 800ada2:	9301      	str	r3, [sp, #4]
 800ada4:	2302      	movs	r3, #2
 800ada6:	9300      	str	r3, [sp, #0]
 800ada8:	2300      	movs	r3, #0
 800adaa:	460a      	mov	r2, r1
 800adac:	4911      	ldr	r1, [pc, #68]	@ (800adf4 <xTimerCreateTimerTask+0x88>)
 800adae:	4812      	ldr	r0, [pc, #72]	@ (800adf8 <xTimerCreateTimerTask+0x8c>)
 800adb0:	f7ff f880 	bl	8009eb4 <xTaskCreateStatic>
 800adb4:	4603      	mov	r3, r0
 800adb6:	4a11      	ldr	r2, [pc, #68]	@ (800adfc <xTimerCreateTimerTask+0x90>)
 800adb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800adba:	4b10      	ldr	r3, [pc, #64]	@ (800adfc <xTimerCreateTimerTask+0x90>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d001      	beq.n	800adc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800adc2:	2301      	movs	r3, #1
 800adc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10b      	bne.n	800ade4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	613b      	str	r3, [r7, #16]
}
 800adde:	bf00      	nop
 800ade0:	bf00      	nop
 800ade2:	e7fd      	b.n	800ade0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ade4:	697b      	ldr	r3, [r7, #20]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3718      	adds	r7, #24
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	20000f2c 	.word	0x20000f2c
 800adf4:	0800c358 	.word	0x0800c358
 800adf8:	0800af39 	.word	0x0800af39
 800adfc:	20000f30 	.word	0x20000f30

0800ae00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b08a      	sub	sp, #40	@ 0x28
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
 800ae0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10b      	bne.n	800ae30 <xTimerGenericCommand+0x30>
	__asm volatile
 800ae18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	623b      	str	r3, [r7, #32]
}
 800ae2a:	bf00      	nop
 800ae2c:	bf00      	nop
 800ae2e:	e7fd      	b.n	800ae2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae30:	4b19      	ldr	r3, [pc, #100]	@ (800ae98 <xTimerGenericCommand+0x98>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d02a      	beq.n	800ae8e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	2b05      	cmp	r3, #5
 800ae48:	dc18      	bgt.n	800ae7c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae4a:	f7ff fead 	bl	800aba8 <xTaskGetSchedulerState>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d109      	bne.n	800ae68 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae54:	4b10      	ldr	r3, [pc, #64]	@ (800ae98 <xTimerGenericCommand+0x98>)
 800ae56:	6818      	ldr	r0, [r3, #0]
 800ae58:	f107 0110 	add.w	r1, r7, #16
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae60:	f7fe fbb6 	bl	80095d0 <xQueueGenericSend>
 800ae64:	6278      	str	r0, [r7, #36]	@ 0x24
 800ae66:	e012      	b.n	800ae8e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae68:	4b0b      	ldr	r3, [pc, #44]	@ (800ae98 <xTimerGenericCommand+0x98>)
 800ae6a:	6818      	ldr	r0, [r3, #0]
 800ae6c:	f107 0110 	add.w	r1, r7, #16
 800ae70:	2300      	movs	r3, #0
 800ae72:	2200      	movs	r2, #0
 800ae74:	f7fe fbac 	bl	80095d0 <xQueueGenericSend>
 800ae78:	6278      	str	r0, [r7, #36]	@ 0x24
 800ae7a:	e008      	b.n	800ae8e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae7c:	4b06      	ldr	r3, [pc, #24]	@ (800ae98 <xTimerGenericCommand+0x98>)
 800ae7e:	6818      	ldr	r0, [r3, #0]
 800ae80:	f107 0110 	add.w	r1, r7, #16
 800ae84:	2300      	movs	r3, #0
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	f7fe fca4 	bl	80097d4 <xQueueGenericSendFromISR>
 800ae8c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3728      	adds	r7, #40	@ 0x28
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	20000f2c 	.word	0x20000f2c

0800ae9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af02      	add	r7, sp, #8
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aea6:	4b23      	ldr	r3, [pc, #140]	@ (800af34 <prvProcessExpiredTimer+0x98>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	3304      	adds	r3, #4
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fe fa1b 	bl	80092f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aec0:	f003 0304 	and.w	r3, r3, #4
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d023      	beq.n	800af10 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	699a      	ldr	r2, [r3, #24]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	18d1      	adds	r1, r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	6978      	ldr	r0, [r7, #20]
 800aed6:	f000 f8d5 	bl	800b084 <prvInsertTimerInActiveList>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d020      	beq.n	800af22 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aee0:	2300      	movs	r3, #0
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	2300      	movs	r3, #0
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	2100      	movs	r1, #0
 800aeea:	6978      	ldr	r0, [r7, #20]
 800aeec:	f7ff ff88 	bl	800ae00 <xTimerGenericCommand>
 800aef0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d114      	bne.n	800af22 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	60fb      	str	r3, [r7, #12]
}
 800af0a:	bf00      	nop
 800af0c:	bf00      	nop
 800af0e:	e7fd      	b.n	800af0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af16:	f023 0301 	bic.w	r3, r3, #1
 800af1a:	b2da      	uxtb	r2, r3
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	6978      	ldr	r0, [r7, #20]
 800af28:	4798      	blx	r3
}
 800af2a:	bf00      	nop
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	20000f24 	.word	0x20000f24

0800af38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af40:	f107 0308 	add.w	r3, r7, #8
 800af44:	4618      	mov	r0, r3
 800af46:	f000 f859 	bl	800affc <prvGetNextExpireTime>
 800af4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	4619      	mov	r1, r3
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f000 f805 	bl	800af60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af56:	f000 f8d7 	bl	800b108 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af5a:	bf00      	nop
 800af5c:	e7f0      	b.n	800af40 <prvTimerTask+0x8>
	...

0800af60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af6a:	f7ff fa0f 	bl	800a38c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af6e:	f107 0308 	add.w	r3, r7, #8
 800af72:	4618      	mov	r0, r3
 800af74:	f000 f866 	bl	800b044 <prvSampleTimeNow>
 800af78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d130      	bne.n	800afe2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10a      	bne.n	800af9c <prvProcessTimerOrBlockTask+0x3c>
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d806      	bhi.n	800af9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af8e:	f7ff fa0b 	bl	800a3a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af92:	68f9      	ldr	r1, [r7, #12]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7ff ff81 	bl	800ae9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af9a:	e024      	b.n	800afe6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d008      	beq.n	800afb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800afa2:	4b13      	ldr	r3, [pc, #76]	@ (800aff0 <prvProcessTimerOrBlockTask+0x90>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d101      	bne.n	800afb0 <prvProcessTimerOrBlockTask+0x50>
 800afac:	2301      	movs	r3, #1
 800afae:	e000      	b.n	800afb2 <prvProcessTimerOrBlockTask+0x52>
 800afb0:	2300      	movs	r3, #0
 800afb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800afb4:	4b0f      	ldr	r3, [pc, #60]	@ (800aff4 <prvProcessTimerOrBlockTask+0x94>)
 800afb6:	6818      	ldr	r0, [r3, #0]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	4619      	mov	r1, r3
 800afc2:	f7fe ff43 	bl	8009e4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800afc6:	f7ff f9ef 	bl	800a3a8 <xTaskResumeAll>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10a      	bne.n	800afe6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800afd0:	4b09      	ldr	r3, [pc, #36]	@ (800aff8 <prvProcessTimerOrBlockTask+0x98>)
 800afd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afd6:	601a      	str	r2, [r3, #0]
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	f3bf 8f6f 	isb	sy
}
 800afe0:	e001      	b.n	800afe6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800afe2:	f7ff f9e1 	bl	800a3a8 <xTaskResumeAll>
}
 800afe6:	bf00      	nop
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20000f28 	.word	0x20000f28
 800aff4:	20000f2c 	.word	0x20000f2c
 800aff8:	e000ed04 	.word	0xe000ed04

0800affc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b004:	4b0e      	ldr	r3, [pc, #56]	@ (800b040 <prvGetNextExpireTime+0x44>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <prvGetNextExpireTime+0x16>
 800b00e:	2201      	movs	r2, #1
 800b010:	e000      	b.n	800b014 <prvGetNextExpireTime+0x18>
 800b012:	2200      	movs	r2, #0
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d105      	bne.n	800b02c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b020:	4b07      	ldr	r3, [pc, #28]	@ (800b040 <prvGetNextExpireTime+0x44>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	60fb      	str	r3, [r7, #12]
 800b02a:	e001      	b.n	800b030 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b02c:	2300      	movs	r3, #0
 800b02e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b030:	68fb      	ldr	r3, [r7, #12]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3714      	adds	r7, #20
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	20000f24 	.word	0x20000f24

0800b044 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b04c:	f7ff fa4a 	bl	800a4e4 <xTaskGetTickCount>
 800b050:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b052:	4b0b      	ldr	r3, [pc, #44]	@ (800b080 <prvSampleTimeNow+0x3c>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d205      	bcs.n	800b068 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b05c:	f000 f93a 	bl	800b2d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	601a      	str	r2, [r3, #0]
 800b066:	e002      	b.n	800b06e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b06e:	4a04      	ldr	r2, [pc, #16]	@ (800b080 <prvSampleTimeNow+0x3c>)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b074:	68fb      	ldr	r3, [r7, #12]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	20000f34 	.word	0x20000f34

0800b084 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
 800b090:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b092:	2300      	movs	r3, #0
 800b094:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d812      	bhi.n	800b0d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	1ad2      	subs	r2, r2, r3
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d302      	bcc.n	800b0be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	617b      	str	r3, [r7, #20]
 800b0bc:	e01b      	b.n	800b0f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b0be:	4b10      	ldr	r3, [pc, #64]	@ (800b100 <prvInsertTimerInActiveList+0x7c>)
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	f7fe f8d8 	bl	800927e <vListInsert>
 800b0ce:	e012      	b.n	800b0f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d206      	bcs.n	800b0e6 <prvInsertTimerInActiveList+0x62>
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d302      	bcc.n	800b0e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	617b      	str	r3, [r7, #20]
 800b0e4:	e007      	b.n	800b0f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0e6:	4b07      	ldr	r3, [pc, #28]	@ (800b104 <prvInsertTimerInActiveList+0x80>)
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	f7fe f8c4 	bl	800927e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b0f6:	697b      	ldr	r3, [r7, #20]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3718      	adds	r7, #24
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	20000f28 	.word	0x20000f28
 800b104:	20000f24 	.word	0x20000f24

0800b108 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08e      	sub	sp, #56	@ 0x38
 800b10c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b10e:	e0ce      	b.n	800b2ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	da19      	bge.n	800b14a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b116:	1d3b      	adds	r3, r7, #4
 800b118:	3304      	adds	r3, #4
 800b11a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10b      	bne.n	800b13a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	61fb      	str	r3, [r7, #28]
}
 800b134:	bf00      	nop
 800b136:	bf00      	nop
 800b138:	e7fd      	b.n	800b136 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b140:	6850      	ldr	r0, [r2, #4]
 800b142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b144:	6892      	ldr	r2, [r2, #8]
 800b146:	4611      	mov	r1, r2
 800b148:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f2c0 80ae 	blt.w	800b2ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b158:	695b      	ldr	r3, [r3, #20]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d004      	beq.n	800b168 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b160:	3304      	adds	r3, #4
 800b162:	4618      	mov	r0, r3
 800b164:	f7fe f8c4 	bl	80092f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b168:	463b      	mov	r3, r7
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7ff ff6a 	bl	800b044 <prvSampleTimeNow>
 800b170:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b09      	cmp	r3, #9
 800b176:	f200 8097 	bhi.w	800b2a8 <prvProcessReceivedCommands+0x1a0>
 800b17a:	a201      	add	r2, pc, #4	@ (adr r2, 800b180 <prvProcessReceivedCommands+0x78>)
 800b17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b180:	0800b1a9 	.word	0x0800b1a9
 800b184:	0800b1a9 	.word	0x0800b1a9
 800b188:	0800b1a9 	.word	0x0800b1a9
 800b18c:	0800b21f 	.word	0x0800b21f
 800b190:	0800b233 	.word	0x0800b233
 800b194:	0800b27f 	.word	0x0800b27f
 800b198:	0800b1a9 	.word	0x0800b1a9
 800b19c:	0800b1a9 	.word	0x0800b1a9
 800b1a0:	0800b21f 	.word	0x0800b21f
 800b1a4:	0800b233 	.word	0x0800b233
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1ae:	f043 0301 	orr.w	r3, r3, #1
 800b1b2:	b2da      	uxtb	r2, r3
 800b1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	18d1      	adds	r1, r2, r3
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1c8:	f7ff ff5c 	bl	800b084 <prvInsertTimerInActiveList>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d06c      	beq.n	800b2ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d4:	6a1b      	ldr	r3, [r3, #32]
 800b1d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1e0:	f003 0304 	and.w	r3, r3, #4
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d061      	beq.n	800b2ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	441a      	add	r2, r3
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1fa:	f7ff fe01 	bl	800ae00 <xTimerGenericCommand>
 800b1fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d152      	bne.n	800b2ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b20a:	f383 8811 	msr	BASEPRI, r3
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	61bb      	str	r3, [r7, #24]
}
 800b218:	bf00      	nop
 800b21a:	bf00      	nop
 800b21c:	e7fd      	b.n	800b21a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b224:	f023 0301 	bic.w	r3, r3, #1
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b230:	e03d      	b.n	800b2ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b234:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b238:	f043 0301 	orr.w	r3, r3, #1
 800b23c:	b2da      	uxtb	r2, r3
 800b23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b240:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b248:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24c:	699b      	ldr	r3, [r3, #24]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10b      	bne.n	800b26a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	617b      	str	r3, [r7, #20]
}
 800b264:	bf00      	nop
 800b266:	bf00      	nop
 800b268:	e7fd      	b.n	800b266 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26c:	699a      	ldr	r2, [r3, #24]
 800b26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b270:	18d1      	adds	r1, r2, r3
 800b272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b276:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b278:	f7ff ff04 	bl	800b084 <prvInsertTimerInActiveList>
					break;
 800b27c:	e017      	b.n	800b2ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b284:	f003 0302 	and.w	r3, r3, #2
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d103      	bne.n	800b294 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b28c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b28e:	f000 fb63 	bl	800b958 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b292:	e00c      	b.n	800b2ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b296:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b29a:	f023 0301 	bic.w	r3, r3, #1
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b2a6:	e002      	b.n	800b2ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b2a8:	bf00      	nop
 800b2aa:	e000      	b.n	800b2ae <prvProcessReceivedCommands+0x1a6>
					break;
 800b2ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2ae:	4b08      	ldr	r3, [pc, #32]	@ (800b2d0 <prvProcessReceivedCommands+0x1c8>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	1d39      	adds	r1, r7, #4
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fe fb2a 	bl	8009910 <xQueueReceive>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f47f af26 	bne.w	800b110 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b2c4:	bf00      	nop
 800b2c6:	bf00      	nop
 800b2c8:	3730      	adds	r7, #48	@ 0x30
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20000f2c 	.word	0x20000f2c

0800b2d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b088      	sub	sp, #32
 800b2d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2da:	e049      	b.n	800b370 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2dc:	4b2e      	ldr	r3, [pc, #184]	@ (800b398 <prvSwitchTimerLists+0xc4>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2e6:	4b2c      	ldr	r3, [pc, #176]	@ (800b398 <prvSwitchTimerLists+0xc4>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fd fffb 	bl	80092f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d02f      	beq.n	800b370 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	699b      	ldr	r3, [r3, #24]
 800b314:	693a      	ldr	r2, [r7, #16]
 800b316:	4413      	add	r3, r2
 800b318:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d90e      	bls.n	800b340 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b32e:	4b1a      	ldr	r3, [pc, #104]	@ (800b398 <prvSwitchTimerLists+0xc4>)
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	3304      	adds	r3, #4
 800b336:	4619      	mov	r1, r3
 800b338:	4610      	mov	r0, r2
 800b33a:	f7fd ffa0 	bl	800927e <vListInsert>
 800b33e:	e017      	b.n	800b370 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b340:	2300      	movs	r3, #0
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	2300      	movs	r3, #0
 800b346:	693a      	ldr	r2, [r7, #16]
 800b348:	2100      	movs	r1, #0
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f7ff fd58 	bl	800ae00 <xTimerGenericCommand>
 800b350:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10b      	bne.n	800b370 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b35c:	f383 8811 	msr	BASEPRI, r3
 800b360:	f3bf 8f6f 	isb	sy
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	603b      	str	r3, [r7, #0]
}
 800b36a:	bf00      	nop
 800b36c:	bf00      	nop
 800b36e:	e7fd      	b.n	800b36c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b370:	4b09      	ldr	r3, [pc, #36]	@ (800b398 <prvSwitchTimerLists+0xc4>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1b0      	bne.n	800b2dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b37a:	4b07      	ldr	r3, [pc, #28]	@ (800b398 <prvSwitchTimerLists+0xc4>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b380:	4b06      	ldr	r3, [pc, #24]	@ (800b39c <prvSwitchTimerLists+0xc8>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a04      	ldr	r2, [pc, #16]	@ (800b398 <prvSwitchTimerLists+0xc4>)
 800b386:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b388:	4a04      	ldr	r2, [pc, #16]	@ (800b39c <prvSwitchTimerLists+0xc8>)
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	6013      	str	r3, [r2, #0]
}
 800b38e:	bf00      	nop
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20000f24 	.word	0x20000f24
 800b39c:	20000f28 	.word	0x20000f28

0800b3a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b3a6:	f000 f96f 	bl	800b688 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b3aa:	4b15      	ldr	r3, [pc, #84]	@ (800b400 <prvCheckForValidListAndQueue+0x60>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d120      	bne.n	800b3f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3b2:	4814      	ldr	r0, [pc, #80]	@ (800b404 <prvCheckForValidListAndQueue+0x64>)
 800b3b4:	f7fd ff12 	bl	80091dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b3b8:	4813      	ldr	r0, [pc, #76]	@ (800b408 <prvCheckForValidListAndQueue+0x68>)
 800b3ba:	f7fd ff0f 	bl	80091dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b3be:	4b13      	ldr	r3, [pc, #76]	@ (800b40c <prvCheckForValidListAndQueue+0x6c>)
 800b3c0:	4a10      	ldr	r2, [pc, #64]	@ (800b404 <prvCheckForValidListAndQueue+0x64>)
 800b3c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b3c4:	4b12      	ldr	r3, [pc, #72]	@ (800b410 <prvCheckForValidListAndQueue+0x70>)
 800b3c6:	4a10      	ldr	r2, [pc, #64]	@ (800b408 <prvCheckForValidListAndQueue+0x68>)
 800b3c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	4b11      	ldr	r3, [pc, #68]	@ (800b414 <prvCheckForValidListAndQueue+0x74>)
 800b3d0:	4a11      	ldr	r2, [pc, #68]	@ (800b418 <prvCheckForValidListAndQueue+0x78>)
 800b3d2:	2110      	movs	r1, #16
 800b3d4:	200a      	movs	r0, #10
 800b3d6:	f7fe f81f 	bl	8009418 <xQueueGenericCreateStatic>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	4a08      	ldr	r2, [pc, #32]	@ (800b400 <prvCheckForValidListAndQueue+0x60>)
 800b3de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b3e0:	4b07      	ldr	r3, [pc, #28]	@ (800b400 <prvCheckForValidListAndQueue+0x60>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d005      	beq.n	800b3f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b3e8:	4b05      	ldr	r3, [pc, #20]	@ (800b400 <prvCheckForValidListAndQueue+0x60>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	490b      	ldr	r1, [pc, #44]	@ (800b41c <prvCheckForValidListAndQueue+0x7c>)
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fe fd02 	bl	8009df8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3f4:	f000 f97a 	bl	800b6ec <vPortExitCritical>
}
 800b3f8:	bf00      	nop
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	20000f2c 	.word	0x20000f2c
 800b404:	20000efc 	.word	0x20000efc
 800b408:	20000f10 	.word	0x20000f10
 800b40c:	20000f24 	.word	0x20000f24
 800b410:	20000f28 	.word	0x20000f28
 800b414:	20000fd8 	.word	0x20000fd8
 800b418:	20000f38 	.word	0x20000f38
 800b41c:	0800c360 	.word	0x0800c360

0800b420 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	3b04      	subs	r3, #4
 800b430:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3b04      	subs	r3, #4
 800b43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	f023 0201 	bic.w	r2, r3, #1
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3b04      	subs	r3, #4
 800b44e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b450:	4a0c      	ldr	r2, [pc, #48]	@ (800b484 <pxPortInitialiseStack+0x64>)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	3b14      	subs	r3, #20
 800b45a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3b04      	subs	r3, #4
 800b466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f06f 0202 	mvn.w	r2, #2
 800b46e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	3b20      	subs	r3, #32
 800b474:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b476:	68fb      	ldr	r3, [r7, #12]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr
 800b484:	0800b489 	.word	0x0800b489

0800b488 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b492:	4b13      	ldr	r3, [pc, #76]	@ (800b4e0 <prvTaskExitError+0x58>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b49a:	d00b      	beq.n	800b4b4 <prvTaskExitError+0x2c>
	__asm volatile
 800b49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	60fb      	str	r3, [r7, #12]
}
 800b4ae:	bf00      	nop
 800b4b0:	bf00      	nop
 800b4b2:	e7fd      	b.n	800b4b0 <prvTaskExitError+0x28>
	__asm volatile
 800b4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b8:	f383 8811 	msr	BASEPRI, r3
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	60bb      	str	r3, [r7, #8]
}
 800b4c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b4c8:	bf00      	nop
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d0fc      	beq.n	800b4ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b4d0:	bf00      	nop
 800b4d2:	bf00      	nop
 800b4d4:	3714      	adds	r7, #20
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	2000002c 	.word	0x2000002c
	...

0800b4f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b4f0:	4b07      	ldr	r3, [pc, #28]	@ (800b510 <pxCurrentTCBConst2>)
 800b4f2:	6819      	ldr	r1, [r3, #0]
 800b4f4:	6808      	ldr	r0, [r1, #0]
 800b4f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fa:	f380 8809 	msr	PSP, r0
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f04f 0000 	mov.w	r0, #0
 800b506:	f380 8811 	msr	BASEPRI, r0
 800b50a:	4770      	bx	lr
 800b50c:	f3af 8000 	nop.w

0800b510 <pxCurrentTCBConst2>:
 800b510:	200009f4 	.word	0x200009f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop

0800b518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b518:	4808      	ldr	r0, [pc, #32]	@ (800b53c <prvPortStartFirstTask+0x24>)
 800b51a:	6800      	ldr	r0, [r0, #0]
 800b51c:	6800      	ldr	r0, [r0, #0]
 800b51e:	f380 8808 	msr	MSP, r0
 800b522:	f04f 0000 	mov.w	r0, #0
 800b526:	f380 8814 	msr	CONTROL, r0
 800b52a:	b662      	cpsie	i
 800b52c:	b661      	cpsie	f
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	df00      	svc	0
 800b538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b53a:	bf00      	nop
 800b53c:	e000ed08 	.word	0xe000ed08

0800b540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b546:	4b47      	ldr	r3, [pc, #284]	@ (800b664 <xPortStartScheduler+0x124>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a47      	ldr	r2, [pc, #284]	@ (800b668 <xPortStartScheduler+0x128>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d10b      	bne.n	800b568 <xPortStartScheduler+0x28>
	__asm volatile
 800b550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	613b      	str	r3, [r7, #16]
}
 800b562:	bf00      	nop
 800b564:	bf00      	nop
 800b566:	e7fd      	b.n	800b564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b568:	4b3e      	ldr	r3, [pc, #248]	@ (800b664 <xPortStartScheduler+0x124>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a3f      	ldr	r2, [pc, #252]	@ (800b66c <xPortStartScheduler+0x12c>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d10b      	bne.n	800b58a <xPortStartScheduler+0x4a>
	__asm volatile
 800b572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	60fb      	str	r3, [r7, #12]
}
 800b584:	bf00      	nop
 800b586:	bf00      	nop
 800b588:	e7fd      	b.n	800b586 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b58a:	4b39      	ldr	r3, [pc, #228]	@ (800b670 <xPortStartScheduler+0x130>)
 800b58c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	b2db      	uxtb	r3, r3
 800b594:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	22ff      	movs	r2, #255	@ 0xff
 800b59a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5a4:	78fb      	ldrb	r3, [r7, #3]
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	4b31      	ldr	r3, [pc, #196]	@ (800b674 <xPortStartScheduler+0x134>)
 800b5b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5b2:	4b31      	ldr	r3, [pc, #196]	@ (800b678 <xPortStartScheduler+0x138>)
 800b5b4:	2207      	movs	r2, #7
 800b5b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5b8:	e009      	b.n	800b5ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b5ba:	4b2f      	ldr	r3, [pc, #188]	@ (800b678 <xPortStartScheduler+0x138>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	4a2d      	ldr	r2, [pc, #180]	@ (800b678 <xPortStartScheduler+0x138>)
 800b5c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b5c4:	78fb      	ldrb	r3, [r7, #3]
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	005b      	lsls	r3, r3, #1
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5ce:	78fb      	ldrb	r3, [r7, #3]
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5d6:	2b80      	cmp	r3, #128	@ 0x80
 800b5d8:	d0ef      	beq.n	800b5ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b5da:	4b27      	ldr	r3, [pc, #156]	@ (800b678 <xPortStartScheduler+0x138>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f1c3 0307 	rsb	r3, r3, #7
 800b5e2:	2b04      	cmp	r3, #4
 800b5e4:	d00b      	beq.n	800b5fe <xPortStartScheduler+0xbe>
	__asm volatile
 800b5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ea:	f383 8811 	msr	BASEPRI, r3
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f3bf 8f4f 	dsb	sy
 800b5f6:	60bb      	str	r3, [r7, #8]
}
 800b5f8:	bf00      	nop
 800b5fa:	bf00      	nop
 800b5fc:	e7fd      	b.n	800b5fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b5fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b678 <xPortStartScheduler+0x138>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	021b      	lsls	r3, r3, #8
 800b604:	4a1c      	ldr	r2, [pc, #112]	@ (800b678 <xPortStartScheduler+0x138>)
 800b606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b608:	4b1b      	ldr	r3, [pc, #108]	@ (800b678 <xPortStartScheduler+0x138>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b610:	4a19      	ldr	r2, [pc, #100]	@ (800b678 <xPortStartScheduler+0x138>)
 800b612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	b2da      	uxtb	r2, r3
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b61c:	4b17      	ldr	r3, [pc, #92]	@ (800b67c <xPortStartScheduler+0x13c>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a16      	ldr	r2, [pc, #88]	@ (800b67c <xPortStartScheduler+0x13c>)
 800b622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b628:	4b14      	ldr	r3, [pc, #80]	@ (800b67c <xPortStartScheduler+0x13c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a13      	ldr	r2, [pc, #76]	@ (800b67c <xPortStartScheduler+0x13c>)
 800b62e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b634:	f000 f8da 	bl	800b7ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b638:	4b11      	ldr	r3, [pc, #68]	@ (800b680 <xPortStartScheduler+0x140>)
 800b63a:	2200      	movs	r2, #0
 800b63c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b63e:	f000 f8f9 	bl	800b834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b642:	4b10      	ldr	r3, [pc, #64]	@ (800b684 <xPortStartScheduler+0x144>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a0f      	ldr	r2, [pc, #60]	@ (800b684 <xPortStartScheduler+0x144>)
 800b648:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b64c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b64e:	f7ff ff63 	bl	800b518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b652:	f7ff f811 	bl	800a678 <vTaskSwitchContext>
	prvTaskExitError();
 800b656:	f7ff ff17 	bl	800b488 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3718      	adds	r7, #24
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	e000ed00 	.word	0xe000ed00
 800b668:	410fc271 	.word	0x410fc271
 800b66c:	410fc270 	.word	0x410fc270
 800b670:	e000e400 	.word	0xe000e400
 800b674:	20001028 	.word	0x20001028
 800b678:	2000102c 	.word	0x2000102c
 800b67c:	e000ed20 	.word	0xe000ed20
 800b680:	2000002c 	.word	0x2000002c
 800b684:	e000ef34 	.word	0xe000ef34

0800b688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	607b      	str	r3, [r7, #4]
}
 800b6a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6a2:	4b10      	ldr	r3, [pc, #64]	@ (800b6e4 <vPortEnterCritical+0x5c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	4a0e      	ldr	r2, [pc, #56]	@ (800b6e4 <vPortEnterCritical+0x5c>)
 800b6aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b6e4 <vPortEnterCritical+0x5c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d110      	bne.n	800b6d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e8 <vPortEnterCritical+0x60>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00b      	beq.n	800b6d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c2:	f383 8811 	msr	BASEPRI, r3
 800b6c6:	f3bf 8f6f 	isb	sy
 800b6ca:	f3bf 8f4f 	dsb	sy
 800b6ce:	603b      	str	r3, [r7, #0]
}
 800b6d0:	bf00      	nop
 800b6d2:	bf00      	nop
 800b6d4:	e7fd      	b.n	800b6d2 <vPortEnterCritical+0x4a>
	}
}
 800b6d6:	bf00      	nop
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	2000002c 	.word	0x2000002c
 800b6e8:	e000ed04 	.word	0xe000ed04

0800b6ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b6f2:	4b12      	ldr	r3, [pc, #72]	@ (800b73c <vPortExitCritical+0x50>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10b      	bne.n	800b712 <vPortExitCritical+0x26>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	607b      	str	r3, [r7, #4]
}
 800b70c:	bf00      	nop
 800b70e:	bf00      	nop
 800b710:	e7fd      	b.n	800b70e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b712:	4b0a      	ldr	r3, [pc, #40]	@ (800b73c <vPortExitCritical+0x50>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3b01      	subs	r3, #1
 800b718:	4a08      	ldr	r2, [pc, #32]	@ (800b73c <vPortExitCritical+0x50>)
 800b71a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b71c:	4b07      	ldr	r3, [pc, #28]	@ (800b73c <vPortExitCritical+0x50>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d105      	bne.n	800b730 <vPortExitCritical+0x44>
 800b724:	2300      	movs	r3, #0
 800b726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	f383 8811 	msr	BASEPRI, r3
}
 800b72e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	2000002c 	.word	0x2000002c

0800b740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b740:	f3ef 8009 	mrs	r0, PSP
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	4b15      	ldr	r3, [pc, #84]	@ (800b7a0 <pxCurrentTCBConst>)
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	f01e 0f10 	tst.w	lr, #16
 800b750:	bf08      	it	eq
 800b752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75a:	6010      	str	r0, [r2, #0]
 800b75c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b760:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b764:	f380 8811 	msr	BASEPRI, r0
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f7fe ff82 	bl	800a678 <vTaskSwitchContext>
 800b774:	f04f 0000 	mov.w	r0, #0
 800b778:	f380 8811 	msr	BASEPRI, r0
 800b77c:	bc09      	pop	{r0, r3}
 800b77e:	6819      	ldr	r1, [r3, #0]
 800b780:	6808      	ldr	r0, [r1, #0]
 800b782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b786:	f01e 0f10 	tst.w	lr, #16
 800b78a:	bf08      	it	eq
 800b78c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b790:	f380 8809 	msr	PSP, r0
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	f3af 8000 	nop.w

0800b7a0 <pxCurrentTCBConst>:
 800b7a0:	200009f4 	.word	0x200009f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7a4:	bf00      	nop
 800b7a6:	bf00      	nop

0800b7a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b2:	f383 8811 	msr	BASEPRI, r3
 800b7b6:	f3bf 8f6f 	isb	sy
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	607b      	str	r3, [r7, #4]
}
 800b7c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b7c2:	f7fe fe9f 	bl	800a504 <xTaskIncrementTick>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b7cc:	4b06      	ldr	r3, [pc, #24]	@ (800b7e8 <xPortSysTickHandler+0x40>)
 800b7ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	f383 8811 	msr	BASEPRI, r3
}
 800b7de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b7e0:	bf00      	nop
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	e000ed04 	.word	0xe000ed04

0800b7ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b820 <vPortSetupTimerInterrupt+0x34>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b824 <vPortSetupTimerInterrupt+0x38>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b828 <vPortSetupTimerInterrupt+0x3c>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a0a      	ldr	r2, [pc, #40]	@ (800b82c <vPortSetupTimerInterrupt+0x40>)
 800b802:	fba2 2303 	umull	r2, r3, r2, r3
 800b806:	099b      	lsrs	r3, r3, #6
 800b808:	4a09      	ldr	r2, [pc, #36]	@ (800b830 <vPortSetupTimerInterrupt+0x44>)
 800b80a:	3b01      	subs	r3, #1
 800b80c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b80e:	4b04      	ldr	r3, [pc, #16]	@ (800b820 <vPortSetupTimerInterrupt+0x34>)
 800b810:	2207      	movs	r2, #7
 800b812:	601a      	str	r2, [r3, #0]
}
 800b814:	bf00      	nop
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	e000e010 	.word	0xe000e010
 800b824:	e000e018 	.word	0xe000e018
 800b828:	20000000 	.word	0x20000000
 800b82c:	10624dd3 	.word	0x10624dd3
 800b830:	e000e014 	.word	0xe000e014

0800b834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b834:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b844 <vPortEnableVFP+0x10>
 800b838:	6801      	ldr	r1, [r0, #0]
 800b83a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b83e:	6001      	str	r1, [r0, #0]
 800b840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b842:	bf00      	nop
 800b844:	e000ed88 	.word	0xe000ed88

0800b848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b84e:	f3ef 8305 	mrs	r3, IPSR
 800b852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2b0f      	cmp	r3, #15
 800b858:	d915      	bls.n	800b886 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b85a:	4a18      	ldr	r2, [pc, #96]	@ (800b8bc <vPortValidateInterruptPriority+0x74>)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	4413      	add	r3, r2
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b864:	4b16      	ldr	r3, [pc, #88]	@ (800b8c0 <vPortValidateInterruptPriority+0x78>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	7afa      	ldrb	r2, [r7, #11]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d20b      	bcs.n	800b886 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	607b      	str	r3, [r7, #4]
}
 800b880:	bf00      	nop
 800b882:	bf00      	nop
 800b884:	e7fd      	b.n	800b882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b886:	4b0f      	ldr	r3, [pc, #60]	@ (800b8c4 <vPortValidateInterruptPriority+0x7c>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b88e:	4b0e      	ldr	r3, [pc, #56]	@ (800b8c8 <vPortValidateInterruptPriority+0x80>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	429a      	cmp	r2, r3
 800b894:	d90b      	bls.n	800b8ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	603b      	str	r3, [r7, #0]
}
 800b8a8:	bf00      	nop
 800b8aa:	bf00      	nop
 800b8ac:	e7fd      	b.n	800b8aa <vPortValidateInterruptPriority+0x62>
	}
 800b8ae:	bf00      	nop
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	e000e3f0 	.word	0xe000e3f0
 800b8c0:	20001028 	.word	0x20001028
 800b8c4:	e000ed0c 	.word	0xe000ed0c
 800b8c8:	2000102c 	.word	0x2000102c

0800b8cc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f003 0307 	and.w	r3, r3, #7
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d004      	beq.n	800b8ec <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f023 0307 	bic.w	r3, r3, #7
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800b8ec:	f7fe fd4e 	bl	800a38c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800b8f0:	4b16      	ldr	r3, [pc, #88]	@ (800b94c <pvPortMalloc+0x80>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d105      	bne.n	800b904 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800b8f8:	4b15      	ldr	r3, [pc, #84]	@ (800b950 <pvPortMalloc+0x84>)
 800b8fa:	f023 0307 	bic.w	r3, r3, #7
 800b8fe:	461a      	mov	r2, r3
 800b900:	4b12      	ldr	r3, [pc, #72]	@ (800b94c <pvPortMalloc+0x80>)
 800b902:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800b904:	4b13      	ldr	r3, [pc, #76]	@ (800b954 <pvPortMalloc+0x88>)
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4413      	add	r3, r2
 800b90c:	f643 32f7 	movw	r2, #15351	@ 0x3bf7
 800b910:	4293      	cmp	r3, r2
 800b912:	d813      	bhi.n	800b93c <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800b914:	4b0f      	ldr	r3, [pc, #60]	@ (800b954 <pvPortMalloc+0x88>)
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	441a      	add	r2, r3
 800b91c:	4b0d      	ldr	r3, [pc, #52]	@ (800b954 <pvPortMalloc+0x88>)
 800b91e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800b920:	429a      	cmp	r2, r3
 800b922:	d90b      	bls.n	800b93c <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800b924:	4b09      	ldr	r3, [pc, #36]	@ (800b94c <pvPortMalloc+0x80>)
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	4b0a      	ldr	r3, [pc, #40]	@ (800b954 <pvPortMalloc+0x88>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4413      	add	r3, r2
 800b92e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800b930:	4b08      	ldr	r3, [pc, #32]	@ (800b954 <pvPortMalloc+0x88>)
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4413      	add	r3, r2
 800b938:	4a06      	ldr	r2, [pc, #24]	@ (800b954 <pvPortMalloc+0x88>)
 800b93a:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b93c:	f7fe fd34 	bl	800a3a8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800b940:	68fb      	ldr	r3, [r7, #12]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	20004c34 	.word	0x20004c34
 800b950:	20001038 	.word	0x20001038
 800b954:	20004c30 	.word	0x20004c30

0800b958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00b      	beq.n	800b97e <vPortFree+0x26>
	__asm volatile
 800b966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	60fb      	str	r3, [r7, #12]
}
 800b978:	bf00      	nop
 800b97a:	bf00      	nop
 800b97c:	e7fd      	b.n	800b97a <vPortFree+0x22>
}
 800b97e:	bf00      	nop
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
	...

0800b98c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b990:	2201      	movs	r2, #1
 800b992:	490e      	ldr	r1, [pc, #56]	@ (800b9cc <MX_USB_HOST_Init+0x40>)
 800b994:	480e      	ldr	r0, [pc, #56]	@ (800b9d0 <MX_USB_HOST_Init+0x44>)
 800b996:	f7fb fa6d 	bl	8006e74 <USBH_Init>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b9a0:	f7f5 f822 	bl	80009e8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b9a4:	490b      	ldr	r1, [pc, #44]	@ (800b9d4 <MX_USB_HOST_Init+0x48>)
 800b9a6:	480a      	ldr	r0, [pc, #40]	@ (800b9d0 <MX_USB_HOST_Init+0x44>)
 800b9a8:	f7fb fb33 	bl	8007012 <USBH_RegisterClass>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d001      	beq.n	800b9b6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b9b2:	f7f5 f819 	bl	80009e8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b9b6:	4806      	ldr	r0, [pc, #24]	@ (800b9d0 <MX_USB_HOST_Init+0x44>)
 800b9b8:	f7fb fbb7 	bl	800712a <USBH_Start>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b9c2:	f7f5 f811 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b9c6:	bf00      	nop
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	0800b9d9 	.word	0x0800b9d9
 800b9d0:	20004c38 	.word	0x20004c38
 800b9d4:	2000000c 	.word	0x2000000c

0800b9d8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b9e4:	78fb      	ldrb	r3, [r7, #3]
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	2b04      	cmp	r3, #4
 800b9ea:	d819      	bhi.n	800ba20 <USBH_UserProcess+0x48>
 800b9ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b9f4 <USBH_UserProcess+0x1c>)
 800b9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f2:	bf00      	nop
 800b9f4:	0800ba21 	.word	0x0800ba21
 800b9f8:	0800ba11 	.word	0x0800ba11
 800b9fc:	0800ba21 	.word	0x0800ba21
 800ba00:	0800ba19 	.word	0x0800ba19
 800ba04:	0800ba09 	.word	0x0800ba09
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ba08:	4b09      	ldr	r3, [pc, #36]	@ (800ba30 <USBH_UserProcess+0x58>)
 800ba0a:	2203      	movs	r2, #3
 800ba0c:	701a      	strb	r2, [r3, #0]
  break;
 800ba0e:	e008      	b.n	800ba22 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ba10:	4b07      	ldr	r3, [pc, #28]	@ (800ba30 <USBH_UserProcess+0x58>)
 800ba12:	2202      	movs	r2, #2
 800ba14:	701a      	strb	r2, [r3, #0]
  break;
 800ba16:	e004      	b.n	800ba22 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ba18:	4b05      	ldr	r3, [pc, #20]	@ (800ba30 <USBH_UserProcess+0x58>)
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	701a      	strb	r2, [r3, #0]
  break;
 800ba1e:	e000      	b.n	800ba22 <USBH_UserProcess+0x4a>

  default:
  break;
 800ba20:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ba22:	bf00      	nop
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	2000501c 	.word	0x2000501c

0800ba34 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b08a      	sub	sp, #40	@ 0x28
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba3c:	f107 0314 	add.w	r3, r7, #20
 800ba40:	2200      	movs	r2, #0
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	605a      	str	r2, [r3, #4]
 800ba46:	609a      	str	r2, [r3, #8]
 800ba48:	60da      	str	r2, [r3, #12]
 800ba4a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ba54:	d147      	bne.n	800bae6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba56:	2300      	movs	r3, #0
 800ba58:	613b      	str	r3, [r7, #16]
 800ba5a:	4b25      	ldr	r3, [pc, #148]	@ (800baf0 <HAL_HCD_MspInit+0xbc>)
 800ba5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba5e:	4a24      	ldr	r2, [pc, #144]	@ (800baf0 <HAL_HCD_MspInit+0xbc>)
 800ba60:	f043 0301 	orr.w	r3, r3, #1
 800ba64:	6313      	str	r3, [r2, #48]	@ 0x30
 800ba66:	4b22      	ldr	r3, [pc, #136]	@ (800baf0 <HAL_HCD_MspInit+0xbc>)
 800ba68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba6a:	f003 0301 	and.w	r3, r3, #1
 800ba6e:	613b      	str	r3, [r7, #16]
 800ba70:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ba72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ba80:	f107 0314 	add.w	r3, r7, #20
 800ba84:	4619      	mov	r1, r3
 800ba86:	481b      	ldr	r0, [pc, #108]	@ (800baf4 <HAL_HCD_MspInit+0xc0>)
 800ba88:	f7f5 fba4 	bl	80011d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ba8c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ba90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba92:	2302      	movs	r3, #2
 800ba94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba96:	2300      	movs	r3, #0
 800ba98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba9a:	2303      	movs	r3, #3
 800ba9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba9e:	230a      	movs	r3, #10
 800baa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800baa2:	f107 0314 	add.w	r3, r7, #20
 800baa6:	4619      	mov	r1, r3
 800baa8:	4812      	ldr	r0, [pc, #72]	@ (800baf4 <HAL_HCD_MspInit+0xc0>)
 800baaa:	f7f5 fb93 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800baae:	4b10      	ldr	r3, [pc, #64]	@ (800baf0 <HAL_HCD_MspInit+0xbc>)
 800bab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bab2:	4a0f      	ldr	r2, [pc, #60]	@ (800baf0 <HAL_HCD_MspInit+0xbc>)
 800bab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bab8:	6353      	str	r3, [r2, #52]	@ 0x34
 800baba:	2300      	movs	r3, #0
 800babc:	60fb      	str	r3, [r7, #12]
 800babe:	4b0c      	ldr	r3, [pc, #48]	@ (800baf0 <HAL_HCD_MspInit+0xbc>)
 800bac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bac2:	4a0b      	ldr	r2, [pc, #44]	@ (800baf0 <HAL_HCD_MspInit+0xbc>)
 800bac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bac8:	6453      	str	r3, [r2, #68]	@ 0x44
 800baca:	4b09      	ldr	r3, [pc, #36]	@ (800baf0 <HAL_HCD_MspInit+0xbc>)
 800bacc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bad2:	60fb      	str	r3, [r7, #12]
 800bad4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bad6:	2200      	movs	r2, #0
 800bad8:	2105      	movs	r1, #5
 800bada:	2043      	movs	r0, #67	@ 0x43
 800badc:	f7f5 fb50 	bl	8001180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bae0:	2043      	movs	r0, #67	@ 0x43
 800bae2:	f7f5 fb69 	bl	80011b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bae6:	bf00      	nop
 800bae8:	3728      	adds	r7, #40	@ 0x28
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	40023800 	.word	0x40023800
 800baf4:	40020000 	.word	0x40020000

0800baf8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7fb ffc1 	bl	8007a8e <USBH_LL_IncTimer>
}
 800bb0c:	bf00      	nop
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fc f805 	bl	8007b32 <USBH_LL_Connect>
}
 800bb28:	bf00      	nop
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fc f81a 	bl	8007b78 <USBH_LL_Disconnect>
}
 800bb44:	bf00      	nop
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	460b      	mov	r3, r1
 800bb56:	70fb      	strb	r3, [r7, #3]
 800bb58:	4613      	mov	r3, r2
 800bb5a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fc f851 	bl	8007c0a <USBH_LL_NotifyURBChange>
#endif
}
 800bb68:	bf00      	nop
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fb ffaf 	bl	8007ae2 <USBH_LL_PortEnabled>
}
 800bb84:	bf00      	nop
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fb ffbb 	bl	8007b16 <USBH_LL_PortDisabled>
}
 800bba0:	bf00      	nop
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d12a      	bne.n	800bc10 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bbba:	4a18      	ldr	r2, [pc, #96]	@ (800bc1c <USBH_LL_Init+0x74>)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4a15      	ldr	r2, [pc, #84]	@ (800bc1c <USBH_LL_Init+0x74>)
 800bbc6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bbca:	4b14      	ldr	r3, [pc, #80]	@ (800bc1c <USBH_LL_Init+0x74>)
 800bbcc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bbd0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bbd2:	4b12      	ldr	r3, [pc, #72]	@ (800bc1c <USBH_LL_Init+0x74>)
 800bbd4:	2208      	movs	r2, #8
 800bbd6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bbd8:	4b10      	ldr	r3, [pc, #64]	@ (800bc1c <USBH_LL_Init+0x74>)
 800bbda:	2201      	movs	r2, #1
 800bbdc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bbde:	4b0f      	ldr	r3, [pc, #60]	@ (800bc1c <USBH_LL_Init+0x74>)
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bbe4:	4b0d      	ldr	r3, [pc, #52]	@ (800bc1c <USBH_LL_Init+0x74>)
 800bbe6:	2202      	movs	r2, #2
 800bbe8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bbea:	4b0c      	ldr	r3, [pc, #48]	@ (800bc1c <USBH_LL_Init+0x74>)
 800bbec:	2200      	movs	r2, #0
 800bbee:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bbf0:	480a      	ldr	r0, [pc, #40]	@ (800bc1c <USBH_LL_Init+0x74>)
 800bbf2:	f7f5 fc8c 	bl	800150e <HAL_HCD_Init>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bbfc:	f7f4 fef4 	bl	80009e8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bc00:	4806      	ldr	r0, [pc, #24]	@ (800bc1c <USBH_LL_Init+0x74>)
 800bc02:	f7f6 f8ed 	bl	8001de0 <HAL_HCD_GetCurrentFrame>
 800bc06:	4603      	mov	r3, r0
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7fb ff30 	bl	8007a70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20005020 	.word	0x20005020

0800bc20 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7f6 f85a 	bl	8001cf0 <HAL_HCD_Start>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc40:	7bfb      	ldrb	r3, [r7, #15]
 800bc42:	4618      	mov	r0, r3
 800bc44:	f000 f95e 	bl	800bf04 <USBH_Get_USB_Status>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b084      	sub	sp, #16
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7f6 f862 	bl	8001d36 <HAL_HCD_Stop>
 800bc72:	4603      	mov	r3, r0
 800bc74:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f000 f943 	bl	800bf04 <USBH_Get_USB_Status>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc82:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bc94:	2301      	movs	r3, #1
 800bc96:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7f6 f8ac 	bl	8001dfc <HAL_HCD_GetCurrentSpeed>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d00c      	beq.n	800bcc4 <USBH_LL_GetSpeed+0x38>
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d80d      	bhi.n	800bcca <USBH_LL_GetSpeed+0x3e>
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d002      	beq.n	800bcb8 <USBH_LL_GetSpeed+0x2c>
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d003      	beq.n	800bcbe <USBH_LL_GetSpeed+0x32>
 800bcb6:	e008      	b.n	800bcca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	73fb      	strb	r3, [r7, #15]
    break;
 800bcbc:	e008      	b.n	800bcd0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc2:	e005      	b.n	800bcd0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bcc4:	2302      	movs	r3, #2
 800bcc6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcc8:	e002      	b.n	800bcd0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bcca:	2301      	movs	r3, #1
 800bccc:	73fb      	strb	r3, [r7, #15]
    break;
 800bcce:	bf00      	nop
  }
  return  speed;
 800bcd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b084      	sub	sp, #16
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bce6:	2300      	movs	r3, #0
 800bce8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7f6 f83d 	bl	8001d70 <HAL_HCD_ResetPort>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bcfa:	7bfb      	ldrb	r3, [r7, #15]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f000 f901 	bl	800bf04 <USBH_Get_USB_Status>
 800bd02:	4603      	mov	r3, r0
 800bd04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd06:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bd22:	78fa      	ldrb	r2, [r7, #3]
 800bd24:	4611      	mov	r1, r2
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7f6 f845 	bl	8001db6 <HAL_HCD_HC_GetXferCount>
 800bd2c:	4603      	mov	r3, r0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bd36:	b590      	push	{r4, r7, lr}
 800bd38:	b089      	sub	sp, #36	@ 0x24
 800bd3a:	af04      	add	r7, sp, #16
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	4608      	mov	r0, r1
 800bd40:	4611      	mov	r1, r2
 800bd42:	461a      	mov	r2, r3
 800bd44:	4603      	mov	r3, r0
 800bd46:	70fb      	strb	r3, [r7, #3]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	70bb      	strb	r3, [r7, #2]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bd5e:	787c      	ldrb	r4, [r7, #1]
 800bd60:	78ba      	ldrb	r2, [r7, #2]
 800bd62:	78f9      	ldrb	r1, [r7, #3]
 800bd64:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bd66:	9302      	str	r3, [sp, #8]
 800bd68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	4623      	mov	r3, r4
 800bd76:	f7f5 fc31 	bl	80015dc <HAL_HCD_HC_Init>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f000 f8bf 	bl	800bf04 <USBH_Get_USB_Status>
 800bd86:	4603      	mov	r3, r0
 800bd88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd90      	pop	{r4, r7, pc}

0800bd94 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda0:	2300      	movs	r3, #0
 800bda2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bda4:	2300      	movs	r3, #0
 800bda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bdae:	78fa      	ldrb	r2, [r7, #3]
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7f5 fcca 	bl	800174c <HAL_HCD_HC_Halt>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f000 f8a0 	bl	800bf04 <USBH_Get_USB_Status>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bdd2:	b590      	push	{r4, r7, lr}
 800bdd4:	b089      	sub	sp, #36	@ 0x24
 800bdd6:	af04      	add	r7, sp, #16
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	4608      	mov	r0, r1
 800bddc:	4611      	mov	r1, r2
 800bdde:	461a      	mov	r2, r3
 800bde0:	4603      	mov	r3, r0
 800bde2:	70fb      	strb	r3, [r7, #3]
 800bde4:	460b      	mov	r3, r1
 800bde6:	70bb      	strb	r3, [r7, #2]
 800bde8:	4613      	mov	r3, r2
 800bdea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bdfa:	787c      	ldrb	r4, [r7, #1]
 800bdfc:	78ba      	ldrb	r2, [r7, #2]
 800bdfe:	78f9      	ldrb	r1, [r7, #3]
 800be00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800be04:	9303      	str	r3, [sp, #12]
 800be06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800be08:	9302      	str	r3, [sp, #8]
 800be0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be0c:	9301      	str	r3, [sp, #4]
 800be0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	4623      	mov	r3, r4
 800be16:	f7f5 fcbd 	bl	8001794 <HAL_HCD_HC_SubmitRequest>
 800be1a:	4603      	mov	r3, r0
 800be1c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
 800be20:	4618      	mov	r0, r3
 800be22:	f000 f86f 	bl	800bf04 <USBH_Get_USB_Status>
 800be26:	4603      	mov	r3, r0
 800be28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3714      	adds	r7, #20
 800be30:	46bd      	mov	sp, r7
 800be32:	bd90      	pop	{r4, r7, pc}

0800be34 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	460b      	mov	r3, r1
 800be3e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be46:	78fa      	ldrb	r2, [r7, #3]
 800be48:	4611      	mov	r1, r2
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7f5 ff9e 	bl	8001d8c <HAL_HCD_HC_GetURBState>
 800be50:	4603      	mov	r3, r0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b082      	sub	sp, #8
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	460b      	mov	r3, r1
 800be64:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d103      	bne.n	800be78 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800be70:	78fb      	ldrb	r3, [r7, #3]
 800be72:	4618      	mov	r0, r3
 800be74:	f000 f872 	bl	800bf5c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800be78:	20c8      	movs	r0, #200	@ 0xc8
 800be7a:	f7f5 f8a5 	bl	8000fc8 <HAL_Delay>
  return USBH_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
 800be94:	4613      	mov	r3, r2
 800be96:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be9e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bea0:	78fa      	ldrb	r2, [r7, #3]
 800bea2:	68f9      	ldr	r1, [r7, #12]
 800bea4:	4613      	mov	r3, r2
 800bea6:	011b      	lsls	r3, r3, #4
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	440b      	add	r3, r1
 800beae:	3317      	adds	r3, #23
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00a      	beq.n	800becc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800beb6:	78fa      	ldrb	r2, [r7, #3]
 800beb8:	68f9      	ldr	r1, [r7, #12]
 800beba:	4613      	mov	r3, r2
 800bebc:	011b      	lsls	r3, r3, #4
 800bebe:	1a9b      	subs	r3, r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	333c      	adds	r3, #60	@ 0x3c
 800bec6:	78ba      	ldrb	r2, [r7, #2]
 800bec8:	701a      	strb	r2, [r3, #0]
 800beca:	e009      	b.n	800bee0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800becc:	78fa      	ldrb	r2, [r7, #3]
 800bece:	68f9      	ldr	r1, [r7, #12]
 800bed0:	4613      	mov	r3, r2
 800bed2:	011b      	lsls	r3, r3, #4
 800bed4:	1a9b      	subs	r3, r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	440b      	add	r3, r1
 800beda:	333d      	adds	r3, #61	@ 0x3d
 800bedc:	78ba      	ldrb	r2, [r7, #2]
 800bede:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b082      	sub	sp, #8
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7f5 f866 	bl	8000fc8 <HAL_Delay>
}
 800befc:	bf00      	nop
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf12:	79fb      	ldrb	r3, [r7, #7]
 800bf14:	2b03      	cmp	r3, #3
 800bf16:	d817      	bhi.n	800bf48 <USBH_Get_USB_Status+0x44>
 800bf18:	a201      	add	r2, pc, #4	@ (adr r2, 800bf20 <USBH_Get_USB_Status+0x1c>)
 800bf1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf1e:	bf00      	nop
 800bf20:	0800bf31 	.word	0x0800bf31
 800bf24:	0800bf37 	.word	0x0800bf37
 800bf28:	0800bf3d 	.word	0x0800bf3d
 800bf2c:	0800bf43 	.word	0x0800bf43
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	73fb      	strb	r3, [r7, #15]
    break;
 800bf34:	e00b      	b.n	800bf4e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bf36:	2302      	movs	r3, #2
 800bf38:	73fb      	strb	r3, [r7, #15]
    break;
 800bf3a:	e008      	b.n	800bf4e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf40:	e005      	b.n	800bf4e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bf42:	2302      	movs	r3, #2
 800bf44:	73fb      	strb	r3, [r7, #15]
    break;
 800bf46:	e002      	b.n	800bf4e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bf48:	2302      	movs	r3, #2
 800bf4a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf4c:	bf00      	nop
  }
  return usb_status;
 800bf4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bf66:	79fb      	ldrb	r3, [r7, #7]
 800bf68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bf6a:	79fb      	ldrb	r3, [r7, #7]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d102      	bne.n	800bf76 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bf70:	2300      	movs	r3, #0
 800bf72:	73fb      	strb	r3, [r7, #15]
 800bf74:	e001      	b.n	800bf7a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bf76:	2301      	movs	r3, #1
 800bf78:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bf7a:	7bfb      	ldrb	r3, [r7, #15]
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	2101      	movs	r1, #1
 800bf80:	4803      	ldr	r0, [pc, #12]	@ (800bf90 <MX_DriverVbusFS+0x34>)
 800bf82:	f7f5 faab 	bl	80014dc <HAL_GPIO_WritePin>
}
 800bf86:	bf00      	nop
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	40020800 	.word	0x40020800

0800bf94 <malloc>:
 800bf94:	4b02      	ldr	r3, [pc, #8]	@ (800bfa0 <malloc+0xc>)
 800bf96:	4601      	mov	r1, r0
 800bf98:	6818      	ldr	r0, [r3, #0]
 800bf9a:	f000 b82d 	b.w	800bff8 <_malloc_r>
 800bf9e:	bf00      	nop
 800bfa0:	20000030 	.word	0x20000030

0800bfa4 <free>:
 800bfa4:	4b02      	ldr	r3, [pc, #8]	@ (800bfb0 <free+0xc>)
 800bfa6:	4601      	mov	r1, r0
 800bfa8:	6818      	ldr	r0, [r3, #0]
 800bfaa:	f000 b959 	b.w	800c260 <_free_r>
 800bfae:	bf00      	nop
 800bfb0:	20000030 	.word	0x20000030

0800bfb4 <sbrk_aligned>:
 800bfb4:	b570      	push	{r4, r5, r6, lr}
 800bfb6:	4e0f      	ldr	r6, [pc, #60]	@ (800bff4 <sbrk_aligned+0x40>)
 800bfb8:	460c      	mov	r4, r1
 800bfba:	6831      	ldr	r1, [r6, #0]
 800bfbc:	4605      	mov	r5, r0
 800bfbe:	b911      	cbnz	r1, 800bfc6 <sbrk_aligned+0x12>
 800bfc0:	f000 f904 	bl	800c1cc <_sbrk_r>
 800bfc4:	6030      	str	r0, [r6, #0]
 800bfc6:	4621      	mov	r1, r4
 800bfc8:	4628      	mov	r0, r5
 800bfca:	f000 f8ff 	bl	800c1cc <_sbrk_r>
 800bfce:	1c43      	adds	r3, r0, #1
 800bfd0:	d103      	bne.n	800bfda <sbrk_aligned+0x26>
 800bfd2:	f04f 34ff 	mov.w	r4, #4294967295
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	bd70      	pop	{r4, r5, r6, pc}
 800bfda:	1cc4      	adds	r4, r0, #3
 800bfdc:	f024 0403 	bic.w	r4, r4, #3
 800bfe0:	42a0      	cmp	r0, r4
 800bfe2:	d0f8      	beq.n	800bfd6 <sbrk_aligned+0x22>
 800bfe4:	1a21      	subs	r1, r4, r0
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	f000 f8f0 	bl	800c1cc <_sbrk_r>
 800bfec:	3001      	adds	r0, #1
 800bfee:	d1f2      	bne.n	800bfd6 <sbrk_aligned+0x22>
 800bff0:	e7ef      	b.n	800bfd2 <sbrk_aligned+0x1e>
 800bff2:	bf00      	nop
 800bff4:	20005400 	.word	0x20005400

0800bff8 <_malloc_r>:
 800bff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bffc:	1ccd      	adds	r5, r1, #3
 800bffe:	f025 0503 	bic.w	r5, r5, #3
 800c002:	3508      	adds	r5, #8
 800c004:	2d0c      	cmp	r5, #12
 800c006:	bf38      	it	cc
 800c008:	250c      	movcc	r5, #12
 800c00a:	2d00      	cmp	r5, #0
 800c00c:	4606      	mov	r6, r0
 800c00e:	db01      	blt.n	800c014 <_malloc_r+0x1c>
 800c010:	42a9      	cmp	r1, r5
 800c012:	d904      	bls.n	800c01e <_malloc_r+0x26>
 800c014:	230c      	movs	r3, #12
 800c016:	6033      	str	r3, [r6, #0]
 800c018:	2000      	movs	r0, #0
 800c01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c01e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c0f4 <_malloc_r+0xfc>
 800c022:	f000 f869 	bl	800c0f8 <__malloc_lock>
 800c026:	f8d8 3000 	ldr.w	r3, [r8]
 800c02a:	461c      	mov	r4, r3
 800c02c:	bb44      	cbnz	r4, 800c080 <_malloc_r+0x88>
 800c02e:	4629      	mov	r1, r5
 800c030:	4630      	mov	r0, r6
 800c032:	f7ff ffbf 	bl	800bfb4 <sbrk_aligned>
 800c036:	1c43      	adds	r3, r0, #1
 800c038:	4604      	mov	r4, r0
 800c03a:	d158      	bne.n	800c0ee <_malloc_r+0xf6>
 800c03c:	f8d8 4000 	ldr.w	r4, [r8]
 800c040:	4627      	mov	r7, r4
 800c042:	2f00      	cmp	r7, #0
 800c044:	d143      	bne.n	800c0ce <_malloc_r+0xd6>
 800c046:	2c00      	cmp	r4, #0
 800c048:	d04b      	beq.n	800c0e2 <_malloc_r+0xea>
 800c04a:	6823      	ldr	r3, [r4, #0]
 800c04c:	4639      	mov	r1, r7
 800c04e:	4630      	mov	r0, r6
 800c050:	eb04 0903 	add.w	r9, r4, r3
 800c054:	f000 f8ba 	bl	800c1cc <_sbrk_r>
 800c058:	4581      	cmp	r9, r0
 800c05a:	d142      	bne.n	800c0e2 <_malloc_r+0xea>
 800c05c:	6821      	ldr	r1, [r4, #0]
 800c05e:	1a6d      	subs	r5, r5, r1
 800c060:	4629      	mov	r1, r5
 800c062:	4630      	mov	r0, r6
 800c064:	f7ff ffa6 	bl	800bfb4 <sbrk_aligned>
 800c068:	3001      	adds	r0, #1
 800c06a:	d03a      	beq.n	800c0e2 <_malloc_r+0xea>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	442b      	add	r3, r5
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	f8d8 3000 	ldr.w	r3, [r8]
 800c076:	685a      	ldr	r2, [r3, #4]
 800c078:	bb62      	cbnz	r2, 800c0d4 <_malloc_r+0xdc>
 800c07a:	f8c8 7000 	str.w	r7, [r8]
 800c07e:	e00f      	b.n	800c0a0 <_malloc_r+0xa8>
 800c080:	6822      	ldr	r2, [r4, #0]
 800c082:	1b52      	subs	r2, r2, r5
 800c084:	d420      	bmi.n	800c0c8 <_malloc_r+0xd0>
 800c086:	2a0b      	cmp	r2, #11
 800c088:	d917      	bls.n	800c0ba <_malloc_r+0xc2>
 800c08a:	1961      	adds	r1, r4, r5
 800c08c:	42a3      	cmp	r3, r4
 800c08e:	6025      	str	r5, [r4, #0]
 800c090:	bf18      	it	ne
 800c092:	6059      	strne	r1, [r3, #4]
 800c094:	6863      	ldr	r3, [r4, #4]
 800c096:	bf08      	it	eq
 800c098:	f8c8 1000 	streq.w	r1, [r8]
 800c09c:	5162      	str	r2, [r4, r5]
 800c09e:	604b      	str	r3, [r1, #4]
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f000 f82f 	bl	800c104 <__malloc_unlock>
 800c0a6:	f104 000b 	add.w	r0, r4, #11
 800c0aa:	1d23      	adds	r3, r4, #4
 800c0ac:	f020 0007 	bic.w	r0, r0, #7
 800c0b0:	1ac2      	subs	r2, r0, r3
 800c0b2:	bf1c      	itt	ne
 800c0b4:	1a1b      	subne	r3, r3, r0
 800c0b6:	50a3      	strne	r3, [r4, r2]
 800c0b8:	e7af      	b.n	800c01a <_malloc_r+0x22>
 800c0ba:	6862      	ldr	r2, [r4, #4]
 800c0bc:	42a3      	cmp	r3, r4
 800c0be:	bf0c      	ite	eq
 800c0c0:	f8c8 2000 	streq.w	r2, [r8]
 800c0c4:	605a      	strne	r2, [r3, #4]
 800c0c6:	e7eb      	b.n	800c0a0 <_malloc_r+0xa8>
 800c0c8:	4623      	mov	r3, r4
 800c0ca:	6864      	ldr	r4, [r4, #4]
 800c0cc:	e7ae      	b.n	800c02c <_malloc_r+0x34>
 800c0ce:	463c      	mov	r4, r7
 800c0d0:	687f      	ldr	r7, [r7, #4]
 800c0d2:	e7b6      	b.n	800c042 <_malloc_r+0x4a>
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	42a3      	cmp	r3, r4
 800c0da:	d1fb      	bne.n	800c0d4 <_malloc_r+0xdc>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	6053      	str	r3, [r2, #4]
 800c0e0:	e7de      	b.n	800c0a0 <_malloc_r+0xa8>
 800c0e2:	230c      	movs	r3, #12
 800c0e4:	6033      	str	r3, [r6, #0]
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	f000 f80c 	bl	800c104 <__malloc_unlock>
 800c0ec:	e794      	b.n	800c018 <_malloc_r+0x20>
 800c0ee:	6005      	str	r5, [r0, #0]
 800c0f0:	e7d6      	b.n	800c0a0 <_malloc_r+0xa8>
 800c0f2:	bf00      	nop
 800c0f4:	20005404 	.word	0x20005404

0800c0f8 <__malloc_lock>:
 800c0f8:	4801      	ldr	r0, [pc, #4]	@ (800c100 <__malloc_lock+0x8>)
 800c0fa:	f000 b8a1 	b.w	800c240 <__retarget_lock_acquire_recursive>
 800c0fe:	bf00      	nop
 800c100:	20005544 	.word	0x20005544

0800c104 <__malloc_unlock>:
 800c104:	4801      	ldr	r0, [pc, #4]	@ (800c10c <__malloc_unlock+0x8>)
 800c106:	f000 b89c 	b.w	800c242 <__retarget_lock_release_recursive>
 800c10a:	bf00      	nop
 800c10c:	20005544 	.word	0x20005544

0800c110 <memset>:
 800c110:	4402      	add	r2, r0
 800c112:	4603      	mov	r3, r0
 800c114:	4293      	cmp	r3, r2
 800c116:	d100      	bne.n	800c11a <memset+0xa>
 800c118:	4770      	bx	lr
 800c11a:	f803 1b01 	strb.w	r1, [r3], #1
 800c11e:	e7f9      	b.n	800c114 <memset+0x4>

0800c120 <_reclaim_reent>:
 800c120:	4b29      	ldr	r3, [pc, #164]	@ (800c1c8 <_reclaim_reent+0xa8>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4283      	cmp	r3, r0
 800c126:	b570      	push	{r4, r5, r6, lr}
 800c128:	4604      	mov	r4, r0
 800c12a:	d04b      	beq.n	800c1c4 <_reclaim_reent+0xa4>
 800c12c:	69c3      	ldr	r3, [r0, #28]
 800c12e:	b1ab      	cbz	r3, 800c15c <_reclaim_reent+0x3c>
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	b16b      	cbz	r3, 800c150 <_reclaim_reent+0x30>
 800c134:	2500      	movs	r5, #0
 800c136:	69e3      	ldr	r3, [r4, #28]
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	5959      	ldr	r1, [r3, r5]
 800c13c:	2900      	cmp	r1, #0
 800c13e:	d13b      	bne.n	800c1b8 <_reclaim_reent+0x98>
 800c140:	3504      	adds	r5, #4
 800c142:	2d80      	cmp	r5, #128	@ 0x80
 800c144:	d1f7      	bne.n	800c136 <_reclaim_reent+0x16>
 800c146:	69e3      	ldr	r3, [r4, #28]
 800c148:	4620      	mov	r0, r4
 800c14a:	68d9      	ldr	r1, [r3, #12]
 800c14c:	f000 f888 	bl	800c260 <_free_r>
 800c150:	69e3      	ldr	r3, [r4, #28]
 800c152:	6819      	ldr	r1, [r3, #0]
 800c154:	b111      	cbz	r1, 800c15c <_reclaim_reent+0x3c>
 800c156:	4620      	mov	r0, r4
 800c158:	f000 f882 	bl	800c260 <_free_r>
 800c15c:	6961      	ldr	r1, [r4, #20]
 800c15e:	b111      	cbz	r1, 800c166 <_reclaim_reent+0x46>
 800c160:	4620      	mov	r0, r4
 800c162:	f000 f87d 	bl	800c260 <_free_r>
 800c166:	69e1      	ldr	r1, [r4, #28]
 800c168:	b111      	cbz	r1, 800c170 <_reclaim_reent+0x50>
 800c16a:	4620      	mov	r0, r4
 800c16c:	f000 f878 	bl	800c260 <_free_r>
 800c170:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c172:	b111      	cbz	r1, 800c17a <_reclaim_reent+0x5a>
 800c174:	4620      	mov	r0, r4
 800c176:	f000 f873 	bl	800c260 <_free_r>
 800c17a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c17c:	b111      	cbz	r1, 800c184 <_reclaim_reent+0x64>
 800c17e:	4620      	mov	r0, r4
 800c180:	f000 f86e 	bl	800c260 <_free_r>
 800c184:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c186:	b111      	cbz	r1, 800c18e <_reclaim_reent+0x6e>
 800c188:	4620      	mov	r0, r4
 800c18a:	f000 f869 	bl	800c260 <_free_r>
 800c18e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c190:	b111      	cbz	r1, 800c198 <_reclaim_reent+0x78>
 800c192:	4620      	mov	r0, r4
 800c194:	f000 f864 	bl	800c260 <_free_r>
 800c198:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c19a:	b111      	cbz	r1, 800c1a2 <_reclaim_reent+0x82>
 800c19c:	4620      	mov	r0, r4
 800c19e:	f000 f85f 	bl	800c260 <_free_r>
 800c1a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c1a4:	b111      	cbz	r1, 800c1ac <_reclaim_reent+0x8c>
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f000 f85a 	bl	800c260 <_free_r>
 800c1ac:	6a23      	ldr	r3, [r4, #32]
 800c1ae:	b14b      	cbz	r3, 800c1c4 <_reclaim_reent+0xa4>
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1b6:	4718      	bx	r3
 800c1b8:	680e      	ldr	r6, [r1, #0]
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f000 f850 	bl	800c260 <_free_r>
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	e7bb      	b.n	800c13c <_reclaim_reent+0x1c>
 800c1c4:	bd70      	pop	{r4, r5, r6, pc}
 800c1c6:	bf00      	nop
 800c1c8:	20000030 	.word	0x20000030

0800c1cc <_sbrk_r>:
 800c1cc:	b538      	push	{r3, r4, r5, lr}
 800c1ce:	4d06      	ldr	r5, [pc, #24]	@ (800c1e8 <_sbrk_r+0x1c>)
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	4608      	mov	r0, r1
 800c1d6:	602b      	str	r3, [r5, #0]
 800c1d8:	f7f4 fe42 	bl	8000e60 <_sbrk>
 800c1dc:	1c43      	adds	r3, r0, #1
 800c1de:	d102      	bne.n	800c1e6 <_sbrk_r+0x1a>
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	b103      	cbz	r3, 800c1e6 <_sbrk_r+0x1a>
 800c1e4:	6023      	str	r3, [r4, #0]
 800c1e6:	bd38      	pop	{r3, r4, r5, pc}
 800c1e8:	20005540 	.word	0x20005540

0800c1ec <__errno>:
 800c1ec:	4b01      	ldr	r3, [pc, #4]	@ (800c1f4 <__errno+0x8>)
 800c1ee:	6818      	ldr	r0, [r3, #0]
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	20000030 	.word	0x20000030

0800c1f8 <__libc_init_array>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	4d0d      	ldr	r5, [pc, #52]	@ (800c230 <__libc_init_array+0x38>)
 800c1fc:	4c0d      	ldr	r4, [pc, #52]	@ (800c234 <__libc_init_array+0x3c>)
 800c1fe:	1b64      	subs	r4, r4, r5
 800c200:	10a4      	asrs	r4, r4, #2
 800c202:	2600      	movs	r6, #0
 800c204:	42a6      	cmp	r6, r4
 800c206:	d109      	bne.n	800c21c <__libc_init_array+0x24>
 800c208:	4d0b      	ldr	r5, [pc, #44]	@ (800c238 <__libc_init_array+0x40>)
 800c20a:	4c0c      	ldr	r4, [pc, #48]	@ (800c23c <__libc_init_array+0x44>)
 800c20c:	f000 f872 	bl	800c2f4 <_init>
 800c210:	1b64      	subs	r4, r4, r5
 800c212:	10a4      	asrs	r4, r4, #2
 800c214:	2600      	movs	r6, #0
 800c216:	42a6      	cmp	r6, r4
 800c218:	d105      	bne.n	800c226 <__libc_init_array+0x2e>
 800c21a:	bd70      	pop	{r4, r5, r6, pc}
 800c21c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c220:	4798      	blx	r3
 800c222:	3601      	adds	r6, #1
 800c224:	e7ee      	b.n	800c204 <__libc_init_array+0xc>
 800c226:	f855 3b04 	ldr.w	r3, [r5], #4
 800c22a:	4798      	blx	r3
 800c22c:	3601      	adds	r6, #1
 800c22e:	e7f2      	b.n	800c216 <__libc_init_array+0x1e>
 800c230:	0800c3ac 	.word	0x0800c3ac
 800c234:	0800c3ac 	.word	0x0800c3ac
 800c238:	0800c3ac 	.word	0x0800c3ac
 800c23c:	0800c3b0 	.word	0x0800c3b0

0800c240 <__retarget_lock_acquire_recursive>:
 800c240:	4770      	bx	lr

0800c242 <__retarget_lock_release_recursive>:
 800c242:	4770      	bx	lr

0800c244 <memcpy>:
 800c244:	440a      	add	r2, r1
 800c246:	4291      	cmp	r1, r2
 800c248:	f100 33ff 	add.w	r3, r0, #4294967295
 800c24c:	d100      	bne.n	800c250 <memcpy+0xc>
 800c24e:	4770      	bx	lr
 800c250:	b510      	push	{r4, lr}
 800c252:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c25a:	4291      	cmp	r1, r2
 800c25c:	d1f9      	bne.n	800c252 <memcpy+0xe>
 800c25e:	bd10      	pop	{r4, pc}

0800c260 <_free_r>:
 800c260:	b538      	push	{r3, r4, r5, lr}
 800c262:	4605      	mov	r5, r0
 800c264:	2900      	cmp	r1, #0
 800c266:	d041      	beq.n	800c2ec <_free_r+0x8c>
 800c268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c26c:	1f0c      	subs	r4, r1, #4
 800c26e:	2b00      	cmp	r3, #0
 800c270:	bfb8      	it	lt
 800c272:	18e4      	addlt	r4, r4, r3
 800c274:	f7ff ff40 	bl	800c0f8 <__malloc_lock>
 800c278:	4a1d      	ldr	r2, [pc, #116]	@ (800c2f0 <_free_r+0x90>)
 800c27a:	6813      	ldr	r3, [r2, #0]
 800c27c:	b933      	cbnz	r3, 800c28c <_free_r+0x2c>
 800c27e:	6063      	str	r3, [r4, #4]
 800c280:	6014      	str	r4, [r2, #0]
 800c282:	4628      	mov	r0, r5
 800c284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c288:	f7ff bf3c 	b.w	800c104 <__malloc_unlock>
 800c28c:	42a3      	cmp	r3, r4
 800c28e:	d908      	bls.n	800c2a2 <_free_r+0x42>
 800c290:	6820      	ldr	r0, [r4, #0]
 800c292:	1821      	adds	r1, r4, r0
 800c294:	428b      	cmp	r3, r1
 800c296:	bf01      	itttt	eq
 800c298:	6819      	ldreq	r1, [r3, #0]
 800c29a:	685b      	ldreq	r3, [r3, #4]
 800c29c:	1809      	addeq	r1, r1, r0
 800c29e:	6021      	streq	r1, [r4, #0]
 800c2a0:	e7ed      	b.n	800c27e <_free_r+0x1e>
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	b10b      	cbz	r3, 800c2ac <_free_r+0x4c>
 800c2a8:	42a3      	cmp	r3, r4
 800c2aa:	d9fa      	bls.n	800c2a2 <_free_r+0x42>
 800c2ac:	6811      	ldr	r1, [r2, #0]
 800c2ae:	1850      	adds	r0, r2, r1
 800c2b0:	42a0      	cmp	r0, r4
 800c2b2:	d10b      	bne.n	800c2cc <_free_r+0x6c>
 800c2b4:	6820      	ldr	r0, [r4, #0]
 800c2b6:	4401      	add	r1, r0
 800c2b8:	1850      	adds	r0, r2, r1
 800c2ba:	4283      	cmp	r3, r0
 800c2bc:	6011      	str	r1, [r2, #0]
 800c2be:	d1e0      	bne.n	800c282 <_free_r+0x22>
 800c2c0:	6818      	ldr	r0, [r3, #0]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	6053      	str	r3, [r2, #4]
 800c2c6:	4408      	add	r0, r1
 800c2c8:	6010      	str	r0, [r2, #0]
 800c2ca:	e7da      	b.n	800c282 <_free_r+0x22>
 800c2cc:	d902      	bls.n	800c2d4 <_free_r+0x74>
 800c2ce:	230c      	movs	r3, #12
 800c2d0:	602b      	str	r3, [r5, #0]
 800c2d2:	e7d6      	b.n	800c282 <_free_r+0x22>
 800c2d4:	6820      	ldr	r0, [r4, #0]
 800c2d6:	1821      	adds	r1, r4, r0
 800c2d8:	428b      	cmp	r3, r1
 800c2da:	bf04      	itt	eq
 800c2dc:	6819      	ldreq	r1, [r3, #0]
 800c2de:	685b      	ldreq	r3, [r3, #4]
 800c2e0:	6063      	str	r3, [r4, #4]
 800c2e2:	bf04      	itt	eq
 800c2e4:	1809      	addeq	r1, r1, r0
 800c2e6:	6021      	streq	r1, [r4, #0]
 800c2e8:	6054      	str	r4, [r2, #4]
 800c2ea:	e7ca      	b.n	800c282 <_free_r+0x22>
 800c2ec:	bd38      	pop	{r3, r4, r5, pc}
 800c2ee:	bf00      	nop
 800c2f0:	20005404 	.word	0x20005404

0800c2f4 <_init>:
 800c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f6:	bf00      	nop
 800c2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2fa:	bc08      	pop	{r3}
 800c2fc:	469e      	mov	lr, r3
 800c2fe:	4770      	bx	lr

0800c300 <_fini>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	bf00      	nop
 800c304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c306:	bc08      	pop	{r3}
 800c308:	469e      	mov	lr, r3
 800c30a:	4770      	bx	lr
